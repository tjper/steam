// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: fatdemo.proto

package csgo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EHitGroup int32

const (
	EHitGroup_EHG_Generic  EHitGroup = 0
	EHitGroup_EHG_Head     EHitGroup = 1
	EHitGroup_EHG_Chest    EHitGroup = 2
	EHitGroup_EHG_Stomach  EHitGroup = 3
	EHitGroup_EHG_LeftArm  EHitGroup = 4
	EHitGroup_EHG_RightArm EHitGroup = 5
	EHitGroup_EHG_LeftLeg  EHitGroup = 6
	EHitGroup_EHG_RightLeg EHitGroup = 7
	EHitGroup_EHG_Gear     EHitGroup = 8
	EHitGroup_EHG_Miss     EHitGroup = 9
)

// Enum value maps for EHitGroup.
var (
	EHitGroup_name = map[int32]string{
		0: "EHG_Generic",
		1: "EHG_Head",
		2: "EHG_Chest",
		3: "EHG_Stomach",
		4: "EHG_LeftArm",
		5: "EHG_RightArm",
		6: "EHG_LeftLeg",
		7: "EHG_RightLeg",
		8: "EHG_Gear",
		9: "EHG_Miss",
	}
	EHitGroup_value = map[string]int32{
		"EHG_Generic":  0,
		"EHG_Head":     1,
		"EHG_Chest":    2,
		"EHG_Stomach":  3,
		"EHG_LeftArm":  4,
		"EHG_RightArm": 5,
		"EHG_LeftLeg":  6,
		"EHG_RightLeg": 7,
		"EHG_Gear":     8,
		"EHG_Miss":     9,
	}
)

func (x EHitGroup) Enum() *EHitGroup {
	p := new(EHitGroup)
	*p = x
	return p
}

func (x EHitGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EHitGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_fatdemo_proto_enumTypes[0].Descriptor()
}

func (EHitGroup) Type() protoreflect.EnumType {
	return &file_fatdemo_proto_enumTypes[0]
}

func (x EHitGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EHitGroup) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EHitGroup(num)
	return nil
}

// Deprecated: Use EHitGroup.Descriptor instead.
func (EHitGroup) EnumDescriptor() ([]byte, []int) {
	return file_fatdemo_proto_rawDescGZIP(), []int{0}
}

type ETeam int32

const (
	ETeam_ET_Unknown   ETeam = 0
	ETeam_ET_Spectator ETeam = 1
	ETeam_ET_Terrorist ETeam = 2
	ETeam_ET_CT        ETeam = 3
)

// Enum value maps for ETeam.
var (
	ETeam_name = map[int32]string{
		0: "ET_Unknown",
		1: "ET_Spectator",
		2: "ET_Terrorist",
		3: "ET_CT",
	}
	ETeam_value = map[string]int32{
		"ET_Unknown":   0,
		"ET_Spectator": 1,
		"ET_Terrorist": 2,
		"ET_CT":        3,
	}
)

func (x ETeam) Enum() *ETeam {
	p := new(ETeam)
	*p = x
	return p
}

func (x ETeam) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETeam) Descriptor() protoreflect.EnumDescriptor {
	return file_fatdemo_proto_enumTypes[1].Descriptor()
}

func (ETeam) Type() protoreflect.EnumType {
	return &file_fatdemo_proto_enumTypes[1]
}

func (x ETeam) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ETeam) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ETeam(num)
	return nil
}

// Deprecated: Use ETeam.Descriptor instead.
func (ETeam) EnumDescriptor() ([]byte, []int) {
	return file_fatdemo_proto_rawDescGZIP(), []int{1}
}

type EWeaponType int32

const (
	EWeaponType_EWT_Knife         EWeaponType = 0
	EWeaponType_EWT_Pistol        EWeaponType = 1
	EWeaponType_EWT_SubMachineGun EWeaponType = 2
	EWeaponType_EWT_Rifle         EWeaponType = 3
	EWeaponType_EWT_Shotgun       EWeaponType = 4
	EWeaponType_EWT_SniperRifle   EWeaponType = 5
	EWeaponType_EWT_MachineGun    EWeaponType = 6
	EWeaponType_EWT_C4            EWeaponType = 7
	EWeaponType_EWT_Grenade       EWeaponType = 8
	EWeaponType_EWT_Equipment     EWeaponType = 9
	EWeaponType_EWT_StackableItem EWeaponType = 10
	EWeaponType_EWT_Unknown       EWeaponType = 11
)

// Enum value maps for EWeaponType.
var (
	EWeaponType_name = map[int32]string{
		0:  "EWT_Knife",
		1:  "EWT_Pistol",
		2:  "EWT_SubMachineGun",
		3:  "EWT_Rifle",
		4:  "EWT_Shotgun",
		5:  "EWT_SniperRifle",
		6:  "EWT_MachineGun",
		7:  "EWT_C4",
		8:  "EWT_Grenade",
		9:  "EWT_Equipment",
		10: "EWT_StackableItem",
		11: "EWT_Unknown",
	}
	EWeaponType_value = map[string]int32{
		"EWT_Knife":         0,
		"EWT_Pistol":        1,
		"EWT_SubMachineGun": 2,
		"EWT_Rifle":         3,
		"EWT_Shotgun":       4,
		"EWT_SniperRifle":   5,
		"EWT_MachineGun":    6,
		"EWT_C4":            7,
		"EWT_Grenade":       8,
		"EWT_Equipment":     9,
		"EWT_StackableItem": 10,
		"EWT_Unknown":       11,
	}
)

func (x EWeaponType) Enum() *EWeaponType {
	p := new(EWeaponType)
	*p = x
	return p
}

func (x EWeaponType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EWeaponType) Descriptor() protoreflect.EnumDescriptor {
	return file_fatdemo_proto_enumTypes[2].Descriptor()
}

func (EWeaponType) Type() protoreflect.EnumType {
	return &file_fatdemo_proto_enumTypes[2]
}

func (x EWeaponType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EWeaponType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EWeaponType(num)
	return nil
}

// Deprecated: Use EWeaponType.Descriptor instead.
func (EWeaponType) EnumDescriptor() ([]byte, []int) {
	return file_fatdemo_proto_rawDescGZIP(), []int{2}
}

type MLDict struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       *string  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	ValString *string  `protobuf:"bytes,2,opt,name=val_string,json=valString" json:"val_string,omitempty"`
	ValInt    *int32   `protobuf:"varint,3,opt,name=val_int,json=valInt" json:"val_int,omitempty"`
	ValFloat  *float32 `protobuf:"fixed32,4,opt,name=val_float,json=valFloat" json:"val_float,omitempty"`
}

func (x *MLDict) Reset() {
	*x = MLDict{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fatdemo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MLDict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MLDict) ProtoMessage() {}

func (x *MLDict) ProtoReflect() protoreflect.Message {
	mi := &file_fatdemo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MLDict.ProtoReflect.Descriptor instead.
func (*MLDict) Descriptor() ([]byte, []int) {
	return file_fatdemo_proto_rawDescGZIP(), []int{0}
}

func (x *MLDict) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *MLDict) GetValString() string {
	if x != nil && x.ValString != nil {
		return *x.ValString
	}
	return ""
}

func (x *MLDict) GetValInt() int32 {
	if x != nil && x.ValInt != nil {
		return *x.ValInt
	}
	return 0
}

func (x *MLDict) GetValFloat() float32 {
	if x != nil && x.ValFloat != nil {
		return *x.ValFloat
	}
	return 0
}

type MLEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventName *string   `protobuf:"bytes,1,opt,name=event_name,json=eventName" json:"event_name,omitempty"`
	Data      []*MLDict `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (x *MLEvent) Reset() {
	*x = MLEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fatdemo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MLEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MLEvent) ProtoMessage() {}

func (x *MLEvent) ProtoReflect() protoreflect.Message {
	mi := &file_fatdemo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MLEvent.ProtoReflect.Descriptor instead.
func (*MLEvent) Descriptor() ([]byte, []int) {
	return file_fatdemo_proto_rawDescGZIP(), []int{1}
}

func (x *MLEvent) GetEventName() string {
	if x != nil && x.EventName != nil {
		return *x.EventName
	}
	return ""
}

func (x *MLEvent) GetData() []*MLDict {
	if x != nil {
		return x.Data
	}
	return nil
}

type MLMatchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameMode *string `protobuf:"bytes,1,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	Phase    *string `protobuf:"bytes,2,opt,name=phase" json:"phase,omitempty"`
	Round    *int32  `protobuf:"varint,3,opt,name=round" json:"round,omitempty"`
	ScoreCt  *int32  `protobuf:"varint,4,opt,name=score_ct,json=scoreCt" json:"score_ct,omitempty"`
	ScoreT   *int32  `protobuf:"varint,5,opt,name=score_t,json=scoreT" json:"score_t,omitempty"`
}

func (x *MLMatchState) Reset() {
	*x = MLMatchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fatdemo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MLMatchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MLMatchState) ProtoMessage() {}

func (x *MLMatchState) ProtoReflect() protoreflect.Message {
	mi := &file_fatdemo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MLMatchState.ProtoReflect.Descriptor instead.
func (*MLMatchState) Descriptor() ([]byte, []int) {
	return file_fatdemo_proto_rawDescGZIP(), []int{2}
}

func (x *MLMatchState) GetGameMode() string {
	if x != nil && x.GameMode != nil {
		return *x.GameMode
	}
	return ""
}

func (x *MLMatchState) GetPhase() string {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return ""
}

func (x *MLMatchState) GetRound() int32 {
	if x != nil && x.Round != nil {
		return *x.Round
	}
	return 0
}

func (x *MLMatchState) GetScoreCt() int32 {
	if x != nil && x.ScoreCt != nil {
		return *x.ScoreCt
	}
	return 0
}

func (x *MLMatchState) GetScoreT() int32 {
	if x != nil && x.ScoreT != nil {
		return *x.ScoreT
	}
	return 0
}

type MLRoundState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phase     *string `protobuf:"bytes,1,opt,name=phase" json:"phase,omitempty"`
	WinTeam   *ETeam  `protobuf:"varint,2,opt,name=win_team,json=winTeam,enum=ETeam,def=0" json:"win_team,omitempty"`
	BombState *string `protobuf:"bytes,3,opt,name=bomb_state,json=bombState" json:"bomb_state,omitempty"`
}

// Default values for MLRoundState fields.
const (
	Default_MLRoundState_WinTeam = ETeam_ET_Unknown
)

func (x *MLRoundState) Reset() {
	*x = MLRoundState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fatdemo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MLRoundState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MLRoundState) ProtoMessage() {}

func (x *MLRoundState) ProtoReflect() protoreflect.Message {
	mi := &file_fatdemo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MLRoundState.ProtoReflect.Descriptor instead.
func (*MLRoundState) Descriptor() ([]byte, []int) {
	return file_fatdemo_proto_rawDescGZIP(), []int{3}
}

func (x *MLRoundState) GetPhase() string {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return ""
}

func (x *MLRoundState) GetWinTeam() ETeam {
	if x != nil && x.WinTeam != nil {
		return *x.WinTeam
	}
	return Default_MLRoundState_WinTeam
}

func (x *MLRoundState) GetBombState() string {
	if x != nil && x.BombState != nil {
		return *x.BombState
	}
	return ""
}

type MLWeaponState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       *int32       `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Name        *string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type        *EWeaponType `protobuf:"varint,3,opt,name=type,enum=EWeaponType,def=0" json:"type,omitempty"`
	AmmoClip    *int32       `protobuf:"varint,4,opt,name=ammo_clip,json=ammoClip" json:"ammo_clip,omitempty"`
	AmmoClipMax *int32       `protobuf:"varint,5,opt,name=ammo_clip_max,json=ammoClipMax" json:"ammo_clip_max,omitempty"`
	AmmoReserve *int32       `protobuf:"varint,6,opt,name=ammo_reserve,json=ammoReserve" json:"ammo_reserve,omitempty"`
	State       *string      `protobuf:"bytes,7,opt,name=state" json:"state,omitempty"`
	RecoilIndex *float32     `protobuf:"fixed32,8,opt,name=recoil_index,json=recoilIndex" json:"recoil_index,omitempty"`
}

// Default values for MLWeaponState fields.
const (
	Default_MLWeaponState_Type = EWeaponType_EWT_Knife
)

func (x *MLWeaponState) Reset() {
	*x = MLWeaponState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fatdemo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MLWeaponState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MLWeaponState) ProtoMessage() {}

func (x *MLWeaponState) ProtoReflect() protoreflect.Message {
	mi := &file_fatdemo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MLWeaponState.ProtoReflect.Descriptor instead.
func (*MLWeaponState) Descriptor() ([]byte, []int) {
	return file_fatdemo_proto_rawDescGZIP(), []int{4}
}

func (x *MLWeaponState) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *MLWeaponState) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MLWeaponState) GetType() EWeaponType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_MLWeaponState_Type
}

func (x *MLWeaponState) GetAmmoClip() int32 {
	if x != nil && x.AmmoClip != nil {
		return *x.AmmoClip
	}
	return 0
}

func (x *MLWeaponState) GetAmmoClipMax() int32 {
	if x != nil && x.AmmoClipMax != nil {
		return *x.AmmoClipMax
	}
	return 0
}

func (x *MLWeaponState) GetAmmoReserve() int32 {
	if x != nil && x.AmmoReserve != nil {
		return *x.AmmoReserve
	}
	return 0
}

func (x *MLWeaponState) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *MLWeaponState) GetRecoilIndex() float32 {
	if x != nil && x.RecoilIndex != nil {
		return *x.RecoilIndex
	}
	return 0
}

type MLPlayerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   *int32           `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerSlot  *int32           `protobuf:"varint,2,opt,name=player_slot,json=playerSlot,def=-1" json:"player_slot,omitempty"`
	Entindex    *int32           `protobuf:"varint,3,opt,name=entindex" json:"entindex,omitempty"`
	Name        *string          `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Clan        *string          `protobuf:"bytes,5,opt,name=clan" json:"clan,omitempty"`
	Team        *ETeam           `protobuf:"varint,6,opt,name=team,enum=ETeam,def=0" json:"team,omitempty"`
	Abspos      *CMsgVector      `protobuf:"bytes,7,opt,name=abspos" json:"abspos,omitempty"`
	Eyeangle    *CMsgQAngle      `protobuf:"bytes,8,opt,name=eyeangle" json:"eyeangle,omitempty"`
	EyeangleFwd *CMsgVector      `protobuf:"bytes,9,opt,name=eyeangle_fwd,json=eyeangleFwd" json:"eyeangle_fwd,omitempty"`
	Health      *int32           `protobuf:"varint,10,opt,name=health" json:"health,omitempty"`
	Armor       *int32           `protobuf:"varint,11,opt,name=armor" json:"armor,omitempty"`
	Flashed     *float32         `protobuf:"fixed32,12,opt,name=flashed" json:"flashed,omitempty"`
	Smoked      *float32         `protobuf:"fixed32,13,opt,name=smoked" json:"smoked,omitempty"`
	Money       *int32           `protobuf:"varint,14,opt,name=money" json:"money,omitempty"`
	RoundKills  *int32           `protobuf:"varint,15,opt,name=round_kills,json=roundKills" json:"round_kills,omitempty"`
	RoundKillhs *int32           `protobuf:"varint,16,opt,name=round_killhs,json=roundKillhs" json:"round_killhs,omitempty"`
	Burning     *float32         `protobuf:"fixed32,17,opt,name=burning" json:"burning,omitempty"`
	Helmet      *bool            `protobuf:"varint,18,opt,name=helmet" json:"helmet,omitempty"`
	DefuseKit   *bool            `protobuf:"varint,19,opt,name=defuse_kit,json=defuseKit" json:"defuse_kit,omitempty"`
	Weapons     []*MLWeaponState `protobuf:"bytes,20,rep,name=weapons" json:"weapons,omitempty"`
}

// Default values for MLPlayerState fields.
const (
	Default_MLPlayerState_PlayerSlot = int32(-1)
	Default_MLPlayerState_Team       = ETeam_ET_Unknown
)

func (x *MLPlayerState) Reset() {
	*x = MLPlayerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fatdemo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MLPlayerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MLPlayerState) ProtoMessage() {}

func (x *MLPlayerState) ProtoReflect() protoreflect.Message {
	mi := &file_fatdemo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MLPlayerState.ProtoReflect.Descriptor instead.
func (*MLPlayerState) Descriptor() ([]byte, []int) {
	return file_fatdemo_proto_rawDescGZIP(), []int{5}
}

func (x *MLPlayerState) GetAccountId() int32 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *MLPlayerState) GetPlayerSlot() int32 {
	if x != nil && x.PlayerSlot != nil {
		return *x.PlayerSlot
	}
	return Default_MLPlayerState_PlayerSlot
}

func (x *MLPlayerState) GetEntindex() int32 {
	if x != nil && x.Entindex != nil {
		return *x.Entindex
	}
	return 0
}

func (x *MLPlayerState) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MLPlayerState) GetClan() string {
	if x != nil && x.Clan != nil {
		return *x.Clan
	}
	return ""
}

func (x *MLPlayerState) GetTeam() ETeam {
	if x != nil && x.Team != nil {
		return *x.Team
	}
	return Default_MLPlayerState_Team
}

func (x *MLPlayerState) GetAbspos() *CMsgVector {
	if x != nil {
		return x.Abspos
	}
	return nil
}

func (x *MLPlayerState) GetEyeangle() *CMsgQAngle {
	if x != nil {
		return x.Eyeangle
	}
	return nil
}

func (x *MLPlayerState) GetEyeangleFwd() *CMsgVector {
	if x != nil {
		return x.EyeangleFwd
	}
	return nil
}

func (x *MLPlayerState) GetHealth() int32 {
	if x != nil && x.Health != nil {
		return *x.Health
	}
	return 0
}

func (x *MLPlayerState) GetArmor() int32 {
	if x != nil && x.Armor != nil {
		return *x.Armor
	}
	return 0
}

func (x *MLPlayerState) GetFlashed() float32 {
	if x != nil && x.Flashed != nil {
		return *x.Flashed
	}
	return 0
}

func (x *MLPlayerState) GetSmoked() float32 {
	if x != nil && x.Smoked != nil {
		return *x.Smoked
	}
	return 0
}

func (x *MLPlayerState) GetMoney() int32 {
	if x != nil && x.Money != nil {
		return *x.Money
	}
	return 0
}

func (x *MLPlayerState) GetRoundKills() int32 {
	if x != nil && x.RoundKills != nil {
		return *x.RoundKills
	}
	return 0
}

func (x *MLPlayerState) GetRoundKillhs() int32 {
	if x != nil && x.RoundKillhs != nil {
		return *x.RoundKillhs
	}
	return 0
}

func (x *MLPlayerState) GetBurning() float32 {
	if x != nil && x.Burning != nil {
		return *x.Burning
	}
	return 0
}

func (x *MLPlayerState) GetHelmet() bool {
	if x != nil && x.Helmet != nil {
		return *x.Helmet
	}
	return false
}

func (x *MLPlayerState) GetDefuseKit() bool {
	if x != nil && x.DefuseKit != nil {
		return *x.DefuseKit
	}
	return false
}

func (x *MLPlayerState) GetWeapons() []*MLWeaponState {
	if x != nil {
		return x.Weapons
	}
	return nil
}

type MLGameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match   *MLMatchState    `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	Round   *MLRoundState    `protobuf:"bytes,2,opt,name=round" json:"round,omitempty"`
	Players []*MLPlayerState `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`
}

func (x *MLGameState) Reset() {
	*x = MLGameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fatdemo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MLGameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MLGameState) ProtoMessage() {}

func (x *MLGameState) ProtoReflect() protoreflect.Message {
	mi := &file_fatdemo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MLGameState.ProtoReflect.Descriptor instead.
func (*MLGameState) Descriptor() ([]byte, []int) {
	return file_fatdemo_proto_rawDescGZIP(), []int{6}
}

func (x *MLGameState) GetMatch() *MLMatchState {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *MLGameState) GetRound() *MLRoundState {
	if x != nil {
		return x.Round
	}
	return nil
}

func (x *MLGameState) GetPlayers() []*MLPlayerState {
	if x != nil {
		return x.Players
	}
	return nil
}

type MLDemoHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapName       *string `protobuf:"bytes,1,opt,name=map_name,json=mapName" json:"map_name,omitempty"`
	TickRate      *int32  `protobuf:"varint,2,opt,name=tick_rate,json=tickRate" json:"tick_rate,omitempty"`
	Version       *uint32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	SteamUniverse *uint32 `protobuf:"varint,4,opt,name=steam_universe,json=steamUniverse" json:"steam_universe,omitempty"`
}

func (x *MLDemoHeader) Reset() {
	*x = MLDemoHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fatdemo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MLDemoHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MLDemoHeader) ProtoMessage() {}

func (x *MLDemoHeader) ProtoReflect() protoreflect.Message {
	mi := &file_fatdemo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MLDemoHeader.ProtoReflect.Descriptor instead.
func (*MLDemoHeader) Descriptor() ([]byte, []int) {
	return file_fatdemo_proto_rawDescGZIP(), []int{7}
}

func (x *MLDemoHeader) GetMapName() string {
	if x != nil && x.MapName != nil {
		return *x.MapName
	}
	return ""
}

func (x *MLDemoHeader) GetTickRate() int32 {
	if x != nil && x.TickRate != nil {
		return *x.TickRate
	}
	return 0
}

func (x *MLDemoHeader) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *MLDemoHeader) GetSteamUniverse() uint32 {
	if x != nil && x.SteamUniverse != nil {
		return *x.SteamUniverse
	}
	return 0
}

type MLTick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TickCount *int32       `protobuf:"varint,1,opt,name=tick_count,json=tickCount" json:"tick_count,omitempty"`
	State     *MLGameState `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	Events    []*MLEvent   `protobuf:"bytes,3,rep,name=events" json:"events,omitempty"`
}

func (x *MLTick) Reset() {
	*x = MLTick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fatdemo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MLTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MLTick) ProtoMessage() {}

func (x *MLTick) ProtoReflect() protoreflect.Message {
	mi := &file_fatdemo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MLTick.ProtoReflect.Descriptor instead.
func (*MLTick) Descriptor() ([]byte, []int) {
	return file_fatdemo_proto_rawDescGZIP(), []int{8}
}

func (x *MLTick) GetTickCount() int32 {
	if x != nil && x.TickCount != nil {
		return *x.TickCount
	}
	return 0
}

func (x *MLTick) GetState() *MLGameState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *MLTick) GetEvents() []*MLEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type VacNetShot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidPlayer        *uint64   `protobuf:"fixed64,1,opt,name=steamid_player,json=steamidPlayer" json:"steamid_player,omitempty"`
	RoundNumber          *int32    `protobuf:"varint,2,opt,name=round_number,json=roundNumber" json:"round_number,omitempty"`
	HitType              *int32    `protobuf:"varint,3,opt,name=hit_type,json=hitType" json:"hit_type,omitempty"`
	WeaponType           *int32    `protobuf:"varint,4,opt,name=weapon_type,json=weaponType" json:"weapon_type,omitempty"`
	DistanceToHurtTarget *float32  `protobuf:"fixed32,5,opt,name=distance_to_hurt_target,json=distanceToHurtTarget" json:"distance_to_hurt_target,omitempty"`
	DeltaYawWindow       []float32 `protobuf:"fixed32,6,rep,name=delta_yaw_window,json=deltaYawWindow" json:"delta_yaw_window,omitempty"`
	DeltaPitchWindow     []float32 `protobuf:"fixed32,7,rep,name=delta_pitch_window,json=deltaPitchWindow" json:"delta_pitch_window,omitempty"`
}

func (x *VacNetShot) Reset() {
	*x = VacNetShot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fatdemo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VacNetShot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VacNetShot) ProtoMessage() {}

func (x *VacNetShot) ProtoReflect() protoreflect.Message {
	mi := &file_fatdemo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VacNetShot.ProtoReflect.Descriptor instead.
func (*VacNetShot) Descriptor() ([]byte, []int) {
	return file_fatdemo_proto_rawDescGZIP(), []int{9}
}

func (x *VacNetShot) GetSteamidPlayer() uint64 {
	if x != nil && x.SteamidPlayer != nil {
		return *x.SteamidPlayer
	}
	return 0
}

func (x *VacNetShot) GetRoundNumber() int32 {
	if x != nil && x.RoundNumber != nil {
		return *x.RoundNumber
	}
	return 0
}

func (x *VacNetShot) GetHitType() int32 {
	if x != nil && x.HitType != nil {
		return *x.HitType
	}
	return 0
}

func (x *VacNetShot) GetWeaponType() int32 {
	if x != nil && x.WeaponType != nil {
		return *x.WeaponType
	}
	return 0
}

func (x *VacNetShot) GetDistanceToHurtTarget() float32 {
	if x != nil && x.DistanceToHurtTarget != nil {
		return *x.DistanceToHurtTarget
	}
	return 0
}

func (x *VacNetShot) GetDeltaYawWindow() []float32 {
	if x != nil {
		return x.DeltaYawWindow
	}
	return nil
}

func (x *VacNetShot) GetDeltaPitchWindow() []float32 {
	if x != nil {
		return x.DeltaPitchWindow
	}
	return nil
}

var File_fatdemo_proto protoreflect.FileDescriptor

var file_fatdemo_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x66, 0x61, 0x74, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x06, 0x4d, 0x4c, 0x44, 0x69, 0x63,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x76, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x22, 0x45, 0x0a, 0x07, 0x4d, 0x4c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x4d, 0x4c, 0x44, 0x69, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x8b, 0x01, 0x0a, 0x0c, 0x4d, 0x4c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x43, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x22, 0x72, 0x0a,
	0x0c, 0x4d, 0x4c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x06, 0x2e, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x3a, 0x0a, 0x45,
	0x54, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6d, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x6d, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x83, 0x02, 0x0a, 0x0d, 0x4d, 0x4c, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x45, 0x57,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x09, 0x45, 0x57, 0x54, 0x5f, 0x4b,
	0x6e, 0x69, 0x66, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6d,
	0x6d, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61,
	0x6d, 0x6d, 0x6f, 0x43, 0x6c, 0x69, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x6d, 0x6d, 0x6f, 0x5f,
	0x63, 0x6c, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x61, 0x6d, 0x6d, 0x6f, 0x43, 0x6c, 0x69, 0x70, 0x4d, 0x61, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x6d, 0x6d, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x61, 0x6d, 0x6d, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x69, 0x6c, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f,
	0x69, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xf2, 0x04, 0x0a, 0x0d, 0x4d, 0x4c, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d,
	0x31, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6c, 0x61,
	0x6e, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x06, 0x2e, 0x45, 0x54, 0x65, 0x61, 0x6d, 0x3a, 0x0a, 0x45, 0x54, 0x5f, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x06, 0x61, 0x62, 0x73,
	0x70, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x61, 0x62, 0x73, 0x70, 0x6f, 0x73, 0x12, 0x27,
	0x0a, 0x08, 0x65, 0x79, 0x65, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x51, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x08, 0x65,
	0x79, 0x65, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x0c, 0x65, 0x79, 0x65, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x66, 0x77, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x65, 0x79, 0x65, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x46, 0x77, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x61, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x68, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x68,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x62, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x6c, 0x6d, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x65, 0x6c,
	0x6d, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x6b, 0x69,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x66, 0x75, 0x73, 0x65, 0x4b,
	0x69, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x4c, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x07, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x22, 0x81, 0x01, 0x0a,
	0x0b, 0x4d, 0x4c, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x05,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x4c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x23, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x4d, 0x4c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x4c, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x22, 0x87, 0x01, 0x0a, 0x0c, 0x4d, 0x4c, 0x44, 0x65, 0x6d, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x69, 0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x74, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x75, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0x6d, 0x0a, 0x06, 0x4d, 0x4c,
	0x54, 0x69, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x4c, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x4c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa1, 0x02, 0x0a, 0x0a, 0x56, 0x61,
	0x63, 0x4e, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35,
	0x0a, 0x17, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x75,
	0x72, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x14, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x48, 0x75, 0x72, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x79,
	0x61, 0x77, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x0e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x59, 0x61, 0x77, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x03, 0x28, 0x02, 0x52, 0x10, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x50, 0x69, 0x74, 0x63, 0x68, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2a, 0xac, 0x01,
	0x0a, 0x09, 0x45, 0x48, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0f, 0x0a, 0x0b, 0x45,
	0x48, 0x47, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x48, 0x47, 0x5f, 0x48, 0x65, 0x61, 0x64, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x48,
	0x47, 0x5f, 0x43, 0x68, 0x65, 0x73, 0x74, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x48, 0x47,
	0x5f, 0x53, 0x74, 0x6f, 0x6d, 0x61, 0x63, 0x68, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x48,
	0x47, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x41, 0x72, 0x6d, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x45,
	0x48, 0x47, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x6d, 0x10, 0x05, 0x12, 0x0f, 0x0a,
	0x0b, 0x45, 0x48, 0x47, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x65, 0x67, 0x10, 0x06, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x48, 0x47, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x65, 0x67, 0x10, 0x07,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x48, 0x47, 0x5f, 0x47, 0x65, 0x61, 0x72, 0x10, 0x08, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x48, 0x47, 0x5f, 0x4d, 0x69, 0x73, 0x73, 0x10, 0x09, 0x2a, 0x46, 0x0a, 0x05,
	0x45, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x54, 0x5f, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x54, 0x5f, 0x53, 0x70, 0x65, 0x63,
	0x74, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x54, 0x5f, 0x54, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x69, 0x73, 0x74, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x54, 0x5f,
	0x43, 0x54, 0x10, 0x03, 0x2a, 0xe4, 0x01, 0x0a, 0x0b, 0x45, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x57, 0x54, 0x5f, 0x4b, 0x6e, 0x69, 0x66,
	0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x57, 0x54, 0x5f, 0x50, 0x69, 0x73, 0x74, 0x6f,
	0x6c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x57, 0x54, 0x5f, 0x53, 0x75, 0x62, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x47, 0x75, 0x6e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x57,
	0x54, 0x5f, 0x52, 0x69, 0x66, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x57, 0x54,
	0x5f, 0x53, 0x68, 0x6f, 0x74, 0x67, 0x75, 0x6e, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x57,
	0x54, 0x5f, 0x53, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x52, 0x69, 0x66, 0x6c, 0x65, 0x10, 0x05, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x57, 0x54, 0x5f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x47, 0x75,
	0x6e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x57, 0x54, 0x5f, 0x43, 0x34, 0x10, 0x07, 0x12,
	0x0f, 0x0a, 0x0b, 0x45, 0x57, 0x54, 0x5f, 0x47, 0x72, 0x65, 0x6e, 0x61, 0x64, 0x65, 0x10, 0x08,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x57, 0x54, 0x5f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x57, 0x54, 0x5f, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x57,
	0x54, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x0b, 0x42, 0x24, 0x42, 0x0c, 0x46,
	0x61, 0x74, 0x64, 0x65, 0x6d, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x12, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x73, 0x67,
	0x6f,
}

var (
	file_fatdemo_proto_rawDescOnce sync.Once
	file_fatdemo_proto_rawDescData = file_fatdemo_proto_rawDesc
)

func file_fatdemo_proto_rawDescGZIP() []byte {
	file_fatdemo_proto_rawDescOnce.Do(func() {
		file_fatdemo_proto_rawDescData = protoimpl.X.CompressGZIP(file_fatdemo_proto_rawDescData)
	})
	return file_fatdemo_proto_rawDescData
}

var file_fatdemo_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_fatdemo_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_fatdemo_proto_goTypes = []interface{}{
	(EHitGroup)(0),        // 0: EHitGroup
	(ETeam)(0),            // 1: ETeam
	(EWeaponType)(0),      // 2: EWeaponType
	(*MLDict)(nil),        // 3: MLDict
	(*MLEvent)(nil),       // 4: MLEvent
	(*MLMatchState)(nil),  // 5: MLMatchState
	(*MLRoundState)(nil),  // 6: MLRoundState
	(*MLWeaponState)(nil), // 7: MLWeaponState
	(*MLPlayerState)(nil), // 8: MLPlayerState
	(*MLGameState)(nil),   // 9: MLGameState
	(*MLDemoHeader)(nil),  // 10: MLDemoHeader
	(*MLTick)(nil),        // 11: MLTick
	(*VacNetShot)(nil),    // 12: VacNetShot
	(*CMsgVector)(nil),    // 13: CMsgVector
	(*CMsgQAngle)(nil),    // 14: CMsgQAngle
}
var file_fatdemo_proto_depIdxs = []int32{
	3,  // 0: MLEvent.data:type_name -> MLDict
	1,  // 1: MLRoundState.win_team:type_name -> ETeam
	2,  // 2: MLWeaponState.type:type_name -> EWeaponType
	1,  // 3: MLPlayerState.team:type_name -> ETeam
	13, // 4: MLPlayerState.abspos:type_name -> CMsgVector
	14, // 5: MLPlayerState.eyeangle:type_name -> CMsgQAngle
	13, // 6: MLPlayerState.eyeangle_fwd:type_name -> CMsgVector
	7,  // 7: MLPlayerState.weapons:type_name -> MLWeaponState
	5,  // 8: MLGameState.match:type_name -> MLMatchState
	6,  // 9: MLGameState.round:type_name -> MLRoundState
	8,  // 10: MLGameState.players:type_name -> MLPlayerState
	9,  // 11: MLTick.state:type_name -> MLGameState
	4,  // 12: MLTick.events:type_name -> MLEvent
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_fatdemo_proto_init() }
func file_fatdemo_proto_init() {
	if File_fatdemo_proto != nil {
		return
	}
	file_networkbasetypes_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fatdemo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MLDict); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fatdemo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MLEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fatdemo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MLMatchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fatdemo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MLRoundState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fatdemo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MLWeaponState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fatdemo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MLPlayerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fatdemo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MLGameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fatdemo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MLDemoHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fatdemo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MLTick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fatdemo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VacNetShot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fatdemo_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fatdemo_proto_goTypes,
		DependencyIndexes: file_fatdemo_proto_depIdxs,
		EnumInfos:         file_fatdemo_proto_enumTypes,
		MessageInfos:      file_fatdemo_proto_msgTypes,
	}.Build()
	File_fatdemo_proto = out.File
	file_fatdemo_proto_rawDesc = nil
	file_fatdemo_proto_goTypes = nil
	file_fatdemo_proto_depIdxs = nil
}
