// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: steammessages_remoteclient_service_messages.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CRemoteClient_CreateSession_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CRemoteClient_CreateSession_Request) Reset() {
	*x = CRemoteClient_CreateSession_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_CreateSession_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_CreateSession_Request) ProtoMessage() {}

func (x *CRemoteClient_CreateSession_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_CreateSession_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_CreateSession_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{0}
}

type CRemoteClient_CreateSession_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Euniverse *int32  `protobuf:"varint,2,opt,name=euniverse" json:"euniverse,omitempty"`
}

func (x *CRemoteClient_CreateSession_Response) Reset() {
	*x = CRemoteClient_CreateSession_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_CreateSession_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_CreateSession_Response) ProtoMessage() {}

func (x *CRemoteClient_CreateSession_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_CreateSession_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_CreateSession_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{1}
}

func (x *CRemoteClient_CreateSession_Response) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_CreateSession_Response) GetEuniverse() int32 {
	if x != nil && x.Euniverse != nil {
		return *x.Euniverse
	}
	return 0
}

type CRemoteClient_DeleteSession_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (x *CRemoteClient_DeleteSession_Notification) Reset() {
	*x = CRemoteClient_DeleteSession_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_DeleteSession_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_DeleteSession_Notification) ProtoMessage() {}

func (x *CRemoteClient_DeleteSession_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_DeleteSession_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_DeleteSession_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{2}
}

func (x *CRemoteClient_DeleteSession_Notification) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

type CRemoteClient_StartPairing_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (x *CRemoteClient_StartPairing_Request) Reset() {
	*x = CRemoteClient_StartPairing_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_StartPairing_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_StartPairing_Request) ProtoMessage() {}

func (x *CRemoteClient_StartPairing_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_StartPairing_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_StartPairing_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{3}
}

func (x *CRemoteClient_StartPairing_Request) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

type CRemoteClient_StartPairing_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin *uint32 `protobuf:"varint,1,opt,name=pin" json:"pin,omitempty"`
}

func (x *CRemoteClient_StartPairing_Response) Reset() {
	*x = CRemoteClient_StartPairing_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_StartPairing_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_StartPairing_Response) ProtoMessage() {}

func (x *CRemoteClient_StartPairing_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_StartPairing_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_StartPairing_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{4}
}

func (x *CRemoteClient_StartPairing_Response) GetPin() uint32 {
	if x != nil && x.Pin != nil {
		return *x.Pin
	}
	return 0
}

type CRemoteClient_SetPairingInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	DeviceId  *uint64 `protobuf:"fixed64,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Request   []byte  `protobuf:"bytes,3,opt,name=request" json:"request,omitempty"`
}

func (x *CRemoteClient_SetPairingInfo_Request) Reset() {
	*x = CRemoteClient_SetPairingInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_SetPairingInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_SetPairingInfo_Request) ProtoMessage() {}

func (x *CRemoteClient_SetPairingInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_SetPairingInfo_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_SetPairingInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{5}
}

func (x *CRemoteClient_SetPairingInfo_Request) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_SetPairingInfo_Request) GetDeviceId() uint64 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

func (x *CRemoteClient_SetPairingInfo_Request) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type CRemoteClient_SetPairingInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CRemoteClient_SetPairingInfo_Response) Reset() {
	*x = CRemoteClient_SetPairingInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_SetPairingInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_SetPairingInfo_Response) ProtoMessage() {}

func (x *CRemoteClient_SetPairingInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_SetPairingInfo_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_SetPairingInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{6}
}

type CRemoteClient_GetPairingInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin *uint32 `protobuf:"varint,1,opt,name=pin" json:"pin,omitempty"`
}

func (x *CRemoteClient_GetPairingInfo_Request) Reset() {
	*x = CRemoteClient_GetPairingInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_GetPairingInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_GetPairingInfo_Request) ProtoMessage() {}

func (x *CRemoteClient_GetPairingInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_GetPairingInfo_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_GetPairingInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{7}
}

func (x *CRemoteClient_GetPairingInfo_Request) GetPin() uint32 {
	if x != nil && x.Pin != nil {
		return *x.Pin
	}
	return 0
}

type CRemoteClient_GetPairingInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	DeviceId  *uint64 `protobuf:"fixed64,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Request   []byte  `protobuf:"bytes,3,opt,name=request" json:"request,omitempty"`
}

func (x *CRemoteClient_GetPairingInfo_Response) Reset() {
	*x = CRemoteClient_GetPairingInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_GetPairingInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_GetPairingInfo_Response) ProtoMessage() {}

func (x *CRemoteClient_GetPairingInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_GetPairingInfo_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_GetPairingInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{8}
}

func (x *CRemoteClient_GetPairingInfo_Response) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_GetPairingInfo_Response) GetDeviceId() uint64 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

func (x *CRemoteClient_GetPairingInfo_Response) GetRequest() []byte {
	if x != nil {
		return x.Request
	}
	return nil
}

type CRemoteClient_CancelPairing_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (x *CRemoteClient_CancelPairing_Request) Reset() {
	*x = CRemoteClient_CancelPairing_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_CancelPairing_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_CancelPairing_Request) ProtoMessage() {}

func (x *CRemoteClient_CancelPairing_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_CancelPairing_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_CancelPairing_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{9}
}

func (x *CRemoteClient_CancelPairing_Request) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

type CRemoteClient_CancelPairing_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CRemoteClient_CancelPairing_Response) Reset() {
	*x = CRemoteClient_CancelPairing_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_CancelPairing_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_CancelPairing_Response) ProtoMessage() {}

func (x *CRemoteClient_CancelPairing_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_CancelPairing_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_CancelPairing_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{10}
}

type CRemoteClient_RegisterStatusUpdate_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Steamid   *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	DeviceId  *uint64 `protobuf:"fixed64,3,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

func (x *CRemoteClient_RegisterStatusUpdate_Notification) Reset() {
	*x = CRemoteClient_RegisterStatusUpdate_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_RegisterStatusUpdate_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_RegisterStatusUpdate_Notification) ProtoMessage() {}

func (x *CRemoteClient_RegisterStatusUpdate_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_RegisterStatusUpdate_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_RegisterStatusUpdate_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{11}
}

func (x *CRemoteClient_RegisterStatusUpdate_Notification) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_RegisterStatusUpdate_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CRemoteClient_RegisterStatusUpdate_Notification) GetDeviceId() uint64 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

type CRemoteClient_UnregisterStatusUpdate_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Steamid   *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CRemoteClient_UnregisterStatusUpdate_Notification) Reset() {
	*x = CRemoteClient_UnregisterStatusUpdate_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_UnregisterStatusUpdate_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_UnregisterStatusUpdate_Notification) ProtoMessage() {}

func (x *CRemoteClient_UnregisterStatusUpdate_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_UnregisterStatusUpdate_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_UnregisterStatusUpdate_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{12}
}

func (x *CRemoteClient_UnregisterStatusUpdate_Notification) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_UnregisterStatusUpdate_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CRemoteClient_Online_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid        *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	RemoteClientId *uint64 `protobuf:"fixed64,2,opt,name=remote_client_id,json=remoteClientId" json:"remote_client_id,omitempty"`
}

func (x *CRemoteClient_Online_Notification) Reset() {
	*x = CRemoteClient_Online_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_Online_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_Online_Notification) ProtoMessage() {}

func (x *CRemoteClient_Online_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_Online_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_Online_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{13}
}

func (x *CRemoteClient_Online_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CRemoteClient_Online_Notification) GetRemoteClientId() uint64 {
	if x != nil && x.RemoteClientId != nil {
		return *x.RemoteClientId
	}
	return 0
}

type CRemoteClient_RemotePacket_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Steamid   *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	Payload   []byte  `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
}

func (x *CRemoteClient_RemotePacket_Notification) Reset() {
	*x = CRemoteClient_RemotePacket_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_RemotePacket_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_RemotePacket_Notification) ProtoMessage() {}

func (x *CRemoteClient_RemotePacket_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_RemotePacket_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_RemotePacket_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{14}
}

func (x *CRemoteClient_RemotePacket_Notification) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_RemotePacket_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CRemoteClient_RemotePacket_Notification) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CRemoteClient_ReplyPacket_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	Payload   []byte  `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
}

func (x *CRemoteClient_ReplyPacket_Notification) Reset() {
	*x = CRemoteClient_ReplyPacket_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_ReplyPacket_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_ReplyPacket_Notification) ProtoMessage() {}

func (x *CRemoteClient_ReplyPacket_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_ReplyPacket_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_ReplyPacket_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{15}
}

func (x *CRemoteClient_ReplyPacket_Notification) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *CRemoteClient_ReplyPacket_Notification) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CRemoteClient_GetReplies_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId *uint64 `protobuf:"fixed64,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (x *CRemoteClient_GetReplies_Request) Reset() {
	*x = CRemoteClient_GetReplies_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_GetReplies_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_GetReplies_Request) ProtoMessage() {}

func (x *CRemoteClient_GetReplies_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_GetReplies_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_GetReplies_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{16}
}

func (x *CRemoteClient_GetReplies_Request) GetSessionId() uint64 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

type CRemoteClient_GetReplies_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload [][]byte `protobuf:"bytes,1,rep,name=payload" json:"payload,omitempty"`
}

func (x *CRemoteClient_GetReplies_Response) Reset() {
	*x = CRemoteClient_GetReplies_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_GetReplies_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_GetReplies_Response) ProtoMessage() {}

func (x *CRemoteClient_GetReplies_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_GetReplies_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_GetReplies_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{17}
}

func (x *CRemoteClient_GetReplies_Response) GetPayload() [][]byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CRemoteClient_AllocateRelayServer_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cellid      *uint32 `protobuf:"varint,1,opt,name=cellid" json:"cellid,omitempty"`
	Credentials *string `protobuf:"bytes,2,opt,name=credentials" json:"credentials,omitempty"`
}

func (x *CRemoteClient_AllocateRelayServer_Request) Reset() {
	*x = CRemoteClient_AllocateRelayServer_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_AllocateRelayServer_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AllocateRelayServer_Request) ProtoMessage() {}

func (x *CRemoteClient_AllocateRelayServer_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AllocateRelayServer_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AllocateRelayServer_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{18}
}

func (x *CRemoteClient_AllocateRelayServer_Request) GetCellid() uint32 {
	if x != nil && x.Cellid != nil {
		return *x.Cellid
	}
	return 0
}

func (x *CRemoteClient_AllocateRelayServer_Request) GetCredentials() string {
	if x != nil && x.Credentials != nil {
		return *x.Credentials
	}
	return ""
}

type CRemoteClient_AllocateRelayServer_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayServer *string `protobuf:"bytes,1,opt,name=relay_server,json=relayServer" json:"relay_server,omitempty"`
}

func (x *CRemoteClient_AllocateRelayServer_Response) Reset() {
	*x = CRemoteClient_AllocateRelayServer_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_AllocateRelayServer_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AllocateRelayServer_Response) ProtoMessage() {}

func (x *CRemoteClient_AllocateRelayServer_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AllocateRelayServer_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AllocateRelayServer_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{19}
}

func (x *CRemoteClient_AllocateRelayServer_Response) GetRelayServer() string {
	if x != nil && x.RelayServer != nil {
		return *x.RelayServer
	}
	return ""
}

type CRemoteClient_AllocateSDR_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CRemoteClient_AllocateSDR_Request) Reset() {
	*x = CRemoteClient_AllocateSDR_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_AllocateSDR_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AllocateSDR_Request) ProtoMessage() {}

func (x *CRemoteClient_AllocateSDR_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AllocateSDR_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AllocateSDR_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{20}
}

func (x *CRemoteClient_AllocateSDR_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CRemoteClient_AllocateSDR_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CRemoteClient_AllocateSDR_Response) Reset() {
	*x = CRemoteClient_AllocateSDR_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_AllocateSDR_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_AllocateSDR_Response) ProtoMessage() {}

func (x *CRemoteClient_AllocateSDR_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_AllocateSDR_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_AllocateSDR_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{21}
}

type CRemoteClient_SteamBroadcast_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Clientid *uint64 `protobuf:"fixed64,2,opt,name=clientid" json:"clientid,omitempty"`
	Payload  []byte  `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
}

func (x *CRemoteClient_SteamBroadcast_Notification) Reset() {
	*x = CRemoteClient_SteamBroadcast_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_SteamBroadcast_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_SteamBroadcast_Notification) ProtoMessage() {}

func (x *CRemoteClient_SteamBroadcast_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_SteamBroadcast_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_SteamBroadcast_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{22}
}

func (x *CRemoteClient_SteamBroadcast_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CRemoteClient_SteamBroadcast_Notification) GetClientid() uint64 {
	if x != nil && x.Clientid != nil {
		return *x.Clientid
	}
	return 0
}

func (x *CRemoteClient_SteamBroadcast_Notification) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CRemoteClient_SteamToSteam_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid          *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	SrcClientid      *uint64 `protobuf:"fixed64,2,opt,name=src_clientid,json=srcClientid" json:"src_clientid,omitempty"`
	DstClientid      *uint64 `protobuf:"fixed64,3,opt,name=dst_clientid,json=dstClientid" json:"dst_clientid,omitempty"`
	Secretid         *uint32 `protobuf:"varint,4,opt,name=secretid" json:"secretid,omitempty"`
	EncryptedPayload []byte  `protobuf:"bytes,5,opt,name=encrypted_payload,json=encryptedPayload" json:"encrypted_payload,omitempty"`
}

func (x *CRemoteClient_SteamToSteam_Notification) Reset() {
	*x = CRemoteClient_SteamToSteam_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_SteamToSteam_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_SteamToSteam_Notification) ProtoMessage() {}

func (x *CRemoteClient_SteamToSteam_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_SteamToSteam_Notification.ProtoReflect.Descriptor instead.
func (*CRemoteClient_SteamToSteam_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{23}
}

func (x *CRemoteClient_SteamToSteam_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CRemoteClient_SteamToSteam_Notification) GetSrcClientid() uint64 {
	if x != nil && x.SrcClientid != nil {
		return *x.SrcClientid
	}
	return 0
}

func (x *CRemoteClient_SteamToSteam_Notification) GetDstClientid() uint64 {
	if x != nil && x.DstClientid != nil {
		return *x.DstClientid
	}
	return 0
}

func (x *CRemoteClient_SteamToSteam_Notification) GetSecretid() uint32 {
	if x != nil && x.Secretid != nil {
		return *x.Secretid
	}
	return 0
}

func (x *CRemoteClient_SteamToSteam_Notification) GetEncryptedPayload() []byte {
	if x != nil {
		return x.EncryptedPayload
	}
	return nil
}

type CRemotePlay_SessionStarted_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostAccountId      *uint32 `protobuf:"varint,1,opt,name=host_account_id,json=hostAccountId" json:"host_account_id,omitempty"`
	ClientAccountId    *uint32 `protobuf:"varint,2,opt,name=client_account_id,json=clientAccountId" json:"client_account_id,omitempty"`
	Appid              *uint32 `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	DeviceFormFactor   *int32  `protobuf:"varint,4,opt,name=device_form_factor,json=deviceFormFactor" json:"device_form_factor,omitempty"`
	RemotePlayTogether *bool   `protobuf:"varint,5,opt,name=remote_play_together,json=remotePlayTogether" json:"remote_play_together,omitempty"`
	GuestSession       *bool   `protobuf:"varint,6,opt,name=guest_session,json=guestSession" json:"guest_session,omitempty"`
}

func (x *CRemotePlay_SessionStarted_Request) Reset() {
	*x = CRemotePlay_SessionStarted_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemotePlay_SessionStarted_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlay_SessionStarted_Request) ProtoMessage() {}

func (x *CRemotePlay_SessionStarted_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlay_SessionStarted_Request.ProtoReflect.Descriptor instead.
func (*CRemotePlay_SessionStarted_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{24}
}

func (x *CRemotePlay_SessionStarted_Request) GetHostAccountId() uint32 {
	if x != nil && x.HostAccountId != nil {
		return *x.HostAccountId
	}
	return 0
}

func (x *CRemotePlay_SessionStarted_Request) GetClientAccountId() uint32 {
	if x != nil && x.ClientAccountId != nil {
		return *x.ClientAccountId
	}
	return 0
}

func (x *CRemotePlay_SessionStarted_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CRemotePlay_SessionStarted_Request) GetDeviceFormFactor() int32 {
	if x != nil && x.DeviceFormFactor != nil {
		return *x.DeviceFormFactor
	}
	return 0
}

func (x *CRemotePlay_SessionStarted_Request) GetRemotePlayTogether() bool {
	if x != nil && x.RemotePlayTogether != nil {
		return *x.RemotePlayTogether
	}
	return false
}

func (x *CRemotePlay_SessionStarted_Request) GetGuestSession() bool {
	if x != nil && x.GuestSession != nil {
		return *x.GuestSession
	}
	return false
}

type CRemotePlay_SessionStarted_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId *uint64 `protobuf:"fixed64,1,opt,name=record_id,json=recordId" json:"record_id,omitempty"`
}

func (x *CRemotePlay_SessionStarted_Response) Reset() {
	*x = CRemotePlay_SessionStarted_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemotePlay_SessionStarted_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlay_SessionStarted_Response) ProtoMessage() {}

func (x *CRemotePlay_SessionStarted_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlay_SessionStarted_Response.ProtoReflect.Descriptor instead.
func (*CRemotePlay_SessionStarted_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{25}
}

func (x *CRemotePlay_SessionStarted_Response) GetRecordId() uint64 {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return 0
}

type CRemotePlay_SessionStopped_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId *uint64 `protobuf:"fixed64,1,opt,name=record_id,json=recordId" json:"record_id,omitempty"`
	UsedX264 *bool   `protobuf:"varint,2,opt,name=used_x264,json=usedX264" json:"used_x264,omitempty"`
	UsedH264 *bool   `protobuf:"varint,3,opt,name=used_h264,json=usedH264" json:"used_h264,omitempty"`
	UsedHevc *bool   `protobuf:"varint,4,opt,name=used_hevc,json=usedHevc" json:"used_hevc,omitempty"`
}

func (x *CRemotePlay_SessionStopped_Notification) Reset() {
	*x = CRemotePlay_SessionStopped_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemotePlay_SessionStopped_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlay_SessionStopped_Notification) ProtoMessage() {}

func (x *CRemotePlay_SessionStopped_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlay_SessionStopped_Notification.ProtoReflect.Descriptor instead.
func (*CRemotePlay_SessionStopped_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{26}
}

func (x *CRemotePlay_SessionStopped_Notification) GetRecordId() uint64 {
	if x != nil && x.RecordId != nil {
		return *x.RecordId
	}
	return 0
}

func (x *CRemotePlay_SessionStopped_Notification) GetUsedX264() bool {
	if x != nil && x.UsedX264 != nil {
		return *x.UsedX264
	}
	return false
}

func (x *CRemotePlay_SessionStopped_Notification) GetUsedH264() bool {
	if x != nil && x.UsedH264 != nil {
		return *x.UsedH264
	}
	return false
}

func (x *CRemotePlay_SessionStopped_Notification) GetUsedHevc() bool {
	if x != nil && x.UsedHevc != nil {
		return *x.UsedHevc
	}
	return false
}

type CRemotePlayTogether_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	// Types that are assignable to Message:
	//
	//	*CRemotePlayTogether_Notification_GroupUpdated_
	Message isCRemotePlayTogether_Notification_Message `protobuf_oneof:"Message"`
}

func (x *CRemotePlayTogether_Notification) Reset() {
	*x = CRemotePlayTogether_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemotePlayTogether_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlayTogether_Notification) ProtoMessage() {}

func (x *CRemotePlayTogether_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlayTogether_Notification.ProtoReflect.Descriptor instead.
func (*CRemotePlayTogether_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{27}
}

func (x *CRemotePlayTogether_Notification) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (m *CRemotePlayTogether_Notification) GetMessage() isCRemotePlayTogether_Notification_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *CRemotePlayTogether_Notification) GetGroupUpdated() *CRemotePlayTogether_Notification_GroupUpdated {
	if x, ok := x.GetMessage().(*CRemotePlayTogether_Notification_GroupUpdated_); ok {
		return x.GroupUpdated
	}
	return nil
}

type isCRemotePlayTogether_Notification_Message interface {
	isCRemotePlayTogether_Notification_Message()
}

type CRemotePlayTogether_Notification_GroupUpdated_ struct {
	GroupUpdated *CRemotePlayTogether_Notification_GroupUpdated `protobuf:"bytes,2,opt,name=group_updated,json=groupUpdated,oneof"`
}

func (*CRemotePlayTogether_Notification_GroupUpdated_) isCRemotePlayTogether_Notification_Message() {}

type CRemoteClient_CreateRemotePlayTogetherInvitation_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid            *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	LaunchParameters *string `protobuf:"bytes,2,opt,name=launch_parameters,json=launchParameters" json:"launch_parameters,omitempty"`
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Request) Reset() {
	*x = CRemoteClient_CreateRemotePlayTogetherInvitation_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_CreateRemotePlayTogetherInvitation_Request) ProtoMessage() {}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_CreateRemotePlayTogetherInvitation_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_CreateRemotePlayTogetherInvitation_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{28}
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Request) GetLaunchParameters() string {
	if x != nil && x.LaunchParameters != nil {
		return *x.LaunchParameters
	}
	return ""
}

type CRemoteClient_CreateRemotePlayTogetherInvitation_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationCode *string `protobuf:"bytes,1,opt,name=invitation_code,json=invitationCode" json:"invitation_code,omitempty"`
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Response) Reset() {
	*x = CRemoteClient_CreateRemotePlayTogetherInvitation_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_CreateRemotePlayTogetherInvitation_Response) ProtoMessage() {}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_CreateRemotePlayTogetherInvitation_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_CreateRemotePlayTogetherInvitation_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{29}
}

func (x *CRemoteClient_CreateRemotePlayTogetherInvitation_Response) GetInvitationCode() string {
	if x != nil && x.InvitationCode != nil {
		return *x.InvitationCode
	}
	return ""
}

type CRemoteClient_DeleteRemotePlayTogetherInvitation_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationCode *string `protobuf:"bytes,1,opt,name=invitation_code,json=invitationCode" json:"invitation_code,omitempty"`
}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) Reset() {
	*x = CRemoteClient_DeleteRemotePlayTogetherInvitation_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) ProtoMessage() {}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_DeleteRemotePlayTogetherInvitation_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{30}
}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Request) GetInvitationCode() string {
	if x != nil && x.InvitationCode != nil {
		return *x.InvitationCode
	}
	return ""
}

type CRemoteClient_DeleteRemotePlayTogetherInvitation_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Response) Reset() {
	*x = CRemoteClient_DeleteRemotePlayTogetherInvitation_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_DeleteRemotePlayTogetherInvitation_Response) ProtoMessage() {}

func (x *CRemoteClient_DeleteRemotePlayTogetherInvitation_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_DeleteRemotePlayTogetherInvitation_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_DeleteRemotePlayTogetherInvitation_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{31}
}

type CRemoteClient_LookupRemotePlayTogetherInvitation_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationCode *string `protobuf:"bytes,1,opt,name=invitation_code,json=invitationCode" json:"invitation_code,omitempty"`
}

func (x *CRemoteClient_LookupRemotePlayTogetherInvitation_Request) Reset() {
	*x = CRemoteClient_LookupRemotePlayTogetherInvitation_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_LookupRemotePlayTogetherInvitation_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_LookupRemotePlayTogetherInvitation_Request) ProtoMessage() {}

func (x *CRemoteClient_LookupRemotePlayTogetherInvitation_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_LookupRemotePlayTogetherInvitation_Request.ProtoReflect.Descriptor instead.
func (*CRemoteClient_LookupRemotePlayTogetherInvitation_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{32}
}

func (x *CRemoteClient_LookupRemotePlayTogetherInvitation_Request) GetInvitationCode() string {
	if x != nil && x.InvitationCode != nil {
		return *x.InvitationCode
	}
	return ""
}

type CRemoteClient_LookupRemotePlayTogetherInvitation_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitationUrl *string `protobuf:"bytes,1,opt,name=invitation_url,json=invitationUrl" json:"invitation_url,omitempty"`
}

func (x *CRemoteClient_LookupRemotePlayTogetherInvitation_Response) Reset() {
	*x = CRemoteClient_LookupRemotePlayTogetherInvitation_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemoteClient_LookupRemotePlayTogetherInvitation_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemoteClient_LookupRemotePlayTogetherInvitation_Response) ProtoMessage() {}

func (x *CRemoteClient_LookupRemotePlayTogetherInvitation_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemoteClient_LookupRemotePlayTogetherInvitation_Response.ProtoReflect.Descriptor instead.
func (*CRemoteClient_LookupRemotePlayTogetherInvitation_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{33}
}

func (x *CRemoteClient_LookupRemotePlayTogetherInvitation_Response) GetInvitationUrl() string {
	if x != nil && x.InvitationUrl != nil {
		return *x.InvitationUrl
	}
	return ""
}

type CCMRemoteClient_ClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*CCMRemoteClient_ClientMessage_CreateSessionRequest
	//	*CCMRemoteClient_ClientMessage_StartPairingRequest
	//	*CCMRemoteClient_ClientMessage_SetPairingInfoRequest
	//	*CCMRemoteClient_ClientMessage_CancelPairingRequest
	//	*CCMRemoteClient_ClientMessage_RegisterStatusUpdate
	//	*CCMRemoteClient_ClientMessage_UnregisterStatusUpdate
	//	*CCMRemoteClient_ClientMessage_RemotePacket
	Message isCCMRemoteClient_ClientMessage_Message `protobuf_oneof:"Message"`
}

func (x *CCMRemoteClient_ClientMessage) Reset() {
	*x = CCMRemoteClient_ClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCMRemoteClient_ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCMRemoteClient_ClientMessage) ProtoMessage() {}

func (x *CCMRemoteClient_ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCMRemoteClient_ClientMessage.ProtoReflect.Descriptor instead.
func (*CCMRemoteClient_ClientMessage) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{34}
}

func (m *CCMRemoteClient_ClientMessage) GetMessage() isCCMRemoteClient_ClientMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *CCMRemoteClient_ClientMessage) GetCreateSessionRequest() *CRemoteClient_CreateSession_Request {
	if x, ok := x.GetMessage().(*CCMRemoteClient_ClientMessage_CreateSessionRequest); ok {
		return x.CreateSessionRequest
	}
	return nil
}

func (x *CCMRemoteClient_ClientMessage) GetStartPairingRequest() *CRemoteClient_StartPairing_Request {
	if x, ok := x.GetMessage().(*CCMRemoteClient_ClientMessage_StartPairingRequest); ok {
		return x.StartPairingRequest
	}
	return nil
}

func (x *CCMRemoteClient_ClientMessage) GetSetPairingInfoRequest() *CRemoteClient_SetPairingInfo_Request {
	if x, ok := x.GetMessage().(*CCMRemoteClient_ClientMessage_SetPairingInfoRequest); ok {
		return x.SetPairingInfoRequest
	}
	return nil
}

func (x *CCMRemoteClient_ClientMessage) GetCancelPairingRequest() *CRemoteClient_CancelPairing_Request {
	if x, ok := x.GetMessage().(*CCMRemoteClient_ClientMessage_CancelPairingRequest); ok {
		return x.CancelPairingRequest
	}
	return nil
}

func (x *CCMRemoteClient_ClientMessage) GetRegisterStatusUpdate() *CRemoteClient_RegisterStatusUpdate_Notification {
	if x, ok := x.GetMessage().(*CCMRemoteClient_ClientMessage_RegisterStatusUpdate); ok {
		return x.RegisterStatusUpdate
	}
	return nil
}

func (x *CCMRemoteClient_ClientMessage) GetUnregisterStatusUpdate() *CRemoteClient_UnregisterStatusUpdate_Notification {
	if x, ok := x.GetMessage().(*CCMRemoteClient_ClientMessage_UnregisterStatusUpdate); ok {
		return x.UnregisterStatusUpdate
	}
	return nil
}

func (x *CCMRemoteClient_ClientMessage) GetRemotePacket() *CRemoteClient_RemotePacket_Notification {
	if x, ok := x.GetMessage().(*CCMRemoteClient_ClientMessage_RemotePacket); ok {
		return x.RemotePacket
	}
	return nil
}

type isCCMRemoteClient_ClientMessage_Message interface {
	isCCMRemoteClient_ClientMessage_Message()
}

type CCMRemoteClient_ClientMessage_CreateSessionRequest struct {
	CreateSessionRequest *CRemoteClient_CreateSession_Request `protobuf:"bytes,1,opt,name=create_session_request,json=createSessionRequest,oneof"`
}

type CCMRemoteClient_ClientMessage_StartPairingRequest struct {
	StartPairingRequest *CRemoteClient_StartPairing_Request `protobuf:"bytes,2,opt,name=start_pairing_request,json=startPairingRequest,oneof"`
}

type CCMRemoteClient_ClientMessage_SetPairingInfoRequest struct {
	SetPairingInfoRequest *CRemoteClient_SetPairingInfo_Request `protobuf:"bytes,3,opt,name=set_pairing_info_request,json=setPairingInfoRequest,oneof"`
}

type CCMRemoteClient_ClientMessage_CancelPairingRequest struct {
	CancelPairingRequest *CRemoteClient_CancelPairing_Request `protobuf:"bytes,4,opt,name=cancel_pairing_request,json=cancelPairingRequest,oneof"`
}

type CCMRemoteClient_ClientMessage_RegisterStatusUpdate struct {
	RegisterStatusUpdate *CRemoteClient_RegisterStatusUpdate_Notification `protobuf:"bytes,5,opt,name=register_status_update,json=registerStatusUpdate,oneof"`
}

type CCMRemoteClient_ClientMessage_UnregisterStatusUpdate struct {
	UnregisterStatusUpdate *CRemoteClient_UnregisterStatusUpdate_Notification `protobuf:"bytes,6,opt,name=unregister_status_update,json=unregisterStatusUpdate,oneof"`
}

type CCMRemoteClient_ClientMessage_RemotePacket struct {
	RemotePacket *CRemoteClient_RemotePacket_Notification `protobuf:"bytes,7,opt,name=remote_packet,json=remotePacket,oneof"`
}

func (*CCMRemoteClient_ClientMessage_CreateSessionRequest) isCCMRemoteClient_ClientMessage_Message() {
}

func (*CCMRemoteClient_ClientMessage_StartPairingRequest) isCCMRemoteClient_ClientMessage_Message() {}

func (*CCMRemoteClient_ClientMessage_SetPairingInfoRequest) isCCMRemoteClient_ClientMessage_Message() {
}

func (*CCMRemoteClient_ClientMessage_CancelPairingRequest) isCCMRemoteClient_ClientMessage_Message() {
}

func (*CCMRemoteClient_ClientMessage_RegisterStatusUpdate) isCCMRemoteClient_ClientMessage_Message() {
}

func (*CCMRemoteClient_ClientMessage_UnregisterStatusUpdate) isCCMRemoteClient_ClientMessage_Message() {
}

func (*CCMRemoteClient_ClientMessage_RemotePacket) isCCMRemoteClient_ClientMessage_Message() {}

type CCMRemoteClient_ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	// Types that are assignable to Message:
	//
	//	*CCMRemoteClient_ServerMessage_CreateSessionResponse
	//	*CCMRemoteClient_ServerMessage_StartPairingResponse
	//	*CCMRemoteClient_ServerMessage_SetPairingInfoResponse
	//	*CCMRemoteClient_ServerMessage_CancelPairingResponse
	//	*CCMRemoteClient_ServerMessage_ReplyPacket
	Message isCCMRemoteClient_ServerMessage_Message `protobuf_oneof:"Message"`
}

func (x *CCMRemoteClient_ServerMessage) Reset() {
	*x = CCMRemoteClient_ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCMRemoteClient_ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCMRemoteClient_ServerMessage) ProtoMessage() {}

func (x *CCMRemoteClient_ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCMRemoteClient_ServerMessage.ProtoReflect.Descriptor instead.
func (*CCMRemoteClient_ServerMessage) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{35}
}

func (x *CCMRemoteClient_ServerMessage) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (m *CCMRemoteClient_ServerMessage) GetMessage() isCCMRemoteClient_ServerMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *CCMRemoteClient_ServerMessage) GetCreateSessionResponse() *CRemoteClient_CreateSession_Response {
	if x, ok := x.GetMessage().(*CCMRemoteClient_ServerMessage_CreateSessionResponse); ok {
		return x.CreateSessionResponse
	}
	return nil
}

func (x *CCMRemoteClient_ServerMessage) GetStartPairingResponse() *CRemoteClient_StartPairing_Response {
	if x, ok := x.GetMessage().(*CCMRemoteClient_ServerMessage_StartPairingResponse); ok {
		return x.StartPairingResponse
	}
	return nil
}

func (x *CCMRemoteClient_ServerMessage) GetSetPairingInfoResponse() *CRemoteClient_SetPairingInfo_Response {
	if x, ok := x.GetMessage().(*CCMRemoteClient_ServerMessage_SetPairingInfoResponse); ok {
		return x.SetPairingInfoResponse
	}
	return nil
}

func (x *CCMRemoteClient_ServerMessage) GetCancelPairingResponse() *CRemoteClient_CancelPairing_Response {
	if x, ok := x.GetMessage().(*CCMRemoteClient_ServerMessage_CancelPairingResponse); ok {
		return x.CancelPairingResponse
	}
	return nil
}

func (x *CCMRemoteClient_ServerMessage) GetReplyPacket() *CRemoteClient_GetReplies_Response {
	if x, ok := x.GetMessage().(*CCMRemoteClient_ServerMessage_ReplyPacket); ok {
		return x.ReplyPacket
	}
	return nil
}

type isCCMRemoteClient_ServerMessage_Message interface {
	isCCMRemoteClient_ServerMessage_Message()
}

type CCMRemoteClient_ServerMessage_CreateSessionResponse struct {
	CreateSessionResponse *CRemoteClient_CreateSession_Response `protobuf:"bytes,2,opt,name=create_session_response,json=createSessionResponse,oneof"`
}

type CCMRemoteClient_ServerMessage_StartPairingResponse struct {
	StartPairingResponse *CRemoteClient_StartPairing_Response `protobuf:"bytes,3,opt,name=start_pairing_response,json=startPairingResponse,oneof"`
}

type CCMRemoteClient_ServerMessage_SetPairingInfoResponse struct {
	SetPairingInfoResponse *CRemoteClient_SetPairingInfo_Response `protobuf:"bytes,4,opt,name=set_pairing_info_response,json=setPairingInfoResponse,oneof"`
}

type CCMRemoteClient_ServerMessage_CancelPairingResponse struct {
	CancelPairingResponse *CRemoteClient_CancelPairing_Response `protobuf:"bytes,5,opt,name=cancel_pairing_response,json=cancelPairingResponse,oneof"`
}

type CCMRemoteClient_ServerMessage_ReplyPacket struct {
	ReplyPacket *CRemoteClient_GetReplies_Response `protobuf:"bytes,6,opt,name=reply_packet,json=replyPacket,oneof"`
}

func (*CCMRemoteClient_ServerMessage_CreateSessionResponse) isCCMRemoteClient_ServerMessage_Message() {
}

func (*CCMRemoteClient_ServerMessage_StartPairingResponse) isCCMRemoteClient_ServerMessage_Message() {
}

func (*CCMRemoteClient_ServerMessage_SetPairingInfoResponse) isCCMRemoteClient_ServerMessage_Message() {
}

func (*CCMRemoteClient_ServerMessage_CancelPairingResponse) isCCMRemoteClient_ServerMessage_Message() {
}

func (*CCMRemoteClient_ServerMessage_ReplyPacket) isCCMRemoteClient_ServerMessage_Message() {}

type CRemotePlayTogether_Notification_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid           *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Guestid           *uint32 `protobuf:"varint,2,opt,name=guestid" json:"guestid,omitempty"`
	AvatarHash        []byte  `protobuf:"bytes,3,opt,name=avatar_hash,json=avatarHash" json:"avatar_hash,omitempty"`
	KeyboardEnabled   *bool   `protobuf:"varint,4,opt,name=keyboard_enabled,json=keyboardEnabled" json:"keyboard_enabled,omitempty"`
	MouseEnabled      *bool   `protobuf:"varint,5,opt,name=mouse_enabled,json=mouseEnabled" json:"mouse_enabled,omitempty"`
	ControllerEnabled *bool   `protobuf:"varint,6,opt,name=controller_enabled,json=controllerEnabled" json:"controller_enabled,omitempty"`
}

func (x *CRemotePlayTogether_Notification_Player) Reset() {
	*x = CRemotePlayTogether_Notification_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemotePlayTogether_Notification_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlayTogether_Notification_Player) ProtoMessage() {}

func (x *CRemotePlayTogether_Notification_Player) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlayTogether_Notification_Player.ProtoReflect.Descriptor instead.
func (*CRemotePlayTogether_Notification_Player) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{27, 0}
}

func (x *CRemotePlayTogether_Notification_Player) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification_Player) GetGuestid() uint32 {
	if x != nil && x.Guestid != nil {
		return *x.Guestid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification_Player) GetAvatarHash() []byte {
	if x != nil {
		return x.AvatarHash
	}
	return nil
}

func (x *CRemotePlayTogether_Notification_Player) GetKeyboardEnabled() bool {
	if x != nil && x.KeyboardEnabled != nil {
		return *x.KeyboardEnabled
	}
	return false
}

func (x *CRemotePlayTogether_Notification_Player) GetMouseEnabled() bool {
	if x != nil && x.MouseEnabled != nil {
		return *x.MouseEnabled
	}
	return false
}

func (x *CRemotePlayTogether_Notification_Player) GetControllerEnabled() bool {
	if x != nil && x.ControllerEnabled != nil {
		return *x.ControllerEnabled
	}
	return false
}

type CRemotePlayTogether_Notification_ControllerSlotObsolete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slotid  *uint32 `protobuf:"varint,1,opt,name=slotid" json:"slotid,omitempty"`
	Steamid *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CRemotePlayTogether_Notification_ControllerSlotObsolete) Reset() {
	*x = CRemotePlayTogether_Notification_ControllerSlotObsolete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemotePlayTogether_Notification_ControllerSlotObsolete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlayTogether_Notification_ControllerSlotObsolete) ProtoMessage() {}

func (x *CRemotePlayTogether_Notification_ControllerSlotObsolete) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlayTogether_Notification_ControllerSlotObsolete.ProtoReflect.Descriptor instead.
func (*CRemotePlayTogether_Notification_ControllerSlotObsolete) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{27, 1}
}

func (x *CRemotePlayTogether_Notification_ControllerSlotObsolete) GetSlotid() uint32 {
	if x != nil && x.Slotid != nil {
		return *x.Slotid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification_ControllerSlotObsolete) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CRemotePlayTogether_Notification_ControllerSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slotid         *uint32                                  `protobuf:"varint,1,opt,name=slotid" json:"slotid,omitempty"`
	Player         *CRemotePlayTogether_Notification_Player `protobuf:"bytes,2,opt,name=player" json:"player,omitempty"`
	ControllerType *int32                                   `protobuf:"varint,3,opt,name=controller_type,json=controllerType" json:"controller_type,omitempty"`
}

func (x *CRemotePlayTogether_Notification_ControllerSlot) Reset() {
	*x = CRemotePlayTogether_Notification_ControllerSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemotePlayTogether_Notification_ControllerSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlayTogether_Notification_ControllerSlot) ProtoMessage() {}

func (x *CRemotePlayTogether_Notification_ControllerSlot) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlayTogether_Notification_ControllerSlot.ProtoReflect.Descriptor instead.
func (*CRemotePlayTogether_Notification_ControllerSlot) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{27, 2}
}

func (x *CRemotePlayTogether_Notification_ControllerSlot) GetSlotid() uint32 {
	if x != nil && x.Slotid != nil {
		return *x.Slotid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification_ControllerSlot) GetPlayer() *CRemotePlayTogether_Notification_Player {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *CRemotePlayTogether_Notification_ControllerSlot) GetControllerType() int32 {
	if x != nil && x.ControllerType != nil {
		return *x.ControllerType
	}
	return 0
}

type CRemotePlayTogether_Notification_GroupUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostSteamid             *uint64                                                    `protobuf:"fixed64,1,opt,name=host_steamid,json=hostSteamid" json:"host_steamid,omitempty"`
	HostClientid            *uint64                                                    `protobuf:"fixed64,2,opt,name=host_clientid,json=hostClientid" json:"host_clientid,omitempty"`
	PlayersObsolete         []uint64                                                   `protobuf:"fixed64,3,rep,name=players_obsolete,json=playersObsolete" json:"players_obsolete,omitempty"`
	HostGameid              *uint64                                                    `protobuf:"fixed64,4,opt,name=host_gameid,json=hostGameid" json:"host_gameid,omitempty"`
	ControllerSlotsObsolete []*CRemotePlayTogether_Notification_ControllerSlotObsolete `protobuf:"bytes,5,rep,name=controller_slots_obsolete,json=controllerSlotsObsolete" json:"controller_slots_obsolete,omitempty"`
	HasNewPlayers           *bool                                                      `protobuf:"varint,6,opt,name=has_new_players,json=hasNewPlayers" json:"has_new_players,omitempty"`
	PlayerSlots             []*CRemotePlayTogether_Notification_Player                 `protobuf:"bytes,7,rep,name=player_slots,json=playerSlots" json:"player_slots,omitempty"`
	ControllerSlots         []*CRemotePlayTogether_Notification_ControllerSlot         `protobuf:"bytes,8,rep,name=controller_slots,json=controllerSlots" json:"controller_slots,omitempty"`
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) Reset() {
	*x = CRemotePlayTogether_Notification_GroupUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CRemotePlayTogether_Notification_GroupUpdated) ProtoMessage() {}

func (x *CRemotePlayTogether_Notification_GroupUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_remoteclient_service_messages_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CRemotePlayTogether_Notification_GroupUpdated.ProtoReflect.Descriptor instead.
func (*CRemotePlayTogether_Notification_GroupUpdated) Descriptor() ([]byte, []int) {
	return file_steammessages_remoteclient_service_messages_proto_rawDescGZIP(), []int{27, 3}
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetHostSteamid() uint64 {
	if x != nil && x.HostSteamid != nil {
		return *x.HostSteamid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetHostClientid() uint64 {
	if x != nil && x.HostClientid != nil {
		return *x.HostClientid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetPlayersObsolete() []uint64 {
	if x != nil {
		return x.PlayersObsolete
	}
	return nil
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetHostGameid() uint64 {
	if x != nil && x.HostGameid != nil {
		return *x.HostGameid
	}
	return 0
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetControllerSlotsObsolete() []*CRemotePlayTogether_Notification_ControllerSlotObsolete {
	if x != nil {
		return x.ControllerSlotsObsolete
	}
	return nil
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetHasNewPlayers() bool {
	if x != nil && x.HasNewPlayers != nil {
		return *x.HasNewPlayers
	}
	return false
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetPlayerSlots() []*CRemotePlayTogether_Notification_Player {
	if x != nil {
		return x.PlayerSlots
	}
	return nil
}

func (x *CRemotePlayTogether_Notification_GroupUpdated) GetControllerSlots() []*CRemotePlayTogether_Notification_ControllerSlot {
	if x != nil {
		return x.ControllerSlots
	}
	return nil
}

var File_steammessages_remoteclient_service_messages_proto protoreflect.FileDescriptor

var file_steammessages_remoteclient_service_messages_proto_rawDesc = []byte{
	0x0a, 0x31, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x24, 0x43, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22,
	0x49, 0x0a, 0x28, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x22, 0x43, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x37, 0x0a, 0x23, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x22, 0x7c, 0x0a, 0x24, 0x43, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x38, 0x0a, 0x24, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x22, 0x7d, 0x0a, 0x25, 0x43, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x69, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a, 0x23, 0x43, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x26,
	0x0a, 0x24, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x2f, 0x43, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x6c, 0x0a, 0x31, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x67,
	0x0a, 0x21, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x27, 0x43, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x61, 0x0a, 0x26, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x41, 0x0a, 0x20, 0x43, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x21, 0x43,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x65, 0x0a, 0x29, 0x43, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x22, 0x4f, 0x0a, 0x2a, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x22, 0x39, 0x0a, 0x21, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x44, 0x52, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x24, 0x0a,
	0x22, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x44, 0x52, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x7b, 0x0a, 0x29, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0xd2, 0x01, 0x0a, 0x27, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x73, 0x72,
	0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x73, 0x74,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0b, 0x64, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x93, 0x02, 0x0a, 0x22, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x5f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f,
	0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x67,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x23, 0x43,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x5f, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x22,
	0x9d, 0x01, 0x0a, 0x27, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x5f,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x78, 0x32, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x64, 0x58, 0x32, 0x36, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x68, 0x32,
	0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x64, 0x48, 0x32,
	0x36, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x76, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x64, 0x48, 0x65, 0x76, 0x63, 0x22,
	0xce, 0x08, 0x0a, 0x20, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54,
	0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x55,
	0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x1a, 0xdc, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x1a, 0x4b, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x5f, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x6c, 0x6f, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x1a, 0x93, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x06,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xeb, 0x03, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b,
	0x68, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x62, 0x73, 0x6f,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x4f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x12, 0x75, 0x0a, 0x19,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73,
	0x5f, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x6f,
	0x74, 0x5f, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x4f, 0x62, 0x73, 0x6f, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61,
	0x73, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54,
	0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x7d, 0x0a, 0x38, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x64, 0x0a, 0x39, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x63, 0x0a, 0x38, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x3b, 0x0a, 0x39, 0x43, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x63, 0x0a, 0x38, 0x43, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x62, 0x0a, 0x39,
	0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x54, 0x6f,
	0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x22, 0xce, 0x05, 0x0a, 0x1d, 0x43, 0x43, 0x4d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x5c, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x59, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x18, 0x73,
	0x65, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x65,
	0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a,
	0x16, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x16, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x43, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x6e, 0x0a, 0x18, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x75,
	0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x90, 0x04, 0x0a, 0x1d, 0x43, 0x43, 0x4d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5f, 0x0a, 0x17, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x43,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x16,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x19, 0x73, 0x65,
	0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x53, 0x65,
	0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x73, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5f, 0x0a, 0x17, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x43, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x46, 0x42, 0x2d, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d,
}

var (
	file_steammessages_remoteclient_service_messages_proto_rawDescOnce sync.Once
	file_steammessages_remoteclient_service_messages_proto_rawDescData = file_steammessages_remoteclient_service_messages_proto_rawDesc
)

func file_steammessages_remoteclient_service_messages_proto_rawDescGZIP() []byte {
	file_steammessages_remoteclient_service_messages_proto_rawDescOnce.Do(func() {
		file_steammessages_remoteclient_service_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_remoteclient_service_messages_proto_rawDescData)
	})
	return file_steammessages_remoteclient_service_messages_proto_rawDescData
}

var file_steammessages_remoteclient_service_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_steammessages_remoteclient_service_messages_proto_goTypes = []interface{}{
	(*CRemoteClient_CreateSession_Request)(nil),                       // 0: CRemoteClient_CreateSession_Request
	(*CRemoteClient_CreateSession_Response)(nil),                      // 1: CRemoteClient_CreateSession_Response
	(*CRemoteClient_DeleteSession_Notification)(nil),                  // 2: CRemoteClient_DeleteSession_Notification
	(*CRemoteClient_StartPairing_Request)(nil),                        // 3: CRemoteClient_StartPairing_Request
	(*CRemoteClient_StartPairing_Response)(nil),                       // 4: CRemoteClient_StartPairing_Response
	(*CRemoteClient_SetPairingInfo_Request)(nil),                      // 5: CRemoteClient_SetPairingInfo_Request
	(*CRemoteClient_SetPairingInfo_Response)(nil),                     // 6: CRemoteClient_SetPairingInfo_Response
	(*CRemoteClient_GetPairingInfo_Request)(nil),                      // 7: CRemoteClient_GetPairingInfo_Request
	(*CRemoteClient_GetPairingInfo_Response)(nil),                     // 8: CRemoteClient_GetPairingInfo_Response
	(*CRemoteClient_CancelPairing_Request)(nil),                       // 9: CRemoteClient_CancelPairing_Request
	(*CRemoteClient_CancelPairing_Response)(nil),                      // 10: CRemoteClient_CancelPairing_Response
	(*CRemoteClient_RegisterStatusUpdate_Notification)(nil),           // 11: CRemoteClient_RegisterStatusUpdate_Notification
	(*CRemoteClient_UnregisterStatusUpdate_Notification)(nil),         // 12: CRemoteClient_UnregisterStatusUpdate_Notification
	(*CRemoteClient_Online_Notification)(nil),                         // 13: CRemoteClient_Online_Notification
	(*CRemoteClient_RemotePacket_Notification)(nil),                   // 14: CRemoteClient_RemotePacket_Notification
	(*CRemoteClient_ReplyPacket_Notification)(nil),                    // 15: CRemoteClient_ReplyPacket_Notification
	(*CRemoteClient_GetReplies_Request)(nil),                          // 16: CRemoteClient_GetReplies_Request
	(*CRemoteClient_GetReplies_Response)(nil),                         // 17: CRemoteClient_GetReplies_Response
	(*CRemoteClient_AllocateRelayServer_Request)(nil),                 // 18: CRemoteClient_AllocateRelayServer_Request
	(*CRemoteClient_AllocateRelayServer_Response)(nil),                // 19: CRemoteClient_AllocateRelayServer_Response
	(*CRemoteClient_AllocateSDR_Request)(nil),                         // 20: CRemoteClient_AllocateSDR_Request
	(*CRemoteClient_AllocateSDR_Response)(nil),                        // 21: CRemoteClient_AllocateSDR_Response
	(*CRemoteClient_SteamBroadcast_Notification)(nil),                 // 22: CRemoteClient_SteamBroadcast_Notification
	(*CRemoteClient_SteamToSteam_Notification)(nil),                   // 23: CRemoteClient_SteamToSteam_Notification
	(*CRemotePlay_SessionStarted_Request)(nil),                        // 24: CRemotePlay_SessionStarted_Request
	(*CRemotePlay_SessionStarted_Response)(nil),                       // 25: CRemotePlay_SessionStarted_Response
	(*CRemotePlay_SessionStopped_Notification)(nil),                   // 26: CRemotePlay_SessionStopped_Notification
	(*CRemotePlayTogether_Notification)(nil),                          // 27: CRemotePlayTogether_Notification
	(*CRemoteClient_CreateRemotePlayTogetherInvitation_Request)(nil),  // 28: CRemoteClient_CreateRemotePlayTogetherInvitation_Request
	(*CRemoteClient_CreateRemotePlayTogetherInvitation_Response)(nil), // 29: CRemoteClient_CreateRemotePlayTogetherInvitation_Response
	(*CRemoteClient_DeleteRemotePlayTogetherInvitation_Request)(nil),  // 30: CRemoteClient_DeleteRemotePlayTogetherInvitation_Request
	(*CRemoteClient_DeleteRemotePlayTogetherInvitation_Response)(nil), // 31: CRemoteClient_DeleteRemotePlayTogetherInvitation_Response
	(*CRemoteClient_LookupRemotePlayTogetherInvitation_Request)(nil),  // 32: CRemoteClient_LookupRemotePlayTogetherInvitation_Request
	(*CRemoteClient_LookupRemotePlayTogetherInvitation_Response)(nil), // 33: CRemoteClient_LookupRemotePlayTogetherInvitation_Response
	(*CCMRemoteClient_ClientMessage)(nil),                             // 34: CCMRemoteClient_ClientMessage
	(*CCMRemoteClient_ServerMessage)(nil),                             // 35: CCMRemoteClient_ServerMessage
	(*CRemotePlayTogether_Notification_Player)(nil),                   // 36: CRemotePlayTogether_Notification.Player
	(*CRemotePlayTogether_Notification_ControllerSlotObsolete)(nil),   // 37: CRemotePlayTogether_Notification.ControllerSlot_obsolete
	(*CRemotePlayTogether_Notification_ControllerSlot)(nil),           // 38: CRemotePlayTogether_Notification.ControllerSlot
	(*CRemotePlayTogether_Notification_GroupUpdated)(nil),             // 39: CRemotePlayTogether_Notification.GroupUpdated
}
var file_steammessages_remoteclient_service_messages_proto_depIdxs = []int32{
	39, // 0: CRemotePlayTogether_Notification.group_updated:type_name -> CRemotePlayTogether_Notification.GroupUpdated
	0,  // 1: CCMRemoteClient_ClientMessage.create_session_request:type_name -> CRemoteClient_CreateSession_Request
	3,  // 2: CCMRemoteClient_ClientMessage.start_pairing_request:type_name -> CRemoteClient_StartPairing_Request
	5,  // 3: CCMRemoteClient_ClientMessage.set_pairing_info_request:type_name -> CRemoteClient_SetPairingInfo_Request
	9,  // 4: CCMRemoteClient_ClientMessage.cancel_pairing_request:type_name -> CRemoteClient_CancelPairing_Request
	11, // 5: CCMRemoteClient_ClientMessage.register_status_update:type_name -> CRemoteClient_RegisterStatusUpdate_Notification
	12, // 6: CCMRemoteClient_ClientMessage.unregister_status_update:type_name -> CRemoteClient_UnregisterStatusUpdate_Notification
	14, // 7: CCMRemoteClient_ClientMessage.remote_packet:type_name -> CRemoteClient_RemotePacket_Notification
	1,  // 8: CCMRemoteClient_ServerMessage.create_session_response:type_name -> CRemoteClient_CreateSession_Response
	4,  // 9: CCMRemoteClient_ServerMessage.start_pairing_response:type_name -> CRemoteClient_StartPairing_Response
	6,  // 10: CCMRemoteClient_ServerMessage.set_pairing_info_response:type_name -> CRemoteClient_SetPairingInfo_Response
	10, // 11: CCMRemoteClient_ServerMessage.cancel_pairing_response:type_name -> CRemoteClient_CancelPairing_Response
	17, // 12: CCMRemoteClient_ServerMessage.reply_packet:type_name -> CRemoteClient_GetReplies_Response
	36, // 13: CRemotePlayTogether_Notification.ControllerSlot.player:type_name -> CRemotePlayTogether_Notification.Player
	37, // 14: CRemotePlayTogether_Notification.GroupUpdated.controller_slots_obsolete:type_name -> CRemotePlayTogether_Notification.ControllerSlot_obsolete
	36, // 15: CRemotePlayTogether_Notification.GroupUpdated.player_slots:type_name -> CRemotePlayTogether_Notification.Player
	38, // 16: CRemotePlayTogether_Notification.GroupUpdated.controller_slots:type_name -> CRemotePlayTogether_Notification.ControllerSlot
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_steammessages_remoteclient_service_messages_proto_init() }
func file_steammessages_remoteclient_service_messages_proto_init() {
	if File_steammessages_remoteclient_service_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_steammessages_remoteclient_service_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_CreateSession_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_CreateSession_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_DeleteSession_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_StartPairing_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_StartPairing_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_SetPairingInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_SetPairingInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_GetPairingInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_GetPairingInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_CancelPairing_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_CancelPairing_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_RegisterStatusUpdate_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_UnregisterStatusUpdate_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_Online_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_RemotePacket_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_ReplyPacket_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_GetReplies_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_GetReplies_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_AllocateRelayServer_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_AllocateRelayServer_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_AllocateSDR_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_AllocateSDR_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_SteamBroadcast_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_SteamToSteam_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemotePlay_SessionStarted_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemotePlay_SessionStarted_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemotePlay_SessionStopped_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemotePlayTogether_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_CreateRemotePlayTogetherInvitation_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_CreateRemotePlayTogetherInvitation_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_DeleteRemotePlayTogetherInvitation_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_DeleteRemotePlayTogetherInvitation_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_LookupRemotePlayTogetherInvitation_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemoteClient_LookupRemotePlayTogetherInvitation_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCMRemoteClient_ClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCMRemoteClient_ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemotePlayTogether_Notification_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemotePlayTogether_Notification_ControllerSlotObsolete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemotePlayTogether_Notification_ControllerSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_remoteclient_service_messages_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CRemotePlayTogether_Notification_GroupUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_steammessages_remoteclient_service_messages_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*CRemotePlayTogether_Notification_GroupUpdated_)(nil),
	}
	file_steammessages_remoteclient_service_messages_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*CCMRemoteClient_ClientMessage_CreateSessionRequest)(nil),
		(*CCMRemoteClient_ClientMessage_StartPairingRequest)(nil),
		(*CCMRemoteClient_ClientMessage_SetPairingInfoRequest)(nil),
		(*CCMRemoteClient_ClientMessage_CancelPairingRequest)(nil),
		(*CCMRemoteClient_ClientMessage_RegisterStatusUpdate)(nil),
		(*CCMRemoteClient_ClientMessage_UnregisterStatusUpdate)(nil),
		(*CCMRemoteClient_ClientMessage_RemotePacket)(nil),
	}
	file_steammessages_remoteclient_service_messages_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*CCMRemoteClient_ServerMessage_CreateSessionResponse)(nil),
		(*CCMRemoteClient_ServerMessage_StartPairingResponse)(nil),
		(*CCMRemoteClient_ServerMessage_SetPairingInfoResponse)(nil),
		(*CCMRemoteClient_ServerMessage_CancelPairingResponse)(nil),
		(*CCMRemoteClient_ServerMessage_ReplyPacket)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_remoteclient_service_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_remoteclient_service_messages_proto_goTypes,
		DependencyIndexes: file_steammessages_remoteclient_service_messages_proto_depIdxs,
		MessageInfos:      file_steammessages_remoteclient_service_messages_proto_msgTypes,
	}.Build()
	File_steammessages_remoteclient_service_messages_proto = out.File
	file_steammessages_remoteclient_service_messages_proto_rawDesc = nil
	file_steammessages_remoteclient_service_messages_proto_goTypes = nil
	file_steammessages_remoteclient_service_messages_proto_depIdxs = nil
}
