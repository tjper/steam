// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: steammessages_parties.steamclient.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CParties_JoinParty_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	BeaconId *uint64 `protobuf:"varint,2,opt,name=beacon_id,json=beaconId" json:"beacon_id,omitempty"`
}

func (x *CParties_JoinParty_Request) Reset() {
	*x = CParties_JoinParty_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_parties_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParties_JoinParty_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParties_JoinParty_Request) ProtoMessage() {}

func (x *CParties_JoinParty_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_parties_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParties_JoinParty_Request.ProtoReflect.Descriptor instead.
func (*CParties_JoinParty_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_parties_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CParties_JoinParty_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CParties_JoinParty_Request) GetBeaconId() uint64 {
	if x != nil && x.BeaconId != nil {
		return *x.BeaconId
	}
	return 0
}

type CParties_JoinParty_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconId      *uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId" json:"beacon_id,omitempty"`
	ConnectString *string `protobuf:"bytes,2,opt,name=connect_string,json=connectString" json:"connect_string,omitempty"`
}

func (x *CParties_JoinParty_Response) Reset() {
	*x = CParties_JoinParty_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_parties_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParties_JoinParty_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParties_JoinParty_Response) ProtoMessage() {}

func (x *CParties_JoinParty_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_parties_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParties_JoinParty_Response.ProtoReflect.Descriptor instead.
func (*CParties_JoinParty_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_parties_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CParties_JoinParty_Response) GetBeaconId() uint64 {
	if x != nil && x.BeaconId != nil {
		return *x.BeaconId
	}
	return 0
}

func (x *CParties_JoinParty_Response) GetConnectString() string {
	if x != nil && x.ConnectString != nil {
		return *x.ConnectString
	}
	return ""
}

type CParties_BeaconLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocationType *uint32 `protobuf:"varint,1,opt,name=location_type,json=locationType" json:"location_type,omitempty"`
	LocationId   *uint64 `protobuf:"varint,2,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
}

func (x *CParties_BeaconLocation) Reset() {
	*x = CParties_BeaconLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_parties_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParties_BeaconLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParties_BeaconLocation) ProtoMessage() {}

func (x *CParties_BeaconLocation) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_parties_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParties_BeaconLocation.ProtoReflect.Descriptor instead.
func (*CParties_BeaconLocation) Descriptor() ([]byte, []int) {
	return file_steammessages_parties_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CParties_BeaconLocation) GetLocationType() uint32 {
	if x != nil && x.LocationType != nil {
		return *x.LocationType
	}
	return 0
}

func (x *CParties_BeaconLocation) GetLocationId() uint64 {
	if x != nil && x.LocationId != nil {
		return *x.LocationId
	}
	return 0
}

type CParties_CreateBeacon_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid         *uint32                    `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	NumOpenSlots  *uint32                    `protobuf:"varint,2,opt,name=num_open_slots,json=numOpenSlots" json:"num_open_slots,omitempty"`
	Locations     []*CParties_BeaconLocation `protobuf:"bytes,3,rep,name=locations" json:"locations,omitempty"`
	ConnectString *string                    `protobuf:"bytes,4,opt,name=connect_string,json=connectString" json:"connect_string,omitempty"`
	Metadata      *string                    `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"`
}

func (x *CParties_CreateBeacon_Request) Reset() {
	*x = CParties_CreateBeacon_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_parties_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParties_CreateBeacon_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParties_CreateBeacon_Request) ProtoMessage() {}

func (x *CParties_CreateBeacon_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_parties_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParties_CreateBeacon_Request.ProtoReflect.Descriptor instead.
func (*CParties_CreateBeacon_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_parties_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CParties_CreateBeacon_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CParties_CreateBeacon_Request) GetNumOpenSlots() uint32 {
	if x != nil && x.NumOpenSlots != nil {
		return *x.NumOpenSlots
	}
	return 0
}

func (x *CParties_CreateBeacon_Request) GetLocations() []*CParties_BeaconLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *CParties_CreateBeacon_Request) GetConnectString() string {
	if x != nil && x.ConnectString != nil {
		return *x.ConnectString
	}
	return ""
}

func (x *CParties_CreateBeacon_Request) GetMetadata() string {
	if x != nil && x.Metadata != nil {
		return *x.Metadata
	}
	return ""
}

type CParties_CreateBeacon_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconId *uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId" json:"beacon_id,omitempty"`
}

func (x *CParties_CreateBeacon_Response) Reset() {
	*x = CParties_CreateBeacon_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_parties_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParties_CreateBeacon_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParties_CreateBeacon_Response) ProtoMessage() {}

func (x *CParties_CreateBeacon_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_parties_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParties_CreateBeacon_Response.ProtoReflect.Descriptor instead.
func (*CParties_CreateBeacon_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_parties_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CParties_CreateBeacon_Response) GetBeaconId() uint64 {
	if x != nil && x.BeaconId != nil {
		return *x.BeaconId
	}
	return 0
}

type CParties_OnReservationCompleted_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconId    *uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId" json:"beacon_id,omitempty"`
	UserSteamid *uint64 `protobuf:"fixed64,2,opt,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
}

func (x *CParties_OnReservationCompleted_Request) Reset() {
	*x = CParties_OnReservationCompleted_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_parties_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParties_OnReservationCompleted_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParties_OnReservationCompleted_Request) ProtoMessage() {}

func (x *CParties_OnReservationCompleted_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_parties_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParties_OnReservationCompleted_Request.ProtoReflect.Descriptor instead.
func (*CParties_OnReservationCompleted_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_parties_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CParties_OnReservationCompleted_Request) GetBeaconId() uint64 {
	if x != nil && x.BeaconId != nil {
		return *x.BeaconId
	}
	return 0
}

func (x *CParties_OnReservationCompleted_Request) GetUserSteamid() uint64 {
	if x != nil && x.UserSteamid != nil {
		return *x.UserSteamid
	}
	return 0
}

type CParties_OnReservationCompleted_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconId *uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId" json:"beacon_id,omitempty"`
}

func (x *CParties_OnReservationCompleted_Response) Reset() {
	*x = CParties_OnReservationCompleted_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_parties_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParties_OnReservationCompleted_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParties_OnReservationCompleted_Response) ProtoMessage() {}

func (x *CParties_OnReservationCompleted_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_parties_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParties_OnReservationCompleted_Response.ProtoReflect.Descriptor instead.
func (*CParties_OnReservationCompleted_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_parties_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CParties_OnReservationCompleted_Response) GetBeaconId() uint64 {
	if x != nil && x.BeaconId != nil {
		return *x.BeaconId
	}
	return 0
}

type CParties_CancelReservation_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconId    *uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId" json:"beacon_id,omitempty"`
	UserSteamid *uint64 `protobuf:"fixed64,2,opt,name=user_steamid,json=userSteamid" json:"user_steamid,omitempty"`
}

func (x *CParties_CancelReservation_Request) Reset() {
	*x = CParties_CancelReservation_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_parties_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParties_CancelReservation_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParties_CancelReservation_Request) ProtoMessage() {}

func (x *CParties_CancelReservation_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_parties_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParties_CancelReservation_Request.ProtoReflect.Descriptor instead.
func (*CParties_CancelReservation_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_parties_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CParties_CancelReservation_Request) GetBeaconId() uint64 {
	if x != nil && x.BeaconId != nil {
		return *x.BeaconId
	}
	return 0
}

func (x *CParties_CancelReservation_Request) GetUserSteamid() uint64 {
	if x != nil && x.UserSteamid != nil {
		return *x.UserSteamid
	}
	return 0
}

type CParties_CancelReservation_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconId *uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId" json:"beacon_id,omitempty"`
}

func (x *CParties_CancelReservation_Response) Reset() {
	*x = CParties_CancelReservation_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_parties_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParties_CancelReservation_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParties_CancelReservation_Response) ProtoMessage() {}

func (x *CParties_CancelReservation_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_parties_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParties_CancelReservation_Response.ProtoReflect.Descriptor instead.
func (*CParties_CancelReservation_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_parties_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CParties_CancelReservation_Response) GetBeaconId() uint64 {
	if x != nil && x.BeaconId != nil {
		return *x.BeaconId
	}
	return 0
}

type CParties_ChangeNumOpenSlots_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconId     *uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId" json:"beacon_id,omitempty"`
	NumOpenSlots *uint32 `protobuf:"varint,2,opt,name=num_open_slots,json=numOpenSlots" json:"num_open_slots,omitempty"`
}

func (x *CParties_ChangeNumOpenSlots_Request) Reset() {
	*x = CParties_ChangeNumOpenSlots_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_parties_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParties_ChangeNumOpenSlots_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParties_ChangeNumOpenSlots_Request) ProtoMessage() {}

func (x *CParties_ChangeNumOpenSlots_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_parties_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParties_ChangeNumOpenSlots_Request.ProtoReflect.Descriptor instead.
func (*CParties_ChangeNumOpenSlots_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_parties_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CParties_ChangeNumOpenSlots_Request) GetBeaconId() uint64 {
	if x != nil && x.BeaconId != nil {
		return *x.BeaconId
	}
	return 0
}

func (x *CParties_ChangeNumOpenSlots_Request) GetNumOpenSlots() uint32 {
	if x != nil && x.NumOpenSlots != nil {
		return *x.NumOpenSlots
	}
	return 0
}

type CParties_ChangeNumOpenSlots_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconId *uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId" json:"beacon_id,omitempty"`
}

func (x *CParties_ChangeNumOpenSlots_Response) Reset() {
	*x = CParties_ChangeNumOpenSlots_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_parties_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParties_ChangeNumOpenSlots_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParties_ChangeNumOpenSlots_Response) ProtoMessage() {}

func (x *CParties_ChangeNumOpenSlots_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_parties_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParties_ChangeNumOpenSlots_Response.ProtoReflect.Descriptor instead.
func (*CParties_ChangeNumOpenSlots_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_parties_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CParties_ChangeNumOpenSlots_Response) GetBeaconId() uint64 {
	if x != nil && x.BeaconId != nil {
		return *x.BeaconId
	}
	return 0
}

type CParties_DestroyBeacon_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconId *uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId" json:"beacon_id,omitempty"`
}

func (x *CParties_DestroyBeacon_Request) Reset() {
	*x = CParties_DestroyBeacon_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_parties_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParties_DestroyBeacon_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParties_DestroyBeacon_Request) ProtoMessage() {}

func (x *CParties_DestroyBeacon_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_parties_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParties_DestroyBeacon_Request.ProtoReflect.Descriptor instead.
func (*CParties_DestroyBeacon_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_parties_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CParties_DestroyBeacon_Request) GetBeaconId() uint64 {
	if x != nil && x.BeaconId != nil {
		return *x.BeaconId
	}
	return 0
}

type CParties_DestroyBeacon_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeaconId *uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId" json:"beacon_id,omitempty"`
}

func (x *CParties_DestroyBeacon_Response) Reset() {
	*x = CParties_DestroyBeacon_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_parties_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CParties_DestroyBeacon_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CParties_DestroyBeacon_Response) ProtoMessage() {}

func (x *CParties_DestroyBeacon_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_parties_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CParties_DestroyBeacon_Response.ProtoReflect.Descriptor instead.
func (*CParties_DestroyBeacon_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_parties_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CParties_DestroyBeacon_Response) GetBeaconId() uint64 {
	if x != nil && x.BeaconId != nil {
		return *x.BeaconId
	}
	return 0
}

var File_steammessages_parties_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_parties_steamclient_proto_rawDesc = []byte{
	0x0a, 0x27, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x53, 0x0a, 0x1a, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x4a, 0x6f,
	0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x1b, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x5f, 0x0a, 0x17, 0x43, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x1d, 0x43,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x4f,
	0x70, 0x65, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x1e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x69, 0x0a, 0x27, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x4f,
	0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x47, 0x0a,
	0x28, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x22, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x23,
	0x43, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x68, 0x0a, 0x23, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x75,
	0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x43, 0x0a, 0x24, 0x43, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x3d, 0x0a, 0x1e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3e,
	0x0a, 0x1f, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x32, 0xd9,
	0x07, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x09, 0x4a,
	0x6f, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1b, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x71, 0x82, 0xb5, 0x18, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x74, 0x6f, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x20, 0x76, 0x69, 0x61, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x20, 0x49, 0x44, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x2c, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65,
	0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x63, 0x65, 0x73,
	0x73, 0x61, 0x72, 0x79, 0x20, 0x27, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x27, 0x20, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x12, 0x85, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xb5, 0x18, 0x30, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x74, 0x74, 0x72, 0x61, 0x63, 0x74, 0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20,
	0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x12, 0xb7,
	0x01, 0x0a, 0x16, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x28, 0x2e, 0x43, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x5f, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x4f,
	0x6e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48,
	0x82, 0xb5, 0x18, 0x44, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x61, 0x20, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x68, 0x61, 0x73, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79,
	0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x12, 0xbe, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x82, 0xb5, 0x18, 0x5a, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65,
	0x72, 0x20, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x75,
	0x70, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x12, 0x86, 0x01, 0x0a, 0x12, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x73,
	0x12, 0x24, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x53,
	0x6c, 0x6f, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82,
	0xb5, 0x18, 0x1f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x20, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x12, 0x6a, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x43, 0x50, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xb5, 0x18, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x1a, 0x1a,
	0x82, 0xb5, 0x18, 0x16, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x40, 0x42, 0x24, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_parties_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_parties_steamclient_proto_rawDescData = file_steammessages_parties_steamclient_proto_rawDesc
)

func file_steammessages_parties_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_parties_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_parties_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_parties_steamclient_proto_rawDescData)
	})
	return file_steammessages_parties_steamclient_proto_rawDescData
}

var file_steammessages_parties_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_steammessages_parties_steamclient_proto_goTypes = []interface{}{
	(*CParties_JoinParty_Request)(nil),               // 0: CParties_JoinParty_Request
	(*CParties_JoinParty_Response)(nil),              // 1: CParties_JoinParty_Response
	(*CParties_BeaconLocation)(nil),                  // 2: CParties_BeaconLocation
	(*CParties_CreateBeacon_Request)(nil),            // 3: CParties_CreateBeacon_Request
	(*CParties_CreateBeacon_Response)(nil),           // 4: CParties_CreateBeacon_Response
	(*CParties_OnReservationCompleted_Request)(nil),  // 5: CParties_OnReservationCompleted_Request
	(*CParties_OnReservationCompleted_Response)(nil), // 6: CParties_OnReservationCompleted_Response
	(*CParties_CancelReservation_Request)(nil),       // 7: CParties_CancelReservation_Request
	(*CParties_CancelReservation_Response)(nil),      // 8: CParties_CancelReservation_Response
	(*CParties_ChangeNumOpenSlots_Request)(nil),      // 9: CParties_ChangeNumOpenSlots_Request
	(*CParties_ChangeNumOpenSlots_Response)(nil),     // 10: CParties_ChangeNumOpenSlots_Response
	(*CParties_DestroyBeacon_Request)(nil),           // 11: CParties_DestroyBeacon_Request
	(*CParties_DestroyBeacon_Response)(nil),          // 12: CParties_DestroyBeacon_Response
}
var file_steammessages_parties_steamclient_proto_depIdxs = []int32{
	2,  // 0: CParties_CreateBeacon_Request.locations:type_name -> CParties_BeaconLocation
	0,  // 1: Parties.JoinParty:input_type -> CParties_JoinParty_Request
	3,  // 2: Parties.CreateBeacon:input_type -> CParties_CreateBeacon_Request
	5,  // 3: Parties.OnReservationCompleted:input_type -> CParties_OnReservationCompleted_Request
	7,  // 4: Parties.CancelReservation:input_type -> CParties_CancelReservation_Request
	9,  // 5: Parties.ChangeNumOpenSlots:input_type -> CParties_ChangeNumOpenSlots_Request
	11, // 6: Parties.DestroyBeacon:input_type -> CParties_DestroyBeacon_Request
	1,  // 7: Parties.JoinParty:output_type -> CParties_JoinParty_Response
	4,  // 8: Parties.CreateBeacon:output_type -> CParties_CreateBeacon_Response
	6,  // 9: Parties.OnReservationCompleted:output_type -> CParties_OnReservationCompleted_Response
	8,  // 10: Parties.CancelReservation:output_type -> CParties_CancelReservation_Response
	10, // 11: Parties.ChangeNumOpenSlots:output_type -> CParties_ChangeNumOpenSlots_Response
	12, // 12: Parties.DestroyBeacon:output_type -> CParties_DestroyBeacon_Response
	7,  // [7:13] is the sub-list for method output_type
	1,  // [1:7] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_steammessages_parties_steamclient_proto_init() }
func file_steammessages_parties_steamclient_proto_init() {
	if File_steammessages_parties_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_parties_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParties_JoinParty_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_parties_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParties_JoinParty_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_parties_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParties_BeaconLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_parties_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParties_CreateBeacon_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_parties_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParties_CreateBeacon_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_parties_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParties_OnReservationCompleted_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_parties_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParties_OnReservationCompleted_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_parties_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParties_CancelReservation_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_parties_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParties_CancelReservation_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_parties_steamclient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParties_ChangeNumOpenSlots_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_parties_steamclient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParties_ChangeNumOpenSlots_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_parties_steamclient_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParties_DestroyBeacon_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_parties_steamclient_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CParties_DestroyBeacon_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_parties_steamclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_parties_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_parties_steamclient_proto_depIdxs,
		MessageInfos:      file_steammessages_parties_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_parties_steamclient_proto = out.File
	file_steammessages_parties_steamclient_proto_rawDesc = nil
	file_steammessages_parties_steamclient_proto_goTypes = nil
	file_steammessages_parties_steamclient_proto_depIdxs = nil
}
