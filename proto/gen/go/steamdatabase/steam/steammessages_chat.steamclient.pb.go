// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: steammessages_chat.steamclient.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EChatRoomJoinState int32

const (
	EChatRoomJoinState_k_EChatRoomJoinState_Default     EChatRoomJoinState = 0
	EChatRoomJoinState_k_EChatRoomJoinState_None        EChatRoomJoinState = 1
	EChatRoomJoinState_k_EChatRoomJoinState_Joined      EChatRoomJoinState = 2
	EChatRoomJoinState_k_EChatRoomJoinState_TestInvalid EChatRoomJoinState = 99
)

// Enum value maps for EChatRoomJoinState.
var (
	EChatRoomJoinState_name = map[int32]string{
		0:  "k_EChatRoomJoinState_Default",
		1:  "k_EChatRoomJoinState_None",
		2:  "k_EChatRoomJoinState_Joined",
		99: "k_EChatRoomJoinState_TestInvalid",
	}
	EChatRoomJoinState_value = map[string]int32{
		"k_EChatRoomJoinState_Default":     0,
		"k_EChatRoomJoinState_None":        1,
		"k_EChatRoomJoinState_Joined":      2,
		"k_EChatRoomJoinState_TestInvalid": 99,
	}
)

func (x EChatRoomJoinState) Enum() *EChatRoomJoinState {
	p := new(EChatRoomJoinState)
	*p = x
	return p
}

func (x EChatRoomJoinState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EChatRoomJoinState) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_chat_steamclient_proto_enumTypes[0].Descriptor()
}

func (EChatRoomJoinState) Type() protoreflect.EnumType {
	return &file_steammessages_chat_steamclient_proto_enumTypes[0]
}

func (x EChatRoomJoinState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EChatRoomJoinState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EChatRoomJoinState(num)
	return nil
}

// Deprecated: Use EChatRoomJoinState.Descriptor instead.
func (EChatRoomJoinState) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{0}
}

type EChatRoomGroupRank int32

const (
	EChatRoomGroupRank_k_EChatRoomGroupRank_Default     EChatRoomGroupRank = 0
	EChatRoomGroupRank_k_EChatRoomGroupRank_Viewer      EChatRoomGroupRank = 10
	EChatRoomGroupRank_k_EChatRoomGroupRank_Guest       EChatRoomGroupRank = 15
	EChatRoomGroupRank_k_EChatRoomGroupRank_Member      EChatRoomGroupRank = 20
	EChatRoomGroupRank_k_EChatRoomGroupRank_Moderator   EChatRoomGroupRank = 30
	EChatRoomGroupRank_k_EChatRoomGroupRank_Officer     EChatRoomGroupRank = 40
	EChatRoomGroupRank_k_EChatRoomGroupRank_Owner       EChatRoomGroupRank = 50
	EChatRoomGroupRank_k_EChatRoomGroupRank_TestInvalid EChatRoomGroupRank = 99
)

// Enum value maps for EChatRoomGroupRank.
var (
	EChatRoomGroupRank_name = map[int32]string{
		0:  "k_EChatRoomGroupRank_Default",
		10: "k_EChatRoomGroupRank_Viewer",
		15: "k_EChatRoomGroupRank_Guest",
		20: "k_EChatRoomGroupRank_Member",
		30: "k_EChatRoomGroupRank_Moderator",
		40: "k_EChatRoomGroupRank_Officer",
		50: "k_EChatRoomGroupRank_Owner",
		99: "k_EChatRoomGroupRank_TestInvalid",
	}
	EChatRoomGroupRank_value = map[string]int32{
		"k_EChatRoomGroupRank_Default":     0,
		"k_EChatRoomGroupRank_Viewer":      10,
		"k_EChatRoomGroupRank_Guest":       15,
		"k_EChatRoomGroupRank_Member":      20,
		"k_EChatRoomGroupRank_Moderator":   30,
		"k_EChatRoomGroupRank_Officer":     40,
		"k_EChatRoomGroupRank_Owner":       50,
		"k_EChatRoomGroupRank_TestInvalid": 99,
	}
)

func (x EChatRoomGroupRank) Enum() *EChatRoomGroupRank {
	p := new(EChatRoomGroupRank)
	*p = x
	return p
}

func (x EChatRoomGroupRank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EChatRoomGroupRank) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_chat_steamclient_proto_enumTypes[1].Descriptor()
}

func (EChatRoomGroupRank) Type() protoreflect.EnumType {
	return &file_steammessages_chat_steamclient_proto_enumTypes[1]
}

func (x EChatRoomGroupRank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EChatRoomGroupRank) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EChatRoomGroupRank(num)
	return nil
}

// Deprecated: Use EChatRoomGroupRank.Descriptor instead.
func (EChatRoomGroupRank) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{1}
}

type EChatRoomNotificationLevel int32

const (
	EChatRoomNotificationLevel_k_EChatroomNotificationLevel_Invalid     EChatRoomNotificationLevel = 0
	EChatRoomNotificationLevel_k_EChatroomNotificationLevel_None        EChatRoomNotificationLevel = 1
	EChatRoomNotificationLevel_k_EChatroomNotificationLevel_MentionMe   EChatRoomNotificationLevel = 2
	EChatRoomNotificationLevel_k_EChatroomNotificationLevel_MentionAll  EChatRoomNotificationLevel = 3
	EChatRoomNotificationLevel_k_EChatroomNotificationLevel_AllMessages EChatRoomNotificationLevel = 4
)

// Enum value maps for EChatRoomNotificationLevel.
var (
	EChatRoomNotificationLevel_name = map[int32]string{
		0: "k_EChatroomNotificationLevel_Invalid",
		1: "k_EChatroomNotificationLevel_None",
		2: "k_EChatroomNotificationLevel_MentionMe",
		3: "k_EChatroomNotificationLevel_MentionAll",
		4: "k_EChatroomNotificationLevel_AllMessages",
	}
	EChatRoomNotificationLevel_value = map[string]int32{
		"k_EChatroomNotificationLevel_Invalid":     0,
		"k_EChatroomNotificationLevel_None":        1,
		"k_EChatroomNotificationLevel_MentionMe":   2,
		"k_EChatroomNotificationLevel_MentionAll":  3,
		"k_EChatroomNotificationLevel_AllMessages": 4,
	}
)

func (x EChatRoomNotificationLevel) Enum() *EChatRoomNotificationLevel {
	p := new(EChatRoomNotificationLevel)
	*p = x
	return p
}

func (x EChatRoomNotificationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EChatRoomNotificationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_chat_steamclient_proto_enumTypes[2].Descriptor()
}

func (EChatRoomNotificationLevel) Type() protoreflect.EnumType {
	return &file_steammessages_chat_steamclient_proto_enumTypes[2]
}

func (x EChatRoomNotificationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EChatRoomNotificationLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EChatRoomNotificationLevel(num)
	return nil
}

// Deprecated: Use EChatRoomNotificationLevel.Descriptor instead.
func (EChatRoomNotificationLevel) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{2}
}

type EChatRoomServerMessage int32

const (
	EChatRoomServerMessage_k_EChatRoomServerMsg_Invalid                EChatRoomServerMessage = 0
	EChatRoomServerMessage_k_EChatRoomServerMsg_RenameChatRoom         EChatRoomServerMessage = 1
	EChatRoomServerMessage_k_EChatRoomServerMsg_Joined                 EChatRoomServerMessage = 2
	EChatRoomServerMessage_k_EChatRoomServerMsg_Parted                 EChatRoomServerMessage = 3
	EChatRoomServerMessage_k_EChatRoomServerMsg_Kicked                 EChatRoomServerMessage = 4
	EChatRoomServerMessage_k_EChatRoomServerMsg_Invited                EChatRoomServerMessage = 5
	EChatRoomServerMessage_k_EChatRoomServerMsg_InviteDismissed        EChatRoomServerMessage = 8
	EChatRoomServerMessage_k_EChatRoomServerMsg_ChatRoomTaglineChanged EChatRoomServerMessage = 9
	EChatRoomServerMessage_k_EChatRoomServerMsg_ChatRoomAvatarChanged  EChatRoomServerMessage = 10
	EChatRoomServerMessage_k_EChatRoomServerMsg_AppCustom              EChatRoomServerMessage = 11
)

// Enum value maps for EChatRoomServerMessage.
var (
	EChatRoomServerMessage_name = map[int32]string{
		0:  "k_EChatRoomServerMsg_Invalid",
		1:  "k_EChatRoomServerMsg_RenameChatRoom",
		2:  "k_EChatRoomServerMsg_Joined",
		3:  "k_EChatRoomServerMsg_Parted",
		4:  "k_EChatRoomServerMsg_Kicked",
		5:  "k_EChatRoomServerMsg_Invited",
		8:  "k_EChatRoomServerMsg_InviteDismissed",
		9:  "k_EChatRoomServerMsg_ChatRoomTaglineChanged",
		10: "k_EChatRoomServerMsg_ChatRoomAvatarChanged",
		11: "k_EChatRoomServerMsg_AppCustom",
	}
	EChatRoomServerMessage_value = map[string]int32{
		"k_EChatRoomServerMsg_Invalid":                0,
		"k_EChatRoomServerMsg_RenameChatRoom":         1,
		"k_EChatRoomServerMsg_Joined":                 2,
		"k_EChatRoomServerMsg_Parted":                 3,
		"k_EChatRoomServerMsg_Kicked":                 4,
		"k_EChatRoomServerMsg_Invited":                5,
		"k_EChatRoomServerMsg_InviteDismissed":        8,
		"k_EChatRoomServerMsg_ChatRoomTaglineChanged": 9,
		"k_EChatRoomServerMsg_ChatRoomAvatarChanged":  10,
		"k_EChatRoomServerMsg_AppCustom":              11,
	}
)

func (x EChatRoomServerMessage) Enum() *EChatRoomServerMessage {
	p := new(EChatRoomServerMessage)
	*p = x
	return p
}

func (x EChatRoomServerMessage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EChatRoomServerMessage) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_chat_steamclient_proto_enumTypes[3].Descriptor()
}

func (EChatRoomServerMessage) Type() protoreflect.EnumType {
	return &file_steammessages_chat_steamclient_proto_enumTypes[3]
}

func (x EChatRoomServerMessage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EChatRoomServerMessage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EChatRoomServerMessage(num)
	return nil
}

// Deprecated: Use EChatRoomServerMessage.Descriptor instead.
func (EChatRoomServerMessage) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{3}
}

type EChatRoomMessageReactionType int32

const (
	EChatRoomMessageReactionType_k_EChatRoomMessageReactionType_Invalid  EChatRoomMessageReactionType = 0
	EChatRoomMessageReactionType_k_EChatRoomMessageReactionType_Emoticon EChatRoomMessageReactionType = 1
	EChatRoomMessageReactionType_k_EChatRoomMessageReactionType_Sticker  EChatRoomMessageReactionType = 2
)

// Enum value maps for EChatRoomMessageReactionType.
var (
	EChatRoomMessageReactionType_name = map[int32]string{
		0: "k_EChatRoomMessageReactionType_Invalid",
		1: "k_EChatRoomMessageReactionType_Emoticon",
		2: "k_EChatRoomMessageReactionType_Sticker",
	}
	EChatRoomMessageReactionType_value = map[string]int32{
		"k_EChatRoomMessageReactionType_Invalid":  0,
		"k_EChatRoomMessageReactionType_Emoticon": 1,
		"k_EChatRoomMessageReactionType_Sticker":  2,
	}
)

func (x EChatRoomMessageReactionType) Enum() *EChatRoomMessageReactionType {
	p := new(EChatRoomMessageReactionType)
	*p = x
	return p
}

func (x EChatRoomMessageReactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EChatRoomMessageReactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_chat_steamclient_proto_enumTypes[4].Descriptor()
}

func (EChatRoomMessageReactionType) Type() protoreflect.EnumType {
	return &file_steammessages_chat_steamclient_proto_enumTypes[4]
}

func (x EChatRoomMessageReactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EChatRoomMessageReactionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EChatRoomMessageReactionType(num)
	return nil
}

// Deprecated: Use EChatRoomMessageReactionType.Descriptor instead.
func (EChatRoomMessageReactionType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{4}
}

type EChatRoomMemberStateChange int32

const (
	EChatRoomMemberStateChange_k_EChatRoomMemberStateChange_Invalid         EChatRoomMemberStateChange = 0
	EChatRoomMemberStateChange_k_EChatRoomMemberStateChange_Joined          EChatRoomMemberStateChange = 1
	EChatRoomMemberStateChange_k_EChatRoomMemberStateChange_Parted          EChatRoomMemberStateChange = 2
	EChatRoomMemberStateChange_k_EChatRoomMemberStateChange_Kicked          EChatRoomMemberStateChange = 3
	EChatRoomMemberStateChange_k_EChatRoomMemberStateChange_Invited         EChatRoomMemberStateChange = 4
	EChatRoomMemberStateChange_k_EChatRoomMemberStateChange_RankChanged     EChatRoomMemberStateChange = 7
	EChatRoomMemberStateChange_k_EChatRoomMemberStateChange_InviteDismissed EChatRoomMemberStateChange = 8
	EChatRoomMemberStateChange_k_EChatRoomMemberStateChange_Muted           EChatRoomMemberStateChange = 9
	EChatRoomMemberStateChange_k_EChatRoomMemberStateChange_Banned          EChatRoomMemberStateChange = 10
	EChatRoomMemberStateChange_k_EChatRoomMemberStateChange_RolesChanged    EChatRoomMemberStateChange = 12
)

// Enum value maps for EChatRoomMemberStateChange.
var (
	EChatRoomMemberStateChange_name = map[int32]string{
		0:  "k_EChatRoomMemberStateChange_Invalid",
		1:  "k_EChatRoomMemberStateChange_Joined",
		2:  "k_EChatRoomMemberStateChange_Parted",
		3:  "k_EChatRoomMemberStateChange_Kicked",
		4:  "k_EChatRoomMemberStateChange_Invited",
		7:  "k_EChatRoomMemberStateChange_RankChanged",
		8:  "k_EChatRoomMemberStateChange_InviteDismissed",
		9:  "k_EChatRoomMemberStateChange_Muted",
		10: "k_EChatRoomMemberStateChange_Banned",
		12: "k_EChatRoomMemberStateChange_RolesChanged",
	}
	EChatRoomMemberStateChange_value = map[string]int32{
		"k_EChatRoomMemberStateChange_Invalid":         0,
		"k_EChatRoomMemberStateChange_Joined":          1,
		"k_EChatRoomMemberStateChange_Parted":          2,
		"k_EChatRoomMemberStateChange_Kicked":          3,
		"k_EChatRoomMemberStateChange_Invited":         4,
		"k_EChatRoomMemberStateChange_RankChanged":     7,
		"k_EChatRoomMemberStateChange_InviteDismissed": 8,
		"k_EChatRoomMemberStateChange_Muted":           9,
		"k_EChatRoomMemberStateChange_Banned":          10,
		"k_EChatRoomMemberStateChange_RolesChanged":    12,
	}
)

func (x EChatRoomMemberStateChange) Enum() *EChatRoomMemberStateChange {
	p := new(EChatRoomMemberStateChange)
	*p = x
	return p
}

func (x EChatRoomMemberStateChange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EChatRoomMemberStateChange) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_chat_steamclient_proto_enumTypes[5].Descriptor()
}

func (EChatRoomMemberStateChange) Type() protoreflect.EnumType {
	return &file_steammessages_chat_steamclient_proto_enumTypes[5]
}

func (x EChatRoomMemberStateChange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EChatRoomMemberStateChange) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EChatRoomMemberStateChange(num)
	return nil
}

// Deprecated: Use EChatRoomMemberStateChange.Descriptor instead.
func (EChatRoomMemberStateChange) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{5}
}

type CChat_RequestFriendPersonaStates_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChat_RequestFriendPersonaStates_Request) Reset() {
	*x = CChat_RequestFriendPersonaStates_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChat_RequestFriendPersonaStates_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChat_RequestFriendPersonaStates_Request) ProtoMessage() {}

func (x *CChat_RequestFriendPersonaStates_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChat_RequestFriendPersonaStates_Request.ProtoReflect.Descriptor instead.
func (*CChat_RequestFriendPersonaStates_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{0}
}

type CChat_RequestFriendPersonaStates_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChat_RequestFriendPersonaStates_Response) Reset() {
	*x = CChat_RequestFriendPersonaStates_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChat_RequestFriendPersonaStates_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChat_RequestFriendPersonaStates_Response) ProtoMessage() {}

func (x *CChat_RequestFriendPersonaStates_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChat_RequestFriendPersonaStates_Response.ProtoReflect.Descriptor instead.
func (*CChat_RequestFriendPersonaStates_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{1}
}

type CChatRoom_CreateChatRoomGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidPartner             *uint64  `protobuf:"fixed64,1,opt,name=steamid_partner,json=steamidPartner" json:"steamid_partner,omitempty"`
	SteamidInvited             *uint64  `protobuf:"fixed64,2,opt,name=steamid_invited,json=steamidInvited" json:"steamid_invited,omitempty"`
	Name                       *string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	SteamidInvitees            []uint64 `protobuf:"fixed64,4,rep,name=steamid_invitees,json=steamidInvitees" json:"steamid_invitees,omitempty"`
	WatchingBroadcastAccountid *uint32  `protobuf:"varint,6,opt,name=watching_broadcast_accountid,json=watchingBroadcastAccountid" json:"watching_broadcast_accountid,omitempty"`
	WatchingBroadcastChannelId *uint64  `protobuf:"varint,7,opt,name=watching_broadcast_channel_id,json=watchingBroadcastChannelId" json:"watching_broadcast_channel_id,omitempty"`
}

func (x *CChatRoom_CreateChatRoomGroup_Request) Reset() {
	*x = CChatRoom_CreateChatRoomGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_CreateChatRoomGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_CreateChatRoomGroup_Request) ProtoMessage() {}

func (x *CChatRoom_CreateChatRoomGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_CreateChatRoomGroup_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_CreateChatRoomGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CChatRoom_CreateChatRoomGroup_Request) GetSteamidPartner() uint64 {
	if x != nil && x.SteamidPartner != nil {
		return *x.SteamidPartner
	}
	return 0
}

func (x *CChatRoom_CreateChatRoomGroup_Request) GetSteamidInvited() uint64 {
	if x != nil && x.SteamidInvited != nil {
		return *x.SteamidInvited
	}
	return 0
}

func (x *CChatRoom_CreateChatRoomGroup_Request) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CChatRoom_CreateChatRoomGroup_Request) GetSteamidInvitees() []uint64 {
	if x != nil {
		return x.SteamidInvitees
	}
	return nil
}

func (x *CChatRoom_CreateChatRoomGroup_Request) GetWatchingBroadcastAccountid() uint32 {
	if x != nil && x.WatchingBroadcastAccountid != nil {
		return *x.WatchingBroadcastAccountid
	}
	return 0
}

func (x *CChatRoom_CreateChatRoomGroup_Request) GetWatchingBroadcastChannelId() uint64 {
	if x != nil && x.WatchingBroadcastChannelId != nil {
		return *x.WatchingBroadcastChannelId
	}
	return 0
}

type CChatRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId  *uint64 `protobuf:"varint,1,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
	Name    *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Ordinal *uint32 `protobuf:"varint,3,opt,name=ordinal" json:"ordinal,omitempty"`
}

func (x *CChatRole) Reset() {
	*x = CChatRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRole) ProtoMessage() {}

func (x *CChatRole) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRole.ProtoReflect.Descriptor instead.
func (*CChatRole) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CChatRole) GetRoleId() uint64 {
	if x != nil && x.RoleId != nil {
		return *x.RoleId
	}
	return 0
}

func (x *CChatRole) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CChatRole) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

type CChatRoleActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleId                       *uint64 `protobuf:"varint,1,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
	CanCreateRenameDeleteChannel *bool   `protobuf:"varint,2,opt,name=can_create_rename_delete_channel,json=canCreateRenameDeleteChannel" json:"can_create_rename_delete_channel,omitempty"`
	CanKick                      *bool   `protobuf:"varint,3,opt,name=can_kick,json=canKick" json:"can_kick,omitempty"`
	CanBan                       *bool   `protobuf:"varint,4,opt,name=can_ban,json=canBan" json:"can_ban,omitempty"`
	CanInvite                    *bool   `protobuf:"varint,5,opt,name=can_invite,json=canInvite" json:"can_invite,omitempty"`
	CanChangeTaglineAvatarName   *bool   `protobuf:"varint,6,opt,name=can_change_tagline_avatar_name,json=canChangeTaglineAvatarName" json:"can_change_tagline_avatar_name,omitempty"`
	CanChat                      *bool   `protobuf:"varint,7,opt,name=can_chat,json=canChat" json:"can_chat,omitempty"`
	CanViewHistory               *bool   `protobuf:"varint,8,opt,name=can_view_history,json=canViewHistory" json:"can_view_history,omitempty"`
	CanChangeGroupRoles          *bool   `protobuf:"varint,9,opt,name=can_change_group_roles,json=canChangeGroupRoles" json:"can_change_group_roles,omitempty"`
	CanChangeUserRoles           *bool   `protobuf:"varint,10,opt,name=can_change_user_roles,json=canChangeUserRoles" json:"can_change_user_roles,omitempty"`
	CanMentionAll                *bool   `protobuf:"varint,11,opt,name=can_mention_all,json=canMentionAll" json:"can_mention_all,omitempty"`
	CanSetWatchingBroadcast      *bool   `protobuf:"varint,12,opt,name=can_set_watching_broadcast,json=canSetWatchingBroadcast" json:"can_set_watching_broadcast,omitempty"`
}

func (x *CChatRoleActions) Reset() {
	*x = CChatRoleActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoleActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoleActions) ProtoMessage() {}

func (x *CChatRoleActions) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoleActions.ProtoReflect.Descriptor instead.
func (*CChatRoleActions) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CChatRoleActions) GetRoleId() uint64 {
	if x != nil && x.RoleId != nil {
		return *x.RoleId
	}
	return 0
}

func (x *CChatRoleActions) GetCanCreateRenameDeleteChannel() bool {
	if x != nil && x.CanCreateRenameDeleteChannel != nil {
		return *x.CanCreateRenameDeleteChannel
	}
	return false
}

func (x *CChatRoleActions) GetCanKick() bool {
	if x != nil && x.CanKick != nil {
		return *x.CanKick
	}
	return false
}

func (x *CChatRoleActions) GetCanBan() bool {
	if x != nil && x.CanBan != nil {
		return *x.CanBan
	}
	return false
}

func (x *CChatRoleActions) GetCanInvite() bool {
	if x != nil && x.CanInvite != nil {
		return *x.CanInvite
	}
	return false
}

func (x *CChatRoleActions) GetCanChangeTaglineAvatarName() bool {
	if x != nil && x.CanChangeTaglineAvatarName != nil {
		return *x.CanChangeTaglineAvatarName
	}
	return false
}

func (x *CChatRoleActions) GetCanChat() bool {
	if x != nil && x.CanChat != nil {
		return *x.CanChat
	}
	return false
}

func (x *CChatRoleActions) GetCanViewHistory() bool {
	if x != nil && x.CanViewHistory != nil {
		return *x.CanViewHistory
	}
	return false
}

func (x *CChatRoleActions) GetCanChangeGroupRoles() bool {
	if x != nil && x.CanChangeGroupRoles != nil {
		return *x.CanChangeGroupRoles
	}
	return false
}

func (x *CChatRoleActions) GetCanChangeUserRoles() bool {
	if x != nil && x.CanChangeUserRoles != nil {
		return *x.CanChangeUserRoles
	}
	return false
}

func (x *CChatRoleActions) GetCanMentionAll() bool {
	if x != nil && x.CanMentionAll != nil {
		return *x.CanMentionAll
	}
	return false
}

func (x *CChatRoleActions) GetCanSetWatchingBroadcast() bool {
	if x != nil && x.CanSetWatchingBroadcast != nil {
		return *x.CanSetWatchingBroadcast
	}
	return false
}

type CChatPartyBeacon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamidOwner *uint64 `protobuf:"fixed64,2,opt,name=steamid_owner,json=steamidOwner" json:"steamid_owner,omitempty"`
	BeaconId     *uint64 `protobuf:"fixed64,3,opt,name=beacon_id,json=beaconId" json:"beacon_id,omitempty"`
	GameMetadata *string `protobuf:"bytes,4,opt,name=game_metadata,json=gameMetadata" json:"game_metadata,omitempty"`
}

func (x *CChatPartyBeacon) Reset() {
	*x = CChatPartyBeacon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatPartyBeacon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatPartyBeacon) ProtoMessage() {}

func (x *CChatPartyBeacon) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatPartyBeacon.ProtoReflect.Descriptor instead.
func (*CChatPartyBeacon) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CChatPartyBeacon) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CChatPartyBeacon) GetSteamidOwner() uint64 {
	if x != nil && x.SteamidOwner != nil {
		return *x.SteamidOwner
	}
	return 0
}

func (x *CChatPartyBeacon) GetBeaconId() uint64 {
	if x != nil && x.BeaconId != nil {
		return *x.BeaconId
	}
	return 0
}

func (x *CChatPartyBeacon) GetGameMetadata() string {
	if x != nil && x.GameMetadata != nil {
		return *x.GameMetadata
	}
	return ""
}

type CChatRoomGroupHeaderState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId                *uint64             `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatName                   *string             `protobuf:"bytes,2,opt,name=chat_name,json=chatName" json:"chat_name,omitempty"`
	Clanid                     *uint32             `protobuf:"varint,13,opt,name=clanid" json:"clanid,omitempty"`
	AccountidOwner             *uint32             `protobuf:"varint,14,opt,name=accountid_owner,json=accountidOwner" json:"accountid_owner,omitempty"`
	Appid                      *uint32             `protobuf:"varint,21,opt,name=appid" json:"appid,omitempty"`
	Tagline                    *string             `protobuf:"bytes,15,opt,name=tagline" json:"tagline,omitempty"`
	AvatarSha                  []byte              `protobuf:"bytes,16,opt,name=avatar_sha,json=avatarSha" json:"avatar_sha,omitempty"`
	DefaultRoleId              *uint64             `protobuf:"varint,17,opt,name=default_role_id,json=defaultRoleId" json:"default_role_id,omitempty"`
	Roles                      []*CChatRole        `protobuf:"bytes,18,rep,name=roles" json:"roles,omitempty"`
	RoleActions                []*CChatRoleActions `protobuf:"bytes,19,rep,name=role_actions,json=roleActions" json:"role_actions,omitempty"`
	WatchingBroadcastAccountid *uint32             `protobuf:"varint,20,opt,name=watching_broadcast_accountid,json=watchingBroadcastAccountid" json:"watching_broadcast_accountid,omitempty"`
	PartyBeacons               []*CChatPartyBeacon `protobuf:"bytes,22,rep,name=party_beacons,json=partyBeacons" json:"party_beacons,omitempty"`
	WatchingBroadcastChannelId *uint64             `protobuf:"varint,23,opt,name=watching_broadcast_channel_id,json=watchingBroadcastChannelId" json:"watching_broadcast_channel_id,omitempty"`
	ActiveMinigameId           *uint64             `protobuf:"varint,24,opt,name=active_minigame_id,json=activeMinigameId" json:"active_minigame_id,omitempty"`
	AvatarUgcUrl               *string             `protobuf:"bytes,25,opt,name=avatar_ugc_url,json=avatarUgcUrl" json:"avatar_ugc_url,omitempty"`
	Disabled                   *bool               `protobuf:"varint,26,opt,name=disabled" json:"disabled,omitempty"`
}

func (x *CChatRoomGroupHeaderState) Reset() {
	*x = CChatRoomGroupHeaderState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoomGroupHeaderState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoomGroupHeaderState) ProtoMessage() {}

func (x *CChatRoomGroupHeaderState) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoomGroupHeaderState.ProtoReflect.Descriptor instead.
func (*CChatRoomGroupHeaderState) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CChatRoomGroupHeaderState) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoomGroupHeaderState) GetChatName() string {
	if x != nil && x.ChatName != nil {
		return *x.ChatName
	}
	return ""
}

func (x *CChatRoomGroupHeaderState) GetClanid() uint32 {
	if x != nil && x.Clanid != nil {
		return *x.Clanid
	}
	return 0
}

func (x *CChatRoomGroupHeaderState) GetAccountidOwner() uint32 {
	if x != nil && x.AccountidOwner != nil {
		return *x.AccountidOwner
	}
	return 0
}

func (x *CChatRoomGroupHeaderState) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CChatRoomGroupHeaderState) GetTagline() string {
	if x != nil && x.Tagline != nil {
		return *x.Tagline
	}
	return ""
}

func (x *CChatRoomGroupHeaderState) GetAvatarSha() []byte {
	if x != nil {
		return x.AvatarSha
	}
	return nil
}

func (x *CChatRoomGroupHeaderState) GetDefaultRoleId() uint64 {
	if x != nil && x.DefaultRoleId != nil {
		return *x.DefaultRoleId
	}
	return 0
}

func (x *CChatRoomGroupHeaderState) GetRoles() []*CChatRole {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *CChatRoomGroupHeaderState) GetRoleActions() []*CChatRoleActions {
	if x != nil {
		return x.RoleActions
	}
	return nil
}

func (x *CChatRoomGroupHeaderState) GetWatchingBroadcastAccountid() uint32 {
	if x != nil && x.WatchingBroadcastAccountid != nil {
		return *x.WatchingBroadcastAccountid
	}
	return 0
}

func (x *CChatRoomGroupHeaderState) GetPartyBeacons() []*CChatPartyBeacon {
	if x != nil {
		return x.PartyBeacons
	}
	return nil
}

func (x *CChatRoomGroupHeaderState) GetWatchingBroadcastChannelId() uint64 {
	if x != nil && x.WatchingBroadcastChannelId != nil {
		return *x.WatchingBroadcastChannelId
	}
	return 0
}

func (x *CChatRoomGroupHeaderState) GetActiveMinigameId() uint64 {
	if x != nil && x.ActiveMinigameId != nil {
		return *x.ActiveMinigameId
	}
	return 0
}

func (x *CChatRoomGroupHeaderState) GetAvatarUgcUrl() string {
	if x != nil && x.AvatarUgcUrl != nil {
		return *x.AvatarUgcUrl
	}
	return ""
}

func (x *CChatRoomGroupHeaderState) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

type CChatRoomMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid      *uint32             `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	State          *EChatRoomJoinState `protobuf:"varint,3,opt,name=state,enum=EChatRoomJoinState,def=0" json:"state,omitempty"`
	Rank           *EChatRoomGroupRank `protobuf:"varint,4,opt,name=rank,enum=EChatRoomGroupRank,def=0" json:"rank,omitempty"`
	TimeKickExpire *uint32             `protobuf:"varint,6,opt,name=time_kick_expire,json=timeKickExpire" json:"time_kick_expire,omitempty"`
	RoleIds        []uint64            `protobuf:"varint,7,rep,name=role_ids,json=roleIds" json:"role_ids,omitempty"`
}

// Default values for CChatRoomMember fields.
const (
	Default_CChatRoomMember_State = EChatRoomJoinState_k_EChatRoomJoinState_Default
	Default_CChatRoomMember_Rank  = EChatRoomGroupRank_k_EChatRoomGroupRank_Default
)

func (x *CChatRoomMember) Reset() {
	*x = CChatRoomMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoomMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoomMember) ProtoMessage() {}

func (x *CChatRoomMember) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoomMember.ProtoReflect.Descriptor instead.
func (*CChatRoomMember) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CChatRoomMember) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CChatRoomMember) GetState() EChatRoomJoinState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_CChatRoomMember_State
}

func (x *CChatRoomMember) GetRank() EChatRoomGroupRank {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return Default_CChatRoomMember_Rank
}

func (x *CChatRoomMember) GetTimeKickExpire() uint32 {
	if x != nil && x.TimeKickExpire != nil {
		return *x.TimeKickExpire
	}
	return 0
}

func (x *CChatRoomMember) GetRoleIds() []uint64 {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

type CChatRoomState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId               *uint64  `protobuf:"varint,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatName             *string  `protobuf:"bytes,2,opt,name=chat_name,json=chatName" json:"chat_name,omitempty"`
	VoiceAllowed         *bool    `protobuf:"varint,3,opt,name=voice_allowed,json=voiceAllowed" json:"voice_allowed,omitempty"`
	MembersInVoice       []uint32 `protobuf:"varint,4,rep,name=members_in_voice,json=membersInVoice" json:"members_in_voice,omitempty"`
	TimeLastMessage      *uint32  `protobuf:"varint,5,opt,name=time_last_message,json=timeLastMessage" json:"time_last_message,omitempty"`
	SortOrder            *uint32  `protobuf:"varint,6,opt,name=sort_order,json=sortOrder" json:"sort_order,omitempty"`
	LastMessage          *string  `protobuf:"bytes,7,opt,name=last_message,json=lastMessage" json:"last_message,omitempty"`
	AccountidLastMessage *uint32  `protobuf:"varint,8,opt,name=accountid_last_message,json=accountidLastMessage" json:"accountid_last_message,omitempty"`
}

func (x *CChatRoomState) Reset() {
	*x = CChatRoomState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoomState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoomState) ProtoMessage() {}

func (x *CChatRoomState) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoomState.ProtoReflect.Descriptor instead.
func (*CChatRoomState) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CChatRoomState) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CChatRoomState) GetChatName() string {
	if x != nil && x.ChatName != nil {
		return *x.ChatName
	}
	return ""
}

func (x *CChatRoomState) GetVoiceAllowed() bool {
	if x != nil && x.VoiceAllowed != nil {
		return *x.VoiceAllowed
	}
	return false
}

func (x *CChatRoomState) GetMembersInVoice() []uint32 {
	if x != nil {
		return x.MembersInVoice
	}
	return nil
}

func (x *CChatRoomState) GetTimeLastMessage() uint32 {
	if x != nil && x.TimeLastMessage != nil {
		return *x.TimeLastMessage
	}
	return 0
}

func (x *CChatRoomState) GetSortOrder() uint32 {
	if x != nil && x.SortOrder != nil {
		return *x.SortOrder
	}
	return 0
}

func (x *CChatRoomState) GetLastMessage() string {
	if x != nil && x.LastMessage != nil {
		return *x.LastMessage
	}
	return ""
}

func (x *CChatRoomState) GetAccountidLastMessage() uint32 {
	if x != nil && x.AccountidLastMessage != nil {
		return *x.AccountidLastMessage
	}
	return 0
}

type CChatRoomGroupState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeaderState   *CChatRoomGroupHeaderState `protobuf:"bytes,1,opt,name=header_state,json=headerState" json:"header_state,omitempty"`
	Members       []*CChatRoomMember         `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
	DefaultChatId *uint64                    `protobuf:"varint,4,opt,name=default_chat_id,json=defaultChatId" json:"default_chat_id,omitempty"`
	ChatRooms     []*CChatRoomState          `protobuf:"bytes,5,rep,name=chat_rooms,json=chatRooms" json:"chat_rooms,omitempty"`
	Kicked        []*CChatRoomMember         `protobuf:"bytes,7,rep,name=kicked" json:"kicked,omitempty"`
}

func (x *CChatRoomGroupState) Reset() {
	*x = CChatRoomGroupState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoomGroupState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoomGroupState) ProtoMessage() {}

func (x *CChatRoomGroupState) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoomGroupState.ProtoReflect.Descriptor instead.
func (*CChatRoomGroupState) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CChatRoomGroupState) GetHeaderState() *CChatRoomGroupHeaderState {
	if x != nil {
		return x.HeaderState
	}
	return nil
}

func (x *CChatRoomGroupState) GetMembers() []*CChatRoomMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CChatRoomGroupState) GetDefaultChatId() uint64 {
	if x != nil && x.DefaultChatId != nil {
		return *x.DefaultChatId
	}
	return 0
}

func (x *CChatRoomGroupState) GetChatRooms() []*CChatRoomState {
	if x != nil {
		return x.ChatRooms
	}
	return nil
}

func (x *CChatRoomGroupState) GetKicked() []*CChatRoomMember {
	if x != nil {
		return x.Kicked
	}
	return nil
}

type CUserChatRoomState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId                   *uint64                     `protobuf:"varint,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	TimeJoined               *uint32                     `protobuf:"varint,2,opt,name=time_joined,json=timeJoined" json:"time_joined,omitempty"`
	TimeLastAck              *uint32                     `protobuf:"varint,3,opt,name=time_last_ack,json=timeLastAck" json:"time_last_ack,omitempty"`
	DesktopNotificationLevel *EChatRoomNotificationLevel `protobuf:"varint,4,opt,name=desktop_notification_level,json=desktopNotificationLevel,enum=EChatRoomNotificationLevel,def=0" json:"desktop_notification_level,omitempty"`
	MobileNotificationLevel  *EChatRoomNotificationLevel `protobuf:"varint,5,opt,name=mobile_notification_level,json=mobileNotificationLevel,enum=EChatRoomNotificationLevel,def=0" json:"mobile_notification_level,omitempty"`
	TimeLastMention          *uint32                     `protobuf:"varint,6,opt,name=time_last_mention,json=timeLastMention" json:"time_last_mention,omitempty"`
	UnreadIndicatorMuted     *bool                       `protobuf:"varint,7,opt,name=unread_indicator_muted,json=unreadIndicatorMuted,def=0" json:"unread_indicator_muted,omitempty"`
	TimeFirstUnread          *uint32                     `protobuf:"varint,8,opt,name=time_first_unread,json=timeFirstUnread" json:"time_first_unread,omitempty"`
}

// Default values for CUserChatRoomState fields.
const (
	Default_CUserChatRoomState_DesktopNotificationLevel = EChatRoomNotificationLevel_k_EChatroomNotificationLevel_Invalid
	Default_CUserChatRoomState_MobileNotificationLevel  = EChatRoomNotificationLevel_k_EChatroomNotificationLevel_Invalid
	Default_CUserChatRoomState_UnreadIndicatorMuted     = bool(false)
)

func (x *CUserChatRoomState) Reset() {
	*x = CUserChatRoomState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserChatRoomState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserChatRoomState) ProtoMessage() {}

func (x *CUserChatRoomState) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserChatRoomState.ProtoReflect.Descriptor instead.
func (*CUserChatRoomState) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CUserChatRoomState) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CUserChatRoomState) GetTimeJoined() uint32 {
	if x != nil && x.TimeJoined != nil {
		return *x.TimeJoined
	}
	return 0
}

func (x *CUserChatRoomState) GetTimeLastAck() uint32 {
	if x != nil && x.TimeLastAck != nil {
		return *x.TimeLastAck
	}
	return 0
}

func (x *CUserChatRoomState) GetDesktopNotificationLevel() EChatRoomNotificationLevel {
	if x != nil && x.DesktopNotificationLevel != nil {
		return *x.DesktopNotificationLevel
	}
	return Default_CUserChatRoomState_DesktopNotificationLevel
}

func (x *CUserChatRoomState) GetMobileNotificationLevel() EChatRoomNotificationLevel {
	if x != nil && x.MobileNotificationLevel != nil {
		return *x.MobileNotificationLevel
	}
	return Default_CUserChatRoomState_MobileNotificationLevel
}

func (x *CUserChatRoomState) GetTimeLastMention() uint32 {
	if x != nil && x.TimeLastMention != nil {
		return *x.TimeLastMention
	}
	return 0
}

func (x *CUserChatRoomState) GetUnreadIndicatorMuted() bool {
	if x != nil && x.UnreadIndicatorMuted != nil {
		return *x.UnreadIndicatorMuted
	}
	return Default_CUserChatRoomState_UnreadIndicatorMuted
}

func (x *CUserChatRoomState) GetTimeFirstUnread() uint32 {
	if x != nil && x.TimeFirstUnread != nil {
		return *x.TimeFirstUnread
	}
	return 0
}

type CUserChatRoomGroupState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId              *uint64                     `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	TimeJoined               *uint32                     `protobuf:"varint,2,opt,name=time_joined,json=timeJoined" json:"time_joined,omitempty"`
	UserChatRoomState        []*CUserChatRoomState       `protobuf:"bytes,3,rep,name=user_chat_room_state,json=userChatRoomState" json:"user_chat_room_state,omitempty"`
	DesktopNotificationLevel *EChatRoomNotificationLevel `protobuf:"varint,4,opt,name=desktop_notification_level,json=desktopNotificationLevel,enum=EChatRoomNotificationLevel,def=0" json:"desktop_notification_level,omitempty"`
	MobileNotificationLevel  *EChatRoomNotificationLevel `protobuf:"varint,5,opt,name=mobile_notification_level,json=mobileNotificationLevel,enum=EChatRoomNotificationLevel,def=0" json:"mobile_notification_level,omitempty"`
	TimeLastGroupAck         *uint32                     `protobuf:"varint,6,opt,name=time_last_group_ack,json=timeLastGroupAck" json:"time_last_group_ack,omitempty"`
	UnreadIndicatorMuted     *bool                       `protobuf:"varint,7,opt,name=unread_indicator_muted,json=unreadIndicatorMuted,def=0" json:"unread_indicator_muted,omitempty"`
}

// Default values for CUserChatRoomGroupState fields.
const (
	Default_CUserChatRoomGroupState_DesktopNotificationLevel = EChatRoomNotificationLevel_k_EChatroomNotificationLevel_Invalid
	Default_CUserChatRoomGroupState_MobileNotificationLevel  = EChatRoomNotificationLevel_k_EChatroomNotificationLevel_Invalid
	Default_CUserChatRoomGroupState_UnreadIndicatorMuted     = bool(false)
)

func (x *CUserChatRoomGroupState) Reset() {
	*x = CUserChatRoomGroupState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserChatRoomGroupState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserChatRoomGroupState) ProtoMessage() {}

func (x *CUserChatRoomGroupState) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserChatRoomGroupState.ProtoReflect.Descriptor instead.
func (*CUserChatRoomGroupState) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CUserChatRoomGroupState) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CUserChatRoomGroupState) GetTimeJoined() uint32 {
	if x != nil && x.TimeJoined != nil {
		return *x.TimeJoined
	}
	return 0
}

func (x *CUserChatRoomGroupState) GetUserChatRoomState() []*CUserChatRoomState {
	if x != nil {
		return x.UserChatRoomState
	}
	return nil
}

func (x *CUserChatRoomGroupState) GetDesktopNotificationLevel() EChatRoomNotificationLevel {
	if x != nil && x.DesktopNotificationLevel != nil {
		return *x.DesktopNotificationLevel
	}
	return Default_CUserChatRoomGroupState_DesktopNotificationLevel
}

func (x *CUserChatRoomGroupState) GetMobileNotificationLevel() EChatRoomNotificationLevel {
	if x != nil && x.MobileNotificationLevel != nil {
		return *x.MobileNotificationLevel
	}
	return Default_CUserChatRoomGroupState_MobileNotificationLevel
}

func (x *CUserChatRoomGroupState) GetTimeLastGroupAck() uint32 {
	if x != nil && x.TimeLastGroupAck != nil {
		return *x.TimeLastGroupAck
	}
	return 0
}

func (x *CUserChatRoomGroupState) GetUnreadIndicatorMuted() bool {
	if x != nil && x.UnreadIndicatorMuted != nil {
		return *x.UnreadIndicatorMuted
	}
	return Default_CUserChatRoomGroupState_UnreadIndicatorMuted
}

type CChatRoom_CreateChatRoomGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId   *uint64                  `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	State         *CChatRoomGroupState     `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	UserChatState *CUserChatRoomGroupState `protobuf:"bytes,3,opt,name=user_chat_state,json=userChatState" json:"user_chat_state,omitempty"`
}

func (x *CChatRoom_CreateChatRoomGroup_Response) Reset() {
	*x = CChatRoom_CreateChatRoomGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_CreateChatRoomGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_CreateChatRoomGroup_Response) ProtoMessage() {}

func (x *CChatRoom_CreateChatRoomGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_CreateChatRoomGroup_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_CreateChatRoomGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CChatRoom_CreateChatRoomGroup_Response) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_CreateChatRoomGroup_Response) GetState() *CChatRoomGroupState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *CChatRoom_CreateChatRoomGroup_Response) GetUserChatState() *CUserChatRoomGroupState {
	if x != nil {
		return x.UserChatState
	}
	return nil
}

type CChatRoom_SaveChatRoomGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	Name        *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *CChatRoom_SaveChatRoomGroup_Request) Reset() {
	*x = CChatRoom_SaveChatRoomGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SaveChatRoomGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SaveChatRoomGroup_Request) ProtoMessage() {}

func (x *CChatRoom_SaveChatRoomGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SaveChatRoomGroup_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_SaveChatRoomGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CChatRoom_SaveChatRoomGroup_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_SaveChatRoomGroup_Request) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CChatRoom_SaveChatRoomGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_SaveChatRoomGroup_Response) Reset() {
	*x = CChatRoom_SaveChatRoomGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SaveChatRoomGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SaveChatRoomGroup_Response) ProtoMessage() {}

func (x *CChatRoom_SaveChatRoomGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SaveChatRoomGroup_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_SaveChatRoomGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{14}
}

type CChatRoom_RenameChatRoomGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	Name        *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *CChatRoom_RenameChatRoomGroup_Request) Reset() {
	*x = CChatRoom_RenameChatRoomGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_RenameChatRoomGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_RenameChatRoomGroup_Request) ProtoMessage() {}

func (x *CChatRoom_RenameChatRoomGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_RenameChatRoomGroup_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_RenameChatRoomGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CChatRoom_RenameChatRoomGroup_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_RenameChatRoomGroup_Request) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CChatRoom_RenameChatRoomGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *CChatRoom_RenameChatRoomGroup_Response) Reset() {
	*x = CChatRoom_RenameChatRoomGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_RenameChatRoomGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_RenameChatRoomGroup_Response) ProtoMessage() {}

func (x *CChatRoom_RenameChatRoomGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_RenameChatRoomGroup_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_RenameChatRoomGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CChatRoom_RenameChatRoomGroup_Response) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CChatRoom_SetChatRoomGroupTagline_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	Tagline     *string `protobuf:"bytes,2,opt,name=tagline" json:"tagline,omitempty"`
}

func (x *CChatRoom_SetChatRoomGroupTagline_Request) Reset() {
	*x = CChatRoom_SetChatRoomGroupTagline_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SetChatRoomGroupTagline_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SetChatRoomGroupTagline_Request) ProtoMessage() {}

func (x *CChatRoom_SetChatRoomGroupTagline_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SetChatRoomGroupTagline_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_SetChatRoomGroupTagline_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *CChatRoom_SetChatRoomGroupTagline_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_SetChatRoomGroupTagline_Request) GetTagline() string {
	if x != nil && x.Tagline != nil {
		return *x.Tagline
	}
	return ""
}

type CChatRoom_SetChatRoomGroupTagline_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_SetChatRoomGroupTagline_Response) Reset() {
	*x = CChatRoom_SetChatRoomGroupTagline_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SetChatRoomGroupTagline_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SetChatRoomGroupTagline_Response) ProtoMessage() {}

func (x *CChatRoom_SetChatRoomGroupTagline_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SetChatRoomGroupTagline_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_SetChatRoomGroupTagline_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{18}
}

type CChatRoom_SetChatRoomGroupAvatar_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	AvatarSha   []byte  `protobuf:"bytes,2,opt,name=avatar_sha,json=avatarSha" json:"avatar_sha,omitempty"`
}

func (x *CChatRoom_SetChatRoomGroupAvatar_Request) Reset() {
	*x = CChatRoom_SetChatRoomGroupAvatar_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SetChatRoomGroupAvatar_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SetChatRoomGroupAvatar_Request) ProtoMessage() {}

func (x *CChatRoom_SetChatRoomGroupAvatar_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SetChatRoomGroupAvatar_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_SetChatRoomGroupAvatar_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CChatRoom_SetChatRoomGroupAvatar_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_SetChatRoomGroupAvatar_Request) GetAvatarSha() []byte {
	if x != nil {
		return x.AvatarSha
	}
	return nil
}

type CChatRoom_SetChatRoomGroupAvatar_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_SetChatRoomGroupAvatar_Response) Reset() {
	*x = CChatRoom_SetChatRoomGroupAvatar_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SetChatRoomGroupAvatar_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SetChatRoomGroupAvatar_Response) ProtoMessage() {}

func (x *CChatRoom_SetChatRoomGroupAvatar_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SetChatRoomGroupAvatar_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_SetChatRoomGroupAvatar_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{20}
}

type CChatRoom_SetChatRoomGroupWatchingBroadcast_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId                *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	WatchingBroadcastAccountid *uint32 `protobuf:"varint,2,opt,name=watching_broadcast_accountid,json=watchingBroadcastAccountid" json:"watching_broadcast_accountid,omitempty"`
	WatchingBroadcastChannelId *uint64 `protobuf:"varint,3,opt,name=watching_broadcast_channel_id,json=watchingBroadcastChannelId" json:"watching_broadcast_channel_id,omitempty"`
}

func (x *CChatRoom_SetChatRoomGroupWatchingBroadcast_Request) Reset() {
	*x = CChatRoom_SetChatRoomGroupWatchingBroadcast_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SetChatRoomGroupWatchingBroadcast_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SetChatRoomGroupWatchingBroadcast_Request) ProtoMessage() {}

func (x *CChatRoom_SetChatRoomGroupWatchingBroadcast_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SetChatRoomGroupWatchingBroadcast_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_SetChatRoomGroupWatchingBroadcast_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{21}
}

func (x *CChatRoom_SetChatRoomGroupWatchingBroadcast_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_SetChatRoomGroupWatchingBroadcast_Request) GetWatchingBroadcastAccountid() uint32 {
	if x != nil && x.WatchingBroadcastAccountid != nil {
		return *x.WatchingBroadcastAccountid
	}
	return 0
}

func (x *CChatRoom_SetChatRoomGroupWatchingBroadcast_Request) GetWatchingBroadcastChannelId() uint64 {
	if x != nil && x.WatchingBroadcastChannelId != nil {
		return *x.WatchingBroadcastChannelId
	}
	return 0
}

type CChatRoom_SetChatRoomGroupWatchingBroadcast_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_SetChatRoomGroupWatchingBroadcast_Response) Reset() {
	*x = CChatRoom_SetChatRoomGroupWatchingBroadcast_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SetChatRoomGroupWatchingBroadcast_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SetChatRoomGroupWatchingBroadcast_Response) ProtoMessage() {}

func (x *CChatRoom_SetChatRoomGroupWatchingBroadcast_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SetChatRoomGroupWatchingBroadcast_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_SetChatRoomGroupWatchingBroadcast_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{22}
}

type CChatRoom_JoinMiniGameForChatRoomGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId      *uint64 `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
}

func (x *CChatRoom_JoinMiniGameForChatRoomGroup_Request) Reset() {
	*x = CChatRoom_JoinMiniGameForChatRoomGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_JoinMiniGameForChatRoomGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_JoinMiniGameForChatRoomGroup_Request) ProtoMessage() {}

func (x *CChatRoom_JoinMiniGameForChatRoomGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_JoinMiniGameForChatRoomGroup_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_JoinMiniGameForChatRoomGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{23}
}

func (x *CChatRoom_JoinMiniGameForChatRoomGroup_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_JoinMiniGameForChatRoomGroup_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

type CChatRoom_JoinMiniGameForChatRoomGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinigameId *uint64 `protobuf:"varint,1,opt,name=minigame_id,json=minigameId" json:"minigame_id,omitempty"`
}

func (x *CChatRoom_JoinMiniGameForChatRoomGroup_Response) Reset() {
	*x = CChatRoom_JoinMiniGameForChatRoomGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_JoinMiniGameForChatRoomGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_JoinMiniGameForChatRoomGroup_Response) ProtoMessage() {}

func (x *CChatRoom_JoinMiniGameForChatRoomGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_JoinMiniGameForChatRoomGroup_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_JoinMiniGameForChatRoomGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{24}
}

func (x *CChatRoom_JoinMiniGameForChatRoomGroup_Response) GetMinigameId() uint64 {
	if x != nil && x.MinigameId != nil {
		return *x.MinigameId
	}
	return 0
}

type CChatRoom_EndMiniGameForChatRoomGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId      *uint64 `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	MinigameId  *uint64 `protobuf:"varint,3,opt,name=minigame_id,json=minigameId" json:"minigame_id,omitempty"`
}

func (x *CChatRoom_EndMiniGameForChatRoomGroup_Request) Reset() {
	*x = CChatRoom_EndMiniGameForChatRoomGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_EndMiniGameForChatRoomGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_EndMiniGameForChatRoomGroup_Request) ProtoMessage() {}

func (x *CChatRoom_EndMiniGameForChatRoomGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_EndMiniGameForChatRoomGroup_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_EndMiniGameForChatRoomGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{25}
}

func (x *CChatRoom_EndMiniGameForChatRoomGroup_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_EndMiniGameForChatRoomGroup_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CChatRoom_EndMiniGameForChatRoomGroup_Request) GetMinigameId() uint64 {
	if x != nil && x.MinigameId != nil {
		return *x.MinigameId
	}
	return 0
}

type CChatRoom_EndMiniGameForChatRoomGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_EndMiniGameForChatRoomGroup_Response) Reset() {
	*x = CChatRoom_EndMiniGameForChatRoomGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_EndMiniGameForChatRoomGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_EndMiniGameForChatRoomGroup_Response) ProtoMessage() {}

func (x *CChatRoom_EndMiniGameForChatRoomGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_EndMiniGameForChatRoomGroup_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_EndMiniGameForChatRoomGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{26}
}

type CChatRoom_MuteUser_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	Steamid     *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	Expiration  *int32  `protobuf:"varint,3,opt,name=expiration" json:"expiration,omitempty"`
}

func (x *CChatRoom_MuteUser_Request) Reset() {
	*x = CChatRoom_MuteUser_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_MuteUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_MuteUser_Request) ProtoMessage() {}

func (x *CChatRoom_MuteUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_MuteUser_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_MuteUser_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{27}
}

func (x *CChatRoom_MuteUser_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_MuteUser_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CChatRoom_MuteUser_Request) GetExpiration() int32 {
	if x != nil && x.Expiration != nil {
		return *x.Expiration
	}
	return 0
}

type CChatRoom_MuteUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_MuteUser_Response) Reset() {
	*x = CChatRoom_MuteUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_MuteUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_MuteUser_Response) ProtoMessage() {}

func (x *CChatRoom_MuteUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_MuteUser_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_MuteUser_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{28}
}

type CChatRoom_KickUser_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	Steamid     *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	Expiration  *int32  `protobuf:"varint,3,opt,name=expiration" json:"expiration,omitempty"`
}

func (x *CChatRoom_KickUser_Request) Reset() {
	*x = CChatRoom_KickUser_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_KickUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_KickUser_Request) ProtoMessage() {}

func (x *CChatRoom_KickUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_KickUser_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_KickUser_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{29}
}

func (x *CChatRoom_KickUser_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_KickUser_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CChatRoom_KickUser_Request) GetExpiration() int32 {
	if x != nil && x.Expiration != nil {
		return *x.Expiration
	}
	return 0
}

type CChatRoom_KickUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_KickUser_Response) Reset() {
	*x = CChatRoom_KickUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_KickUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_KickUser_Response) ProtoMessage() {}

func (x *CChatRoom_KickUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_KickUser_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_KickUser_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{30}
}

type CChatRoom_SetUserBanState_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	Steamid     *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	BanState    *bool   `protobuf:"varint,3,opt,name=ban_state,json=banState" json:"ban_state,omitempty"`
}

func (x *CChatRoom_SetUserBanState_Request) Reset() {
	*x = CChatRoom_SetUserBanState_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SetUserBanState_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SetUserBanState_Request) ProtoMessage() {}

func (x *CChatRoom_SetUserBanState_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SetUserBanState_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_SetUserBanState_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{31}
}

func (x *CChatRoom_SetUserBanState_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_SetUserBanState_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CChatRoom_SetUserBanState_Request) GetBanState() bool {
	if x != nil && x.BanState != nil {
		return *x.BanState
	}
	return false
}

type CChatRoom_SetUserBanState_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_SetUserBanState_Response) Reset() {
	*x = CChatRoom_SetUserBanState_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SetUserBanState_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SetUserBanState_Response) ProtoMessage() {}

func (x *CChatRoom_SetUserBanState_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SetUserBanState_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_SetUserBanState_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{32}
}

type CChatRoom_RevokeInvite_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	Steamid     *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CChatRoom_RevokeInvite_Request) Reset() {
	*x = CChatRoom_RevokeInvite_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_RevokeInvite_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_RevokeInvite_Request) ProtoMessage() {}

func (x *CChatRoom_RevokeInvite_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_RevokeInvite_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_RevokeInvite_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{33}
}

func (x *CChatRoom_RevokeInvite_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_RevokeInvite_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CChatRoom_RevokeInvite_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_RevokeInvite_Response) Reset() {
	*x = CChatRoom_RevokeInvite_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_RevokeInvite_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_RevokeInvite_Response) ProtoMessage() {}

func (x *CChatRoom_RevokeInvite_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_RevokeInvite_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_RevokeInvite_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{34}
}

type CChatRoom_CreateRole_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	Name        *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *CChatRoom_CreateRole_Request) Reset() {
	*x = CChatRoom_CreateRole_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_CreateRole_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_CreateRole_Request) ProtoMessage() {}

func (x *CChatRoom_CreateRole_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_CreateRole_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_CreateRole_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{35}
}

func (x *CChatRoom_CreateRole_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_CreateRole_Request) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CChatRoom_CreateRole_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions *CChatRoleActions `protobuf:"bytes,2,opt,name=actions" json:"actions,omitempty"`
}

func (x *CChatRoom_CreateRole_Response) Reset() {
	*x = CChatRoom_CreateRole_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_CreateRole_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_CreateRole_Response) ProtoMessage() {}

func (x *CChatRoom_CreateRole_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_CreateRole_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_CreateRole_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{36}
}

func (x *CChatRoom_CreateRole_Response) GetActions() *CChatRoleActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

type CChatRoom_GetRoles_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
}

func (x *CChatRoom_GetRoles_Request) Reset() {
	*x = CChatRoom_GetRoles_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetRoles_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetRoles_Request) ProtoMessage() {}

func (x *CChatRoom_GetRoles_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetRoles_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetRoles_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{37}
}

func (x *CChatRoom_GetRoles_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

type CChatRoom_GetRoles_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roles []*CChatRole `protobuf:"bytes,1,rep,name=roles" json:"roles,omitempty"`
}

func (x *CChatRoom_GetRoles_Response) Reset() {
	*x = CChatRoom_GetRoles_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetRoles_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetRoles_Response) ProtoMessage() {}

func (x *CChatRoom_GetRoles_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetRoles_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetRoles_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{38}
}

func (x *CChatRoom_GetRoles_Response) GetRoles() []*CChatRole {
	if x != nil {
		return x.Roles
	}
	return nil
}

type CChatRoom_RenameRole_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	RoleId      *uint64 `protobuf:"varint,2,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
	Name        *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (x *CChatRoom_RenameRole_Request) Reset() {
	*x = CChatRoom_RenameRole_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_RenameRole_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_RenameRole_Request) ProtoMessage() {}

func (x *CChatRoom_RenameRole_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_RenameRole_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_RenameRole_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{39}
}

func (x *CChatRoom_RenameRole_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_RenameRole_Request) GetRoleId() uint64 {
	if x != nil && x.RoleId != nil {
		return *x.RoleId
	}
	return 0
}

func (x *CChatRoom_RenameRole_Request) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CChatRoom_RenameRole_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_RenameRole_Response) Reset() {
	*x = CChatRoom_RenameRole_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_RenameRole_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_RenameRole_Response) ProtoMessage() {}

func (x *CChatRoom_RenameRole_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_RenameRole_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_RenameRole_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{40}
}

type CChatRoom_ReorderRole_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	RoleId      *uint64 `protobuf:"varint,2,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
	Ordinal     *uint32 `protobuf:"varint,3,opt,name=ordinal" json:"ordinal,omitempty"`
}

func (x *CChatRoom_ReorderRole_Request) Reset() {
	*x = CChatRoom_ReorderRole_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_ReorderRole_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_ReorderRole_Request) ProtoMessage() {}

func (x *CChatRoom_ReorderRole_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_ReorderRole_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_ReorderRole_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{41}
}

func (x *CChatRoom_ReorderRole_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_ReorderRole_Request) GetRoleId() uint64 {
	if x != nil && x.RoleId != nil {
		return *x.RoleId
	}
	return 0
}

func (x *CChatRoom_ReorderRole_Request) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

type CChatRoom_ReorderRole_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_ReorderRole_Response) Reset() {
	*x = CChatRoom_ReorderRole_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_ReorderRole_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_ReorderRole_Response) ProtoMessage() {}

func (x *CChatRoom_ReorderRole_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_ReorderRole_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_ReorderRole_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{42}
}

type CChatRoom_DeleteRole_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	RoleId      *uint64 `protobuf:"varint,2,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
}

func (x *CChatRoom_DeleteRole_Request) Reset() {
	*x = CChatRoom_DeleteRole_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_DeleteRole_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_DeleteRole_Request) ProtoMessage() {}

func (x *CChatRoom_DeleteRole_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_DeleteRole_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_DeleteRole_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{43}
}

func (x *CChatRoom_DeleteRole_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_DeleteRole_Request) GetRoleId() uint64 {
	if x != nil && x.RoleId != nil {
		return *x.RoleId
	}
	return 0
}

type CChatRoom_DeleteRole_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_DeleteRole_Response) Reset() {
	*x = CChatRoom_DeleteRole_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_DeleteRole_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_DeleteRole_Response) ProtoMessage() {}

func (x *CChatRoom_DeleteRole_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_DeleteRole_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_DeleteRole_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{44}
}

type CChatRoom_GetRoleActions_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	RoleId      *uint64 `protobuf:"varint,2,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
}

func (x *CChatRoom_GetRoleActions_Request) Reset() {
	*x = CChatRoom_GetRoleActions_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetRoleActions_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetRoleActions_Request) ProtoMessage() {}

func (x *CChatRoom_GetRoleActions_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetRoleActions_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetRoleActions_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{45}
}

func (x *CChatRoom_GetRoleActions_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_GetRoleActions_Request) GetRoleId() uint64 {
	if x != nil && x.RoleId != nil {
		return *x.RoleId
	}
	return 0
}

type CChatRoom_GetRoleActions_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*CChatRoleActions `protobuf:"bytes,1,rep,name=actions" json:"actions,omitempty"`
}

func (x *CChatRoom_GetRoleActions_Response) Reset() {
	*x = CChatRoom_GetRoleActions_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetRoleActions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetRoleActions_Response) ProtoMessage() {}

func (x *CChatRoom_GetRoleActions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetRoleActions_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetRoleActions_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{46}
}

func (x *CChatRoom_GetRoleActions_Response) GetActions() []*CChatRoleActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

type CChatRoom_ReplaceRoleActions_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64           `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	RoleId      *uint64           `protobuf:"varint,2,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
	Actions     *CChatRoleActions `protobuf:"bytes,4,opt,name=actions" json:"actions,omitempty"`
}

func (x *CChatRoom_ReplaceRoleActions_Request) Reset() {
	*x = CChatRoom_ReplaceRoleActions_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_ReplaceRoleActions_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_ReplaceRoleActions_Request) ProtoMessage() {}

func (x *CChatRoom_ReplaceRoleActions_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_ReplaceRoleActions_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_ReplaceRoleActions_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{47}
}

func (x *CChatRoom_ReplaceRoleActions_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_ReplaceRoleActions_Request) GetRoleId() uint64 {
	if x != nil && x.RoleId != nil {
		return *x.RoleId
	}
	return 0
}

func (x *CChatRoom_ReplaceRoleActions_Request) GetActions() *CChatRoleActions {
	if x != nil {
		return x.Actions
	}
	return nil
}

type CChatRoom_ReplaceRoleActions_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_ReplaceRoleActions_Response) Reset() {
	*x = CChatRoom_ReplaceRoleActions_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_ReplaceRoleActions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_ReplaceRoleActions_Response) ProtoMessage() {}

func (x *CChatRoom_ReplaceRoleActions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_ReplaceRoleActions_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_ReplaceRoleActions_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{48}
}

type CChatRoom_AddRoleToUser_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	RoleId      *uint64 `protobuf:"varint,3,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
	Steamid     *uint64 `protobuf:"fixed64,4,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CChatRoom_AddRoleToUser_Request) Reset() {
	*x = CChatRoom_AddRoleToUser_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_AddRoleToUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_AddRoleToUser_Request) ProtoMessage() {}

func (x *CChatRoom_AddRoleToUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_AddRoleToUser_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_AddRoleToUser_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{49}
}

func (x *CChatRoom_AddRoleToUser_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_AddRoleToUser_Request) GetRoleId() uint64 {
	if x != nil && x.RoleId != nil {
		return *x.RoleId
	}
	return 0
}

func (x *CChatRoom_AddRoleToUser_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CChatRoom_AddRoleToUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_AddRoleToUser_Response) Reset() {
	*x = CChatRoom_AddRoleToUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_AddRoleToUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_AddRoleToUser_Response) ProtoMessage() {}

func (x *CChatRoom_AddRoleToUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_AddRoleToUser_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_AddRoleToUser_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{50}
}

type CChatRoom_GetRolesForUser_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	Steamid     *uint64 `protobuf:"fixed64,3,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CChatRoom_GetRolesForUser_Request) Reset() {
	*x = CChatRoom_GetRolesForUser_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetRolesForUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetRolesForUser_Request) ProtoMessage() {}

func (x *CChatRoom_GetRolesForUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetRolesForUser_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetRolesForUser_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{51}
}

func (x *CChatRoom_GetRolesForUser_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_GetRolesForUser_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CChatRoom_GetRolesForUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleIds []uint64 `protobuf:"varint,1,rep,name=role_ids,json=roleIds" json:"role_ids,omitempty"`
}

func (x *CChatRoom_GetRolesForUser_Response) Reset() {
	*x = CChatRoom_GetRolesForUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetRolesForUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetRolesForUser_Response) ProtoMessage() {}

func (x *CChatRoom_GetRolesForUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetRolesForUser_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetRolesForUser_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{52}
}

func (x *CChatRoom_GetRolesForUser_Response) GetRoleIds() []uint64 {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

type CChatRoom_DeleteRoleFromUser_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	RoleId      *uint64 `protobuf:"varint,3,opt,name=role_id,json=roleId" json:"role_id,omitempty"`
	Steamid     *uint64 `protobuf:"fixed64,4,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CChatRoom_DeleteRoleFromUser_Request) Reset() {
	*x = CChatRoom_DeleteRoleFromUser_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_DeleteRoleFromUser_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_DeleteRoleFromUser_Request) ProtoMessage() {}

func (x *CChatRoom_DeleteRoleFromUser_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_DeleteRoleFromUser_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_DeleteRoleFromUser_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{53}
}

func (x *CChatRoom_DeleteRoleFromUser_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_DeleteRoleFromUser_Request) GetRoleId() uint64 {
	if x != nil && x.RoleId != nil {
		return *x.RoleId
	}
	return 0
}

func (x *CChatRoom_DeleteRoleFromUser_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CChatRoom_DeleteRoleFromUser_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_DeleteRoleFromUser_Response) Reset() {
	*x = CChatRoom_DeleteRoleFromUser_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_DeleteRoleFromUser_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_DeleteRoleFromUser_Response) ProtoMessage() {}

func (x *CChatRoom_DeleteRoleFromUser_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_DeleteRoleFromUser_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_DeleteRoleFromUser_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{54}
}

type CChatRoom_JoinChatRoomGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	InviteCode  *string `protobuf:"bytes,2,opt,name=invite_code,json=inviteCode" json:"invite_code,omitempty"`
	ChatId      *uint64 `protobuf:"varint,3,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
}

func (x *CChatRoom_JoinChatRoomGroup_Request) Reset() {
	*x = CChatRoom_JoinChatRoomGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_JoinChatRoomGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_JoinChatRoomGroup_Request) ProtoMessage() {}

func (x *CChatRoom_JoinChatRoomGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_JoinChatRoomGroup_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_JoinChatRoomGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{55}
}

func (x *CChatRoom_JoinChatRoomGroup_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_JoinChatRoomGroup_Request) GetInviteCode() string {
	if x != nil && x.InviteCode != nil {
		return *x.InviteCode
	}
	return ""
}

func (x *CChatRoom_JoinChatRoomGroup_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

type CChatRoom_JoinChatRoomGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State         *CChatRoomGroupState     `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	UserChatState *CUserChatRoomGroupState `protobuf:"bytes,3,opt,name=user_chat_state,json=userChatState" json:"user_chat_state,omitempty"`
	JoinChatId    *uint64                  `protobuf:"varint,4,opt,name=join_chat_id,json=joinChatId" json:"join_chat_id,omitempty"`
	TimeExpire    *uint32                  `protobuf:"varint,5,opt,name=time_expire,json=timeExpire" json:"time_expire,omitempty"`
}

func (x *CChatRoom_JoinChatRoomGroup_Response) Reset() {
	*x = CChatRoom_JoinChatRoomGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_JoinChatRoomGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_JoinChatRoomGroup_Response) ProtoMessage() {}

func (x *CChatRoom_JoinChatRoomGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_JoinChatRoomGroup_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_JoinChatRoomGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{56}
}

func (x *CChatRoom_JoinChatRoomGroup_Response) GetState() *CChatRoomGroupState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *CChatRoom_JoinChatRoomGroup_Response) GetUserChatState() *CUserChatRoomGroupState {
	if x != nil {
		return x.UserChatState
	}
	return nil
}

func (x *CChatRoom_JoinChatRoomGroup_Response) GetJoinChatId() uint64 {
	if x != nil && x.JoinChatId != nil {
		return *x.JoinChatId
	}
	return 0
}

func (x *CChatRoom_JoinChatRoomGroup_Response) GetTimeExpire() uint32 {
	if x != nil && x.TimeExpire != nil {
		return *x.TimeExpire
	}
	return 0
}

type CChatRoom_InviteFriendToChatRoomGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId        *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	Steamid            *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
	ChatId             *uint64 `protobuf:"varint,3,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	SkipFriendsuiCheck *bool   `protobuf:"varint,4,opt,name=skip_friendsui_check,json=skipFriendsuiCheck" json:"skip_friendsui_check,omitempty"`
}

func (x *CChatRoom_InviteFriendToChatRoomGroup_Request) Reset() {
	*x = CChatRoom_InviteFriendToChatRoomGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_InviteFriendToChatRoomGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_InviteFriendToChatRoomGroup_Request) ProtoMessage() {}

func (x *CChatRoom_InviteFriendToChatRoomGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_InviteFriendToChatRoomGroup_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_InviteFriendToChatRoomGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{57}
}

func (x *CChatRoom_InviteFriendToChatRoomGroup_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_InviteFriendToChatRoomGroup_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CChatRoom_InviteFriendToChatRoomGroup_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CChatRoom_InviteFriendToChatRoomGroup_Request) GetSkipFriendsuiCheck() bool {
	if x != nil && x.SkipFriendsuiCheck != nil {
		return *x.SkipFriendsuiCheck
	}
	return false
}

type CChatRoom_InviteFriendToChatRoomGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_InviteFriendToChatRoomGroup_Response) Reset() {
	*x = CChatRoom_InviteFriendToChatRoomGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_InviteFriendToChatRoomGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_InviteFriendToChatRoomGroup_Response) ProtoMessage() {}

func (x *CChatRoom_InviteFriendToChatRoomGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_InviteFriendToChatRoomGroup_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_InviteFriendToChatRoomGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{58}
}

type CChatRoom_LeaveChatRoomGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
}

func (x *CChatRoom_LeaveChatRoomGroup_Request) Reset() {
	*x = CChatRoom_LeaveChatRoomGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_LeaveChatRoomGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_LeaveChatRoomGroup_Request) ProtoMessage() {}

func (x *CChatRoom_LeaveChatRoomGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_LeaveChatRoomGroup_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_LeaveChatRoomGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{59}
}

func (x *CChatRoom_LeaveChatRoomGroup_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

type CChatRoom_LeaveChatRoomGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_LeaveChatRoomGroup_Response) Reset() {
	*x = CChatRoom_LeaveChatRoomGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_LeaveChatRoomGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_LeaveChatRoomGroup_Response) ProtoMessage() {}

func (x *CChatRoom_LeaveChatRoomGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_LeaveChatRoomGroup_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_LeaveChatRoomGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{60}
}

type CChatRoom_CreateChatRoom_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	Name        *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	AllowVoice  *bool   `protobuf:"varint,3,opt,name=allow_voice,json=allowVoice" json:"allow_voice,omitempty"`
}

func (x *CChatRoom_CreateChatRoom_Request) Reset() {
	*x = CChatRoom_CreateChatRoom_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_CreateChatRoom_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_CreateChatRoom_Request) ProtoMessage() {}

func (x *CChatRoom_CreateChatRoom_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_CreateChatRoom_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_CreateChatRoom_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{61}
}

func (x *CChatRoom_CreateChatRoom_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_CreateChatRoom_Request) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CChatRoom_CreateChatRoom_Request) GetAllowVoice() bool {
	if x != nil && x.AllowVoice != nil {
		return *x.AllowVoice
	}
	return false
}

type CChatRoom_CreateChatRoom_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatRoom *CChatRoomState `protobuf:"bytes,1,opt,name=chat_room,json=chatRoom" json:"chat_room,omitempty"`
}

func (x *CChatRoom_CreateChatRoom_Response) Reset() {
	*x = CChatRoom_CreateChatRoom_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_CreateChatRoom_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_CreateChatRoom_Response) ProtoMessage() {}

func (x *CChatRoom_CreateChatRoom_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_CreateChatRoom_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_CreateChatRoom_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{62}
}

func (x *CChatRoom_CreateChatRoom_Response) GetChatRoom() *CChatRoomState {
	if x != nil {
		return x.ChatRoom
	}
	return nil
}

type CChatRoom_DeleteChatRoom_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId      *uint64 `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
}

func (x *CChatRoom_DeleteChatRoom_Request) Reset() {
	*x = CChatRoom_DeleteChatRoom_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_DeleteChatRoom_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_DeleteChatRoom_Request) ProtoMessage() {}

func (x *CChatRoom_DeleteChatRoom_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_DeleteChatRoom_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_DeleteChatRoom_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{63}
}

func (x *CChatRoom_DeleteChatRoom_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_DeleteChatRoom_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

type CChatRoom_DeleteChatRoom_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_DeleteChatRoom_Response) Reset() {
	*x = CChatRoom_DeleteChatRoom_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_DeleteChatRoom_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_DeleteChatRoom_Response) ProtoMessage() {}

func (x *CChatRoom_DeleteChatRoom_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_DeleteChatRoom_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_DeleteChatRoom_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{64}
}

type CChatRoom_RenameChatRoom_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId      *uint64 `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Name        *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (x *CChatRoom_RenameChatRoom_Request) Reset() {
	*x = CChatRoom_RenameChatRoom_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_RenameChatRoom_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_RenameChatRoom_Request) ProtoMessage() {}

func (x *CChatRoom_RenameChatRoom_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_RenameChatRoom_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_RenameChatRoom_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{65}
}

func (x *CChatRoom_RenameChatRoom_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_RenameChatRoom_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CChatRoom_RenameChatRoom_Request) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CChatRoom_RenameChatRoom_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_RenameChatRoom_Response) Reset() {
	*x = CChatRoom_RenameChatRoom_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_RenameChatRoom_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_RenameChatRoom_Response) ProtoMessage() {}

func (x *CChatRoom_RenameChatRoom_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_RenameChatRoom_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_RenameChatRoom_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{66}
}

type CChatRoom_ReorderChatRoom_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId     *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId          *uint64 `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	MoveAfterChatId *uint64 `protobuf:"varint,3,opt,name=move_after_chat_id,json=moveAfterChatId" json:"move_after_chat_id,omitempty"`
}

func (x *CChatRoom_ReorderChatRoom_Request) Reset() {
	*x = CChatRoom_ReorderChatRoom_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_ReorderChatRoom_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_ReorderChatRoom_Request) ProtoMessage() {}

func (x *CChatRoom_ReorderChatRoom_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_ReorderChatRoom_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_ReorderChatRoom_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{67}
}

func (x *CChatRoom_ReorderChatRoom_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_ReorderChatRoom_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CChatRoom_ReorderChatRoom_Request) GetMoveAfterChatId() uint64 {
	if x != nil && x.MoveAfterChatId != nil {
		return *x.MoveAfterChatId
	}
	return 0
}

type CChatRoom_ReorderChatRoom_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_ReorderChatRoom_Response) Reset() {
	*x = CChatRoom_ReorderChatRoom_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_ReorderChatRoom_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_ReorderChatRoom_Response) ProtoMessage() {}

func (x *CChatRoom_ReorderChatRoom_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_ReorderChatRoom_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_ReorderChatRoom_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{68}
}

type CChatRoom_SendChatMessage_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId  *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId       *uint64 `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Message      *string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	EchoToSender *bool   `protobuf:"varint,4,opt,name=echo_to_sender,json=echoToSender" json:"echo_to_sender,omitempty"`
}

func (x *CChatRoom_SendChatMessage_Request) Reset() {
	*x = CChatRoom_SendChatMessage_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SendChatMessage_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SendChatMessage_Request) ProtoMessage() {}

func (x *CChatRoom_SendChatMessage_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SendChatMessage_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_SendChatMessage_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{69}
}

func (x *CChatRoom_SendChatMessage_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_SendChatMessage_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CChatRoom_SendChatMessage_Request) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CChatRoom_SendChatMessage_Request) GetEchoToSender() bool {
	if x != nil && x.EchoToSender != nil {
		return *x.EchoToSender
	}
	return false
}

type CChatRoom_SendChatMessage_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModifiedMessage      *string `protobuf:"bytes,1,opt,name=modified_message,json=modifiedMessage" json:"modified_message,omitempty"`
	ServerTimestamp      *uint32 `protobuf:"varint,2,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
	Ordinal              *uint32 `protobuf:"varint,3,opt,name=ordinal" json:"ordinal,omitempty"`
	MessageWithoutBbCode *string `protobuf:"bytes,4,opt,name=message_without_bb_code,json=messageWithoutBbCode" json:"message_without_bb_code,omitempty"`
}

func (x *CChatRoom_SendChatMessage_Response) Reset() {
	*x = CChatRoom_SendChatMessage_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SendChatMessage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SendChatMessage_Response) ProtoMessage() {}

func (x *CChatRoom_SendChatMessage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SendChatMessage_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_SendChatMessage_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{70}
}

func (x *CChatRoom_SendChatMessage_Response) GetModifiedMessage() string {
	if x != nil && x.ModifiedMessage != nil {
		return *x.ModifiedMessage
	}
	return ""
}

func (x *CChatRoom_SendChatMessage_Response) GetServerTimestamp() uint32 {
	if x != nil && x.ServerTimestamp != nil {
		return *x.ServerTimestamp
	}
	return 0
}

func (x *CChatRoom_SendChatMessage_Response) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

func (x *CChatRoom_SendChatMessage_Response) GetMessageWithoutBbCode() string {
	if x != nil && x.MessageWithoutBbCode != nil {
		return *x.MessageWithoutBbCode
	}
	return ""
}

type CChatRoom_JoinVoiceChat_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId      *uint64 `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
}

func (x *CChatRoom_JoinVoiceChat_Request) Reset() {
	*x = CChatRoom_JoinVoiceChat_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_JoinVoiceChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_JoinVoiceChat_Request) ProtoMessage() {}

func (x *CChatRoom_JoinVoiceChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_JoinVoiceChat_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_JoinVoiceChat_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{71}
}

func (x *CChatRoom_JoinVoiceChat_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_JoinVoiceChat_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

type CChatRoom_JoinVoiceChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceChatid *uint64 `protobuf:"varint,1,opt,name=voice_chatid,json=voiceChatid" json:"voice_chatid,omitempty"`
}

func (x *CChatRoom_JoinVoiceChat_Response) Reset() {
	*x = CChatRoom_JoinVoiceChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_JoinVoiceChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_JoinVoiceChat_Response) ProtoMessage() {}

func (x *CChatRoom_JoinVoiceChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_JoinVoiceChat_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_JoinVoiceChat_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{72}
}

func (x *CChatRoom_JoinVoiceChat_Response) GetVoiceChatid() uint64 {
	if x != nil && x.VoiceChatid != nil {
		return *x.VoiceChatid
	}
	return 0
}

type CChatRoom_LeaveVoiceChat_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId      *uint64 `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
}

func (x *CChatRoom_LeaveVoiceChat_Request) Reset() {
	*x = CChatRoom_LeaveVoiceChat_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_LeaveVoiceChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_LeaveVoiceChat_Request) ProtoMessage() {}

func (x *CChatRoom_LeaveVoiceChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_LeaveVoiceChat_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_LeaveVoiceChat_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{73}
}

func (x *CChatRoom_LeaveVoiceChat_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_LeaveVoiceChat_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

type CChatRoom_LeaveVoiceChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_LeaveVoiceChat_Response) Reset() {
	*x = CChatRoom_LeaveVoiceChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_LeaveVoiceChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_LeaveVoiceChat_Response) ProtoMessage() {}

func (x *CChatRoom_LeaveVoiceChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_LeaveVoiceChat_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_LeaveVoiceChat_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{74}
}

type CChatRoom_GetMessageHistory_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId  *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId       *uint64 `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	LastTime     *uint32 `protobuf:"varint,3,opt,name=last_time,json=lastTime" json:"last_time,omitempty"`
	LastOrdinal  *uint32 `protobuf:"varint,4,opt,name=last_ordinal,json=lastOrdinal" json:"last_ordinal,omitempty"`
	StartTime    *uint32 `protobuf:"varint,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	StartOrdinal *uint32 `protobuf:"varint,6,opt,name=start_ordinal,json=startOrdinal" json:"start_ordinal,omitempty"`
	MaxCount     *uint32 `protobuf:"varint,7,opt,name=max_count,json=maxCount" json:"max_count,omitempty"`
}

func (x *CChatRoom_GetMessageHistory_Request) Reset() {
	*x = CChatRoom_GetMessageHistory_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetMessageHistory_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetMessageHistory_Request) ProtoMessage() {}

func (x *CChatRoom_GetMessageHistory_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetMessageHistory_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetMessageHistory_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{75}
}

func (x *CChatRoom_GetMessageHistory_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_GetMessageHistory_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CChatRoom_GetMessageHistory_Request) GetLastTime() uint32 {
	if x != nil && x.LastTime != nil {
		return *x.LastTime
	}
	return 0
}

func (x *CChatRoom_GetMessageHistory_Request) GetLastOrdinal() uint32 {
	if x != nil && x.LastOrdinal != nil {
		return *x.LastOrdinal
	}
	return 0
}

func (x *CChatRoom_GetMessageHistory_Request) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *CChatRoom_GetMessageHistory_Request) GetStartOrdinal() uint32 {
	if x != nil && x.StartOrdinal != nil {
		return *x.StartOrdinal
	}
	return 0
}

func (x *CChatRoom_GetMessageHistory_Request) GetMaxCount() uint32 {
	if x != nil && x.MaxCount != nil {
		return *x.MaxCount
	}
	return 0
}

type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message        *EChatRoomServerMessage `protobuf:"varint,1,opt,name=message,enum=EChatRoomServerMessage,def=0" json:"message,omitempty"`
	StringParam    *string                 `protobuf:"bytes,2,opt,name=string_param,json=stringParam" json:"string_param,omitempty"`
	AccountidParam *uint32                 `protobuf:"varint,3,opt,name=accountid_param,json=accountidParam" json:"accountid_param,omitempty"`
}

// Default values for ServerMessage fields.
const (
	Default_ServerMessage_Message = EChatRoomServerMessage_k_EChatRoomServerMsg_Invalid
)

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{76}
}

func (x *ServerMessage) GetMessage() EChatRoomServerMessage {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return Default_ServerMessage_Message
}

func (x *ServerMessage) GetStringParam() string {
	if x != nil && x.StringParam != nil {
		return *x.StringParam
	}
	return ""
}

func (x *ServerMessage) GetAccountidParam() uint32 {
	if x != nil && x.AccountidParam != nil {
		return *x.AccountidParam
	}
	return 0
}

type CChatRoom_GetMessageHistory_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages      []*CChatRoom_GetMessageHistory_Response_ChatMessage `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
	MoreAvailable *bool                                               `protobuf:"varint,4,opt,name=more_available,json=moreAvailable" json:"more_available,omitempty"`
}

func (x *CChatRoom_GetMessageHistory_Response) Reset() {
	*x = CChatRoom_GetMessageHistory_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetMessageHistory_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetMessageHistory_Response) ProtoMessage() {}

func (x *CChatRoom_GetMessageHistory_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetMessageHistory_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetMessageHistory_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{77}
}

func (x *CChatRoom_GetMessageHistory_Response) GetMessages() []*CChatRoom_GetMessageHistory_Response_ChatMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *CChatRoom_GetMessageHistory_Response) GetMoreAvailable() bool {
	if x != nil && x.MoreAvailable != nil {
		return *x.MoreAvailable
	}
	return false
}

type CChatRoom_GetMyChatRoomGroups_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_GetMyChatRoomGroups_Request) Reset() {
	*x = CChatRoom_GetMyChatRoomGroups_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetMyChatRoomGroups_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetMyChatRoomGroups_Request) ProtoMessage() {}

func (x *CChatRoom_GetMyChatRoomGroups_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetMyChatRoomGroups_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetMyChatRoomGroups_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{78}
}

type CChatRoom_GetChatRoomGroupSummary_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId                *uint64             `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatGroupName              *string             `protobuf:"bytes,2,opt,name=chat_group_name,json=chatGroupName" json:"chat_group_name,omitempty"`
	ActiveMemberCount          *uint32             `protobuf:"varint,3,opt,name=active_member_count,json=activeMemberCount" json:"active_member_count,omitempty"`
	ActiveVoiceMemberCount     *uint32             `protobuf:"varint,4,opt,name=active_voice_member_count,json=activeVoiceMemberCount" json:"active_voice_member_count,omitempty"`
	DefaultChatId              *uint64             `protobuf:"varint,5,opt,name=default_chat_id,json=defaultChatId" json:"default_chat_id,omitempty"`
	ChatRooms                  []*CChatRoomState   `protobuf:"bytes,6,rep,name=chat_rooms,json=chatRooms" json:"chat_rooms,omitempty"`
	Clanid                     *uint32             `protobuf:"varint,7,opt,name=clanid" json:"clanid,omitempty"`
	ChatGroupTagline           *string             `protobuf:"bytes,8,opt,name=chat_group_tagline,json=chatGroupTagline" json:"chat_group_tagline,omitempty"`
	AccountidOwner             *uint32             `protobuf:"varint,9,opt,name=accountid_owner,json=accountidOwner" json:"accountid_owner,omitempty"`
	TopMembers                 []uint32            `protobuf:"varint,10,rep,name=top_members,json=topMembers" json:"top_members,omitempty"`
	ChatGroupAvatarSha         []byte              `protobuf:"bytes,11,opt,name=chat_group_avatar_sha,json=chatGroupAvatarSha" json:"chat_group_avatar_sha,omitempty"`
	Rank                       *EChatRoomGroupRank `protobuf:"varint,12,opt,name=rank,enum=EChatRoomGroupRank,def=0" json:"rank,omitempty"`
	DefaultRoleId              *uint64             `protobuf:"varint,13,opt,name=default_role_id,json=defaultRoleId" json:"default_role_id,omitempty"`
	RoleIds                    []uint64            `protobuf:"varint,14,rep,name=role_ids,json=roleIds" json:"role_ids,omitempty"`
	RoleActions                []*CChatRoleActions `protobuf:"bytes,15,rep,name=role_actions,json=roleActions" json:"role_actions,omitempty"`
	WatchingBroadcastAccountid *uint32             `protobuf:"varint,16,opt,name=watching_broadcast_accountid,json=watchingBroadcastAccountid" json:"watching_broadcast_accountid,omitempty"`
	Appid                      *uint32             `protobuf:"varint,17,opt,name=appid" json:"appid,omitempty"`
	PartyBeacons               []*CChatPartyBeacon `protobuf:"bytes,18,rep,name=party_beacons,json=partyBeacons" json:"party_beacons,omitempty"`
	WatchingBroadcastChannelId *uint64             `protobuf:"varint,19,opt,name=watching_broadcast_channel_id,json=watchingBroadcastChannelId" json:"watching_broadcast_channel_id,omitempty"`
	ActiveMinigameId           *uint64             `protobuf:"varint,20,opt,name=active_minigame_id,json=activeMinigameId" json:"active_minigame_id,omitempty"`
	AvatarUgcUrl               *string             `protobuf:"bytes,21,opt,name=avatar_ugc_url,json=avatarUgcUrl" json:"avatar_ugc_url,omitempty"`
	Disabled                   *bool               `protobuf:"varint,22,opt,name=disabled" json:"disabled,omitempty"`
}

// Default values for CChatRoom_GetChatRoomGroupSummary_Response fields.
const (
	Default_CChatRoom_GetChatRoomGroupSummary_Response_Rank = EChatRoomGroupRank_k_EChatRoomGroupRank_Default
)

func (x *CChatRoom_GetChatRoomGroupSummary_Response) Reset() {
	*x = CChatRoom_GetChatRoomGroupSummary_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetChatRoomGroupSummary_Response) ProtoMessage() {}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetChatRoomGroupSummary_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetChatRoomGroupSummary_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{79}
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetChatGroupName() string {
	if x != nil && x.ChatGroupName != nil {
		return *x.ChatGroupName
	}
	return ""
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetActiveMemberCount() uint32 {
	if x != nil && x.ActiveMemberCount != nil {
		return *x.ActiveMemberCount
	}
	return 0
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetActiveVoiceMemberCount() uint32 {
	if x != nil && x.ActiveVoiceMemberCount != nil {
		return *x.ActiveVoiceMemberCount
	}
	return 0
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetDefaultChatId() uint64 {
	if x != nil && x.DefaultChatId != nil {
		return *x.DefaultChatId
	}
	return 0
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetChatRooms() []*CChatRoomState {
	if x != nil {
		return x.ChatRooms
	}
	return nil
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetClanid() uint32 {
	if x != nil && x.Clanid != nil {
		return *x.Clanid
	}
	return 0
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetChatGroupTagline() string {
	if x != nil && x.ChatGroupTagline != nil {
		return *x.ChatGroupTagline
	}
	return ""
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetAccountidOwner() uint32 {
	if x != nil && x.AccountidOwner != nil {
		return *x.AccountidOwner
	}
	return 0
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetTopMembers() []uint32 {
	if x != nil {
		return x.TopMembers
	}
	return nil
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetChatGroupAvatarSha() []byte {
	if x != nil {
		return x.ChatGroupAvatarSha
	}
	return nil
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetRank() EChatRoomGroupRank {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return Default_CChatRoom_GetChatRoomGroupSummary_Response_Rank
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetDefaultRoleId() uint64 {
	if x != nil && x.DefaultRoleId != nil {
		return *x.DefaultRoleId
	}
	return 0
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetRoleIds() []uint64 {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetRoleActions() []*CChatRoleActions {
	if x != nil {
		return x.RoleActions
	}
	return nil
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetWatchingBroadcastAccountid() uint32 {
	if x != nil && x.WatchingBroadcastAccountid != nil {
		return *x.WatchingBroadcastAccountid
	}
	return 0
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetPartyBeacons() []*CChatPartyBeacon {
	if x != nil {
		return x.PartyBeacons
	}
	return nil
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetWatchingBroadcastChannelId() uint64 {
	if x != nil && x.WatchingBroadcastChannelId != nil {
		return *x.WatchingBroadcastChannelId
	}
	return 0
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetActiveMinigameId() uint64 {
	if x != nil && x.ActiveMinigameId != nil {
		return *x.ActiveMinigameId
	}
	return 0
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetAvatarUgcUrl() string {
	if x != nil && x.AvatarUgcUrl != nil {
		return *x.AvatarUgcUrl
	}
	return ""
}

func (x *CChatRoom_GetChatRoomGroupSummary_Response) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

type CChatRoomSummaryPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserChatGroupState *CUserChatRoomGroupState                    `protobuf:"bytes,1,opt,name=user_chat_group_state,json=userChatGroupState" json:"user_chat_group_state,omitempty"`
	GroupSummary       *CChatRoom_GetChatRoomGroupSummary_Response `protobuf:"bytes,2,opt,name=group_summary,json=groupSummary" json:"group_summary,omitempty"`
}

func (x *CChatRoomSummaryPair) Reset() {
	*x = CChatRoomSummaryPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoomSummaryPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoomSummaryPair) ProtoMessage() {}

func (x *CChatRoomSummaryPair) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoomSummaryPair.ProtoReflect.Descriptor instead.
func (*CChatRoomSummaryPair) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{80}
}

func (x *CChatRoomSummaryPair) GetUserChatGroupState() *CUserChatRoomGroupState {
	if x != nil {
		return x.UserChatGroupState
	}
	return nil
}

func (x *CChatRoomSummaryPair) GetGroupSummary() *CChatRoom_GetChatRoomGroupSummary_Response {
	if x != nil {
		return x.GroupSummary
	}
	return nil
}

type CChatRoom_GetMyChatRoomGroups_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatRoomGroups []*CChatRoomSummaryPair `protobuf:"bytes,1,rep,name=chat_room_groups,json=chatRoomGroups" json:"chat_room_groups,omitempty"`
}

func (x *CChatRoom_GetMyChatRoomGroups_Response) Reset() {
	*x = CChatRoom_GetMyChatRoomGroups_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetMyChatRoomGroups_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetMyChatRoomGroups_Response) ProtoMessage() {}

func (x *CChatRoom_GetMyChatRoomGroups_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetMyChatRoomGroups_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetMyChatRoomGroups_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{81}
}

func (x *CChatRoom_GetMyChatRoomGroups_Response) GetChatRoomGroups() []*CChatRoomSummaryPair {
	if x != nil {
		return x.ChatRoomGroups
	}
	return nil
}

type CChatRoom_GetChatRoomGroupState_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
}

func (x *CChatRoom_GetChatRoomGroupState_Request) Reset() {
	*x = CChatRoom_GetChatRoomGroupState_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetChatRoomGroupState_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetChatRoomGroupState_Request) ProtoMessage() {}

func (x *CChatRoom_GetChatRoomGroupState_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetChatRoomGroupState_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetChatRoomGroupState_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{82}
}

func (x *CChatRoom_GetChatRoomGroupState_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

type CChatRoom_GetChatRoomGroupState_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *CChatRoomGroupState `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
}

func (x *CChatRoom_GetChatRoomGroupState_Response) Reset() {
	*x = CChatRoom_GetChatRoomGroupState_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetChatRoomGroupState_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetChatRoomGroupState_Response) ProtoMessage() {}

func (x *CChatRoom_GetChatRoomGroupState_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetChatRoomGroupState_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetChatRoomGroupState_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{83}
}

func (x *CChatRoom_GetChatRoomGroupState_Response) GetState() *CChatRoomGroupState {
	if x != nil {
		return x.State
	}
	return nil
}

type CChatRoom_GetChatRoomGroupSummary_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
}

func (x *CChatRoom_GetChatRoomGroupSummary_Request) Reset() {
	*x = CChatRoom_GetChatRoomGroupSummary_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetChatRoomGroupSummary_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetChatRoomGroupSummary_Request) ProtoMessage() {}

func (x *CChatRoom_GetChatRoomGroupSummary_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetChatRoomGroupSummary_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetChatRoomGroupSummary_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{84}
}

func (x *CChatRoom_GetChatRoomGroupSummary_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

type CChatRoom_SetAppChatRoomGroupForceActive_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId     *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	RequestingAppId *uint32 `protobuf:"varint,2,opt,name=requesting_app_id,json=requestingAppId" json:"requesting_app_id,omitempty"`
}

func (x *CChatRoom_SetAppChatRoomGroupForceActive_Request) Reset() {
	*x = CChatRoom_SetAppChatRoomGroupForceActive_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SetAppChatRoomGroupForceActive_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SetAppChatRoomGroupForceActive_Request) ProtoMessage() {}

func (x *CChatRoom_SetAppChatRoomGroupForceActive_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SetAppChatRoomGroupForceActive_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_SetAppChatRoomGroupForceActive_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{85}
}

func (x *CChatRoom_SetAppChatRoomGroupForceActive_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_SetAppChatRoomGroupForceActive_Request) GetRequestingAppId() uint32 {
	if x != nil && x.RequestingAppId != nil {
		return *x.RequestingAppId
	}
	return 0
}

type CChatRoom_SetAppChatRoomGroupForceActive_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result            *uint32  `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	AccountsInChannel []uint32 `protobuf:"varint,2,rep,name=accounts_in_channel,json=accountsInChannel" json:"accounts_in_channel,omitempty"`
}

func (x *CChatRoom_SetAppChatRoomGroupForceActive_Response) Reset() {
	*x = CChatRoom_SetAppChatRoomGroupForceActive_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SetAppChatRoomGroupForceActive_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SetAppChatRoomGroupForceActive_Response) ProtoMessage() {}

func (x *CChatRoom_SetAppChatRoomGroupForceActive_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SetAppChatRoomGroupForceActive_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_SetAppChatRoomGroupForceActive_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{86}
}

func (x *CChatRoom_SetAppChatRoomGroupForceActive_Response) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CChatRoom_SetAppChatRoomGroupForceActive_Response) GetAccountsInChannel() []uint32 {
	if x != nil {
		return x.AccountsInChannel
	}
	return nil
}

type CChatRoom_SetAppChatRoomGroupStopForceActive_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId     *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	RequestingAppId *uint32 `protobuf:"varint,2,opt,name=requesting_app_id,json=requestingAppId" json:"requesting_app_id,omitempty"`
}

func (x *CChatRoom_SetAppChatRoomGroupStopForceActive_Notification) Reset() {
	*x = CChatRoom_SetAppChatRoomGroupStopForceActive_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SetAppChatRoomGroupStopForceActive_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SetAppChatRoomGroupStopForceActive_Notification) ProtoMessage() {}

func (x *CChatRoom_SetAppChatRoomGroupStopForceActive_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SetAppChatRoomGroupStopForceActive_Notification.ProtoReflect.Descriptor instead.
func (*CChatRoom_SetAppChatRoomGroupStopForceActive_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{87}
}

func (x *CChatRoom_SetAppChatRoomGroupStopForceActive_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_SetAppChatRoomGroupStopForceActive_Notification) GetRequestingAppId() uint32 {
	if x != nil && x.RequestingAppId != nil {
		return *x.RequestingAppId
	}
	return 0
}

type CChatRoom_AckChatMessage_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId      *uint64 `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Timestamp   *uint32 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *CChatRoom_AckChatMessage_Notification) Reset() {
	*x = CChatRoom_AckChatMessage_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_AckChatMessage_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_AckChatMessage_Notification) ProtoMessage() {}

func (x *CChatRoom_AckChatMessage_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_AckChatMessage_Notification.ProtoReflect.Descriptor instead.
func (*CChatRoom_AckChatMessage_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{88}
}

func (x *CChatRoom_AckChatMessage_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_AckChatMessage_Notification) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CChatRoom_AckChatMessage_Notification) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type CChatRoom_CreateInviteLink_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId  *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	SecondsValid *uint32 `protobuf:"varint,2,opt,name=seconds_valid,json=secondsValid" json:"seconds_valid,omitempty"`
	ChatId       *uint64 `protobuf:"varint,3,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
}

func (x *CChatRoom_CreateInviteLink_Request) Reset() {
	*x = CChatRoom_CreateInviteLink_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_CreateInviteLink_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_CreateInviteLink_Request) ProtoMessage() {}

func (x *CChatRoom_CreateInviteLink_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_CreateInviteLink_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_CreateInviteLink_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{89}
}

func (x *CChatRoom_CreateInviteLink_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_CreateInviteLink_Request) GetSecondsValid() uint32 {
	if x != nil && x.SecondsValid != nil {
		return *x.SecondsValid
	}
	return 0
}

func (x *CChatRoom_CreateInviteLink_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

type CChatRoom_CreateInviteLink_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteCode   *string `protobuf:"bytes,1,opt,name=invite_code,json=inviteCode" json:"invite_code,omitempty"`
	SecondsValid *uint32 `protobuf:"varint,2,opt,name=seconds_valid,json=secondsValid" json:"seconds_valid,omitempty"`
}

func (x *CChatRoom_CreateInviteLink_Response) Reset() {
	*x = CChatRoom_CreateInviteLink_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_CreateInviteLink_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_CreateInviteLink_Response) ProtoMessage() {}

func (x *CChatRoom_CreateInviteLink_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_CreateInviteLink_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_CreateInviteLink_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{90}
}

func (x *CChatRoom_CreateInviteLink_Response) GetInviteCode() string {
	if x != nil && x.InviteCode != nil {
		return *x.InviteCode
	}
	return ""
}

func (x *CChatRoom_CreateInviteLink_Response) GetSecondsValid() uint32 {
	if x != nil && x.SecondsValid != nil {
		return *x.SecondsValid
	}
	return 0
}

type CChatRoom_GetInviteLinkInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteCode *string `protobuf:"bytes,1,opt,name=invite_code,json=inviteCode" json:"invite_code,omitempty"`
}

func (x *CChatRoom_GetInviteLinkInfo_Request) Reset() {
	*x = CChatRoom_GetInviteLinkInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetInviteLinkInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetInviteLinkInfo_Request) ProtoMessage() {}

func (x *CChatRoom_GetInviteLinkInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetInviteLinkInfo_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetInviteLinkInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{91}
}

func (x *CChatRoom_GetInviteLinkInfo_Request) GetInviteCode() string {
	if x != nil && x.InviteCode != nil {
		return *x.InviteCode
	}
	return ""
}

type CChatRoom_GetInviteLinkInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidSender      *uint64                                     `protobuf:"fixed64,3,opt,name=steamid_sender,json=steamidSender" json:"steamid_sender,omitempty"`
	TimeExpires        *uint32                                     `protobuf:"varint,4,opt,name=time_expires,json=timeExpires" json:"time_expires,omitempty"`
	ChatId             *uint64                                     `protobuf:"varint,6,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	GroupSummary       *CChatRoom_GetChatRoomGroupSummary_Response `protobuf:"bytes,8,opt,name=group_summary,json=groupSummary" json:"group_summary,omitempty"`
	UserChatGroupState *CUserChatRoomGroupState                    `protobuf:"bytes,9,opt,name=user_chat_group_state,json=userChatGroupState" json:"user_chat_group_state,omitempty"`
	TimeKickExpire     *uint32                                     `protobuf:"varint,10,opt,name=time_kick_expire,json=timeKickExpire" json:"time_kick_expire,omitempty"`
	Banned             *bool                                       `protobuf:"varint,11,opt,name=banned" json:"banned,omitempty"`
}

func (x *CChatRoom_GetInviteLinkInfo_Response) Reset() {
	*x = CChatRoom_GetInviteLinkInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetInviteLinkInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetInviteLinkInfo_Response) ProtoMessage() {}

func (x *CChatRoom_GetInviteLinkInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetInviteLinkInfo_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetInviteLinkInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{92}
}

func (x *CChatRoom_GetInviteLinkInfo_Response) GetSteamidSender() uint64 {
	if x != nil && x.SteamidSender != nil {
		return *x.SteamidSender
	}
	return 0
}

func (x *CChatRoom_GetInviteLinkInfo_Response) GetTimeExpires() uint32 {
	if x != nil && x.TimeExpires != nil {
		return *x.TimeExpires
	}
	return 0
}

func (x *CChatRoom_GetInviteLinkInfo_Response) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CChatRoom_GetInviteLinkInfo_Response) GetGroupSummary() *CChatRoom_GetChatRoomGroupSummary_Response {
	if x != nil {
		return x.GroupSummary
	}
	return nil
}

func (x *CChatRoom_GetInviteLinkInfo_Response) GetUserChatGroupState() *CUserChatRoomGroupState {
	if x != nil {
		return x.UserChatGroupState
	}
	return nil
}

func (x *CChatRoom_GetInviteLinkInfo_Response) GetTimeKickExpire() uint32 {
	if x != nil && x.TimeKickExpire != nil {
		return *x.TimeKickExpire
	}
	return 0
}

func (x *CChatRoom_GetInviteLinkInfo_Response) GetBanned() bool {
	if x != nil && x.Banned != nil {
		return *x.Banned
	}
	return false
}

type CChatRoom_GetInviteInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamidInvitee *uint64 `protobuf:"fixed64,1,opt,name=steamid_invitee,json=steamidInvitee" json:"steamid_invitee,omitempty"`
	ChatGroupId    *uint64 `protobuf:"varint,2,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId         *uint64 `protobuf:"varint,3,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	InviteCode     *string `protobuf:"bytes,4,opt,name=invite_code,json=inviteCode" json:"invite_code,omitempty"`
}

func (x *CChatRoom_GetInviteInfo_Request) Reset() {
	*x = CChatRoom_GetInviteInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetInviteInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetInviteInfo_Request) ProtoMessage() {}

func (x *CChatRoom_GetInviteInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetInviteInfo_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetInviteInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{93}
}

func (x *CChatRoom_GetInviteInfo_Request) GetSteamidInvitee() uint64 {
	if x != nil && x.SteamidInvitee != nil {
		return *x.SteamidInvitee
	}
	return 0
}

func (x *CChatRoom_GetInviteInfo_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_GetInviteInfo_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CChatRoom_GetInviteInfo_Request) GetInviteCode() string {
	if x != nil && x.InviteCode != nil {
		return *x.InviteCode
	}
	return ""
}

type CChatRoom_GetInviteInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupSummary   *CChatRoom_GetChatRoomGroupSummary_Response `protobuf:"bytes,1,opt,name=group_summary,json=groupSummary" json:"group_summary,omitempty"`
	TimeKickExpire *uint32                                     `protobuf:"varint,2,opt,name=time_kick_expire,json=timeKickExpire" json:"time_kick_expire,omitempty"`
	Banned         *bool                                       `protobuf:"varint,3,opt,name=banned" json:"banned,omitempty"`
}

func (x *CChatRoom_GetInviteInfo_Response) Reset() {
	*x = CChatRoom_GetInviteInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetInviteInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetInviteInfo_Response) ProtoMessage() {}

func (x *CChatRoom_GetInviteInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetInviteInfo_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetInviteInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{94}
}

func (x *CChatRoom_GetInviteInfo_Response) GetGroupSummary() *CChatRoom_GetChatRoomGroupSummary_Response {
	if x != nil {
		return x.GroupSummary
	}
	return nil
}

func (x *CChatRoom_GetInviteInfo_Response) GetTimeKickExpire() uint32 {
	if x != nil && x.TimeKickExpire != nil {
		return *x.TimeKickExpire
	}
	return 0
}

func (x *CChatRoom_GetInviteInfo_Response) GetBanned() bool {
	if x != nil && x.Banned != nil {
		return *x.Banned
	}
	return false
}

type CChatRoom_GetInviteLinksForGroup_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
}

func (x *CChatRoom_GetInviteLinksForGroup_Request) Reset() {
	*x = CChatRoom_GetInviteLinksForGroup_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetInviteLinksForGroup_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetInviteLinksForGroup_Request) ProtoMessage() {}

func (x *CChatRoom_GetInviteLinksForGroup_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetInviteLinksForGroup_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetInviteLinksForGroup_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{95}
}

func (x *CChatRoom_GetInviteLinksForGroup_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

type CChatRoom_GetInviteLinksForGroup_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteLinks []*CChatRoom_GetInviteLinksForGroup_Response_LinkInfo `protobuf:"bytes,1,rep,name=invite_links,json=inviteLinks" json:"invite_links,omitempty"`
}

func (x *CChatRoom_GetInviteLinksForGroup_Response) Reset() {
	*x = CChatRoom_GetInviteLinksForGroup_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetInviteLinksForGroup_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetInviteLinksForGroup_Response) ProtoMessage() {}

func (x *CChatRoom_GetInviteLinksForGroup_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetInviteLinksForGroup_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetInviteLinksForGroup_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{96}
}

func (x *CChatRoom_GetInviteLinksForGroup_Response) GetInviteLinks() []*CChatRoom_GetInviteLinksForGroup_Response_LinkInfo {
	if x != nil {
		return x.InviteLinks
	}
	return nil
}

type CChatRoom_GetBanList_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
}

func (x *CChatRoom_GetBanList_Request) Reset() {
	*x = CChatRoom_GetBanList_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetBanList_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetBanList_Request) ProtoMessage() {}

func (x *CChatRoom_GetBanList_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetBanList_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetBanList_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{97}
}

func (x *CChatRoom_GetBanList_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

type CChatRoom_GetBanList_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bans []*CChatRoom_GetBanList_Response_BanInfo `protobuf:"bytes,1,rep,name=bans" json:"bans,omitempty"`
}

func (x *CChatRoom_GetBanList_Response) Reset() {
	*x = CChatRoom_GetBanList_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetBanList_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetBanList_Response) ProtoMessage() {}

func (x *CChatRoom_GetBanList_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetBanList_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetBanList_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{98}
}

func (x *CChatRoom_GetBanList_Response) GetBans() []*CChatRoom_GetBanList_Response_BanInfo {
	if x != nil {
		return x.Bans
	}
	return nil
}

type CChatRoom_GetInviteList_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
}

func (x *CChatRoom_GetInviteList_Request) Reset() {
	*x = CChatRoom_GetInviteList_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetInviteList_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetInviteList_Request) ProtoMessage() {}

func (x *CChatRoom_GetInviteList_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetInviteList_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetInviteList_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{99}
}

func (x *CChatRoom_GetInviteList_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

type CChatRoomGroupInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid      *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	AccountidActor *uint32 `protobuf:"varint,2,opt,name=accountid_actor,json=accountidActor" json:"accountid_actor,omitempty"`
	TimeInvited    *uint32 `protobuf:"varint,3,opt,name=time_invited,json=timeInvited" json:"time_invited,omitempty"`
}

func (x *CChatRoomGroupInvite) Reset() {
	*x = CChatRoomGroupInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoomGroupInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoomGroupInvite) ProtoMessage() {}

func (x *CChatRoomGroupInvite) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoomGroupInvite.ProtoReflect.Descriptor instead.
func (*CChatRoomGroupInvite) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{100}
}

func (x *CChatRoomGroupInvite) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CChatRoomGroupInvite) GetAccountidActor() uint32 {
	if x != nil && x.AccountidActor != nil {
		return *x.AccountidActor
	}
	return 0
}

func (x *CChatRoomGroupInvite) GetTimeInvited() uint32 {
	if x != nil && x.TimeInvited != nil {
		return *x.TimeInvited
	}
	return 0
}

type CChatRoom_GetInviteList_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invites []*CChatRoomGroupInvite `protobuf:"bytes,1,rep,name=invites" json:"invites,omitempty"`
}

func (x *CChatRoom_GetInviteList_Response) Reset() {
	*x = CChatRoom_GetInviteList_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetInviteList_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetInviteList_Response) ProtoMessage() {}

func (x *CChatRoom_GetInviteList_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetInviteList_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetInviteList_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{101}
}

func (x *CChatRoom_GetInviteList_Response) GetInvites() []*CChatRoomGroupInvite {
	if x != nil {
		return x.Invites
	}
	return nil
}

type CChatRoom_DeleteInviteLink_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	InviteCode  *string `protobuf:"bytes,2,opt,name=invite_code,json=inviteCode" json:"invite_code,omitempty"`
}

func (x *CChatRoom_DeleteInviteLink_Request) Reset() {
	*x = CChatRoom_DeleteInviteLink_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_DeleteInviteLink_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_DeleteInviteLink_Request) ProtoMessage() {}

func (x *CChatRoom_DeleteInviteLink_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_DeleteInviteLink_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_DeleteInviteLink_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{102}
}

func (x *CChatRoom_DeleteInviteLink_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_DeleteInviteLink_Request) GetInviteCode() string {
	if x != nil && x.InviteCode != nil {
		return *x.InviteCode
	}
	return ""
}

type CChatRoom_DeleteInviteLink_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_DeleteInviteLink_Response) Reset() {
	*x = CChatRoom_DeleteInviteLink_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_DeleteInviteLink_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_DeleteInviteLink_Response) ProtoMessage() {}

func (x *CChatRoom_DeleteInviteLink_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_DeleteInviteLink_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_DeleteInviteLink_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{103}
}

type CChatRoom_SetSessionActiveChatRoomGroups_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupIds               []uint64 `protobuf:"varint,1,rep,name=chat_group_ids,json=chatGroupIds" json:"chat_group_ids,omitempty"`
	ChatGroupsDataRequested    []uint64 `protobuf:"varint,2,rep,name=chat_groups_data_requested,json=chatGroupsDataRequested" json:"chat_groups_data_requested,omitempty"`
	VirtualizeMembersThreshold *int32   `protobuf:"varint,3,opt,name=virtualize_members_threshold,json=virtualizeMembersThreshold" json:"virtualize_members_threshold,omitempty"`
}

func (x *CChatRoom_SetSessionActiveChatRoomGroups_Request) Reset() {
	*x = CChatRoom_SetSessionActiveChatRoomGroups_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SetSessionActiveChatRoomGroups_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SetSessionActiveChatRoomGroups_Request) ProtoMessage() {}

func (x *CChatRoom_SetSessionActiveChatRoomGroups_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SetSessionActiveChatRoomGroups_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_SetSessionActiveChatRoomGroups_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{104}
}

func (x *CChatRoom_SetSessionActiveChatRoomGroups_Request) GetChatGroupIds() []uint64 {
	if x != nil {
		return x.ChatGroupIds
	}
	return nil
}

func (x *CChatRoom_SetSessionActiveChatRoomGroups_Request) GetChatGroupsDataRequested() []uint64 {
	if x != nil {
		return x.ChatGroupsDataRequested
	}
	return nil
}

func (x *CChatRoom_SetSessionActiveChatRoomGroups_Request) GetVirtualizeMembersThreshold() int32 {
	if x != nil && x.VirtualizeMembersThreshold != nil {
		return *x.VirtualizeMembersThreshold
	}
	return 0
}

type CChatRoom_SetSessionActiveChatRoomGroups_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatStates                    []*CChatRoomGroupState `protobuf:"bytes,1,rep,name=chat_states,json=chatStates" json:"chat_states,omitempty"`
	VirtualizeMembersChatGroupIds []uint64               `protobuf:"varint,2,rep,name=virtualize_members_chat_group_ids,json=virtualizeMembersChatGroupIds" json:"virtualize_members_chat_group_ids,omitempty"`
}

func (x *CChatRoom_SetSessionActiveChatRoomGroups_Response) Reset() {
	*x = CChatRoom_SetSessionActiveChatRoomGroups_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SetSessionActiveChatRoomGroups_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SetSessionActiveChatRoomGroups_Response) ProtoMessage() {}

func (x *CChatRoom_SetSessionActiveChatRoomGroups_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SetSessionActiveChatRoomGroups_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_SetSessionActiveChatRoomGroups_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{105}
}

func (x *CChatRoom_SetSessionActiveChatRoomGroups_Response) GetChatStates() []*CChatRoomGroupState {
	if x != nil {
		return x.ChatStates
	}
	return nil
}

func (x *CChatRoom_SetSessionActiveChatRoomGroups_Response) GetVirtualizeMembersChatGroupIds() []uint64 {
	if x != nil {
		return x.VirtualizeMembersChatGroupIds
	}
	return nil
}

type CChatRoom_SetUserChatGroupPreferences_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId          *uint64                                                              `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatGroupPreferences *CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences  `protobuf:"bytes,2,opt,name=chat_group_preferences,json=chatGroupPreferences" json:"chat_group_preferences,omitempty"`
	ChatRoomPreferences  []*CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences `protobuf:"bytes,3,rep,name=chat_room_preferences,json=chatRoomPreferences" json:"chat_room_preferences,omitempty"`
}

func (x *CChatRoom_SetUserChatGroupPreferences_Request) Reset() {
	*x = CChatRoom_SetUserChatGroupPreferences_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SetUserChatGroupPreferences_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SetUserChatGroupPreferences_Request) ProtoMessage() {}

func (x *CChatRoom_SetUserChatGroupPreferences_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SetUserChatGroupPreferences_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_SetUserChatGroupPreferences_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{106}
}

func (x *CChatRoom_SetUserChatGroupPreferences_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_SetUserChatGroupPreferences_Request) GetChatGroupPreferences() *CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences {
	if x != nil {
		return x.ChatGroupPreferences
	}
	return nil
}

func (x *CChatRoom_SetUserChatGroupPreferences_Request) GetChatRoomPreferences() []*CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences {
	if x != nil {
		return x.ChatRoomPreferences
	}
	return nil
}

type CChatRoom_SetUserChatGroupPreferences_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_SetUserChatGroupPreferences_Response) Reset() {
	*x = CChatRoom_SetUserChatGroupPreferences_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SetUserChatGroupPreferences_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SetUserChatGroupPreferences_Response) ProtoMessage() {}

func (x *CChatRoom_SetUserChatGroupPreferences_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SetUserChatGroupPreferences_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_SetUserChatGroupPreferences_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{107}
}

type CChatRoom_DeleteChatMessages_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64                                         `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId      *uint64                                         `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Messages    []*CChatRoom_DeleteChatMessages_Request_Message `protobuf:"bytes,3,rep,name=messages" json:"messages,omitempty"`
}

func (x *CChatRoom_DeleteChatMessages_Request) Reset() {
	*x = CChatRoom_DeleteChatMessages_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_DeleteChatMessages_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_DeleteChatMessages_Request) ProtoMessage() {}

func (x *CChatRoom_DeleteChatMessages_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_DeleteChatMessages_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_DeleteChatMessages_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{108}
}

func (x *CChatRoom_DeleteChatMessages_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_DeleteChatMessages_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CChatRoom_DeleteChatMessages_Request) GetMessages() []*CChatRoom_DeleteChatMessages_Request_Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type CChatRoom_DeleteChatMessages_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CChatRoom_DeleteChatMessages_Response) Reset() {
	*x = CChatRoom_DeleteChatMessages_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_DeleteChatMessages_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_DeleteChatMessages_Response) ProtoMessage() {}

func (x *CChatRoom_DeleteChatMessages_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_DeleteChatMessages_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_DeleteChatMessages_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{109}
}

type CChatRoom_UpdateMemberListView_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId                  *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ViewId                       *uint64 `protobuf:"varint,2,opt,name=view_id,json=viewId" json:"view_id,omitempty"`
	Start                        *int32  `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
	End                          *int32  `protobuf:"varint,4,opt,name=end" json:"end,omitempty"`
	ClientChangenumber           *int32  `protobuf:"varint,5,opt,name=client_changenumber,json=clientChangenumber" json:"client_changenumber,omitempty"`
	DeleteView                   *bool   `protobuf:"varint,6,opt,name=delete_view,json=deleteView" json:"delete_view,omitempty"`
	PersonaSubscribeAccountids   []int32 `protobuf:"varint,7,rep,name=persona_subscribe_accountids,json=personaSubscribeAccountids" json:"persona_subscribe_accountids,omitempty"`
	PersonaUnsubscribeAccountids []int32 `protobuf:"varint,8,rep,name=persona_unsubscribe_accountids,json=personaUnsubscribeAccountids" json:"persona_unsubscribe_accountids,omitempty"`
}

func (x *CChatRoom_UpdateMemberListView_Notification) Reset() {
	*x = CChatRoom_UpdateMemberListView_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_UpdateMemberListView_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_UpdateMemberListView_Notification) ProtoMessage() {}

func (x *CChatRoom_UpdateMemberListView_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_UpdateMemberListView_Notification.ProtoReflect.Descriptor instead.
func (*CChatRoom_UpdateMemberListView_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{110}
}

func (x *CChatRoom_UpdateMemberListView_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_UpdateMemberListView_Notification) GetViewId() uint64 {
	if x != nil && x.ViewId != nil {
		return *x.ViewId
	}
	return 0
}

func (x *CChatRoom_UpdateMemberListView_Notification) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *CChatRoom_UpdateMemberListView_Notification) GetEnd() int32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

func (x *CChatRoom_UpdateMemberListView_Notification) GetClientChangenumber() int32 {
	if x != nil && x.ClientChangenumber != nil {
		return *x.ClientChangenumber
	}
	return 0
}

func (x *CChatRoom_UpdateMemberListView_Notification) GetDeleteView() bool {
	if x != nil && x.DeleteView != nil {
		return *x.DeleteView
	}
	return false
}

func (x *CChatRoom_UpdateMemberListView_Notification) GetPersonaSubscribeAccountids() []int32 {
	if x != nil {
		return x.PersonaSubscribeAccountids
	}
	return nil
}

func (x *CChatRoom_UpdateMemberListView_Notification) GetPersonaUnsubscribeAccountids() []int32 {
	if x != nil {
		return x.PersonaUnsubscribeAccountids
	}
	return nil
}

type CChatRoom_SearchMembers_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64 `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	SearchId    *uint64 `protobuf:"varint,2,opt,name=search_id,json=searchId" json:"search_id,omitempty"`
	SearchText  *string `protobuf:"bytes,3,opt,name=search_text,json=searchText" json:"search_text,omitempty"`
	MaxResults  *int32  `protobuf:"varint,4,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
}

func (x *CChatRoom_SearchMembers_Request) Reset() {
	*x = CChatRoom_SearchMembers_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SearchMembers_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SearchMembers_Request) ProtoMessage() {}

func (x *CChatRoom_SearchMembers_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SearchMembers_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_SearchMembers_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{111}
}

func (x *CChatRoom_SearchMembers_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_SearchMembers_Request) GetSearchId() uint64 {
	if x != nil && x.SearchId != nil {
		return *x.SearchId
	}
	return 0
}

func (x *CChatRoom_SearchMembers_Request) GetSearchText() string {
	if x != nil && x.SearchText != nil {
		return *x.SearchText
	}
	return ""
}

func (x *CChatRoom_SearchMembers_Request) GetMaxResults() int32 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return 0
}

type CChatRoom_SearchMembers_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchingMembers []*CChatRoom_SearchMembers_Response_MemberMatch `protobuf:"bytes,1,rep,name=matching_members,json=matchingMembers" json:"matching_members,omitempty"`
	StatusFlags     *uint32                                         `protobuf:"varint,2,opt,name=status_flags,json=statusFlags" json:"status_flags,omitempty"`
}

func (x *CChatRoom_SearchMembers_Response) Reset() {
	*x = CChatRoom_SearchMembers_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SearchMembers_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SearchMembers_Response) ProtoMessage() {}

func (x *CChatRoom_SearchMembers_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SearchMembers_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_SearchMembers_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{112}
}

func (x *CChatRoom_SearchMembers_Response) GetMatchingMembers() []*CChatRoom_SearchMembers_Response_MemberMatch {
	if x != nil {
		return x.MatchingMembers
	}
	return nil
}

func (x *CChatRoom_SearchMembers_Response) GetStatusFlags() uint32 {
	if x != nil && x.StatusFlags != nil {
		return *x.StatusFlags
	}
	return 0
}

type CChatRoom_UpdateMessageReaction_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId     *uint64                       `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId          *uint64                       `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ServerTimestamp *uint32                       `protobuf:"varint,3,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
	Ordinal         *uint32                       `protobuf:"varint,4,opt,name=ordinal" json:"ordinal,omitempty"`
	ReactionType    *EChatRoomMessageReactionType `protobuf:"varint,5,opt,name=reaction_type,json=reactionType,enum=EChatRoomMessageReactionType,def=0" json:"reaction_type,omitempty"`
	Reaction        *string                       `protobuf:"bytes,6,opt,name=reaction" json:"reaction,omitempty"`
	IsAdd           *bool                         `protobuf:"varint,7,opt,name=is_add,json=isAdd" json:"is_add,omitempty"`
}

// Default values for CChatRoom_UpdateMessageReaction_Request fields.
const (
	Default_CChatRoom_UpdateMessageReaction_Request_ReactionType = EChatRoomMessageReactionType_k_EChatRoomMessageReactionType_Invalid
)

func (x *CChatRoom_UpdateMessageReaction_Request) Reset() {
	*x = CChatRoom_UpdateMessageReaction_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_UpdateMessageReaction_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_UpdateMessageReaction_Request) ProtoMessage() {}

func (x *CChatRoom_UpdateMessageReaction_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_UpdateMessageReaction_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_UpdateMessageReaction_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{113}
}

func (x *CChatRoom_UpdateMessageReaction_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_UpdateMessageReaction_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CChatRoom_UpdateMessageReaction_Request) GetServerTimestamp() uint32 {
	if x != nil && x.ServerTimestamp != nil {
		return *x.ServerTimestamp
	}
	return 0
}

func (x *CChatRoom_UpdateMessageReaction_Request) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

func (x *CChatRoom_UpdateMessageReaction_Request) GetReactionType() EChatRoomMessageReactionType {
	if x != nil && x.ReactionType != nil {
		return *x.ReactionType
	}
	return Default_CChatRoom_UpdateMessageReaction_Request_ReactionType
}

func (x *CChatRoom_UpdateMessageReaction_Request) GetReaction() string {
	if x != nil && x.Reaction != nil {
		return *x.Reaction
	}
	return ""
}

func (x *CChatRoom_UpdateMessageReaction_Request) GetIsAdd() bool {
	if x != nil && x.IsAdd != nil {
		return *x.IsAdd
	}
	return false
}

type CChatRoom_UpdateMessageReaction_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumReactors *uint32 `protobuf:"varint,1,opt,name=num_reactors,json=numReactors" json:"num_reactors,omitempty"`
}

func (x *CChatRoom_UpdateMessageReaction_Response) Reset() {
	*x = CChatRoom_UpdateMessageReaction_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_UpdateMessageReaction_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_UpdateMessageReaction_Response) ProtoMessage() {}

func (x *CChatRoom_UpdateMessageReaction_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_UpdateMessageReaction_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_UpdateMessageReaction_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{114}
}

func (x *CChatRoom_UpdateMessageReaction_Response) GetNumReactors() uint32 {
	if x != nil && x.NumReactors != nil {
		return *x.NumReactors
	}
	return 0
}

type CChatRoom_GetMessageReactionReactors_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId     *uint64                       `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId          *uint64                       `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ServerTimestamp *uint32                       `protobuf:"varint,3,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
	Ordinal         *uint32                       `protobuf:"varint,4,opt,name=ordinal" json:"ordinal,omitempty"`
	ReactionType    *EChatRoomMessageReactionType `protobuf:"varint,5,opt,name=reaction_type,json=reactionType,enum=EChatRoomMessageReactionType,def=0" json:"reaction_type,omitempty"`
	Reaction        *string                       `protobuf:"bytes,6,opt,name=reaction" json:"reaction,omitempty"`
	Limit           *uint32                       `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
}

// Default values for CChatRoom_GetMessageReactionReactors_Request fields.
const (
	Default_CChatRoom_GetMessageReactionReactors_Request_ReactionType = EChatRoomMessageReactionType_k_EChatRoomMessageReactionType_Invalid
)

func (x *CChatRoom_GetMessageReactionReactors_Request) Reset() {
	*x = CChatRoom_GetMessageReactionReactors_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetMessageReactionReactors_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetMessageReactionReactors_Request) ProtoMessage() {}

func (x *CChatRoom_GetMessageReactionReactors_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetMessageReactionReactors_Request.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetMessageReactionReactors_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{115}
}

func (x *CChatRoom_GetMessageReactionReactors_Request) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_GetMessageReactionReactors_Request) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CChatRoom_GetMessageReactionReactors_Request) GetServerTimestamp() uint32 {
	if x != nil && x.ServerTimestamp != nil {
		return *x.ServerTimestamp
	}
	return 0
}

func (x *CChatRoom_GetMessageReactionReactors_Request) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

func (x *CChatRoom_GetMessageReactionReactors_Request) GetReactionType() EChatRoomMessageReactionType {
	if x != nil && x.ReactionType != nil {
		return *x.ReactionType
	}
	return Default_CChatRoom_GetMessageReactionReactors_Request_ReactionType
}

func (x *CChatRoom_GetMessageReactionReactors_Request) GetReaction() string {
	if x != nil && x.Reaction != nil {
		return *x.Reaction
	}
	return ""
}

func (x *CChatRoom_GetMessageReactionReactors_Request) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type CChatRoom_GetMessageReactionReactors_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reactors []uint32 `protobuf:"varint,1,rep,name=reactors" json:"reactors,omitempty"`
}

func (x *CChatRoom_GetMessageReactionReactors_Response) Reset() {
	*x = CChatRoom_GetMessageReactionReactors_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetMessageReactionReactors_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetMessageReactionReactors_Response) ProtoMessage() {}

func (x *CChatRoom_GetMessageReactionReactors_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetMessageReactionReactors_Response.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetMessageReactionReactors_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{116}
}

func (x *CChatRoom_GetMessageReactionReactors_Response) GetReactors() []uint32 {
	if x != nil {
		return x.Reactors
	}
	return nil
}

type CClanChatRooms_GetClanChatRoomInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid    *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Autocreate *bool   `protobuf:"varint,2,opt,name=autocreate,def=1" json:"autocreate,omitempty"`
}

// Default values for CClanChatRooms_GetClanChatRoomInfo_Request fields.
const (
	Default_CClanChatRooms_GetClanChatRoomInfo_Request_Autocreate = bool(true)
)

func (x *CClanChatRooms_GetClanChatRoomInfo_Request) Reset() {
	*x = CClanChatRooms_GetClanChatRoomInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanChatRooms_GetClanChatRoomInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanChatRooms_GetClanChatRoomInfo_Request) ProtoMessage() {}

func (x *CClanChatRooms_GetClanChatRoomInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanChatRooms_GetClanChatRoomInfo_Request.ProtoReflect.Descriptor instead.
func (*CClanChatRooms_GetClanChatRoomInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{117}
}

func (x *CClanChatRooms_GetClanChatRoomInfo_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CClanChatRooms_GetClanChatRoomInfo_Request) GetAutocreate() bool {
	if x != nil && x.Autocreate != nil {
		return *x.Autocreate
	}
	return Default_CClanChatRooms_GetClanChatRoomInfo_Request_Autocreate
}

type CClanChatRooms_GetClanChatRoomInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupSummary *CChatRoom_GetChatRoomGroupSummary_Response `protobuf:"bytes,1,opt,name=chat_group_summary,json=chatGroupSummary" json:"chat_group_summary,omitempty"`
}

func (x *CClanChatRooms_GetClanChatRoomInfo_Response) Reset() {
	*x = CClanChatRooms_GetClanChatRoomInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanChatRooms_GetClanChatRoomInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanChatRooms_GetClanChatRoomInfo_Response) ProtoMessage() {}

func (x *CClanChatRooms_GetClanChatRoomInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanChatRooms_GetClanChatRoomInfo_Response.ProtoReflect.Descriptor instead.
func (*CClanChatRooms_GetClanChatRoomInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{118}
}

func (x *CClanChatRooms_GetClanChatRoomInfo_Response) GetChatGroupSummary() *CChatRoom_GetChatRoomGroupSummary_Response {
	if x != nil {
		return x.ChatGroupSummary
	}
	return nil
}

type CClanChatRooms_SetClanChatRoomPrivate_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid         *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	ChatRoomPrivate *bool   `protobuf:"varint,2,opt,name=chat_room_private,json=chatRoomPrivate" json:"chat_room_private,omitempty"`
}

func (x *CClanChatRooms_SetClanChatRoomPrivate_Request) Reset() {
	*x = CClanChatRooms_SetClanChatRoomPrivate_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanChatRooms_SetClanChatRoomPrivate_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanChatRooms_SetClanChatRoomPrivate_Request) ProtoMessage() {}

func (x *CClanChatRooms_SetClanChatRoomPrivate_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanChatRooms_SetClanChatRoomPrivate_Request.ProtoReflect.Descriptor instead.
func (*CClanChatRooms_SetClanChatRoomPrivate_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{119}
}

func (x *CClanChatRooms_SetClanChatRoomPrivate_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CClanChatRooms_SetClanChatRoomPrivate_Request) GetChatRoomPrivate() bool {
	if x != nil && x.ChatRoomPrivate != nil {
		return *x.ChatRoomPrivate
	}
	return false
}

type CClanChatRooms_SetClanChatRoomPrivate_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatRoomPrivate *bool `protobuf:"varint,1,opt,name=chat_room_private,json=chatRoomPrivate" json:"chat_room_private,omitempty"`
}

func (x *CClanChatRooms_SetClanChatRoomPrivate_Response) Reset() {
	*x = CClanChatRooms_SetClanChatRoomPrivate_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClanChatRooms_SetClanChatRoomPrivate_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClanChatRooms_SetClanChatRoomPrivate_Response) ProtoMessage() {}

func (x *CClanChatRooms_SetClanChatRoomPrivate_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClanChatRooms_SetClanChatRoomPrivate_Response.ProtoReflect.Descriptor instead.
func (*CClanChatRooms_SetClanChatRoomPrivate_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{120}
}

func (x *CClanChatRooms_SetClanChatRoomPrivate_Response) GetChatRoomPrivate() bool {
	if x != nil && x.ChatRoomPrivate != nil {
		return *x.ChatRoomPrivate
	}
	return false
}

type CChatMentions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MentionAll        *bool    `protobuf:"varint,1,opt,name=mention_all,json=mentionAll" json:"mention_all,omitempty"`
	MentionHere       *bool    `protobuf:"varint,2,opt,name=mention_here,json=mentionHere" json:"mention_here,omitempty"`
	MentionAccountids []uint32 `protobuf:"varint,3,rep,name=mention_accountids,json=mentionAccountids" json:"mention_accountids,omitempty"`
}

func (x *CChatMentions) Reset() {
	*x = CChatMentions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatMentions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatMentions) ProtoMessage() {}

func (x *CChatMentions) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatMentions.ProtoReflect.Descriptor instead.
func (*CChatMentions) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{121}
}

func (x *CChatMentions) GetMentionAll() bool {
	if x != nil && x.MentionAll != nil {
		return *x.MentionAll
	}
	return false
}

func (x *CChatMentions) GetMentionHere() bool {
	if x != nil && x.MentionHere != nil {
		return *x.MentionHere
	}
	return false
}

func (x *CChatMentions) GetMentionAccountids() []uint32 {
	if x != nil {
		return x.MentionAccountids
	}
	return nil
}

type CChatRoom_IncomingChatMessage_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId     *uint64        `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId          *uint64        `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	SteamidSender   *uint64        `protobuf:"fixed64,3,opt,name=steamid_sender,json=steamidSender" json:"steamid_sender,omitempty"`
	Message         *string        `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Timestamp       *uint32        `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	Mentions        *CChatMentions `protobuf:"bytes,6,opt,name=mentions" json:"mentions,omitempty"`
	Ordinal         *uint32        `protobuf:"varint,7,opt,name=ordinal" json:"ordinal,omitempty"`
	ServerMessage   *ServerMessage `protobuf:"bytes,8,opt,name=server_message,json=serverMessage" json:"server_message,omitempty"`
	MessageNoBbcode *string        `protobuf:"bytes,9,opt,name=message_no_bbcode,json=messageNoBbcode" json:"message_no_bbcode,omitempty"`
	ChatName        *string        `protobuf:"bytes,10,opt,name=chat_name,json=chatName" json:"chat_name,omitempty"`
}

func (x *CChatRoom_IncomingChatMessage_Notification) Reset() {
	*x = CChatRoom_IncomingChatMessage_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_IncomingChatMessage_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_IncomingChatMessage_Notification) ProtoMessage() {}

func (x *CChatRoom_IncomingChatMessage_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_IncomingChatMessage_Notification.ProtoReflect.Descriptor instead.
func (*CChatRoom_IncomingChatMessage_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{122}
}

func (x *CChatRoom_IncomingChatMessage_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_IncomingChatMessage_Notification) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CChatRoom_IncomingChatMessage_Notification) GetSteamidSender() uint64 {
	if x != nil && x.SteamidSender != nil {
		return *x.SteamidSender
	}
	return 0
}

func (x *CChatRoom_IncomingChatMessage_Notification) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CChatRoom_IncomingChatMessage_Notification) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CChatRoom_IncomingChatMessage_Notification) GetMentions() *CChatMentions {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *CChatRoom_IncomingChatMessage_Notification) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

func (x *CChatRoom_IncomingChatMessage_Notification) GetServerMessage() *ServerMessage {
	if x != nil {
		return x.ServerMessage
	}
	return nil
}

func (x *CChatRoom_IncomingChatMessage_Notification) GetMessageNoBbcode() string {
	if x != nil && x.MessageNoBbcode != nil {
		return *x.MessageNoBbcode
	}
	return ""
}

func (x *CChatRoom_IncomingChatMessage_Notification) GetChatName() string {
	if x != nil && x.ChatName != nil {
		return *x.ChatName
	}
	return ""
}

type CChatRoom_ChatMessageModified_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64                                                   `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId      *uint64                                                   `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Messages    []*CChatRoom_ChatMessageModified_Notification_ChatMessage `protobuf:"bytes,3,rep,name=messages" json:"messages,omitempty"`
}

func (x *CChatRoom_ChatMessageModified_Notification) Reset() {
	*x = CChatRoom_ChatMessageModified_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_ChatMessageModified_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_ChatMessageModified_Notification) ProtoMessage() {}

func (x *CChatRoom_ChatMessageModified_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_ChatMessageModified_Notification.ProtoReflect.Descriptor instead.
func (*CChatRoom_ChatMessageModified_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{123}
}

func (x *CChatRoom_ChatMessageModified_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_ChatMessageModified_Notification) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CChatRoom_ChatMessageModified_Notification) GetMessages() []*CChatRoom_ChatMessageModified_Notification_ChatMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type CChatRoom_MemberStateChange_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId *uint64                     `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	Member      *CChatRoomMember            `protobuf:"bytes,2,opt,name=member" json:"member,omitempty"`
	Change      *EChatRoomMemberStateChange `protobuf:"varint,3,opt,name=change,enum=EChatRoomMemberStateChange,def=0" json:"change,omitempty"`
}

// Default values for CChatRoom_MemberStateChange_Notification fields.
const (
	Default_CChatRoom_MemberStateChange_Notification_Change = EChatRoomMemberStateChange_k_EChatRoomMemberStateChange_Invalid
)

func (x *CChatRoom_MemberStateChange_Notification) Reset() {
	*x = CChatRoom_MemberStateChange_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_MemberStateChange_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_MemberStateChange_Notification) ProtoMessage() {}

func (x *CChatRoom_MemberStateChange_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_MemberStateChange_Notification.ProtoReflect.Descriptor instead.
func (*CChatRoom_MemberStateChange_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{124}
}

func (x *CChatRoom_MemberStateChange_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_MemberStateChange_Notification) GetMember() *CChatRoomMember {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *CChatRoom_MemberStateChange_Notification) GetChange() EChatRoomMemberStateChange {
	if x != nil && x.Change != nil {
		return *x.Change
	}
	return Default_CChatRoom_MemberStateChange_Notification_Change
}

type CChatRoom_ChatRoomHeaderState_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeaderState *CChatRoomGroupHeaderState `protobuf:"bytes,1,opt,name=header_state,json=headerState" json:"header_state,omitempty"`
}

func (x *CChatRoom_ChatRoomHeaderState_Notification) Reset() {
	*x = CChatRoom_ChatRoomHeaderState_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_ChatRoomHeaderState_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_ChatRoomHeaderState_Notification) ProtoMessage() {}

func (x *CChatRoom_ChatRoomHeaderState_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_ChatRoomHeaderState_Notification.ProtoReflect.Descriptor instead.
func (*CChatRoom_ChatRoomHeaderState_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{125}
}

func (x *CChatRoom_ChatRoomHeaderState_Notification) GetHeaderState() *CChatRoomGroupHeaderState {
	if x != nil {
		return x.HeaderState
	}
	return nil
}

type CChatRoom_ChatRoomGroupRoomsChange_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId   *uint64           `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	DefaultChatId *uint64           `protobuf:"varint,2,opt,name=default_chat_id,json=defaultChatId" json:"default_chat_id,omitempty"`
	ChatRooms     []*CChatRoomState `protobuf:"bytes,3,rep,name=chat_rooms,json=chatRooms" json:"chat_rooms,omitempty"`
}

func (x *CChatRoom_ChatRoomGroupRoomsChange_Notification) Reset() {
	*x = CChatRoom_ChatRoomGroupRoomsChange_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_ChatRoomGroupRoomsChange_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_ChatRoomGroupRoomsChange_Notification) ProtoMessage() {}

func (x *CChatRoom_ChatRoomGroupRoomsChange_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_ChatRoomGroupRoomsChange_Notification.ProtoReflect.Descriptor instead.
func (*CChatRoom_ChatRoomGroupRoomsChange_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{126}
}

func (x *CChatRoom_ChatRoomGroupRoomsChange_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_ChatRoomGroupRoomsChange_Notification) GetDefaultChatId() uint64 {
	if x != nil && x.DefaultChatId != nil {
		return *x.DefaultChatId
	}
	return 0
}

func (x *CChatRoom_ChatRoomGroupRoomsChange_Notification) GetChatRooms() []*CChatRoomState {
	if x != nil {
		return x.ChatRooms
	}
	return nil
}

type CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId      *uint64 `protobuf:"varint,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ChatGroupId *uint64 `protobuf:"varint,2,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
}

func (x *CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification) Reset() {
	*x = CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification) ProtoMessage() {}

func (x *CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification.ProtoReflect.Descriptor instead.
func (*CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{127}
}

func (x *CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

type ChatRoomClient_NotifyChatGroupUserStateChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId        *uint64                                     `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	UserChatGroupState *CUserChatRoomGroupState                    `protobuf:"bytes,2,opt,name=user_chat_group_state,json=userChatGroupState" json:"user_chat_group_state,omitempty"`
	GroupSummary       *CChatRoom_GetChatRoomGroupSummary_Response `protobuf:"bytes,3,opt,name=group_summary,json=groupSummary" json:"group_summary,omitempty"`
	UserAction         *EChatRoomMemberStateChange                 `protobuf:"varint,4,opt,name=user_action,json=userAction,enum=EChatRoomMemberStateChange,def=0" json:"user_action,omitempty"`
}

// Default values for ChatRoomClient_NotifyChatGroupUserStateChanged_Notification fields.
const (
	Default_ChatRoomClient_NotifyChatGroupUserStateChanged_Notification_UserAction = EChatRoomMemberStateChange_k_EChatRoomMemberStateChange_Invalid
)

func (x *ChatRoomClient_NotifyChatGroupUserStateChanged_Notification) Reset() {
	*x = ChatRoomClient_NotifyChatGroupUserStateChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRoomClient_NotifyChatGroupUserStateChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRoomClient_NotifyChatGroupUserStateChanged_Notification) ProtoMessage() {}

func (x *ChatRoomClient_NotifyChatGroupUserStateChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRoomClient_NotifyChatGroupUserStateChanged_Notification.ProtoReflect.Descriptor instead.
func (*ChatRoomClient_NotifyChatGroupUserStateChanged_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{128}
}

func (x *ChatRoomClient_NotifyChatGroupUserStateChanged_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *ChatRoomClient_NotifyChatGroupUserStateChanged_Notification) GetUserChatGroupState() *CUserChatRoomGroupState {
	if x != nil {
		return x.UserChatGroupState
	}
	return nil
}

func (x *ChatRoomClient_NotifyChatGroupUserStateChanged_Notification) GetGroupSummary() *CChatRoom_GetChatRoomGroupSummary_Response {
	if x != nil {
		return x.GroupSummary
	}
	return nil
}

func (x *ChatRoomClient_NotifyChatGroupUserStateChanged_Notification) GetUserAction() EChatRoomMemberStateChange {
	if x != nil && x.UserAction != nil {
		return *x.UserAction
	}
	return Default_ChatRoomClient_NotifyChatGroupUserStateChanged_Notification_UserAction
}

type ChatRoomClient_NotifyChatRoomDisconnect_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupIds []uint64 `protobuf:"varint,1,rep,name=chat_group_ids,json=chatGroupIds" json:"chat_group_ids,omitempty"`
}

func (x *ChatRoomClient_NotifyChatRoomDisconnect_Notification) Reset() {
	*x = ChatRoomClient_NotifyChatRoomDisconnect_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRoomClient_NotifyChatRoomDisconnect_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRoomClient_NotifyChatRoomDisconnect_Notification) ProtoMessage() {}

func (x *ChatRoomClient_NotifyChatRoomDisconnect_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRoomClient_NotifyChatRoomDisconnect_Notification.ProtoReflect.Descriptor instead.
func (*ChatRoomClient_NotifyChatRoomDisconnect_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{129}
}

func (x *ChatRoomClient_NotifyChatRoomDisconnect_Notification) GetChatGroupIds() []uint64 {
	if x != nil {
		return x.ChatGroupIds
	}
	return nil
}

type CChatRoomMemberListView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start              *int32 `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
	End                *int32 `protobuf:"varint,4,opt,name=end" json:"end,omitempty"`
	TotalCount         *int32 `protobuf:"varint,5,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	ClientChangenumber *int32 `protobuf:"varint,6,opt,name=client_changenumber,json=clientChangenumber" json:"client_changenumber,omitempty"`
	ServerChangenumber *int32 `protobuf:"varint,7,opt,name=server_changenumber,json=serverChangenumber" json:"server_changenumber,omitempty"`
}

func (x *CChatRoomMemberListView) Reset() {
	*x = CChatRoomMemberListView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoomMemberListView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoomMemberListView) ProtoMessage() {}

func (x *CChatRoomMemberListView) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoomMemberListView.ProtoReflect.Descriptor instead.
func (*CChatRoomMemberListView) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{130}
}

func (x *CChatRoomMemberListView) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *CChatRoomMemberListView) GetEnd() int32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

func (x *CChatRoomMemberListView) GetTotalCount() int32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *CChatRoomMemberListView) GetClientChangenumber() int32 {
	if x != nil && x.ClientChangenumber != nil {
		return *x.ClientChangenumber
	}
	return 0
}

func (x *CChatRoomMemberListView) GetServerChangenumber() int32 {
	if x != nil && x.ServerChangenumber != nil {
		return *x.ServerChangenumber
	}
	return 0
}

type CChatRoomMemberSummaryCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ingame  *int32 `protobuf:"varint,1,opt,name=ingame" json:"ingame,omitempty"`
	Online  *int32 `protobuf:"varint,2,opt,name=online" json:"online,omitempty"`
	Offline *int32 `protobuf:"varint,3,opt,name=offline" json:"offline,omitempty"`
}

func (x *CChatRoomMemberSummaryCounts) Reset() {
	*x = CChatRoomMemberSummaryCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoomMemberSummaryCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoomMemberSummaryCounts) ProtoMessage() {}

func (x *CChatRoomMemberSummaryCounts) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoomMemberSummaryCounts.ProtoReflect.Descriptor instead.
func (*CChatRoomMemberSummaryCounts) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{131}
}

func (x *CChatRoomMemberSummaryCounts) GetIngame() int32 {
	if x != nil && x.Ingame != nil {
		return *x.Ingame
	}
	return 0
}

func (x *CChatRoomMemberSummaryCounts) GetOnline() int32 {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return 0
}

func (x *CChatRoomMemberSummaryCounts) GetOffline() int32 {
	if x != nil && x.Offline != nil {
		return *x.Offline
	}
	return 0
}

type CChatRoomClient_MemberListViewUpdated_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId        *uint64                                                                   `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ViewId             *uint64                                                                   `protobuf:"varint,2,opt,name=view_id,json=viewId" json:"view_id,omitempty"`
	View               *CChatRoomMemberListView                                                  `protobuf:"bytes,3,opt,name=view" json:"view,omitempty"`
	Members            []*CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	StatusFlags        *uint32                                                                   `protobuf:"varint,5,opt,name=status_flags,json=statusFlags" json:"status_flags,omitempty"`
	MemberSummary      *CChatRoomMemberSummaryCounts                                             `protobuf:"bytes,6,opt,name=member_summary,json=memberSummary" json:"member_summary,omitempty"`
	SubscribedPersonas []*CMsgClientPersonaState_Friend                                          `protobuf:"bytes,7,rep,name=subscribed_personas,json=subscribedPersonas" json:"subscribed_personas,omitempty"`
}

func (x *CChatRoomClient_MemberListViewUpdated_Notification) Reset() {
	*x = CChatRoomClient_MemberListViewUpdated_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoomClient_MemberListViewUpdated_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoomClient_MemberListViewUpdated_Notification) ProtoMessage() {}

func (x *CChatRoomClient_MemberListViewUpdated_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoomClient_MemberListViewUpdated_Notification.ProtoReflect.Descriptor instead.
func (*CChatRoomClient_MemberListViewUpdated_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{132}
}

func (x *CChatRoomClient_MemberListViewUpdated_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoomClient_MemberListViewUpdated_Notification) GetViewId() uint64 {
	if x != nil && x.ViewId != nil {
		return *x.ViewId
	}
	return 0
}

func (x *CChatRoomClient_MemberListViewUpdated_Notification) GetView() *CChatRoomMemberListView {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *CChatRoomClient_MemberListViewUpdated_Notification) GetMembers() []*CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CChatRoomClient_MemberListViewUpdated_Notification) GetStatusFlags() uint32 {
	if x != nil && x.StatusFlags != nil {
		return *x.StatusFlags
	}
	return 0
}

func (x *CChatRoomClient_MemberListViewUpdated_Notification) GetMemberSummary() *CChatRoomMemberSummaryCounts {
	if x != nil {
		return x.MemberSummary
	}
	return nil
}

func (x *CChatRoomClient_MemberListViewUpdated_Notification) GetSubscribedPersonas() []*CMsgClientPersonaState_Friend {
	if x != nil {
		return x.SubscribedPersonas
	}
	return nil
}

type CChatRoom_MessageReaction_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatGroupId     *uint64                       `protobuf:"varint,1,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId          *uint64                       `protobuf:"varint,2,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ServerTimestamp *uint32                       `protobuf:"varint,3,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
	Ordinal         *uint32                       `protobuf:"varint,4,opt,name=ordinal" json:"ordinal,omitempty"`
	Reactor         *uint64                       `protobuf:"fixed64,5,opt,name=reactor" json:"reactor,omitempty"`
	ReactionType    *EChatRoomMessageReactionType `protobuf:"varint,6,opt,name=reaction_type,json=reactionType,enum=EChatRoomMessageReactionType,def=0" json:"reaction_type,omitempty"`
	Reaction        *string                       `protobuf:"bytes,7,opt,name=reaction" json:"reaction,omitempty"`
	IsAdd           *bool                         `protobuf:"varint,8,opt,name=is_add,json=isAdd" json:"is_add,omitempty"`
}

// Default values for CChatRoom_MessageReaction_Notification fields.
const (
	Default_CChatRoom_MessageReaction_Notification_ReactionType = EChatRoomMessageReactionType_k_EChatRoomMessageReactionType_Invalid
)

func (x *CChatRoom_MessageReaction_Notification) Reset() {
	*x = CChatRoom_MessageReaction_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_MessageReaction_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_MessageReaction_Notification) ProtoMessage() {}

func (x *CChatRoom_MessageReaction_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_MessageReaction_Notification.ProtoReflect.Descriptor instead.
func (*CChatRoom_MessageReaction_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{133}
}

func (x *CChatRoom_MessageReaction_Notification) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

func (x *CChatRoom_MessageReaction_Notification) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CChatRoom_MessageReaction_Notification) GetServerTimestamp() uint32 {
	if x != nil && x.ServerTimestamp != nil {
		return *x.ServerTimestamp
	}
	return 0
}

func (x *CChatRoom_MessageReaction_Notification) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

func (x *CChatRoom_MessageReaction_Notification) GetReactor() uint64 {
	if x != nil && x.Reactor != nil {
		return *x.Reactor
	}
	return 0
}

func (x *CChatRoom_MessageReaction_Notification) GetReactionType() EChatRoomMessageReactionType {
	if x != nil && x.ReactionType != nil {
		return *x.ReactionType
	}
	return Default_CChatRoom_MessageReaction_Notification_ReactionType
}

func (x *CChatRoom_MessageReaction_Notification) GetReaction() string {
	if x != nil && x.Reaction != nil {
		return *x.Reaction
	}
	return ""
}

func (x *CChatRoom_MessageReaction_Notification) GetIsAdd() bool {
	if x != nil && x.IsAdd != nil {
		return *x.IsAdd
	}
	return false
}

type CChatUsability_ClientUsabilityMetrics_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricsRunId   *uint32                                                           `protobuf:"varint,1,opt,name=metrics_run_id,json=metricsRunId" json:"metrics_run_id,omitempty"`
	ClientBuild    *uint32                                                           `protobuf:"varint,2,opt,name=client_build,json=clientBuild" json:"client_build,omitempty"`
	MetricsVersion *uint32                                                           `protobuf:"varint,3,opt,name=metrics_version,json=metricsVersion" json:"metrics_version,omitempty"`
	InWeb          *bool                                                             `protobuf:"varint,4,opt,name=in_web,json=inWeb" json:"in_web,omitempty"`
	Settings       *CChatUsability_ClientUsabilityMetrics_Notification_Settings      `protobuf:"bytes,10,opt,name=settings" json:"settings,omitempty"`
	VoiceSettings  *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings `protobuf:"bytes,11,opt,name=voice_settings,json=voiceSettings" json:"voice_settings,omitempty"`
	UiState        *CChatUsability_ClientUsabilityMetrics_Notification_UIState       `protobuf:"bytes,12,opt,name=ui_state,json=uiState" json:"ui_state,omitempty"`
	Metrics        *CChatUsability_ClientUsabilityMetrics_Notification_Metrics       `protobuf:"bytes,13,opt,name=metrics" json:"metrics,omitempty"`
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) Reset() {
	*x = CChatUsability_ClientUsabilityMetrics_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatUsability_ClientUsabilityMetrics_Notification) ProtoMessage() {}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatUsability_ClientUsabilityMetrics_Notification.ProtoReflect.Descriptor instead.
func (*CChatUsability_ClientUsabilityMetrics_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{134}
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) GetMetricsRunId() uint32 {
	if x != nil && x.MetricsRunId != nil {
		return *x.MetricsRunId
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) GetClientBuild() uint32 {
	if x != nil && x.ClientBuild != nil {
		return *x.ClientBuild
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) GetMetricsVersion() uint32 {
	if x != nil && x.MetricsVersion != nil {
		return *x.MetricsVersion
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) GetInWeb() bool {
	if x != nil && x.InWeb != nil {
		return *x.InWeb
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) GetSettings() *CChatUsability_ClientUsabilityMetrics_Notification_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) GetVoiceSettings() *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings {
	if x != nil {
		return x.VoiceSettings
	}
	return nil
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) GetUiState() *CChatUsability_ClientUsabilityMetrics_Notification_UIState {
	if x != nil {
		return x.UiState
	}
	return nil
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification) GetMetrics() *CChatUsability_ClientUsabilityMetrics_Notification_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type CChatUsability_RequestClientUsabilityMetrics_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricsRunId *uint32 `protobuf:"varint,1,opt,name=metrics_run_id,json=metricsRunId" json:"metrics_run_id,omitempty"`
}

func (x *CChatUsability_RequestClientUsabilityMetrics_Notification) Reset() {
	*x = CChatUsability_RequestClientUsabilityMetrics_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatUsability_RequestClientUsabilityMetrics_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatUsability_RequestClientUsabilityMetrics_Notification) ProtoMessage() {}

func (x *CChatUsability_RequestClientUsabilityMetrics_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatUsability_RequestClientUsabilityMetrics_Notification.ProtoReflect.Descriptor instead.
func (*CChatUsability_RequestClientUsabilityMetrics_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{135}
}

func (x *CChatUsability_RequestClientUsabilityMetrics_Notification) GetMetricsRunId() uint32 {
	if x != nil && x.MetricsRunId != nil {
		return *x.MetricsRunId
	}
	return 0
}

type CChatRoom_GetMessageHistory_Response_ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender          *uint32                                                             `protobuf:"varint,1,opt,name=sender" json:"sender,omitempty"`
	ServerTimestamp *uint32                                                             `protobuf:"varint,2,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
	Message         *string                                                             `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Ordinal         *uint32                                                             `protobuf:"varint,4,opt,name=ordinal" json:"ordinal,omitempty"`
	ServerMessage   *ServerMessage                                                      `protobuf:"bytes,5,opt,name=server_message,json=serverMessage" json:"server_message,omitempty"`
	Deleted         *bool                                                               `protobuf:"varint,6,opt,name=deleted" json:"deleted,omitempty"`
	Reactions       []*CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction `protobuf:"bytes,7,rep,name=reactions" json:"reactions,omitempty"`
}

func (x *CChatRoom_GetMessageHistory_Response_ChatMessage) Reset() {
	*x = CChatRoom_GetMessageHistory_Response_ChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetMessageHistory_Response_ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetMessageHistory_Response_ChatMessage) ProtoMessage() {}

func (x *CChatRoom_GetMessageHistory_Response_ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetMessageHistory_Response_ChatMessage.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetMessageHistory_Response_ChatMessage) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{77, 0}
}

func (x *CChatRoom_GetMessageHistory_Response_ChatMessage) GetSender() uint32 {
	if x != nil && x.Sender != nil {
		return *x.Sender
	}
	return 0
}

func (x *CChatRoom_GetMessageHistory_Response_ChatMessage) GetServerTimestamp() uint32 {
	if x != nil && x.ServerTimestamp != nil {
		return *x.ServerTimestamp
	}
	return 0
}

func (x *CChatRoom_GetMessageHistory_Response_ChatMessage) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CChatRoom_GetMessageHistory_Response_ChatMessage) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

func (x *CChatRoom_GetMessageHistory_Response_ChatMessage) GetServerMessage() *ServerMessage {
	if x != nil {
		return x.ServerMessage
	}
	return nil
}

func (x *CChatRoom_GetMessageHistory_Response_ChatMessage) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

func (x *CChatRoom_GetMessageHistory_Response_ChatMessage) GetReactions() []*CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction {
	if x != nil {
		return x.Reactions
	}
	return nil
}

type CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReactionType   *EChatRoomMessageReactionType `protobuf:"varint,1,opt,name=reaction_type,json=reactionType,enum=EChatRoomMessageReactionType,def=0" json:"reaction_type,omitempty"`
	Reaction       *string                       `protobuf:"bytes,2,opt,name=reaction" json:"reaction,omitempty"`
	NumReactors    *uint32                       `protobuf:"varint,3,opt,name=num_reactors,json=numReactors" json:"num_reactors,omitempty"`
	HasUserReacted *bool                         `protobuf:"varint,4,opt,name=has_user_reacted,json=hasUserReacted" json:"has_user_reacted,omitempty"`
}

// Default values for CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction fields.
const (
	Default_CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction_ReactionType = EChatRoomMessageReactionType_k_EChatRoomMessageReactionType_Invalid
)

func (x *CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction) Reset() {
	*x = CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction) ProtoMessage() {}

func (x *CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{77, 0, 0}
}

func (x *CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction) GetReactionType() EChatRoomMessageReactionType {
	if x != nil && x.ReactionType != nil {
		return *x.ReactionType
	}
	return Default_CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction_ReactionType
}

func (x *CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction) GetReaction() string {
	if x != nil && x.Reaction != nil {
		return *x.Reaction
	}
	return ""
}

func (x *CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction) GetNumReactors() uint32 {
	if x != nil && x.NumReactors != nil {
		return *x.NumReactors
	}
	return 0
}

func (x *CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction) GetHasUserReacted() bool {
	if x != nil && x.HasUserReacted != nil {
		return *x.HasUserReacted
	}
	return false
}

type CChatRoom_GetInviteLinksForGroup_Response_LinkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteCode     *string `protobuf:"bytes,1,opt,name=invite_code,json=inviteCode" json:"invite_code,omitempty"`
	SteamidCreator *uint64 `protobuf:"fixed64,2,opt,name=steamid_creator,json=steamidCreator" json:"steamid_creator,omitempty"`
	TimeExpires    *uint32 `protobuf:"varint,3,opt,name=time_expires,json=timeExpires" json:"time_expires,omitempty"`
	ChatId         *uint64 `protobuf:"varint,4,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
}

func (x *CChatRoom_GetInviteLinksForGroup_Response_LinkInfo) Reset() {
	*x = CChatRoom_GetInviteLinksForGroup_Response_LinkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetInviteLinksForGroup_Response_LinkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetInviteLinksForGroup_Response_LinkInfo) ProtoMessage() {}

func (x *CChatRoom_GetInviteLinksForGroup_Response_LinkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetInviteLinksForGroup_Response_LinkInfo.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetInviteLinksForGroup_Response_LinkInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{96, 0}
}

func (x *CChatRoom_GetInviteLinksForGroup_Response_LinkInfo) GetInviteCode() string {
	if x != nil && x.InviteCode != nil {
		return *x.InviteCode
	}
	return ""
}

func (x *CChatRoom_GetInviteLinksForGroup_Response_LinkInfo) GetSteamidCreator() uint64 {
	if x != nil && x.SteamidCreator != nil {
		return *x.SteamidCreator
	}
	return 0
}

func (x *CChatRoom_GetInviteLinksForGroup_Response_LinkInfo) GetTimeExpires() uint32 {
	if x != nil && x.TimeExpires != nil {
		return *x.TimeExpires
	}
	return 0
}

func (x *CChatRoom_GetInviteLinksForGroup_Response_LinkInfo) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

type CChatRoom_GetBanList_Response_BanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid      *uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	AccountidActor *uint32 `protobuf:"varint,2,opt,name=accountid_actor,json=accountidActor" json:"accountid_actor,omitempty"`
	TimeBanned     *uint32 `protobuf:"varint,3,opt,name=time_banned,json=timeBanned" json:"time_banned,omitempty"`
	BanReason      *string `protobuf:"bytes,4,opt,name=ban_reason,json=banReason" json:"ban_reason,omitempty"`
}

func (x *CChatRoom_GetBanList_Response_BanInfo) Reset() {
	*x = CChatRoom_GetBanList_Response_BanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_GetBanList_Response_BanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_GetBanList_Response_BanInfo) ProtoMessage() {}

func (x *CChatRoom_GetBanList_Response_BanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_GetBanList_Response_BanInfo.ProtoReflect.Descriptor instead.
func (*CChatRoom_GetBanList_Response_BanInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{98, 0}
}

func (x *CChatRoom_GetBanList_Response_BanInfo) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CChatRoom_GetBanList_Response_BanInfo) GetAccountidActor() uint32 {
	if x != nil && x.AccountidActor != nil {
		return *x.AccountidActor
	}
	return 0
}

func (x *CChatRoom_GetBanList_Response_BanInfo) GetTimeBanned() uint32 {
	if x != nil && x.TimeBanned != nil {
		return *x.TimeBanned
	}
	return 0
}

func (x *CChatRoom_GetBanList_Response_BanInfo) GetBanReason() string {
	if x != nil && x.BanReason != nil {
		return *x.BanReason
	}
	return ""
}

type CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesktopNotificationLevel *EChatRoomNotificationLevel `protobuf:"varint,1,opt,name=desktop_notification_level,json=desktopNotificationLevel,enum=EChatRoomNotificationLevel,def=0" json:"desktop_notification_level,omitempty"`
	MobileNotificationLevel  *EChatRoomNotificationLevel `protobuf:"varint,2,opt,name=mobile_notification_level,json=mobileNotificationLevel,enum=EChatRoomNotificationLevel,def=0" json:"mobile_notification_level,omitempty"`
	UnreadIndicatorMuted     *bool                       `protobuf:"varint,3,opt,name=unread_indicator_muted,json=unreadIndicatorMuted" json:"unread_indicator_muted,omitempty"`
}

// Default values for CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences fields.
const (
	Default_CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences_DesktopNotificationLevel = EChatRoomNotificationLevel_k_EChatroomNotificationLevel_Invalid
	Default_CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences_MobileNotificationLevel  = EChatRoomNotificationLevel_k_EChatroomNotificationLevel_Invalid
)

func (x *CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences) Reset() {
	*x = CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences) ProtoMessage() {}

func (x *CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences.ProtoReflect.Descriptor instead.
func (*CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{106, 0}
}

func (x *CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences) GetDesktopNotificationLevel() EChatRoomNotificationLevel {
	if x != nil && x.DesktopNotificationLevel != nil {
		return *x.DesktopNotificationLevel
	}
	return Default_CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences_DesktopNotificationLevel
}

func (x *CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences) GetMobileNotificationLevel() EChatRoomNotificationLevel {
	if x != nil && x.MobileNotificationLevel != nil {
		return *x.MobileNotificationLevel
	}
	return Default_CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences_MobileNotificationLevel
}

func (x *CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences) GetUnreadIndicatorMuted() bool {
	if x != nil && x.UnreadIndicatorMuted != nil {
		return *x.UnreadIndicatorMuted
	}
	return false
}

type CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId                   *uint64                     `protobuf:"varint,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	DesktopNotificationLevel *EChatRoomNotificationLevel `protobuf:"varint,2,opt,name=desktop_notification_level,json=desktopNotificationLevel,enum=EChatRoomNotificationLevel,def=0" json:"desktop_notification_level,omitempty"`
	MobileNotificationLevel  *EChatRoomNotificationLevel `protobuf:"varint,3,opt,name=mobile_notification_level,json=mobileNotificationLevel,enum=EChatRoomNotificationLevel,def=0" json:"mobile_notification_level,omitempty"`
	UnreadIndicatorMuted     *bool                       `protobuf:"varint,4,opt,name=unread_indicator_muted,json=unreadIndicatorMuted" json:"unread_indicator_muted,omitempty"`
}

// Default values for CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences fields.
const (
	Default_CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences_DesktopNotificationLevel = EChatRoomNotificationLevel_k_EChatroomNotificationLevel_Invalid
	Default_CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences_MobileNotificationLevel  = EChatRoomNotificationLevel_k_EChatroomNotificationLevel_Invalid
)

func (x *CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences) Reset() {
	*x = CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences) ProtoMessage() {}

func (x *CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences.ProtoReflect.Descriptor instead.
func (*CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{106, 1}
}

func (x *CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences) GetDesktopNotificationLevel() EChatRoomNotificationLevel {
	if x != nil && x.DesktopNotificationLevel != nil {
		return *x.DesktopNotificationLevel
	}
	return Default_CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences_DesktopNotificationLevel
}

func (x *CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences) GetMobileNotificationLevel() EChatRoomNotificationLevel {
	if x != nil && x.MobileNotificationLevel != nil {
		return *x.MobileNotificationLevel
	}
	return Default_CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences_MobileNotificationLevel
}

func (x *CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences) GetUnreadIndicatorMuted() bool {
	if x != nil && x.UnreadIndicatorMuted != nil {
		return *x.UnreadIndicatorMuted
	}
	return false
}

type CChatRoom_DeleteChatMessages_Request_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerTimestamp *uint32 `protobuf:"varint,1,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
	Ordinal         *uint32 `protobuf:"varint,2,opt,name=ordinal" json:"ordinal,omitempty"`
}

func (x *CChatRoom_DeleteChatMessages_Request_Message) Reset() {
	*x = CChatRoom_DeleteChatMessages_Request_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_DeleteChatMessages_Request_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_DeleteChatMessages_Request_Message) ProtoMessage() {}

func (x *CChatRoom_DeleteChatMessages_Request_Message) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_DeleteChatMessages_Request_Message.ProtoReflect.Descriptor instead.
func (*CChatRoom_DeleteChatMessages_Request_Message) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{108, 0}
}

func (x *CChatRoom_DeleteChatMessages_Request_Message) GetServerTimestamp() uint32 {
	if x != nil && x.ServerTimestamp != nil {
		return *x.ServerTimestamp
	}
	return 0
}

func (x *CChatRoom_DeleteChatMessages_Request_Message) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

type CChatRoom_SearchMembers_Response_MemberMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accountid *int32                         `protobuf:"varint,1,opt,name=accountid" json:"accountid,omitempty"`
	Persona   *CMsgClientPersonaState_Friend `protobuf:"bytes,2,opt,name=persona" json:"persona,omitempty"`
}

func (x *CChatRoom_SearchMembers_Response_MemberMatch) Reset() {
	*x = CChatRoom_SearchMembers_Response_MemberMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_SearchMembers_Response_MemberMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_SearchMembers_Response_MemberMatch) ProtoMessage() {}

func (x *CChatRoom_SearchMembers_Response_MemberMatch) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_SearchMembers_Response_MemberMatch.ProtoReflect.Descriptor instead.
func (*CChatRoom_SearchMembers_Response_MemberMatch) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{112, 0}
}

func (x *CChatRoom_SearchMembers_Response_MemberMatch) GetAccountid() int32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CChatRoom_SearchMembers_Response_MemberMatch) GetPersona() *CMsgClientPersonaState_Friend {
	if x != nil {
		return x.Persona
	}
	return nil
}

type CChatRoom_ChatMessageModified_Notification_ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerTimestamp *uint32 `protobuf:"varint,1,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
	Ordinal         *uint32 `protobuf:"varint,2,opt,name=ordinal" json:"ordinal,omitempty"`
	Deleted         *bool   `protobuf:"varint,3,opt,name=deleted" json:"deleted,omitempty"`
}

func (x *CChatRoom_ChatMessageModified_Notification_ChatMessage) Reset() {
	*x = CChatRoom_ChatMessageModified_Notification_ChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoom_ChatMessageModified_Notification_ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoom_ChatMessageModified_Notification_ChatMessage) ProtoMessage() {}

func (x *CChatRoom_ChatMessageModified_Notification_ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoom_ChatMessageModified_Notification_ChatMessage.ProtoReflect.Descriptor instead.
func (*CChatRoom_ChatMessageModified_Notification_ChatMessage) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{123, 0}
}

func (x *CChatRoom_ChatMessageModified_Notification_ChatMessage) GetServerTimestamp() uint32 {
	if x != nil && x.ServerTimestamp != nil {
		return *x.ServerTimestamp
	}
	return 0
}

func (x *CChatRoom_ChatMessageModified_Notification_ChatMessage) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

func (x *CChatRoom_ChatMessageModified_Notification_ChatMessage) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

type CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank      *int32                         `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	Accountid *uint32                        `protobuf:"varint,2,opt,name=accountid" json:"accountid,omitempty"`
	Persona   *CMsgClientPersonaState_Friend `protobuf:"bytes,3,opt,name=persona" json:"persona,omitempty"`
}

func (x *CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry) Reset() {
	*x = CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry) ProtoMessage() {}

func (x *CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry.ProtoReflect.Descriptor instead.
func (*CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{132, 0}
}

func (x *CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry) GetRank() int32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry) GetPersona() *CMsgClientPersonaState_Friend {
	if x != nil {
		return x.Persona
	}
	return nil
}

type CChatUsability_ClientUsabilityMetrics_Notification_Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotificationsShowIngame               *bool  `protobuf:"varint,1,opt,name=notifications_show_ingame,json=notificationsShowIngame" json:"notifications_show_ingame,omitempty"`
	NotificationsShowOnline               *bool  `protobuf:"varint,2,opt,name=notifications_show_online,json=notificationsShowOnline" json:"notifications_show_online,omitempty"`
	NotificationsShowMessage              *bool  `protobuf:"varint,3,opt,name=notifications_show_message,json=notificationsShowMessage" json:"notifications_show_message,omitempty"`
	NotificationsEventsAndAnnouncements   *bool  `protobuf:"varint,4,opt,name=notifications_events_and_announcements,json=notificationsEventsAndAnnouncements" json:"notifications_events_and_announcements,omitempty"`
	SoundsPlayIngame                      *bool  `protobuf:"varint,5,opt,name=sounds_play_ingame,json=soundsPlayIngame" json:"sounds_play_ingame,omitempty"`
	SoundsPlayOnline                      *bool  `protobuf:"varint,6,opt,name=sounds_play_online,json=soundsPlayOnline" json:"sounds_play_online,omitempty"`
	SoundsPlayMessage                     *bool  `protobuf:"varint,7,opt,name=sounds_play_message,json=soundsPlayMessage" json:"sounds_play_message,omitempty"`
	SoundsEventsAndAnnouncements          *bool  `protobuf:"varint,8,opt,name=sounds_events_and_announcements,json=soundsEventsAndAnnouncements" json:"sounds_events_and_announcements,omitempty"`
	AlwaysNewChatWindow                   *bool  `protobuf:"varint,9,opt,name=always_new_chat_window,json=alwaysNewChatWindow" json:"always_new_chat_window,omitempty"`
	ForceAlphabeticFriendSorting          *bool  `protobuf:"varint,10,opt,name=force_alphabetic_friend_sorting,json=forceAlphabeticFriendSorting" json:"force_alphabetic_friend_sorting,omitempty"`
	ChatFlashMode                         *int32 `protobuf:"varint,11,opt,name=chat_flash_mode,json=chatFlashMode" json:"chat_flash_mode,omitempty"`
	RememberOpenChats                     *bool  `protobuf:"varint,12,opt,name=remember_open_chats,json=rememberOpenChats" json:"remember_open_chats,omitempty"`
	CompactQuickAccess                    *bool  `protobuf:"varint,13,opt,name=compact_quick_access,json=compactQuickAccess" json:"compact_quick_access,omitempty"`
	CompactFriendsList                    *bool  `protobuf:"varint,14,opt,name=compact_friends_list,json=compactFriendsList" json:"compact_friends_list,omitempty"`
	NotificationsShowChatRoomNotification *bool  `protobuf:"varint,15,opt,name=notifications_show_chat_room_notification,json=notificationsShowChatRoomNotification" json:"notifications_show_chat_room_notification,omitempty"`
	SoundsPlayChatRoomNotification        *bool  `protobuf:"varint,16,opt,name=sounds_play_chat_room_notification,json=soundsPlayChatRoomNotification" json:"sounds_play_chat_room_notification,omitempty"`
	HideOfflineFriendsInTagGroups         *bool  `protobuf:"varint,17,opt,name=hide_offline_friends_in_tag_groups,json=hideOfflineFriendsInTagGroups" json:"hide_offline_friends_in_tag_groups,omitempty"`
	HideCategorizedFriends                *bool  `protobuf:"varint,18,opt,name=hide_categorized_friends,json=hideCategorizedFriends" json:"hide_categorized_friends,omitempty"`
	CategorizeInGameFriendsByGame         *bool  `protobuf:"varint,19,opt,name=categorize_in_game_friends_by_game,json=categorizeInGameFriendsByGame" json:"categorize_in_game_friends_by_game,omitempty"`
	ChatFontSize                          *int32 `protobuf:"varint,20,opt,name=chat_font_size,json=chatFontSize" json:"chat_font_size,omitempty"`
	Use24HourClock                        *bool  `protobuf:"varint,21,opt,name=use24hour_clock,json=use24hourClock" json:"use24hour_clock,omitempty"`
	DoNotDisturbMode                      *bool  `protobuf:"varint,22,opt,name=do_not_disturb_mode,json=doNotDisturbMode" json:"do_not_disturb_mode,omitempty"`
	DisableEmbedInlining                  *bool  `protobuf:"varint,23,opt,name=disable_embed_inlining,json=disableEmbedInlining" json:"disable_embed_inlining,omitempty"`
	SignIntoFriends                       *bool  `protobuf:"varint,24,opt,name=sign_into_friends,json=signIntoFriends" json:"sign_into_friends,omitempty"`
	AnimatedAvatars                       *bool  `protobuf:"varint,25,opt,name=animated_avatars,json=animatedAvatars" json:"animated_avatars,omitempty"`
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) Reset() {
	*x = CChatUsability_ClientUsabilityMetrics_Notification_Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatUsability_ClientUsabilityMetrics_Notification_Settings) ProtoMessage() {}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatUsability_ClientUsabilityMetrics_Notification_Settings.ProtoReflect.Descriptor instead.
func (*CChatUsability_ClientUsabilityMetrics_Notification_Settings) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{134, 0}
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetNotificationsShowIngame() bool {
	if x != nil && x.NotificationsShowIngame != nil {
		return *x.NotificationsShowIngame
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetNotificationsShowOnline() bool {
	if x != nil && x.NotificationsShowOnline != nil {
		return *x.NotificationsShowOnline
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetNotificationsShowMessage() bool {
	if x != nil && x.NotificationsShowMessage != nil {
		return *x.NotificationsShowMessage
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetNotificationsEventsAndAnnouncements() bool {
	if x != nil && x.NotificationsEventsAndAnnouncements != nil {
		return *x.NotificationsEventsAndAnnouncements
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetSoundsPlayIngame() bool {
	if x != nil && x.SoundsPlayIngame != nil {
		return *x.SoundsPlayIngame
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetSoundsPlayOnline() bool {
	if x != nil && x.SoundsPlayOnline != nil {
		return *x.SoundsPlayOnline
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetSoundsPlayMessage() bool {
	if x != nil && x.SoundsPlayMessage != nil {
		return *x.SoundsPlayMessage
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetSoundsEventsAndAnnouncements() bool {
	if x != nil && x.SoundsEventsAndAnnouncements != nil {
		return *x.SoundsEventsAndAnnouncements
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetAlwaysNewChatWindow() bool {
	if x != nil && x.AlwaysNewChatWindow != nil {
		return *x.AlwaysNewChatWindow
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetForceAlphabeticFriendSorting() bool {
	if x != nil && x.ForceAlphabeticFriendSorting != nil {
		return *x.ForceAlphabeticFriendSorting
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetChatFlashMode() int32 {
	if x != nil && x.ChatFlashMode != nil {
		return *x.ChatFlashMode
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetRememberOpenChats() bool {
	if x != nil && x.RememberOpenChats != nil {
		return *x.RememberOpenChats
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetCompactQuickAccess() bool {
	if x != nil && x.CompactQuickAccess != nil {
		return *x.CompactQuickAccess
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetCompactFriendsList() bool {
	if x != nil && x.CompactFriendsList != nil {
		return *x.CompactFriendsList
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetNotificationsShowChatRoomNotification() bool {
	if x != nil && x.NotificationsShowChatRoomNotification != nil {
		return *x.NotificationsShowChatRoomNotification
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetSoundsPlayChatRoomNotification() bool {
	if x != nil && x.SoundsPlayChatRoomNotification != nil {
		return *x.SoundsPlayChatRoomNotification
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetHideOfflineFriendsInTagGroups() bool {
	if x != nil && x.HideOfflineFriendsInTagGroups != nil {
		return *x.HideOfflineFriendsInTagGroups
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetHideCategorizedFriends() bool {
	if x != nil && x.HideCategorizedFriends != nil {
		return *x.HideCategorizedFriends
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetCategorizeInGameFriendsByGame() bool {
	if x != nil && x.CategorizeInGameFriendsByGame != nil {
		return *x.CategorizeInGameFriendsByGame
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetChatFontSize() int32 {
	if x != nil && x.ChatFontSize != nil {
		return *x.ChatFontSize
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetUse24HourClock() bool {
	if x != nil && x.Use24HourClock != nil {
		return *x.Use24HourClock
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetDoNotDisturbMode() bool {
	if x != nil && x.DoNotDisturbMode != nil {
		return *x.DoNotDisturbMode
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetDisableEmbedInlining() bool {
	if x != nil && x.DisableEmbedInlining != nil {
		return *x.DisableEmbedInlining
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetSignIntoFriends() bool {
	if x != nil && x.SignIntoFriends != nil {
		return *x.SignIntoFriends
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Settings) GetAnimatedAvatars() bool {
	if x != nil && x.AnimatedAvatars != nil {
		return *x.AnimatedAvatars
	}
	return false
}

type CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoiceInputGain            *float32 `protobuf:"fixed32,1,opt,name=voice_input_gain,json=voiceInputGain" json:"voice_input_gain,omitempty"`
	VoiceOutputGain           *float32 `protobuf:"fixed32,2,opt,name=voice_output_gain,json=voiceOutputGain" json:"voice_output_gain,omitempty"`
	NoiseGateLevel            *int32   `protobuf:"varint,3,opt,name=noise_gate_level,json=noiseGateLevel" json:"noise_gate_level,omitempty"`
	VoiceUseEchoCancellation  *bool    `protobuf:"varint,4,opt,name=voice_use_echo_cancellation,json=voiceUseEchoCancellation" json:"voice_use_echo_cancellation,omitempty"`
	VoiceUseNoiseCancellation *bool    `protobuf:"varint,5,opt,name=voice_use_noise_cancellation,json=voiceUseNoiseCancellation" json:"voice_use_noise_cancellation,omitempty"`
	VoiceUseAutoGainControl   *bool    `protobuf:"varint,6,opt,name=voice_use_auto_gain_control,json=voiceUseAutoGainControl" json:"voice_use_auto_gain_control,omitempty"`
	SelectedNonDefaultMic     *bool    `protobuf:"varint,7,opt,name=selected_non_default_mic,json=selectedNonDefaultMic" json:"selected_non_default_mic,omitempty"`
	SelectedNonDefaultOutput  *bool    `protobuf:"varint,8,opt,name=selected_non_default_output,json=selectedNonDefaultOutput" json:"selected_non_default_output,omitempty"`
	PushToTalkEnabled         *bool    `protobuf:"varint,9,opt,name=push_to_talk_enabled,json=pushToTalkEnabled" json:"push_to_talk_enabled,omitempty"`
	PushToMuteEnabled         *bool    `protobuf:"varint,10,opt,name=push_to_mute_enabled,json=pushToMuteEnabled" json:"push_to_mute_enabled,omitempty"`
	PlayPttSounds             *bool    `protobuf:"varint,11,opt,name=play_ptt_sounds,json=playPttSounds" json:"play_ptt_sounds,omitempty"`
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) Reset() {
	*x = CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) ProtoMessage() {}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings.ProtoReflect.Descriptor instead.
func (*CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{134, 1}
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetVoiceInputGain() float32 {
	if x != nil && x.VoiceInputGain != nil {
		return *x.VoiceInputGain
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetVoiceOutputGain() float32 {
	if x != nil && x.VoiceOutputGain != nil {
		return *x.VoiceOutputGain
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetNoiseGateLevel() int32 {
	if x != nil && x.NoiseGateLevel != nil {
		return *x.NoiseGateLevel
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetVoiceUseEchoCancellation() bool {
	if x != nil && x.VoiceUseEchoCancellation != nil {
		return *x.VoiceUseEchoCancellation
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetVoiceUseNoiseCancellation() bool {
	if x != nil && x.VoiceUseNoiseCancellation != nil {
		return *x.VoiceUseNoiseCancellation
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetVoiceUseAutoGainControl() bool {
	if x != nil && x.VoiceUseAutoGainControl != nil {
		return *x.VoiceUseAutoGainControl
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetSelectedNonDefaultMic() bool {
	if x != nil && x.SelectedNonDefaultMic != nil {
		return *x.SelectedNonDefaultMic
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetSelectedNonDefaultOutput() bool {
	if x != nil && x.SelectedNonDefaultOutput != nil {
		return *x.SelectedNonDefaultOutput
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetPushToTalkEnabled() bool {
	if x != nil && x.PushToTalkEnabled != nil {
		return *x.PushToTalkEnabled
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetPushToMuteEnabled() bool {
	if x != nil && x.PushToMuteEnabled != nil {
		return *x.PushToMuteEnabled
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings) GetPlayPttSounds() bool {
	if x != nil && x.PlayPttSounds != nil {
		return *x.PlayPttSounds
	}
	return false
}

type CChatUsability_ClientUsabilityMetrics_Notification_UIState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendsListHeight           *int32                                                                            `protobuf:"varint,1,opt,name=friends_list_height,json=friendsListHeight" json:"friends_list_height,omitempty"`
	FriendsListWidth            *int32                                                                            `protobuf:"varint,2,opt,name=friends_list_width,json=friendsListWidth" json:"friends_list_width,omitempty"`
	FriendsListDocked           *bool                                                                             `protobuf:"varint,3,opt,name=friends_list_docked,json=friendsListDocked" json:"friends_list_docked,omitempty"`
	FriendsListCollapsed        *bool                                                                             `protobuf:"varint,4,opt,name=friends_list_collapsed,json=friendsListCollapsed" json:"friends_list_collapsed,omitempty"`
	FriendsListGroupChatsHeight *int32                                                                            `protobuf:"varint,5,opt,name=friends_list_group_chats_height,json=friendsListGroupChatsHeight" json:"friends_list_group_chats_height,omitempty"`
	FriendsListVisible          *bool                                                                             `protobuf:"varint,6,opt,name=friends_list_visible,json=friendsListVisible" json:"friends_list_visible,omitempty"`
	ChatPopupsOpened            *int32                                                                            `protobuf:"varint,7,opt,name=chat_popups_opened,json=chatPopupsOpened" json:"chat_popups_opened,omitempty"`
	GroupChatTabsOpened         *int32                                                                            `protobuf:"varint,8,opt,name=group_chat_tabs_opened,json=groupChatTabsOpened" json:"group_chat_tabs_opened,omitempty"`
	FriendChatTabsOpened        *int32                                                                            `protobuf:"varint,9,opt,name=friend_chat_tabs_opened,json=friendChatTabsOpened" json:"friend_chat_tabs_opened,omitempty"`
	ChatWindowWidth             *int32                                                                            `protobuf:"varint,10,opt,name=chat_window_width,json=chatWindowWidth" json:"chat_window_width,omitempty"`
	ChatWindowHeight            *int32                                                                            `protobuf:"varint,11,opt,name=chat_window_height,json=chatWindowHeight" json:"chat_window_height,omitempty"`
	CategoryCollapse            *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState `protobuf:"bytes,12,opt,name=category_collapse,json=categoryCollapse" json:"category_collapse,omitempty"`
	GroupChatLeftColCollapsed   *int32                                                                            `protobuf:"varint,13,opt,name=group_chat_left_col_collapsed,json=groupChatLeftColCollapsed" json:"group_chat_left_col_collapsed,omitempty"`
	GroupChatRightColCollapsed  *int32                                                                            `protobuf:"varint,14,opt,name=group_chat_right_col_collapsed,json=groupChatRightColCollapsed" json:"group_chat_right_col_collapsed,omitempty"`
	InOneOnOneVoiceChat         *bool                                                                             `protobuf:"varint,15,opt,name=in_one_on_one_voice_chat,json=inOneOnOneVoiceChat" json:"in_one_on_one_voice_chat,omitempty"`
	InGroupVoiceChat            *bool                                                                             `protobuf:"varint,16,opt,name=in_group_voice_chat,json=inGroupVoiceChat" json:"in_group_voice_chat,omitempty"`
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) Reset() {
	*x = CChatUsability_ClientUsabilityMetrics_Notification_UIState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatUsability_ClientUsabilityMetrics_Notification_UIState) ProtoMessage() {}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatUsability_ClientUsabilityMetrics_Notification_UIState.ProtoReflect.Descriptor instead.
func (*CChatUsability_ClientUsabilityMetrics_Notification_UIState) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{134, 2}
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetFriendsListHeight() int32 {
	if x != nil && x.FriendsListHeight != nil {
		return *x.FriendsListHeight
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetFriendsListWidth() int32 {
	if x != nil && x.FriendsListWidth != nil {
		return *x.FriendsListWidth
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetFriendsListDocked() bool {
	if x != nil && x.FriendsListDocked != nil {
		return *x.FriendsListDocked
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetFriendsListCollapsed() bool {
	if x != nil && x.FriendsListCollapsed != nil {
		return *x.FriendsListCollapsed
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetFriendsListGroupChatsHeight() int32 {
	if x != nil && x.FriendsListGroupChatsHeight != nil {
		return *x.FriendsListGroupChatsHeight
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetFriendsListVisible() bool {
	if x != nil && x.FriendsListVisible != nil {
		return *x.FriendsListVisible
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetChatPopupsOpened() int32 {
	if x != nil && x.ChatPopupsOpened != nil {
		return *x.ChatPopupsOpened
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetGroupChatTabsOpened() int32 {
	if x != nil && x.GroupChatTabsOpened != nil {
		return *x.GroupChatTabsOpened
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetFriendChatTabsOpened() int32 {
	if x != nil && x.FriendChatTabsOpened != nil {
		return *x.FriendChatTabsOpened
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetChatWindowWidth() int32 {
	if x != nil && x.ChatWindowWidth != nil {
		return *x.ChatWindowWidth
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetChatWindowHeight() int32 {
	if x != nil && x.ChatWindowHeight != nil {
		return *x.ChatWindowHeight
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetCategoryCollapse() *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState {
	if x != nil {
		return x.CategoryCollapse
	}
	return nil
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetGroupChatLeftColCollapsed() int32 {
	if x != nil && x.GroupChatLeftColCollapsed != nil {
		return *x.GroupChatLeftColCollapsed
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetGroupChatRightColCollapsed() int32 {
	if x != nil && x.GroupChatRightColCollapsed != nil {
		return *x.GroupChatRightColCollapsed
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetInOneOnOneVoiceChat() bool {
	if x != nil && x.InOneOnOneVoiceChat != nil {
		return *x.InOneOnOneVoiceChat
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState) GetInGroupVoiceChat() bool {
	if x != nil && x.InGroupVoiceChat != nil {
		return *x.InGroupVoiceChat
	}
	return false
}

type CChatUsability_ClientUsabilityMetrics_Notification_Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendsCount                *int32 `protobuf:"varint,1,opt,name=friends_count,json=friendsCount" json:"friends_count,omitempty"`
	FriendsCategoryCount        *int32 `protobuf:"varint,2,opt,name=friends_category_count,json=friendsCategoryCount" json:"friends_category_count,omitempty"`
	FriendsCategorizedCount     *int32 `protobuf:"varint,3,opt,name=friends_categorized_count,json=friendsCategorizedCount" json:"friends_categorized_count,omitempty"`
	FriendsOnlineCount          *int32 `protobuf:"varint,4,opt,name=friends_online_count,json=friendsOnlineCount" json:"friends_online_count,omitempty"`
	FriendsInGameCount          *int32 `protobuf:"varint,5,opt,name=friends_in_game_count,json=friendsInGameCount" json:"friends_in_game_count,omitempty"`
	FriendsInGameSingletonCount *int32 `protobuf:"varint,6,opt,name=friends_in_game_singleton_count,json=friendsInGameSingletonCount" json:"friends_in_game_singleton_count,omitempty"`
	GameGroupCount              *int32 `protobuf:"varint,7,opt,name=game_group_count,json=gameGroupCount" json:"game_group_count,omitempty"`
	FriendsFavoriteCount        *int32 `protobuf:"varint,8,opt,name=friends_favorite_count,json=friendsFavoriteCount" json:"friends_favorite_count,omitempty"`
	GroupChatCount              *int32 `protobuf:"varint,9,opt,name=group_chat_count,json=groupChatCount" json:"group_chat_count,omitempty"`
	GroupChatFavoriteCount      *int32 `protobuf:"varint,10,opt,name=group_chat_favorite_count,json=groupChatFavoriteCount" json:"group_chat_favorite_count,omitempty"`
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) Reset() {
	*x = CChatUsability_ClientUsabilityMetrics_Notification_Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatUsability_ClientUsabilityMetrics_Notification_Metrics) ProtoMessage() {}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatUsability_ClientUsabilityMetrics_Notification_Metrics.ProtoReflect.Descriptor instead.
func (*CChatUsability_ClientUsabilityMetrics_Notification_Metrics) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{134, 3}
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetFriendsCount() int32 {
	if x != nil && x.FriendsCount != nil {
		return *x.FriendsCount
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetFriendsCategoryCount() int32 {
	if x != nil && x.FriendsCategoryCount != nil {
		return *x.FriendsCategoryCount
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetFriendsCategorizedCount() int32 {
	if x != nil && x.FriendsCategorizedCount != nil {
		return *x.FriendsCategorizedCount
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetFriendsOnlineCount() int32 {
	if x != nil && x.FriendsOnlineCount != nil {
		return *x.FriendsOnlineCount
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetFriendsInGameCount() int32 {
	if x != nil && x.FriendsInGameCount != nil {
		return *x.FriendsInGameCount
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetFriendsInGameSingletonCount() int32 {
	if x != nil && x.FriendsInGameSingletonCount != nil {
		return *x.FriendsInGameSingletonCount
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetGameGroupCount() int32 {
	if x != nil && x.GameGroupCount != nil {
		return *x.GameGroupCount
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetFriendsFavoriteCount() int32 {
	if x != nil && x.FriendsFavoriteCount != nil {
		return *x.FriendsFavoriteCount
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetGroupChatCount() int32 {
	if x != nil && x.GroupChatCount != nil {
		return *x.GroupChatCount
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_Metrics) GetGroupChatFavoriteCount() int32 {
	if x != nil && x.GroupChatFavoriteCount != nil {
		return *x.GroupChatFavoriteCount
	}
	return 0
}

type CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InGameCollapsed     *bool  `protobuf:"varint,1,opt,name=in_game_collapsed,json=inGameCollapsed" json:"in_game_collapsed,omitempty"`
	OnlineCollapsed     *bool  `protobuf:"varint,2,opt,name=online_collapsed,json=onlineCollapsed" json:"online_collapsed,omitempty"`
	OfflineCollapsed    *bool  `protobuf:"varint,3,opt,name=offline_collapsed,json=offlineCollapsed" json:"offline_collapsed,omitempty"`
	GameGroupsCollapsed *int32 `protobuf:"varint,4,opt,name=game_groups_collapsed,json=gameGroupsCollapsed" json:"game_groups_collapsed,omitempty"`
	CategoriesCollapsed *int32 `protobuf:"varint,5,opt,name=categories_collapsed,json=categoriesCollapsed" json:"categories_collapsed,omitempty"`
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) Reset() {
	*x = CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_chat_steamclient_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) ProtoMessage() {
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_chat_steamclient_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState.ProtoReflect.Descriptor instead.
func (*CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) Descriptor() ([]byte, []int) {
	return file_steammessages_chat_steamclient_proto_rawDescGZIP(), []int{134, 2, 0}
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) GetInGameCollapsed() bool {
	if x != nil && x.InGameCollapsed != nil {
		return *x.InGameCollapsed
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) GetOnlineCollapsed() bool {
	if x != nil && x.OnlineCollapsed != nil {
		return *x.OnlineCollapsed
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) GetOfflineCollapsed() bool {
	if x != nil && x.OfflineCollapsed != nil {
		return *x.OfflineCollapsed
	}
	return false
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) GetGameGroupsCollapsed() int32 {
	if x != nil && x.GameGroupsCollapsed != nil {
		return *x.GameGroupsCollapsed
	}
	return 0
}

func (x *CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState) GetCategoriesCollapsed() int32 {
	if x != nil && x.CategoriesCollapsed != nil {
		return *x.CategoriesCollapsed
	}
	return 0
}

var File_steammessages_chat_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_chat_steamclient_proto_rawDesc = []byte{
	0x0a, 0x24, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x28, 0x43, 0x43, 0x68, 0x61,
	0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x29, 0x43, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xbd, 0x02, 0x0a, 0x25, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x1c,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x1d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x22, 0x52, 0x0a, 0x09, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0x9c, 0x04, 0x0a, 0x10, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x63,
	0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x61, 0x6e, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63,
	0x61, 0x6e, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x61,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x42, 0x61, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x42,
	0x0a, 0x1e, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x67,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x63, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x61, 0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x56, 0x69, 0x65, 0x77,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x61, 0x6e, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15,
	0x63, 0x61, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x61, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x4d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x61, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x63, 0x61, 0x6e,
	0x53, 0x65, 0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x43, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x99, 0x05, 0x0a, 0x19, 0x43, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x53, 0x68, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x12, 0x34, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x79, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73,
	0x12, 0x41, 0x0a, 0x1d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x69,
	0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x67, 0x63, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x55, 0x67, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x0f, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x1c, 0x6b, 0x5f, 0x45, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x45,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x45,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e,
	0x6b, 0x3a, 0x1c, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6b, 0x69,
	0x63, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0xb9, 0x02, 0x0a, 0x0e, 0x43,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74,
	0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x13, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d,
	0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x73, 0x12, 0x28, 0x0a, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x06, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x87, 0x04, 0x0a, 0x12,
	0x43, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x6b,
	0x12, 0x7f, 0x0a, 0x1a, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x3a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x18, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x7d, 0x0a, 0x19, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x3a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x17, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x16,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x14, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x22, 0x90, 0x04, 0x0a, 0x17, 0x43, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7f, 0x0a, 0x1a,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x24, 0x6b,
	0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x18, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x7d, 0x0a,
	0x19, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x24, 0x6b,
	0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x17, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x13,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x4c,
	0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x16, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x14, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x26, 0x43, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5d, 0x0a, 0x23, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x24, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x0a, 0x25,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a,
	0x26, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x29, 0x43,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x2c, 0x0a, 0x2a, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x0a, 0x28, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x73,
	0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x53, 0x68, 0x61, 0x22, 0x2b, 0x0a, 0x29, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x5f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xde, 0x01, 0x0a, 0x33, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1c,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x41,
	0x0a, 0x1d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x22, 0x36, 0x0a, 0x34, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x0a, 0x2e, 0x43, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x47,
	0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x2f, 0x43, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a,
	0x2d, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x45, 0x6e, 0x64, 0x4d, 0x69,
	0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x2e,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x45, 0x6e, 0x64, 0x4d, 0x69, 0x6e,
	0x69, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a,
	0x0a, 0x1a, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4d, 0x75, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4d, 0x75, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x0a, 0x1a, 0x43, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x5f, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7e, 0x0a, 0x21, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x5f, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x5f, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x0a, 0x1e, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a,
	0x1c, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x1d, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x40, 0x0a, 0x1a, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x5f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x1b, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x1c, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x0a, 0x1d, 0x43, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c,
	0x22, 0x20, 0x0a, 0x1e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5b, 0x0a, 0x1c, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x1f, 0x0a, 0x1d, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x5f, 0x0a, 0x20, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0x50, 0x0a, 0x21, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x24, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x78, 0x0a, 0x1f, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x41, 0x64, 0x64,
	0x52, 0x6f, 0x6c, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x0a,
	0x21, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x22, 0x3f, 0x0a, 0x22, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x73, 0x22, 0x7d, 0x0a, 0x24, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x22, 0x27, 0x0a, 0x25, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x23, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22,
	0xd7, 0x01, 0x0a, 0x24, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4a, 0x6f,
	0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x43, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6a, 0x6f,
	0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x2d, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x75, 0x69, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x73, 0x6b, 0x69, 0x70, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x75, 0x69, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x22, 0x30, 0x0a, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x6f,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x0a, 0x24, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b, 0x0a, 0x20, 0x43,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x51, 0x0a, 0x21, 0x43, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x22, 0x5f, 0x0a, 0x20, 0x43,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x73, 0x0a, 0x20, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x21,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x12, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x22, 0x43,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa0, 0x01, 0x0a, 0x21, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x63, 0x68, 0x6f, 0x54, 0x6f, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x22, 0xcb, 0x01, 0x0a, 0x22, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x62,
	0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x42, 0x62, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x5e, 0x0a, 0x1f, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f,
	0x4a, 0x6f, 0x69, 0x6e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x22, 0x45, 0x0a, 0x20, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f,
	0x4a, 0x6f, 0x69, 0x6e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x20, 0x43, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x83, 0x02, 0x0a, 0x23, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x3a, 0x1c, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x22, 0xbe, 0x05, 0x0a, 0x24, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x6f, 0x72, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x1a, 0x9f, 0x04, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x09, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xe6, 0x01, 0x0a,
	0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x6a, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x26, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0c,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68,
	0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x65, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x81,
	0x08, 0x0a, 0x2a, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6c, 0x61, 0x6e, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6c,
	0x61, 0x6e, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0a, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x15,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x63, 0x68, 0x61,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x68, 0x61, 0x12,
	0x45, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61,
	0x6e, 0x6b, 0x3a, 0x1c, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x40, 0x0a, 0x1c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x79, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x12,
	0x41, 0x0a, 0x1d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x69, 0x6e,
	0x69, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x67, 0x63, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x55, 0x67, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x14, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x4b, 0x0a, 0x15, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x69, 0x0a, 0x26, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x4d, 0x0a, 0x27, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x28, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4f, 0x0a, 0x29,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x82, 0x01,
	0x0a, 0x30, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x22, 0x7b, 0x0a, 0x31, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f,
	0x53, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22,
	0x8b, 0x01, 0x0a, 0x39, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x74, 0x6f, 0x70, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x82, 0x01,
	0x0a, 0x25, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x41, 0x63, 0x6b, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x86, 0x01, 0x0a, 0x22, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x23, 0x43,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x23, 0x43, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xea, 0x02, 0x0a, 0x24, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x4b,
	0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x43, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x4b, 0x69, 0x63, 0x6b, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x22, 0xa8, 0x01,
	0x0a, 0x1f, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x20, 0x43, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x4b,
	0x69, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x22, 0x4e, 0x0a, 0x28, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x46, 0x6f, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0x96, 0x02, 0x0a, 0x29, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x46, 0x6f,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x56, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x46, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x1a, 0x90, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x1c, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xee,
	0x01, 0x0a, 0x1d, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42,
	0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x1a, 0x90, 0x01, 0x0a,
	0x07, 0x42, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0x45, 0x0a, 0x1f, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x22, 0x53, 0x0a, 0x20, 0x43, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x22, 0x69,
	0x0a, 0x22, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xb7, 0x02, 0x0a, 0x30, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53,
	0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x17, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x9f, 0x01, 0x0a, 0x1c, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x5d, 0x82, 0xb5, 0x18, 0x59, 0x49, 0x66, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72,
	0x6f, 0x6f, 0x6d, 0x20, 0x68, 0x61, 0x73, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2c, 0x20, 0x77, 0x65, 0x20, 0x77, 0x69, 0x6c,
	0x6c, 0x20, 0x6f, 0x70, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x1a,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x31, 0x43,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x21, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x1d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x73, 0x22, 0xfc, 0x07, 0x0a, 0x2d, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f,
	0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x79, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x14, 0x63, 0x68,
	0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x76, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x13, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0xcc, 0x02, 0x0a, 0x14, 0x43,
	0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x1a, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x3a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f,
	0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x18, 0x64, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x7d, 0x0a, 0x19, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x3a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f,
	0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x17, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x1a, 0xe4, 0x02, 0x0a, 0x13, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x7f, 0x0a, 0x1a, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x24, 0x6b, 0x5f, 0x45,
	0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x18, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x7d, 0x0a, 0x19, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x24, 0x6b, 0x5f, 0x45,
	0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x17, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d,
	0x75, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x75, 0x74, 0x65, 0x64,
	0x22, 0x30, 0x0a, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x24, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x43, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x1a, 0x4e, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe4, 0x04, 0x0a,
	0x2b, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x6f, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x56, 0x82, 0xb5, 0x18, 0x52, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x20, 0x49, 0x44, 0x2e, 0x20, 0x20, 0x53, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d,
	0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x69, 0x65, 0x77, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0xa3, 0x01, 0x0a, 0x13, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x72, 0x82, 0xb5, 0x18, 0x6e, 0x41, 0x6e, 0x79,
	0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20,
	0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x20,
	0x20, 0x43, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x20, 0x69, 0x6e, 0x2d, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x52, 0x12, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x29, 0x82, 0xb5, 0x18, 0x25, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x76, 0x69, 0x65, 0x77, 0x20, 0x68, 0x61,
	0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2e, 0x52,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x40, 0x0a, 0x1c, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x1a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x12, 0x44, 0x0a,
	0x1e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x1c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x55, 0x6e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x64, 0x73, 0x22, 0xc6, 0x02, 0x0a, 0x1f, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0xbc, 0x01, 0x0a, 0x09,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x9e, 0x01, 0x82, 0xb5, 0x18, 0x99, 0x01, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x69, 0x64, 0x2e, 0x20, 0x20, 0x46, 0x6f, 0x72, 0x20,
	0x66, 0x69, 0x6e, 0x64, 0x2d, 0x61, 0x73, 0x2d, 0x79, 0x6f, 0x75, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x2c, 0x20, 0x61, 0x73, 0x20, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x20, 0x6e, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c,
	0x79, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61,
	0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x64, 0x2e,
	0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x86, 0x02, 0x0a,
	0x20, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0x65,
	0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x22, 0xca, 0x02, 0x0a, 0x27, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x12, 0x6a, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x45, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x26, 0x6b, 0x5f, 0x45, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x69,
	0x73, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41,
	0x64, 0x64, 0x22, 0x4d, 0x0a, 0x28, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x22, 0xce, 0x02, 0x0a, 0x2c, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x12, 0x6a, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x45, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x26, 0x6b, 0x5f, 0x45, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x4b, 0x0a, 0x2d, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22,
	0xad, 0x01, 0x0a, 0x2a, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x65, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x42, 0x3f, 0x82, 0xb5, 0x18, 0x3b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61,
	0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f,
	0x6f, 0x6d, 0x20, 0x69, 0x66, 0x20, 0x6e, 0x6f, 0x6e, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62,
	0x65, 0x65, 0x6e, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x22,
	0x88, 0x01, 0x0a, 0x2b, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x59, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x75, 0x0a, 0x2d, 0x43, 0x43,
	0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x5f, 0x53, 0x65, 0x74,
	0x43, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x22, 0x5c, 0x0a, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22,
	0x82, 0x01, 0x0a, 0x0d, 0x43, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x65, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x11, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x64, 0x73, 0x22, 0xca, 0x03, 0x0a, 0x2a, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x5f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2a, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x62, 0x62, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x42, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x82, 0xb5, 0x18,
	0x36, 0x41, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x74, 0x2c, 0x20, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xac, 0x02, 0x0a, 0x2a, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x53, 0x0a,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x1a, 0x6c, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x22, 0xd3, 0x01, 0x0a, 0x28, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x45, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x6b, 0x0a, 0x2a, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x2f, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x6f, 0x6f, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x73, 0x22, 0x79, 0x0a, 0x3a, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x52, 0x65, 0x6a,
	0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xe4,
	0x02, 0x0a, 0x3b, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x4b, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x75, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x50, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x62, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x3a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x34, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x73, 0x22, 0xd4, 0x02, 0x0a, 0x17, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x75, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x44, 0x82, 0xb5, 0x18, 0x40, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x69, 0x65, 0x77, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x20, 0x52, 0x12, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x79, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x48, 0x82, 0xb5,
	0x18, 0x44, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x20, 0x6f, 0x6e, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x63, 0x61, 0x6c, 0x6c, 0x2e, 0x20, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x1c, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e,
	0x67, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x6e, 0x67, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x22, 0xfe, 0x04, 0x0a, 0x32, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x55, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x3c, 0x82, 0xb5, 0x18, 0x38, 0x54, 0x68, 0x65, 0x77, 0x20, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x69, 0x64, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x20, 0x52, 0x06,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x61, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x4f, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x12, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x73, 0x1a, 0x81, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x69, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x22, 0xe3, 0x02, 0x0a, 0x26, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x72, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x6a, 0x0a, 0x0d,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x26, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x64, 0x64, 0x22, 0xe6, 0x21, 0x0a, 0x32,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6e, 0x5f, 0x77, 0x65, 0x62, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x6e, 0x57, 0x65, 0x62, 0x12, 0x58, 0x0a, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x68, 0x0a, 0x0e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x0d, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x56, 0x0a, 0x08, 0x75, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07,
	0x75, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0xa1,
	0x0b, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x69, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x6f,
	0x77, 0x49, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x53, 0x0a, 0x26, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x23, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x67, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x73, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x6c, 0x77,
	0x61, 0x79, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x77, 0x61, 0x79,
	0x73, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x45,
	0x0a, 0x1f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74,
	0x69, 0x63, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x69, 0x63, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x66, 0x6c,
	0x61, 0x73, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x72, 0x65, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x58, 0x0a, 0x29, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x22, 0x73,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x50,
	0x6c, 0x61, 0x79, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x22, 0x68, 0x69, 0x64, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1d, 0x68, 0x69, 0x64, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x54, 0x61, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x69, 0x64, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x22,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x63, 0x68, 0x61, 0x74, 0x46, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x32, 0x34, 0x68, 0x6f, 0x75, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x32, 0x34, 0x68, 0x6f, 0x75,
	0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x75, 0x72, 0x62, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x75, 0x72,
	0x62, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x74, 0x6f,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x73, 0x1a, 0xcf, 0x04, 0x0a, 0x0d, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x2a,
	0x0a, 0x11, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x67,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x6f,
	0x69, 0x73, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x47, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x45, 0x63, 0x68, 0x6f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x5f, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x47, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6e,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x69, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f,
	0x6e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x69, 0x63, 0x12, 0x3d, 0x0a, 0x1b, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x75,
	0x73, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f,
	0x54, 0x61, 0x6c, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x75, 0x73, 0x68, 0x54,
	0x6f, 0x4d, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x74, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x74, 0x74, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x1a, 0xaa, 0x09, 0x0a, 0x07, 0x55, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2e,
	0x0a, 0x13, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x16, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x68, 0x61, 0x74, 0x73, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x68, 0x61, 0x74, 0x50, 0x6f,
	0x70, 0x75, 0x70, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x73, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x68, 0x61, 0x74, 0x54, 0x61, 0x62, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12,
	0x35, 0x0a, 0x17, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74,
	0x61, 0x62, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x54, 0x61, 0x62, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x63, 0x68, 0x61, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x7e, 0x0a, 0x11, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x55, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x1d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6c,
	0x65, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68,
	0x61, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x12, 0x42, 0x0a, 0x1e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x68, 0x61, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x18, 0x69, 0x6e, 0x5f, 0x6f, 0x6e, 0x65,
	0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x4f, 0x6e, 0x65, 0x4f,
	0x6e, 0x4f, 0x6e, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x2d, 0x0a,
	0x13, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x1a, 0x82, 0x02, 0x0a,
	0x15, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x31,
	0x0a, 0x14, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x1a, 0x90, 0x04, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x5f,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x39, 0x43, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x2a, 0x9c, 0x01, 0x0a, 0x12, 0x45, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4a, 0x6f, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4a,
	0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12,
	0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4a, 0x6f,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4a,
	0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x63, 0x2a, 0xa4, 0x02, 0x0a, 0x12, 0x45, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a,
	0x1c, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x61, 0x6e, 0x6b, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12,
	0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x5f, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x10, 0x0a,
	0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x5f, 0x47, 0x75, 0x65, 0x73, 0x74, 0x10, 0x0f,
	0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10,
	0x14, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x10, 0x1e, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x5f, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x72, 0x10, 0x28, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x5f,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x10, 0x32, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x6e, 0x6b, 0x5f,
	0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x63, 0x2a, 0xf4, 0x01,
	0x0a, 0x1a, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x24,
	0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61,
	0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x2a, 0x0a,
	0x26, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x4d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45,
	0x43, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x6c, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61,
	0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x10, 0x04, 0x2a, 0x97, 0x03, 0x0a, 0x16, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10,
	0x00, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f,
	0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x6b,
	0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4d, 0x73, 0x67, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b,
	0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4d, 0x73, 0x67, 0x5f, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x04, 0x12, 0x20, 0x0a,
	0x1c, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x10, 0x05, 0x12,
	0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x44, 0x69,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x10, 0x08, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x61, 0x67, 0x6c, 0x69, 0x6e,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x09, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f,
	0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f,
	0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x5f, 0x41, 0x70, 0x70, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x0b, 0x2a, 0xa3,
	0x01, 0x0a, 0x1c, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x6b,
	0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x6d,
	0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x10, 0x02, 0x2a, 0xcb, 0x03, 0x0a, 0x1a, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x4a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x50, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64,
	0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x07,
	0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64,
	0x10, 0x08, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x4d, 0x75, 0x74, 0x65, 0x64, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f,
	0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x10, 0x0a, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x10, 0x0c, 0x32, 0x8b, 0x02, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0xe7, 0x01, 0x0a, 0x1a,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x43, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x72, 0x82, 0xb5, 0x18, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74,
	0x6f, 0x20, 0x62, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6f, 0x66,
	0x20, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x20, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x69, 0x61, 0x20, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x1a, 0x19, 0x82, 0xb5, 0x18, 0x15, 0x43, 0x68, 0x61, 0x74, 0x2d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x32, 0xb9, 0x3e, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0xa3, 0x01,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xb5, 0x18, 0x37, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x27, 0x73, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f,
	0x6f, 0x6d, 0x73, 0x12, 0x7a, 0x0a, 0x11, 0x53, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x53, 0x61, 0x76, 0x65, 0x73,
	0x27, 0x73, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x84, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xb5, 0x18, 0x18, 0x52, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d,
	0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x99, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x2a, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x67, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xb5, 0x18,
	0x21, 0x53, 0x65, 0x74, 0x20, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x99, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x29, 0x2e,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xb5, 0x18, 0x24, 0x53, 0x65, 0x74, 0x20, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x20, 0x53, 0x48, 0x41, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x63,
	0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xcb,
	0x01, 0x0a, 0x21, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x57, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x12, 0x34, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x5f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x57, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x43, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x39, 0x82, 0xb5, 0x18, 0x35, 0x53, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x20, 0x69, 0x73, 0x20, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0xe3, 0x01, 0x0a,
	0x1c, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2f, 0x2e,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x69,
	0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x4d,
	0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x60, 0x82, 0xb5, 0x18, 0x5c, 0x4a, 0x6f, 0x69, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x20, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77,
	0x20, 0x6f, 0x6e, 0x65, 0x20, 0x28, 0x57, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x32, 0x30, 0x31,
	0x39, 0x20, 0x73, 0x61, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20, 0x67, 0x61, 0x6d,
	0x65, 0x29, 0x12, 0xac, 0x01, 0x0a, 0x1b, 0x45, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x2e, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x45,
	0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x45,
	0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xb5, 0x18, 0x28, 0x45, 0x6e, 0x64, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x67, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x64, 0x0a, 0x0f, 0x4d, 0x75, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x5f, 0x4d, 0x75, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4d, 0x75,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x16, 0x82, 0xb5, 0x18, 0x12, 0x4d, 0x75, 0x74, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69,
	0x6e, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x68, 0x0a, 0x11, 0x4b, 0x69, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x2e, 0x43,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x43, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4b, 0x69, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x4b, 0x69, 0x63,
	0x6b, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x79, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x5f, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82,
	0xb5, 0x18, 0x19, 0x42, 0x61, 0x6e, 0x2f, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x82, 0x01, 0x0a,
	0x13, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xb5, 0x18, 0x24, 0x52, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x20, 0x61, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x20, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x65, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x1d, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18,
	0x82, 0xb5, 0x18, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x67, 0x6f, 0x75, 0x70, 0x12, 0x61, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x5f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1a, 0x82, 0xb5, 0x18, 0x16, 0x47, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x65, 0x0a, 0x0a, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x43, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x52, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x6f,
	0x75, 0x70, 0x12, 0x6c, 0x0a, 0x0b, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x1e, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1c, 0x82, 0xb5, 0x18, 0x18, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20,
	0x72, 0x6f, 0x6c, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x67, 0x6f, 0x75, 0x70,
	0x12, 0x67, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1d,
	0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82,
	0xb5, 0x18, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x66,
	0x72, 0x6f, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x87, 0x01, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x43,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x47, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x86, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x43, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xb5, 0x18, 0x1d, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x73, 0x0a, 0x0d,
	0x41, 0x64, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x2e,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x6c,
	0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x41, 0x64, 0x64, 0x52,
	0x6f, 0x6c, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1d, 0x82, 0xb5, 0x18, 0x19, 0x41, 0x64, 0x64, 0x20, 0x72, 0x6f, 0x6c, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x43, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b,
	0x82, 0xb5, 0x18, 0x27, 0x47, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x87, 0x01, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x25, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xb5, 0x18, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x72, 0x6f,
	0x6c, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x20,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x81, 0x01, 0x0a, 0x11, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4a, 0x6f,
	0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xb5, 0x18, 0x1b, 0x4a, 0x6f,
	0x69, 0x6e, 0x20, 0x61, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0xad, 0x01, 0x0a, 0x1b, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2e, 0x2e, 0x43, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x43, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xb5, 0x18, 0x29,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x20, 0x61, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x61, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x97, 0x01, 0x0a, 0x12, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x25, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x32, 0x82, 0xb5, 0x18, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x20, 0x61, 0x20, 0x63, 0x68,
	0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x63, 0x68,
	0x61, 0x74, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x21, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x43, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82,
	0xb5, 0x18, 0x2c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61,
	0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x20, 0x61, 0x20,
	0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x89, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x12, 0x21, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xb5, 0x18, 0x2c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f,
	0x6f, 0x6d, 0x20, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x74,
	0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x89, 0x01, 0x0a, 0x0e,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x21,
	0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xb5, 0x18, 0x2c, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x69,
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f,
	0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x8d, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x22, 0x2e, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xb5, 0x18, 0x2d, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x69,
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f,
	0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x8d, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xb5, 0x18, 0x2d, 0x53, 0x65, 0x6e, 0x64, 0x20, 0x61,
	0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x20, 0x63, 0x68,
	0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0xa7, 0x01, 0x0a, 0x0d, 0x4a, 0x6f, 0x69, 0x6e,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x20, 0x2e, 0x43, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51,
	0x82, 0xb5, 0x18, 0x4d, 0x4a, 0x6f, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x2d, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x28, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x62, 0x65, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d,
	0x29, 0x12, 0x86, 0x01, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x21, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xb5, 0x18,
	0x29, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x2d, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x63, 0x68, 0x61, 0x74, 0x12, 0xc3, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x24, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x82,
	0xb5, 0x18, 0x5d, 0x47, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x69,
	0x6e, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x20, 0x20,
	0x59, 0x6f, 0x75, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x2e,
	0x12, 0x88, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x26, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74,
	0x4d, 0x79, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xb5, 0x18, 0x1c, 0x47,
	0x65, 0x74, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x75, 0x72,
	0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xb5, 0x18, 0x28,
	0x47, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x63,
	0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0xa5, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82,
	0xb5, 0x18, 0x2d, 0x47, 0x65, 0x74, 0x20, 0x62, 0x61, 0x73, 0x69, 0x63, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61,
	0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0xd3, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x31, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f,
	0x53, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xb5, 0x18, 0x46,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x20, 0x61, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x63, 0x68,
	0x61, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65,
	0x72, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x75, 0x73, 0x65, 0x72, 0x12, 0xd3, 0x01, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74,
	0x6f, 0x70, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x2e,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x6f,
	0x70, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x82, 0xb5, 0x18, 0x60, 0x49, 0x66, 0x20, 0x61,
	0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x64, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x28, 0x73, 0x65,
	0x65, 0x20, 0x53, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x29, 0x2c, 0x20, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x8f, 0x01, 0x0a,
	0x0e, 0x41, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x26, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x41, 0x63, 0x6b, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xb5, 0x18, 0x44, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x65, 0x20, 0x68, 0x61,
	0x76, 0x65, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74,
	0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x74, 0x12, 0x81,
	0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x23, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22,
	0x82, 0xb5, 0x18, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x63, 0x68,
	0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x20, 0x6c, 0x69,
	0x6e, 0x6b, 0x12, 0x90, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0xaa, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x43, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xb5,
	0x18, 0x50, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72,
	0x6f, 0x6f, 0x6d, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61,
	0x6e, 0x79, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20,
	0x69, 0x64, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x46, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x2e,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x46, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x46, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xb5, 0x18, 0x30, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x20, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x43, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xb5, 0x18, 0x3a, 0x47, 0x65,
	0x74, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x20, 0x77, 0x68, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e,
	0x20, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x63,
	0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x93, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x43, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x43,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3d, 0x82, 0xb5, 0x18, 0x39, 0x47, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x77, 0x68, 0x6f, 0x20, 0x68, 0x61,
	0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x80,
	0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x23, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x82, 0xb5, 0x18, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x20, 0x6c, 0x69, 0x6e,
	0x6b, 0x12, 0xc4, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x31, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x5f, 0x53, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xb5, 0x18,
	0x37, 0x53, 0x65, 0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20,
	0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x20, 0x77, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x75, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xb9, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xb5, 0x18, 0x35, 0x53,
	0x65, 0x74, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x61,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x88, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xb5, 0x18, 0x1f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x9a, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2c, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xb5, 0x18, 0x43, 0x41, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20,
	0x69, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x20, 0x76, 0x69, 0x65, 0x77, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x12, 0x7b, 0x0a, 0x0d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x25, 0x82, 0xb5, 0x18, 0x21, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x63,
	0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x20, 0x62, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x12, 0xa5, 0x01, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xb5, 0x18, 0x33, 0x41, 0x64,
	0x64, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x20, 0x61, 0x20, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x2f, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20,
	0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0xb4, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x2d, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x37, 0x82, 0xb5, 0x18, 0x33, 0x46, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x42, 0x82, 0xb5, 0x18, 0x3e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x2c, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x2d, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x32, 0xae, 0x03, 0x0a,
	0x0d, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0xb8,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x46, 0x82, 0xb5, 0x18, 0x42, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x63, 0x6c, 0x61, 0x6e, 0x2c, 0x20, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20,
	0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x6f, 0x6e, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x16, 0x53, 0x65,
	0x74, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x43, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x5f, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x6e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xb5, 0x18, 0x33, 0x53, 0x65, 0x74, 0x20, 0x61,
	0x20, 0x63, 0x6c, 0x61, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x20,
	0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x6e,
	0x6c, 0x79, 0x20, 0x28, 0x6f, 0x72, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x29, 0x1a, 0x2d,
	0x82, 0xb5, 0x18, 0x29, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x67, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6c, 0x61, 0x6e, 0x20, 0x63, 0x68, 0x61,
	0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xef, 0x0e,
	0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x7b, 0x0a, 0x19, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x2e,
	0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xb5, 0x18, 0x20, 0x4e, 0x65, 0x77,
	0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x94, 0x01,
	0x0a, 0x19, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2b, 0x2e, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xb5, 0x18, 0x39, 0x41, 0x6e, 0x20, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x12, 0x95, 0x01, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x29, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xb5, 0x18, 0x3e, 0x41, 0x20,
	0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x27, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x20, 0x28, 0x6a, 0x6f, 0x69, 0x6e, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x2f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x29, 0x12, 0x88, 0x01, 0x0a,
	0x1f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x2b, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e,
	0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xb5, 0x18, 0x27,
	0x43, 0x68, 0x61, 0x74, 0x20, 0x52, 0x6f, 0x6f, 0x6d, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x20, 0x2f, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x68, 0x61, 0x73, 0x20,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0xa6, 0x01, 0x0a, 0x1e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x6f, 0x6f, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x2e, 0x43, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xb5, 0x18, 0x41, 0x53,
	0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61,
	0x20, 0x63, 0x68, 0x61, 0x74, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x20, 0x28, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x2c, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x65, 0x74, 0x63, 0x2e, 0x29,
	0x12, 0xd5, 0x01, 0x0a, 0x23, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x3b, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x52, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x64, 0x82, 0xb5, 0x18, 0x60, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x63, 0x68,
	0x61, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x6f, 0x72, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72,
	0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x20,
	0x69, 0x6e, 0x20, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x12, 0xb3, 0x01, 0x0a, 0x1f, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x3c, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xb5, 0x18, 0x41, 0x55, 0x73, 0x65,
	0x72, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x20, 0x28, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2c,
	0x20, 0x61, 0x63, 0x6b, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2c, 0x20, 0x65, 0x74, 0x63, 0x29,
	0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x2e, 0x12, 0x8f,
	0x01, 0x0a, 0x18, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x26, 0x2e, 0x43, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x41, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3e, 0x82, 0xb5, 0x18, 0x3a, 0x41, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x20,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2c, 0x20, 0x65, 0x63, 0x68, 0x6f, 0x20, 0x74, 0x6f,
	0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x12, 0xed, 0x01, 0x0a, 0x18, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x6f, 0x6f, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x35, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8c, 0x01, 0x82, 0xb5, 0x18, 0x87, 0x01, 0x54, 0x68, 0x65, 0x20, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x68, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f,
	0x6f, 0x6d, 0x73, 0x20, 0x68, 0x61, 0x73, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27,
	0x73, 0x20, 0x43, 0x68, 0x61, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x28, 0x6d,
	0x61, 0x79, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x29, 0x2c, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x20, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x12, 0xd5, 0x01, 0x0a, 0x1b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x33, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65,
	0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x74, 0x82, 0xb5, 0x18, 0x70, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x61, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x72, 0x6f, 0x6f, 0x6d, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x20, 0x28, 0x6f, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x29, 0x12, 0x67, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x5f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x4e, 0x65, 0x77,
	0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x2c, 0x82, 0xb5, 0x18, 0x24, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x63, 0x68, 0x61, 0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0xc0, 0xb5, 0x18, 0x02, 0x32,
	0xc2, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x86, 0x01, 0x0a, 0x1c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x33, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xb5, 0x18, 0x20, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x28, 0x82, 0xb5, 0x18, 0x24,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x32, 0xe2, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x99, 0x01, 0x0a,
	0x23, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x2e, 0x43, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82,
	0xb5, 0x18, 0x25, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x75, 0x73, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x2f, 0x82, 0xb5, 0x18, 0x27, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x75, 0x73, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0xc0, 0xb5, 0x18, 0x02, 0x42, 0x3d, 0x42, 0x21, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_chat_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_chat_steamclient_proto_rawDescData = file_steammessages_chat_steamclient_proto_rawDesc
)

func file_steammessages_chat_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_chat_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_chat_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_chat_steamclient_proto_rawDescData)
	})
	return file_steammessages_chat_steamclient_proto_rawDescData
}

var file_steammessages_chat_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_steammessages_chat_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 151)
var file_steammessages_chat_steamclient_proto_goTypes = []interface{}{
	(EChatRoomJoinState)(0),                                                                  // 0: EChatRoomJoinState
	(EChatRoomGroupRank)(0),                                                                  // 1: EChatRoomGroupRank
	(EChatRoomNotificationLevel)(0),                                                          // 2: EChatRoomNotificationLevel
	(EChatRoomServerMessage)(0),                                                              // 3: EChatRoomServerMessage
	(EChatRoomMessageReactionType)(0),                                                        // 4: EChatRoomMessageReactionType
	(EChatRoomMemberStateChange)(0),                                                          // 5: EChatRoomMemberStateChange
	(*CChat_RequestFriendPersonaStates_Request)(nil),                                         // 6: CChat_RequestFriendPersonaStates_Request
	(*CChat_RequestFriendPersonaStates_Response)(nil),                                        // 7: CChat_RequestFriendPersonaStates_Response
	(*CChatRoom_CreateChatRoomGroup_Request)(nil),                                            // 8: CChatRoom_CreateChatRoomGroup_Request
	(*CChatRole)(nil),                                                                        // 9: CChatRole
	(*CChatRoleActions)(nil),                                                                 // 10: CChatRoleActions
	(*CChatPartyBeacon)(nil),                                                                 // 11: CChatPartyBeacon
	(*CChatRoomGroupHeaderState)(nil),                                                        // 12: CChatRoomGroupHeaderState
	(*CChatRoomMember)(nil),                                                                  // 13: CChatRoomMember
	(*CChatRoomState)(nil),                                                                   // 14: CChatRoomState
	(*CChatRoomGroupState)(nil),                                                              // 15: CChatRoomGroupState
	(*CUserChatRoomState)(nil),                                                               // 16: CUserChatRoomState
	(*CUserChatRoomGroupState)(nil),                                                          // 17: CUserChatRoomGroupState
	(*CChatRoom_CreateChatRoomGroup_Response)(nil),                                           // 18: CChatRoom_CreateChatRoomGroup_Response
	(*CChatRoom_SaveChatRoomGroup_Request)(nil),                                              // 19: CChatRoom_SaveChatRoomGroup_Request
	(*CChatRoom_SaveChatRoomGroup_Response)(nil),                                             // 20: CChatRoom_SaveChatRoomGroup_Response
	(*CChatRoom_RenameChatRoomGroup_Request)(nil),                                            // 21: CChatRoom_RenameChatRoomGroup_Request
	(*CChatRoom_RenameChatRoomGroup_Response)(nil),                                           // 22: CChatRoom_RenameChatRoomGroup_Response
	(*CChatRoom_SetChatRoomGroupTagline_Request)(nil),                                        // 23: CChatRoom_SetChatRoomGroupTagline_Request
	(*CChatRoom_SetChatRoomGroupTagline_Response)(nil),                                       // 24: CChatRoom_SetChatRoomGroupTagline_Response
	(*CChatRoom_SetChatRoomGroupAvatar_Request)(nil),                                         // 25: CChatRoom_SetChatRoomGroupAvatar_Request
	(*CChatRoom_SetChatRoomGroupAvatar_Response)(nil),                                        // 26: CChatRoom_SetChatRoomGroupAvatar_Response
	(*CChatRoom_SetChatRoomGroupWatchingBroadcast_Request)(nil),                              // 27: CChatRoom_SetChatRoomGroupWatchingBroadcast_Request
	(*CChatRoom_SetChatRoomGroupWatchingBroadcast_Response)(nil),                             // 28: CChatRoom_SetChatRoomGroupWatchingBroadcast_Response
	(*CChatRoom_JoinMiniGameForChatRoomGroup_Request)(nil),                                   // 29: CChatRoom_JoinMiniGameForChatRoomGroup_Request
	(*CChatRoom_JoinMiniGameForChatRoomGroup_Response)(nil),                                  // 30: CChatRoom_JoinMiniGameForChatRoomGroup_Response
	(*CChatRoom_EndMiniGameForChatRoomGroup_Request)(nil),                                    // 31: CChatRoom_EndMiniGameForChatRoomGroup_Request
	(*CChatRoom_EndMiniGameForChatRoomGroup_Response)(nil),                                   // 32: CChatRoom_EndMiniGameForChatRoomGroup_Response
	(*CChatRoom_MuteUser_Request)(nil),                                                       // 33: CChatRoom_MuteUser_Request
	(*CChatRoom_MuteUser_Response)(nil),                                                      // 34: CChatRoom_MuteUser_Response
	(*CChatRoom_KickUser_Request)(nil),                                                       // 35: CChatRoom_KickUser_Request
	(*CChatRoom_KickUser_Response)(nil),                                                      // 36: CChatRoom_KickUser_Response
	(*CChatRoom_SetUserBanState_Request)(nil),                                                // 37: CChatRoom_SetUserBanState_Request
	(*CChatRoom_SetUserBanState_Response)(nil),                                               // 38: CChatRoom_SetUserBanState_Response
	(*CChatRoom_RevokeInvite_Request)(nil),                                                   // 39: CChatRoom_RevokeInvite_Request
	(*CChatRoom_RevokeInvite_Response)(nil),                                                  // 40: CChatRoom_RevokeInvite_Response
	(*CChatRoom_CreateRole_Request)(nil),                                                     // 41: CChatRoom_CreateRole_Request
	(*CChatRoom_CreateRole_Response)(nil),                                                    // 42: CChatRoom_CreateRole_Response
	(*CChatRoom_GetRoles_Request)(nil),                                                       // 43: CChatRoom_GetRoles_Request
	(*CChatRoom_GetRoles_Response)(nil),                                                      // 44: CChatRoom_GetRoles_Response
	(*CChatRoom_RenameRole_Request)(nil),                                                     // 45: CChatRoom_RenameRole_Request
	(*CChatRoom_RenameRole_Response)(nil),                                                    // 46: CChatRoom_RenameRole_Response
	(*CChatRoom_ReorderRole_Request)(nil),                                                    // 47: CChatRoom_ReorderRole_Request
	(*CChatRoom_ReorderRole_Response)(nil),                                                   // 48: CChatRoom_ReorderRole_Response
	(*CChatRoom_DeleteRole_Request)(nil),                                                     // 49: CChatRoom_DeleteRole_Request
	(*CChatRoom_DeleteRole_Response)(nil),                                                    // 50: CChatRoom_DeleteRole_Response
	(*CChatRoom_GetRoleActions_Request)(nil),                                                 // 51: CChatRoom_GetRoleActions_Request
	(*CChatRoom_GetRoleActions_Response)(nil),                                                // 52: CChatRoom_GetRoleActions_Response
	(*CChatRoom_ReplaceRoleActions_Request)(nil),                                             // 53: CChatRoom_ReplaceRoleActions_Request
	(*CChatRoom_ReplaceRoleActions_Response)(nil),                                            // 54: CChatRoom_ReplaceRoleActions_Response
	(*CChatRoom_AddRoleToUser_Request)(nil),                                                  // 55: CChatRoom_AddRoleToUser_Request
	(*CChatRoom_AddRoleToUser_Response)(nil),                                                 // 56: CChatRoom_AddRoleToUser_Response
	(*CChatRoom_GetRolesForUser_Request)(nil),                                                // 57: CChatRoom_GetRolesForUser_Request
	(*CChatRoom_GetRolesForUser_Response)(nil),                                               // 58: CChatRoom_GetRolesForUser_Response
	(*CChatRoom_DeleteRoleFromUser_Request)(nil),                                             // 59: CChatRoom_DeleteRoleFromUser_Request
	(*CChatRoom_DeleteRoleFromUser_Response)(nil),                                            // 60: CChatRoom_DeleteRoleFromUser_Response
	(*CChatRoom_JoinChatRoomGroup_Request)(nil),                                              // 61: CChatRoom_JoinChatRoomGroup_Request
	(*CChatRoom_JoinChatRoomGroup_Response)(nil),                                             // 62: CChatRoom_JoinChatRoomGroup_Response
	(*CChatRoom_InviteFriendToChatRoomGroup_Request)(nil),                                    // 63: CChatRoom_InviteFriendToChatRoomGroup_Request
	(*CChatRoom_InviteFriendToChatRoomGroup_Response)(nil),                                   // 64: CChatRoom_InviteFriendToChatRoomGroup_Response
	(*CChatRoom_LeaveChatRoomGroup_Request)(nil),                                             // 65: CChatRoom_LeaveChatRoomGroup_Request
	(*CChatRoom_LeaveChatRoomGroup_Response)(nil),                                            // 66: CChatRoom_LeaveChatRoomGroup_Response
	(*CChatRoom_CreateChatRoom_Request)(nil),                                                 // 67: CChatRoom_CreateChatRoom_Request
	(*CChatRoom_CreateChatRoom_Response)(nil),                                                // 68: CChatRoom_CreateChatRoom_Response
	(*CChatRoom_DeleteChatRoom_Request)(nil),                                                 // 69: CChatRoom_DeleteChatRoom_Request
	(*CChatRoom_DeleteChatRoom_Response)(nil),                                                // 70: CChatRoom_DeleteChatRoom_Response
	(*CChatRoom_RenameChatRoom_Request)(nil),                                                 // 71: CChatRoom_RenameChatRoom_Request
	(*CChatRoom_RenameChatRoom_Response)(nil),                                                // 72: CChatRoom_RenameChatRoom_Response
	(*CChatRoom_ReorderChatRoom_Request)(nil),                                                // 73: CChatRoom_ReorderChatRoom_Request
	(*CChatRoom_ReorderChatRoom_Response)(nil),                                               // 74: CChatRoom_ReorderChatRoom_Response
	(*CChatRoom_SendChatMessage_Request)(nil),                                                // 75: CChatRoom_SendChatMessage_Request
	(*CChatRoom_SendChatMessage_Response)(nil),                                               // 76: CChatRoom_SendChatMessage_Response
	(*CChatRoom_JoinVoiceChat_Request)(nil),                                                  // 77: CChatRoom_JoinVoiceChat_Request
	(*CChatRoom_JoinVoiceChat_Response)(nil),                                                 // 78: CChatRoom_JoinVoiceChat_Response
	(*CChatRoom_LeaveVoiceChat_Request)(nil),                                                 // 79: CChatRoom_LeaveVoiceChat_Request
	(*CChatRoom_LeaveVoiceChat_Response)(nil),                                                // 80: CChatRoom_LeaveVoiceChat_Response
	(*CChatRoom_GetMessageHistory_Request)(nil),                                              // 81: CChatRoom_GetMessageHistory_Request
	(*ServerMessage)(nil),                                                                    // 82: ServerMessage
	(*CChatRoom_GetMessageHistory_Response)(nil),                                             // 83: CChatRoom_GetMessageHistory_Response
	(*CChatRoom_GetMyChatRoomGroups_Request)(nil),                                            // 84: CChatRoom_GetMyChatRoomGroups_Request
	(*CChatRoom_GetChatRoomGroupSummary_Response)(nil),                                       // 85: CChatRoom_GetChatRoomGroupSummary_Response
	(*CChatRoomSummaryPair)(nil),                                                             // 86: CChatRoomSummaryPair
	(*CChatRoom_GetMyChatRoomGroups_Response)(nil),                                           // 87: CChatRoom_GetMyChatRoomGroups_Response
	(*CChatRoom_GetChatRoomGroupState_Request)(nil),                                          // 88: CChatRoom_GetChatRoomGroupState_Request
	(*CChatRoom_GetChatRoomGroupState_Response)(nil),                                         // 89: CChatRoom_GetChatRoomGroupState_Response
	(*CChatRoom_GetChatRoomGroupSummary_Request)(nil),                                        // 90: CChatRoom_GetChatRoomGroupSummary_Request
	(*CChatRoom_SetAppChatRoomGroupForceActive_Request)(nil),                                 // 91: CChatRoom_SetAppChatRoomGroupForceActive_Request
	(*CChatRoom_SetAppChatRoomGroupForceActive_Response)(nil),                                // 92: CChatRoom_SetAppChatRoomGroupForceActive_Response
	(*CChatRoom_SetAppChatRoomGroupStopForceActive_Notification)(nil),                        // 93: CChatRoom_SetAppChatRoomGroupStopForceActive_Notification
	(*CChatRoom_AckChatMessage_Notification)(nil),                                            // 94: CChatRoom_AckChatMessage_Notification
	(*CChatRoom_CreateInviteLink_Request)(nil),                                               // 95: CChatRoom_CreateInviteLink_Request
	(*CChatRoom_CreateInviteLink_Response)(nil),                                              // 96: CChatRoom_CreateInviteLink_Response
	(*CChatRoom_GetInviteLinkInfo_Request)(nil),                                              // 97: CChatRoom_GetInviteLinkInfo_Request
	(*CChatRoom_GetInviteLinkInfo_Response)(nil),                                             // 98: CChatRoom_GetInviteLinkInfo_Response
	(*CChatRoom_GetInviteInfo_Request)(nil),                                                  // 99: CChatRoom_GetInviteInfo_Request
	(*CChatRoom_GetInviteInfo_Response)(nil),                                                 // 100: CChatRoom_GetInviteInfo_Response
	(*CChatRoom_GetInviteLinksForGroup_Request)(nil),                                         // 101: CChatRoom_GetInviteLinksForGroup_Request
	(*CChatRoom_GetInviteLinksForGroup_Response)(nil),                                        // 102: CChatRoom_GetInviteLinksForGroup_Response
	(*CChatRoom_GetBanList_Request)(nil),                                                     // 103: CChatRoom_GetBanList_Request
	(*CChatRoom_GetBanList_Response)(nil),                                                    // 104: CChatRoom_GetBanList_Response
	(*CChatRoom_GetInviteList_Request)(nil),                                                  // 105: CChatRoom_GetInviteList_Request
	(*CChatRoomGroupInvite)(nil),                                                             // 106: CChatRoomGroupInvite
	(*CChatRoom_GetInviteList_Response)(nil),                                                 // 107: CChatRoom_GetInviteList_Response
	(*CChatRoom_DeleteInviteLink_Request)(nil),                                               // 108: CChatRoom_DeleteInviteLink_Request
	(*CChatRoom_DeleteInviteLink_Response)(nil),                                              // 109: CChatRoom_DeleteInviteLink_Response
	(*CChatRoom_SetSessionActiveChatRoomGroups_Request)(nil),                                 // 110: CChatRoom_SetSessionActiveChatRoomGroups_Request
	(*CChatRoom_SetSessionActiveChatRoomGroups_Response)(nil),                                // 111: CChatRoom_SetSessionActiveChatRoomGroups_Response
	(*CChatRoom_SetUserChatGroupPreferences_Request)(nil),                                    // 112: CChatRoom_SetUserChatGroupPreferences_Request
	(*CChatRoom_SetUserChatGroupPreferences_Response)(nil),                                   // 113: CChatRoom_SetUserChatGroupPreferences_Response
	(*CChatRoom_DeleteChatMessages_Request)(nil),                                             // 114: CChatRoom_DeleteChatMessages_Request
	(*CChatRoom_DeleteChatMessages_Response)(nil),                                            // 115: CChatRoom_DeleteChatMessages_Response
	(*CChatRoom_UpdateMemberListView_Notification)(nil),                                      // 116: CChatRoom_UpdateMemberListView_Notification
	(*CChatRoom_SearchMembers_Request)(nil),                                                  // 117: CChatRoom_SearchMembers_Request
	(*CChatRoom_SearchMembers_Response)(nil),                                                 // 118: CChatRoom_SearchMembers_Response
	(*CChatRoom_UpdateMessageReaction_Request)(nil),                                          // 119: CChatRoom_UpdateMessageReaction_Request
	(*CChatRoom_UpdateMessageReaction_Response)(nil),                                         // 120: CChatRoom_UpdateMessageReaction_Response
	(*CChatRoom_GetMessageReactionReactors_Request)(nil),                                     // 121: CChatRoom_GetMessageReactionReactors_Request
	(*CChatRoom_GetMessageReactionReactors_Response)(nil),                                    // 122: CChatRoom_GetMessageReactionReactors_Response
	(*CClanChatRooms_GetClanChatRoomInfo_Request)(nil),                                       // 123: CClanChatRooms_GetClanChatRoomInfo_Request
	(*CClanChatRooms_GetClanChatRoomInfo_Response)(nil),                                      // 124: CClanChatRooms_GetClanChatRoomInfo_Response
	(*CClanChatRooms_SetClanChatRoomPrivate_Request)(nil),                                    // 125: CClanChatRooms_SetClanChatRoomPrivate_Request
	(*CClanChatRooms_SetClanChatRoomPrivate_Response)(nil),                                   // 126: CClanChatRooms_SetClanChatRoomPrivate_Response
	(*CChatMentions)(nil),                                                                    // 127: CChatMentions
	(*CChatRoom_IncomingChatMessage_Notification)(nil),                                       // 128: CChatRoom_IncomingChatMessage_Notification
	(*CChatRoom_ChatMessageModified_Notification)(nil),                                       // 129: CChatRoom_ChatMessageModified_Notification
	(*CChatRoom_MemberStateChange_Notification)(nil),                                         // 130: CChatRoom_MemberStateChange_Notification
	(*CChatRoom_ChatRoomHeaderState_Notification)(nil),                                       // 131: CChatRoom_ChatRoomHeaderState_Notification
	(*CChatRoom_ChatRoomGroupRoomsChange_Notification)(nil),                                  // 132: CChatRoom_ChatRoomGroupRoomsChange_Notification
	(*CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification)(nil),                       // 133: CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification
	(*ChatRoomClient_NotifyChatGroupUserStateChanged_Notification)(nil),                      // 134: ChatRoomClient_NotifyChatGroupUserStateChanged_Notification
	(*ChatRoomClient_NotifyChatRoomDisconnect_Notification)(nil),                             // 135: ChatRoomClient_NotifyChatRoomDisconnect_Notification
	(*CChatRoomMemberListView)(nil),                                                          // 136: CChatRoomMemberListView
	(*CChatRoomMemberSummaryCounts)(nil),                                                     // 137: CChatRoomMemberSummaryCounts
	(*CChatRoomClient_MemberListViewUpdated_Notification)(nil),                               // 138: CChatRoomClient_MemberListViewUpdated_Notification
	(*CChatRoom_MessageReaction_Notification)(nil),                                           // 139: CChatRoom_MessageReaction_Notification
	(*CChatUsability_ClientUsabilityMetrics_Notification)(nil),                               // 140: CChatUsability_ClientUsabilityMetrics_Notification
	(*CChatUsability_RequestClientUsabilityMetrics_Notification)(nil),                        // 141: CChatUsability_RequestClientUsabilityMetrics_Notification
	(*CChatRoom_GetMessageHistory_Response_ChatMessage)(nil),                                 // 142: CChatRoom_GetMessageHistory_Response.ChatMessage
	(*CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction)(nil),                 // 143: CChatRoom_GetMessageHistory_Response.ChatMessage.MessageReaction
	(*CChatRoom_GetInviteLinksForGroup_Response_LinkInfo)(nil),                               // 144: CChatRoom_GetInviteLinksForGroup_Response.LinkInfo
	(*CChatRoom_GetBanList_Response_BanInfo)(nil),                                            // 145: CChatRoom_GetBanList_Response.BanInfo
	(*CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences)(nil),               // 146: CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences
	(*CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences)(nil),                // 147: CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences
	(*CChatRoom_DeleteChatMessages_Request_Message)(nil),                                     // 148: CChatRoom_DeleteChatMessages_Request.Message
	(*CChatRoom_SearchMembers_Response_MemberMatch)(nil),                                     // 149: CChatRoom_SearchMembers_Response.MemberMatch
	(*CChatRoom_ChatMessageModified_Notification_ChatMessage)(nil),                           // 150: CChatRoom_ChatMessageModified_Notification.ChatMessage
	(*CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry)(nil),           // 151: CChatRoomClient_MemberListViewUpdated_Notification.MemberListViewEntry
	(*CChatUsability_ClientUsabilityMetrics_Notification_Settings)(nil),                      // 152: CChatUsability_ClientUsabilityMetrics_Notification.Settings
	(*CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings)(nil),                 // 153: CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings
	(*CChatUsability_ClientUsabilityMetrics_Notification_UIState)(nil),                       // 154: CChatUsability_ClientUsabilityMetrics_Notification.UIState
	(*CChatUsability_ClientUsabilityMetrics_Notification_Metrics)(nil),                       // 155: CChatUsability_ClientUsabilityMetrics_Notification.Metrics
	(*CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState)(nil), // 156: CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState
	(*CMsgClientPersonaState_Friend)(nil),                                                    // 157: CMsgClientPersonaState.Friend
	(*NoResponse)(nil),                                                                       // 158: NoResponse
}
var file_steammessages_chat_steamclient_proto_depIdxs = []int32{
	9,   // 0: CChatRoomGroupHeaderState.roles:type_name -> CChatRole
	10,  // 1: CChatRoomGroupHeaderState.role_actions:type_name -> CChatRoleActions
	11,  // 2: CChatRoomGroupHeaderState.party_beacons:type_name -> CChatPartyBeacon
	0,   // 3: CChatRoomMember.state:type_name -> EChatRoomJoinState
	1,   // 4: CChatRoomMember.rank:type_name -> EChatRoomGroupRank
	12,  // 5: CChatRoomGroupState.header_state:type_name -> CChatRoomGroupHeaderState
	13,  // 6: CChatRoomGroupState.members:type_name -> CChatRoomMember
	14,  // 7: CChatRoomGroupState.chat_rooms:type_name -> CChatRoomState
	13,  // 8: CChatRoomGroupState.kicked:type_name -> CChatRoomMember
	2,   // 9: CUserChatRoomState.desktop_notification_level:type_name -> EChatRoomNotificationLevel
	2,   // 10: CUserChatRoomState.mobile_notification_level:type_name -> EChatRoomNotificationLevel
	16,  // 11: CUserChatRoomGroupState.user_chat_room_state:type_name -> CUserChatRoomState
	2,   // 12: CUserChatRoomGroupState.desktop_notification_level:type_name -> EChatRoomNotificationLevel
	2,   // 13: CUserChatRoomGroupState.mobile_notification_level:type_name -> EChatRoomNotificationLevel
	15,  // 14: CChatRoom_CreateChatRoomGroup_Response.state:type_name -> CChatRoomGroupState
	17,  // 15: CChatRoom_CreateChatRoomGroup_Response.user_chat_state:type_name -> CUserChatRoomGroupState
	10,  // 16: CChatRoom_CreateRole_Response.actions:type_name -> CChatRoleActions
	9,   // 17: CChatRoom_GetRoles_Response.roles:type_name -> CChatRole
	10,  // 18: CChatRoom_GetRoleActions_Response.actions:type_name -> CChatRoleActions
	10,  // 19: CChatRoom_ReplaceRoleActions_Request.actions:type_name -> CChatRoleActions
	15,  // 20: CChatRoom_JoinChatRoomGroup_Response.state:type_name -> CChatRoomGroupState
	17,  // 21: CChatRoom_JoinChatRoomGroup_Response.user_chat_state:type_name -> CUserChatRoomGroupState
	14,  // 22: CChatRoom_CreateChatRoom_Response.chat_room:type_name -> CChatRoomState
	3,   // 23: ServerMessage.message:type_name -> EChatRoomServerMessage
	142, // 24: CChatRoom_GetMessageHistory_Response.messages:type_name -> CChatRoom_GetMessageHistory_Response.ChatMessage
	14,  // 25: CChatRoom_GetChatRoomGroupSummary_Response.chat_rooms:type_name -> CChatRoomState
	1,   // 26: CChatRoom_GetChatRoomGroupSummary_Response.rank:type_name -> EChatRoomGroupRank
	10,  // 27: CChatRoom_GetChatRoomGroupSummary_Response.role_actions:type_name -> CChatRoleActions
	11,  // 28: CChatRoom_GetChatRoomGroupSummary_Response.party_beacons:type_name -> CChatPartyBeacon
	17,  // 29: CChatRoomSummaryPair.user_chat_group_state:type_name -> CUserChatRoomGroupState
	85,  // 30: CChatRoomSummaryPair.group_summary:type_name -> CChatRoom_GetChatRoomGroupSummary_Response
	86,  // 31: CChatRoom_GetMyChatRoomGroups_Response.chat_room_groups:type_name -> CChatRoomSummaryPair
	15,  // 32: CChatRoom_GetChatRoomGroupState_Response.state:type_name -> CChatRoomGroupState
	85,  // 33: CChatRoom_GetInviteLinkInfo_Response.group_summary:type_name -> CChatRoom_GetChatRoomGroupSummary_Response
	17,  // 34: CChatRoom_GetInviteLinkInfo_Response.user_chat_group_state:type_name -> CUserChatRoomGroupState
	85,  // 35: CChatRoom_GetInviteInfo_Response.group_summary:type_name -> CChatRoom_GetChatRoomGroupSummary_Response
	144, // 36: CChatRoom_GetInviteLinksForGroup_Response.invite_links:type_name -> CChatRoom_GetInviteLinksForGroup_Response.LinkInfo
	145, // 37: CChatRoom_GetBanList_Response.bans:type_name -> CChatRoom_GetBanList_Response.BanInfo
	106, // 38: CChatRoom_GetInviteList_Response.invites:type_name -> CChatRoomGroupInvite
	15,  // 39: CChatRoom_SetSessionActiveChatRoomGroups_Response.chat_states:type_name -> CChatRoomGroupState
	146, // 40: CChatRoom_SetUserChatGroupPreferences_Request.chat_group_preferences:type_name -> CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences
	147, // 41: CChatRoom_SetUserChatGroupPreferences_Request.chat_room_preferences:type_name -> CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences
	148, // 42: CChatRoom_DeleteChatMessages_Request.messages:type_name -> CChatRoom_DeleteChatMessages_Request.Message
	149, // 43: CChatRoom_SearchMembers_Response.matching_members:type_name -> CChatRoom_SearchMembers_Response.MemberMatch
	4,   // 44: CChatRoom_UpdateMessageReaction_Request.reaction_type:type_name -> EChatRoomMessageReactionType
	4,   // 45: CChatRoom_GetMessageReactionReactors_Request.reaction_type:type_name -> EChatRoomMessageReactionType
	85,  // 46: CClanChatRooms_GetClanChatRoomInfo_Response.chat_group_summary:type_name -> CChatRoom_GetChatRoomGroupSummary_Response
	127, // 47: CChatRoom_IncomingChatMessage_Notification.mentions:type_name -> CChatMentions
	82,  // 48: CChatRoom_IncomingChatMessage_Notification.server_message:type_name -> ServerMessage
	150, // 49: CChatRoom_ChatMessageModified_Notification.messages:type_name -> CChatRoom_ChatMessageModified_Notification.ChatMessage
	13,  // 50: CChatRoom_MemberStateChange_Notification.member:type_name -> CChatRoomMember
	5,   // 51: CChatRoom_MemberStateChange_Notification.change:type_name -> EChatRoomMemberStateChange
	12,  // 52: CChatRoom_ChatRoomHeaderState_Notification.header_state:type_name -> CChatRoomGroupHeaderState
	14,  // 53: CChatRoom_ChatRoomGroupRoomsChange_Notification.chat_rooms:type_name -> CChatRoomState
	17,  // 54: ChatRoomClient_NotifyChatGroupUserStateChanged_Notification.user_chat_group_state:type_name -> CUserChatRoomGroupState
	85,  // 55: ChatRoomClient_NotifyChatGroupUserStateChanged_Notification.group_summary:type_name -> CChatRoom_GetChatRoomGroupSummary_Response
	5,   // 56: ChatRoomClient_NotifyChatGroupUserStateChanged_Notification.user_action:type_name -> EChatRoomMemberStateChange
	136, // 57: CChatRoomClient_MemberListViewUpdated_Notification.view:type_name -> CChatRoomMemberListView
	151, // 58: CChatRoomClient_MemberListViewUpdated_Notification.members:type_name -> CChatRoomClient_MemberListViewUpdated_Notification.MemberListViewEntry
	137, // 59: CChatRoomClient_MemberListViewUpdated_Notification.member_summary:type_name -> CChatRoomMemberSummaryCounts
	157, // 60: CChatRoomClient_MemberListViewUpdated_Notification.subscribed_personas:type_name -> CMsgClientPersonaState.Friend
	4,   // 61: CChatRoom_MessageReaction_Notification.reaction_type:type_name -> EChatRoomMessageReactionType
	152, // 62: CChatUsability_ClientUsabilityMetrics_Notification.settings:type_name -> CChatUsability_ClientUsabilityMetrics_Notification.Settings
	153, // 63: CChatUsability_ClientUsabilityMetrics_Notification.voice_settings:type_name -> CChatUsability_ClientUsabilityMetrics_Notification.VoiceSettings
	154, // 64: CChatUsability_ClientUsabilityMetrics_Notification.ui_state:type_name -> CChatUsability_ClientUsabilityMetrics_Notification.UIState
	155, // 65: CChatUsability_ClientUsabilityMetrics_Notification.metrics:type_name -> CChatUsability_ClientUsabilityMetrics_Notification.Metrics
	82,  // 66: CChatRoom_GetMessageHistory_Response.ChatMessage.server_message:type_name -> ServerMessage
	143, // 67: CChatRoom_GetMessageHistory_Response.ChatMessage.reactions:type_name -> CChatRoom_GetMessageHistory_Response.ChatMessage.MessageReaction
	4,   // 68: CChatRoom_GetMessageHistory_Response.ChatMessage.MessageReaction.reaction_type:type_name -> EChatRoomMessageReactionType
	2,   // 69: CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences.desktop_notification_level:type_name -> EChatRoomNotificationLevel
	2,   // 70: CChatRoom_SetUserChatGroupPreferences_Request.ChatGroupPreferences.mobile_notification_level:type_name -> EChatRoomNotificationLevel
	2,   // 71: CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences.desktop_notification_level:type_name -> EChatRoomNotificationLevel
	2,   // 72: CChatRoom_SetUserChatGroupPreferences_Request.ChatRoomPreferences.mobile_notification_level:type_name -> EChatRoomNotificationLevel
	157, // 73: CChatRoom_SearchMembers_Response.MemberMatch.persona:type_name -> CMsgClientPersonaState.Friend
	157, // 74: CChatRoomClient_MemberListViewUpdated_Notification.MemberListViewEntry.persona:type_name -> CMsgClientPersonaState.Friend
	156, // 75: CChatUsability_ClientUsabilityMetrics_Notification.UIState.category_collapse:type_name -> CChatUsability_ClientUsabilityMetrics_Notification.UIState.CategoryCollapseState
	6,   // 76: Chat.RequestFriendPersonaStates:input_type -> CChat_RequestFriendPersonaStates_Request
	8,   // 77: ChatRoom.CreateChatRoomGroup:input_type -> CChatRoom_CreateChatRoomGroup_Request
	19,  // 78: ChatRoom.SaveChatRoomGroup:input_type -> CChatRoom_SaveChatRoomGroup_Request
	21,  // 79: ChatRoom.RenameChatRoomGroup:input_type -> CChatRoom_RenameChatRoomGroup_Request
	23,  // 80: ChatRoom.SetChatRoomGroupTagline:input_type -> CChatRoom_SetChatRoomGroupTagline_Request
	25,  // 81: ChatRoom.SetChatRoomGroupAvatar:input_type -> CChatRoom_SetChatRoomGroupAvatar_Request
	27,  // 82: ChatRoom.SetChatRoomGroupWatchingBroadcast:input_type -> CChatRoom_SetChatRoomGroupWatchingBroadcast_Request
	29,  // 83: ChatRoom.JoinMiniGameForChatRoomGroup:input_type -> CChatRoom_JoinMiniGameForChatRoomGroup_Request
	31,  // 84: ChatRoom.EndMiniGameForChatRoomGroup:input_type -> CChatRoom_EndMiniGameForChatRoomGroup_Request
	33,  // 85: ChatRoom.MuteUserInGroup:input_type -> CChatRoom_MuteUser_Request
	35,  // 86: ChatRoom.KickUserFromGroup:input_type -> CChatRoom_KickUser_Request
	37,  // 87: ChatRoom.SetUserBanState:input_type -> CChatRoom_SetUserBanState_Request
	39,  // 88: ChatRoom.RevokeInviteToGroup:input_type -> CChatRoom_RevokeInvite_Request
	41,  // 89: ChatRoom.CreateRole:input_type -> CChatRoom_CreateRole_Request
	43,  // 90: ChatRoom.GetRoles:input_type -> CChatRoom_GetRoles_Request
	45,  // 91: ChatRoom.RenameRole:input_type -> CChatRoom_RenameRole_Request
	47,  // 92: ChatRoom.ReorderRole:input_type -> CChatRoom_ReorderRole_Request
	49,  // 93: ChatRoom.DeleteRole:input_type -> CChatRoom_DeleteRole_Request
	51,  // 94: ChatRoom.GetRoleActions:input_type -> CChatRoom_GetRoleActions_Request
	53,  // 95: ChatRoom.ReplaceRoleActions:input_type -> CChatRoom_ReplaceRoleActions_Request
	55,  // 96: ChatRoom.AddRoleToUser:input_type -> CChatRoom_AddRoleToUser_Request
	57,  // 97: ChatRoom.GetRolesForUser:input_type -> CChatRoom_GetRolesForUser_Request
	59,  // 98: ChatRoom.DeleteRoleFromUser:input_type -> CChatRoom_DeleteRoleFromUser_Request
	61,  // 99: ChatRoom.JoinChatRoomGroup:input_type -> CChatRoom_JoinChatRoomGroup_Request
	63,  // 100: ChatRoom.InviteFriendToChatRoomGroup:input_type -> CChatRoom_InviteFriendToChatRoomGroup_Request
	65,  // 101: ChatRoom.LeaveChatRoomGroup:input_type -> CChatRoom_LeaveChatRoomGroup_Request
	67,  // 102: ChatRoom.CreateChatRoom:input_type -> CChatRoom_CreateChatRoom_Request
	69,  // 103: ChatRoom.DeleteChatRoom:input_type -> CChatRoom_DeleteChatRoom_Request
	71,  // 104: ChatRoom.RenameChatRoom:input_type -> CChatRoom_RenameChatRoom_Request
	73,  // 105: ChatRoom.ReorderChatRoom:input_type -> CChatRoom_ReorderChatRoom_Request
	75,  // 106: ChatRoom.SendChatMessage:input_type -> CChatRoom_SendChatMessage_Request
	77,  // 107: ChatRoom.JoinVoiceChat:input_type -> CChatRoom_JoinVoiceChat_Request
	79,  // 108: ChatRoom.LeaveVoiceChat:input_type -> CChatRoom_LeaveVoiceChat_Request
	81,  // 109: ChatRoom.GetMessageHistory:input_type -> CChatRoom_GetMessageHistory_Request
	84,  // 110: ChatRoom.GetMyChatRoomGroups:input_type -> CChatRoom_GetMyChatRoomGroups_Request
	88,  // 111: ChatRoom.GetChatRoomGroupState:input_type -> CChatRoom_GetChatRoomGroupState_Request
	90,  // 112: ChatRoom.GetChatRoomGroupSummary:input_type -> CChatRoom_GetChatRoomGroupSummary_Request
	91,  // 113: ChatRoom.SetAppChatRoomGroupForceActive:input_type -> CChatRoom_SetAppChatRoomGroupForceActive_Request
	93,  // 114: ChatRoom.SetAppChatRoomGroupStopForceActive:input_type -> CChatRoom_SetAppChatRoomGroupStopForceActive_Notification
	94,  // 115: ChatRoom.AckChatMessage:input_type -> CChatRoom_AckChatMessage_Notification
	95,  // 116: ChatRoom.CreateInviteLink:input_type -> CChatRoom_CreateInviteLink_Request
	97,  // 117: ChatRoom.GetInviteLinkInfo:input_type -> CChatRoom_GetInviteLinkInfo_Request
	99,  // 118: ChatRoom.GetInviteInfo:input_type -> CChatRoom_GetInviteInfo_Request
	101, // 119: ChatRoom.GetInviteLinksForGroup:input_type -> CChatRoom_GetInviteLinksForGroup_Request
	103, // 120: ChatRoom.GetBanList:input_type -> CChatRoom_GetBanList_Request
	105, // 121: ChatRoom.GetInviteList:input_type -> CChatRoom_GetInviteList_Request
	108, // 122: ChatRoom.DeleteInviteLink:input_type -> CChatRoom_DeleteInviteLink_Request
	110, // 123: ChatRoom.SetSessionActiveChatRoomGroups:input_type -> CChatRoom_SetSessionActiveChatRoomGroups_Request
	112, // 124: ChatRoom.SetUserChatGroupPreferences:input_type -> CChatRoom_SetUserChatGroupPreferences_Request
	114, // 125: ChatRoom.DeleteChatMessages:input_type -> CChatRoom_DeleteChatMessages_Request
	116, // 126: ChatRoom.UpdateMemberListView:input_type -> CChatRoom_UpdateMemberListView_Notification
	117, // 127: ChatRoom.SearchMembers:input_type -> CChatRoom_SearchMembers_Request
	119, // 128: ChatRoom.UpdateMessageReaction:input_type -> CChatRoom_UpdateMessageReaction_Request
	121, // 129: ChatRoom.GetMessageReactionReactors:input_type -> CChatRoom_GetMessageReactionReactors_Request
	123, // 130: ClanChatRooms.GetClanChatRoomInfo:input_type -> CClanChatRooms_GetClanChatRoomInfo_Request
	125, // 131: ClanChatRooms.SetClanChatRoomPrivate:input_type -> CClanChatRooms_SetClanChatRoomPrivate_Request
	128, // 132: ChatRoomClient.NotifyIncomingChatMessage:input_type -> CChatRoom_IncomingChatMessage_Notification
	129, // 133: ChatRoomClient.NotifyChatMessageModified:input_type -> CChatRoom_ChatMessageModified_Notification
	130, // 134: ChatRoomClient.NotifyMemberStateChange:input_type -> CChatRoom_MemberStateChange_Notification
	131, // 135: ChatRoomClient.NotifyChatRoomHeaderStateChange:input_type -> CChatRoom_ChatRoomHeaderState_Notification
	132, // 136: ChatRoomClient.NotifyChatRoomGroupRoomsChange:input_type -> CChatRoom_ChatRoomGroupRoomsChange_Notification
	133, // 137: ChatRoomClient.NotifyShouldRejoinChatRoomVoiceChat:input_type -> CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification
	134, // 138: ChatRoomClient.NotifyChatGroupUserStateChanged:input_type -> ChatRoomClient_NotifyChatGroupUserStateChanged_Notification
	94,  // 139: ChatRoomClient.NotifyAckChatMessageEcho:input_type -> CChatRoom_AckChatMessage_Notification
	135, // 140: ChatRoomClient.NotifyChatRoomDisconnect:input_type -> ChatRoomClient_NotifyChatRoomDisconnect_Notification
	138, // 141: ChatRoomClient.NotifyMemberListViewUpdated:input_type -> CChatRoomClient_MemberListViewUpdated_Notification
	139, // 142: ChatRoomClient.NotifyMessageReaction:input_type -> CChatRoom_MessageReaction_Notification
	140, // 143: ChatUsability.NotifyClientUsabilityMetrics:input_type -> CChatUsability_ClientUsabilityMetrics_Notification
	141, // 144: ChatUsabilityClient.NotifyRequestClientUsabilityMetrics:input_type -> CChatUsability_RequestClientUsabilityMetrics_Notification
	7,   // 145: Chat.RequestFriendPersonaStates:output_type -> CChat_RequestFriendPersonaStates_Response
	18,  // 146: ChatRoom.CreateChatRoomGroup:output_type -> CChatRoom_CreateChatRoomGroup_Response
	20,  // 147: ChatRoom.SaveChatRoomGroup:output_type -> CChatRoom_SaveChatRoomGroup_Response
	22,  // 148: ChatRoom.RenameChatRoomGroup:output_type -> CChatRoom_RenameChatRoomGroup_Response
	24,  // 149: ChatRoom.SetChatRoomGroupTagline:output_type -> CChatRoom_SetChatRoomGroupTagline_Response
	26,  // 150: ChatRoom.SetChatRoomGroupAvatar:output_type -> CChatRoom_SetChatRoomGroupAvatar_Response
	28,  // 151: ChatRoom.SetChatRoomGroupWatchingBroadcast:output_type -> CChatRoom_SetChatRoomGroupWatchingBroadcast_Response
	30,  // 152: ChatRoom.JoinMiniGameForChatRoomGroup:output_type -> CChatRoom_JoinMiniGameForChatRoomGroup_Response
	32,  // 153: ChatRoom.EndMiniGameForChatRoomGroup:output_type -> CChatRoom_EndMiniGameForChatRoomGroup_Response
	34,  // 154: ChatRoom.MuteUserInGroup:output_type -> CChatRoom_MuteUser_Response
	36,  // 155: ChatRoom.KickUserFromGroup:output_type -> CChatRoom_KickUser_Response
	38,  // 156: ChatRoom.SetUserBanState:output_type -> CChatRoom_SetUserBanState_Response
	40,  // 157: ChatRoom.RevokeInviteToGroup:output_type -> CChatRoom_RevokeInvite_Response
	42,  // 158: ChatRoom.CreateRole:output_type -> CChatRoom_CreateRole_Response
	44,  // 159: ChatRoom.GetRoles:output_type -> CChatRoom_GetRoles_Response
	46,  // 160: ChatRoom.RenameRole:output_type -> CChatRoom_RenameRole_Response
	48,  // 161: ChatRoom.ReorderRole:output_type -> CChatRoom_ReorderRole_Response
	50,  // 162: ChatRoom.DeleteRole:output_type -> CChatRoom_DeleteRole_Response
	52,  // 163: ChatRoom.GetRoleActions:output_type -> CChatRoom_GetRoleActions_Response
	54,  // 164: ChatRoom.ReplaceRoleActions:output_type -> CChatRoom_ReplaceRoleActions_Response
	56,  // 165: ChatRoom.AddRoleToUser:output_type -> CChatRoom_AddRoleToUser_Response
	58,  // 166: ChatRoom.GetRolesForUser:output_type -> CChatRoom_GetRolesForUser_Response
	60,  // 167: ChatRoom.DeleteRoleFromUser:output_type -> CChatRoom_DeleteRoleFromUser_Response
	62,  // 168: ChatRoom.JoinChatRoomGroup:output_type -> CChatRoom_JoinChatRoomGroup_Response
	64,  // 169: ChatRoom.InviteFriendToChatRoomGroup:output_type -> CChatRoom_InviteFriendToChatRoomGroup_Response
	66,  // 170: ChatRoom.LeaveChatRoomGroup:output_type -> CChatRoom_LeaveChatRoomGroup_Response
	68,  // 171: ChatRoom.CreateChatRoom:output_type -> CChatRoom_CreateChatRoom_Response
	70,  // 172: ChatRoom.DeleteChatRoom:output_type -> CChatRoom_DeleteChatRoom_Response
	72,  // 173: ChatRoom.RenameChatRoom:output_type -> CChatRoom_RenameChatRoom_Response
	74,  // 174: ChatRoom.ReorderChatRoom:output_type -> CChatRoom_ReorderChatRoom_Response
	76,  // 175: ChatRoom.SendChatMessage:output_type -> CChatRoom_SendChatMessage_Response
	78,  // 176: ChatRoom.JoinVoiceChat:output_type -> CChatRoom_JoinVoiceChat_Response
	80,  // 177: ChatRoom.LeaveVoiceChat:output_type -> CChatRoom_LeaveVoiceChat_Response
	83,  // 178: ChatRoom.GetMessageHistory:output_type -> CChatRoom_GetMessageHistory_Response
	87,  // 179: ChatRoom.GetMyChatRoomGroups:output_type -> CChatRoom_GetMyChatRoomGroups_Response
	89,  // 180: ChatRoom.GetChatRoomGroupState:output_type -> CChatRoom_GetChatRoomGroupState_Response
	85,  // 181: ChatRoom.GetChatRoomGroupSummary:output_type -> CChatRoom_GetChatRoomGroupSummary_Response
	92,  // 182: ChatRoom.SetAppChatRoomGroupForceActive:output_type -> CChatRoom_SetAppChatRoomGroupForceActive_Response
	158, // 183: ChatRoom.SetAppChatRoomGroupStopForceActive:output_type -> NoResponse
	158, // 184: ChatRoom.AckChatMessage:output_type -> NoResponse
	96,  // 185: ChatRoom.CreateInviteLink:output_type -> CChatRoom_CreateInviteLink_Response
	98,  // 186: ChatRoom.GetInviteLinkInfo:output_type -> CChatRoom_GetInviteLinkInfo_Response
	100, // 187: ChatRoom.GetInviteInfo:output_type -> CChatRoom_GetInviteInfo_Response
	102, // 188: ChatRoom.GetInviteLinksForGroup:output_type -> CChatRoom_GetInviteLinksForGroup_Response
	104, // 189: ChatRoom.GetBanList:output_type -> CChatRoom_GetBanList_Response
	107, // 190: ChatRoom.GetInviteList:output_type -> CChatRoom_GetInviteList_Response
	109, // 191: ChatRoom.DeleteInviteLink:output_type -> CChatRoom_DeleteInviteLink_Response
	111, // 192: ChatRoom.SetSessionActiveChatRoomGroups:output_type -> CChatRoom_SetSessionActiveChatRoomGroups_Response
	113, // 193: ChatRoom.SetUserChatGroupPreferences:output_type -> CChatRoom_SetUserChatGroupPreferences_Response
	115, // 194: ChatRoom.DeleteChatMessages:output_type -> CChatRoom_DeleteChatMessages_Response
	158, // 195: ChatRoom.UpdateMemberListView:output_type -> NoResponse
	118, // 196: ChatRoom.SearchMembers:output_type -> CChatRoom_SearchMembers_Response
	120, // 197: ChatRoom.UpdateMessageReaction:output_type -> CChatRoom_UpdateMessageReaction_Response
	122, // 198: ChatRoom.GetMessageReactionReactors:output_type -> CChatRoom_GetMessageReactionReactors_Response
	124, // 199: ClanChatRooms.GetClanChatRoomInfo:output_type -> CClanChatRooms_GetClanChatRoomInfo_Response
	126, // 200: ClanChatRooms.SetClanChatRoomPrivate:output_type -> CClanChatRooms_SetClanChatRoomPrivate_Response
	158, // 201: ChatRoomClient.NotifyIncomingChatMessage:output_type -> NoResponse
	158, // 202: ChatRoomClient.NotifyChatMessageModified:output_type -> NoResponse
	158, // 203: ChatRoomClient.NotifyMemberStateChange:output_type -> NoResponse
	158, // 204: ChatRoomClient.NotifyChatRoomHeaderStateChange:output_type -> NoResponse
	158, // 205: ChatRoomClient.NotifyChatRoomGroupRoomsChange:output_type -> NoResponse
	158, // 206: ChatRoomClient.NotifyShouldRejoinChatRoomVoiceChat:output_type -> NoResponse
	158, // 207: ChatRoomClient.NotifyChatGroupUserStateChanged:output_type -> NoResponse
	158, // 208: ChatRoomClient.NotifyAckChatMessageEcho:output_type -> NoResponse
	158, // 209: ChatRoomClient.NotifyChatRoomDisconnect:output_type -> NoResponse
	158, // 210: ChatRoomClient.NotifyMemberListViewUpdated:output_type -> NoResponse
	158, // 211: ChatRoomClient.NotifyMessageReaction:output_type -> NoResponse
	158, // 212: ChatUsability.NotifyClientUsabilityMetrics:output_type -> NoResponse
	158, // 213: ChatUsabilityClient.NotifyRequestClientUsabilityMetrics:output_type -> NoResponse
	145, // [145:214] is the sub-list for method output_type
	76,  // [76:145] is the sub-list for method input_type
	76,  // [76:76] is the sub-list for extension type_name
	76,  // [76:76] is the sub-list for extension extendee
	0,   // [0:76] is the sub-list for field type_name
}

func init() { file_steammessages_chat_steamclient_proto_init() }
func file_steammessages_chat_steamclient_proto_init() {
	if File_steammessages_chat_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	file_steammessages_clientserver_friends_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_chat_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChat_RequestFriendPersonaStates_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChat_RequestFriendPersonaStates_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_CreateChatRoomGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoleActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatPartyBeacon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoomGroupHeaderState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoomMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoomState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoomGroupState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserChatRoomState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserChatRoomGroupState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_CreateChatRoomGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SaveChatRoomGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SaveChatRoomGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_RenameChatRoomGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_RenameChatRoomGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SetChatRoomGroupTagline_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SetChatRoomGroupTagline_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SetChatRoomGroupAvatar_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SetChatRoomGroupAvatar_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SetChatRoomGroupWatchingBroadcast_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SetChatRoomGroupWatchingBroadcast_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_JoinMiniGameForChatRoomGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_JoinMiniGameForChatRoomGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_EndMiniGameForChatRoomGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_EndMiniGameForChatRoomGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_MuteUser_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_MuteUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_KickUser_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_KickUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SetUserBanState_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SetUserBanState_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_RevokeInvite_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_RevokeInvite_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_CreateRole_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_CreateRole_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetRoles_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetRoles_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_RenameRole_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_RenameRole_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_ReorderRole_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_ReorderRole_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_DeleteRole_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_DeleteRole_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetRoleActions_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetRoleActions_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_ReplaceRoleActions_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_ReplaceRoleActions_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_AddRoleToUser_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_AddRoleToUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetRolesForUser_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetRolesForUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_DeleteRoleFromUser_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_DeleteRoleFromUser_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_JoinChatRoomGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_JoinChatRoomGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_InviteFriendToChatRoomGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_InviteFriendToChatRoomGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_LeaveChatRoomGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_LeaveChatRoomGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_CreateChatRoom_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_CreateChatRoom_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_DeleteChatRoom_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_DeleteChatRoom_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_RenameChatRoom_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_RenameChatRoom_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_ReorderChatRoom_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_ReorderChatRoom_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SendChatMessage_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SendChatMessage_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_JoinVoiceChat_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_JoinVoiceChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_LeaveVoiceChat_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_LeaveVoiceChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetMessageHistory_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetMessageHistory_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetMyChatRoomGroups_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetChatRoomGroupSummary_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoomSummaryPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetMyChatRoomGroups_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetChatRoomGroupState_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetChatRoomGroupState_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetChatRoomGroupSummary_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SetAppChatRoomGroupForceActive_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SetAppChatRoomGroupForceActive_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SetAppChatRoomGroupStopForceActive_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_AckChatMessage_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_CreateInviteLink_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_CreateInviteLink_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetInviteLinkInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetInviteLinkInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetInviteInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetInviteInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetInviteLinksForGroup_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetInviteLinksForGroup_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetBanList_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetBanList_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetInviteList_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoomGroupInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetInviteList_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_DeleteInviteLink_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_DeleteInviteLink_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SetSessionActiveChatRoomGroups_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SetSessionActiveChatRoomGroups_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SetUserChatGroupPreferences_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SetUserChatGroupPreferences_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_DeleteChatMessages_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_DeleteChatMessages_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_UpdateMemberListView_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SearchMembers_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SearchMembers_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_UpdateMessageReaction_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_UpdateMessageReaction_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetMessageReactionReactors_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetMessageReactionReactors_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClanChatRooms_GetClanChatRoomInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClanChatRooms_GetClanChatRoomInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClanChatRooms_SetClanChatRoomPrivate_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClanChatRooms_SetClanChatRoomPrivate_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatMentions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_IncomingChatMessage_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_ChatMessageModified_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_MemberStateChange_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_ChatRoomHeaderState_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_ChatRoomGroupRoomsChange_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatRoomClient_NotifyChatGroupUserStateChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatRoomClient_NotifyChatRoomDisconnect_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoomMemberListView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoomMemberSummaryCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoomClient_MemberListViewUpdated_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_MessageReaction_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatUsability_ClientUsabilityMetrics_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatUsability_RequestClientUsabilityMetrics_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetMessageHistory_Response_ChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetMessageHistory_Response_ChatMessage_MessageReaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetInviteLinksForGroup_Response_LinkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_GetBanList_Response_BanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SetUserChatGroupPreferences_Request_ChatGroupPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SetUserChatGroupPreferences_Request_ChatRoomPreferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_DeleteChatMessages_Request_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_SearchMembers_Response_MemberMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoom_ChatMessageModified_Notification_ChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatRoomClient_MemberListViewUpdated_Notification_MemberListViewEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatUsability_ClientUsabilityMetrics_Notification_Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatUsability_ClientUsabilityMetrics_Notification_VoiceSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatUsability_ClientUsabilityMetrics_Notification_UIState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatUsability_ClientUsabilityMetrics_Notification_Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_chat_steamclient_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CChatUsability_ClientUsabilityMetrics_Notification_UIState_CategoryCollapseState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_chat_steamclient_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   151,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_steammessages_chat_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_chat_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_chat_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_chat_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_chat_steamclient_proto = out.File
	file_steammessages_chat_steamclient_proto_rawDesc = nil
	file_steammessages_chat_steamclient_proto_goTypes = nil
	file_steammessages_chat_steamclient_proto_depIdxs = nil
}
