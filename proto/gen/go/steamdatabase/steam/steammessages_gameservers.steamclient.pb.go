// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: steammessages_gameservers.steamclient.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CGameServers_QueryByFakeIP_Request_EQueryType int32

const (
	CGameServers_QueryByFakeIP_Request_Query_Invalid CGameServers_QueryByFakeIP_Request_EQueryType = 0
	CGameServers_QueryByFakeIP_Request_Query_Ping    CGameServers_QueryByFakeIP_Request_EQueryType = 1
	CGameServers_QueryByFakeIP_Request_Query_Players CGameServers_QueryByFakeIP_Request_EQueryType = 2
	CGameServers_QueryByFakeIP_Request_Query_Rules   CGameServers_QueryByFakeIP_Request_EQueryType = 3
)

// Enum value maps for CGameServers_QueryByFakeIP_Request_EQueryType.
var (
	CGameServers_QueryByFakeIP_Request_EQueryType_name = map[int32]string{
		0: "Query_Invalid",
		1: "Query_Ping",
		2: "Query_Players",
		3: "Query_Rules",
	}
	CGameServers_QueryByFakeIP_Request_EQueryType_value = map[string]int32{
		"Query_Invalid": 0,
		"Query_Ping":    1,
		"Query_Players": 2,
		"Query_Rules":   3,
	}
)

func (x CGameServers_QueryByFakeIP_Request_EQueryType) Enum() *CGameServers_QueryByFakeIP_Request_EQueryType {
	p := new(CGameServers_QueryByFakeIP_Request_EQueryType)
	*p = x
	return p
}

func (x CGameServers_QueryByFakeIP_Request_EQueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CGameServers_QueryByFakeIP_Request_EQueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_gameservers_steamclient_proto_enumTypes[0].Descriptor()
}

func (CGameServers_QueryByFakeIP_Request_EQueryType) Type() protoreflect.EnumType {
	return &file_steammessages_gameservers_steamclient_proto_enumTypes[0]
}

func (x CGameServers_QueryByFakeIP_Request_EQueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CGameServers_QueryByFakeIP_Request_EQueryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CGameServers_QueryByFakeIP_Request_EQueryType(num)
	return nil
}

// Deprecated: Use CGameServers_QueryByFakeIP_Request_EQueryType.Descriptor instead.
func (CGameServers_QueryByFakeIP_Request_EQueryType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{5, 0}
}

type CGameServers_GetServerList_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *string `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	Limit  *uint32 `protobuf:"varint,2,opt,name=limit,def=100" json:"limit,omitempty"`
}

// Default values for CGameServers_GetServerList_Request fields.
const (
	Default_CGameServers_GetServerList_Request_Limit = uint32(100)
)

func (x *CGameServers_GetServerList_Request) Reset() {
	*x = CGameServers_GetServerList_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameServers_GetServerList_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_GetServerList_Request) ProtoMessage() {}

func (x *CGameServers_GetServerList_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_GetServerList_Request.ProtoReflect.Descriptor instead.
func (*CGameServers_GetServerList_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CGameServers_GetServerList_Request) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *CGameServers_GetServerList_Request) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return Default_CGameServers_GetServerList_Request_Limit
}

type CGameServers_GetServerList_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*CGameServers_GetServerList_Response_Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
}

func (x *CGameServers_GetServerList_Response) Reset() {
	*x = CGameServers_GetServerList_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameServers_GetServerList_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_GetServerList_Response) ProtoMessage() {}

func (x *CGameServers_GetServerList_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_GetServerList_Response.ProtoReflect.Descriptor instead.
func (*CGameServers_GetServerList_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CGameServers_GetServerList_Response) GetServers() []*CGameServers_GetServerList_Response_Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

type CGameServers_GetServerSteamIDsByIP_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerIps []string `protobuf:"bytes,1,rep,name=server_ips,json=serverIps" json:"server_ips,omitempty"`
}

func (x *CGameServers_GetServerSteamIDsByIP_Request) Reset() {
	*x = CGameServers_GetServerSteamIDsByIP_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameServers_GetServerSteamIDsByIP_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_GetServerSteamIDsByIP_Request) ProtoMessage() {}

func (x *CGameServers_GetServerSteamIDsByIP_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_GetServerSteamIDsByIP_Request.ProtoReflect.Descriptor instead.
func (*CGameServers_GetServerSteamIDsByIP_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CGameServers_GetServerSteamIDsByIP_Request) GetServerIps() []string {
	if x != nil {
		return x.ServerIps
	}
	return nil
}

type CGameServers_IPsWithSteamIDs_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servers []*CGameServers_IPsWithSteamIDs_Response_Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
}

func (x *CGameServers_IPsWithSteamIDs_Response) Reset() {
	*x = CGameServers_IPsWithSteamIDs_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameServers_IPsWithSteamIDs_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_IPsWithSteamIDs_Response) ProtoMessage() {}

func (x *CGameServers_IPsWithSteamIDs_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_IPsWithSteamIDs_Response.ProtoReflect.Descriptor instead.
func (*CGameServers_IPsWithSteamIDs_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CGameServers_IPsWithSteamIDs_Response) GetServers() []*CGameServers_IPsWithSteamIDs_Response_Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

type CGameServers_GetServerIPsBySteamID_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerSteamids []uint64 `protobuf:"fixed64,1,rep,name=server_steamids,json=serverSteamids" json:"server_steamids,omitempty"`
}

func (x *CGameServers_GetServerIPsBySteamID_Request) Reset() {
	*x = CGameServers_GetServerIPsBySteamID_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameServers_GetServerIPsBySteamID_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_GetServerIPsBySteamID_Request) ProtoMessage() {}

func (x *CGameServers_GetServerIPsBySteamID_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_GetServerIPsBySteamID_Request.ProtoReflect.Descriptor instead.
func (*CGameServers_GetServerIPsBySteamID_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CGameServers_GetServerIPsBySteamID_Request) GetServerSteamids() []uint64 {
	if x != nil {
		return x.ServerSteamids
	}
	return nil
}

type CGameServers_QueryByFakeIP_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FakeIp    *uint32                                        `protobuf:"varint,1,opt,name=fake_ip,json=fakeIp" json:"fake_ip,omitempty"`
	FakePort  *uint32                                        `protobuf:"varint,2,opt,name=fake_port,json=fakePort" json:"fake_port,omitempty"`
	AppId     *uint32                                        `protobuf:"varint,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	QueryType *CGameServers_QueryByFakeIP_Request_EQueryType `protobuf:"varint,4,opt,name=query_type,json=queryType,enum=CGameServers_QueryByFakeIP_Request_EQueryType,def=0" json:"query_type,omitempty"`
}

// Default values for CGameServers_QueryByFakeIP_Request fields.
const (
	Default_CGameServers_QueryByFakeIP_Request_QueryType = CGameServers_QueryByFakeIP_Request_Query_Invalid
)

func (x *CGameServers_QueryByFakeIP_Request) Reset() {
	*x = CGameServers_QueryByFakeIP_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameServers_QueryByFakeIP_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_QueryByFakeIP_Request) ProtoMessage() {}

func (x *CGameServers_QueryByFakeIP_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_QueryByFakeIP_Request.ProtoReflect.Descriptor instead.
func (*CGameServers_QueryByFakeIP_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CGameServers_QueryByFakeIP_Request) GetFakeIp() uint32 {
	if x != nil && x.FakeIp != nil {
		return *x.FakeIp
	}
	return 0
}

func (x *CGameServers_QueryByFakeIP_Request) GetFakePort() uint32 {
	if x != nil && x.FakePort != nil {
		return *x.FakePort
	}
	return 0
}

func (x *CGameServers_QueryByFakeIP_Request) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CGameServers_QueryByFakeIP_Request) GetQueryType() CGameServers_QueryByFakeIP_Request_EQueryType {
	if x != nil && x.QueryType != nil {
		return *x.QueryType
	}
	return Default_CGameServers_QueryByFakeIP_Request_QueryType
}

type CMsgGameServerPingQueryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerIp            *CMsgIPAddress `protobuf:"bytes,1,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	QueryPort           *uint32        `protobuf:"varint,2,opt,name=query_port,json=queryPort" json:"query_port,omitempty"`
	GamePort            *uint32        `protobuf:"varint,3,opt,name=game_port,json=gamePort" json:"game_port,omitempty"`
	SpectatorPort       *uint32        `protobuf:"varint,4,opt,name=spectator_port,json=spectatorPort" json:"spectator_port,omitempty"`
	SpectatorServerName *string        `protobuf:"bytes,5,opt,name=spectator_server_name,json=spectatorServerName" json:"spectator_server_name,omitempty"`
	ServerName          *string        `protobuf:"bytes,6,opt,name=server_name,json=serverName" json:"server_name,omitempty"`
	Steamid             *uint64        `protobuf:"fixed64,7,opt,name=steamid" json:"steamid,omitempty"`
	AppId               *uint32        `protobuf:"varint,8,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Gamedir             *string        `protobuf:"bytes,9,opt,name=gamedir" json:"gamedir,omitempty"`
	Map                 *string        `protobuf:"bytes,10,opt,name=map" json:"map,omitempty"`
	GameDescription     *string        `protobuf:"bytes,11,opt,name=game_description,json=gameDescription" json:"game_description,omitempty"`
	Gametype            *string        `protobuf:"bytes,12,opt,name=gametype" json:"gametype,omitempty"`
	NumPlayers          *uint32        `protobuf:"varint,13,opt,name=num_players,json=numPlayers" json:"num_players,omitempty"`
	MaxPlayers          *uint32        `protobuf:"varint,14,opt,name=max_players,json=maxPlayers" json:"max_players,omitempty"`
	NumBots             *uint32        `protobuf:"varint,15,opt,name=num_bots,json=numBots" json:"num_bots,omitempty"`
	Password            *bool          `protobuf:"varint,16,opt,name=password" json:"password,omitempty"`
	Secure              *bool          `protobuf:"varint,17,opt,name=secure" json:"secure,omitempty"`
	Dedicated           *bool          `protobuf:"varint,18,opt,name=dedicated" json:"dedicated,omitempty"`
	Version             *string        `protobuf:"bytes,19,opt,name=version" json:"version,omitempty"`
	SdrPopid            *uint32        `protobuf:"fixed32,20,opt,name=sdr_popid,json=sdrPopid" json:"sdr_popid,omitempty"`
	SdrLocationString   *string        `protobuf:"bytes,21,opt,name=sdr_location_string,json=sdrLocationString" json:"sdr_location_string,omitempty"`
}

func (x *CMsgGameServerPingQueryData) Reset() {
	*x = CMsgGameServerPingQueryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerPingQueryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerPingQueryData) ProtoMessage() {}

func (x *CMsgGameServerPingQueryData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerPingQueryData.ProtoReflect.Descriptor instead.
func (*CMsgGameServerPingQueryData) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgGameServerPingQueryData) GetServerIp() *CMsgIPAddress {
	if x != nil {
		return x.ServerIp
	}
	return nil
}

func (x *CMsgGameServerPingQueryData) GetQueryPort() uint32 {
	if x != nil && x.QueryPort != nil {
		return *x.QueryPort
	}
	return 0
}

func (x *CMsgGameServerPingQueryData) GetGamePort() uint32 {
	if x != nil && x.GamePort != nil {
		return *x.GamePort
	}
	return 0
}

func (x *CMsgGameServerPingQueryData) GetSpectatorPort() uint32 {
	if x != nil && x.SpectatorPort != nil {
		return *x.SpectatorPort
	}
	return 0
}

func (x *CMsgGameServerPingQueryData) GetSpectatorServerName() string {
	if x != nil && x.SpectatorServerName != nil {
		return *x.SpectatorServerName
	}
	return ""
}

func (x *CMsgGameServerPingQueryData) GetServerName() string {
	if x != nil && x.ServerName != nil {
		return *x.ServerName
	}
	return ""
}

func (x *CMsgGameServerPingQueryData) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CMsgGameServerPingQueryData) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgGameServerPingQueryData) GetGamedir() string {
	if x != nil && x.Gamedir != nil {
		return *x.Gamedir
	}
	return ""
}

func (x *CMsgGameServerPingQueryData) GetMap() string {
	if x != nil && x.Map != nil {
		return *x.Map
	}
	return ""
}

func (x *CMsgGameServerPingQueryData) GetGameDescription() string {
	if x != nil && x.GameDescription != nil {
		return *x.GameDescription
	}
	return ""
}

func (x *CMsgGameServerPingQueryData) GetGametype() string {
	if x != nil && x.Gametype != nil {
		return *x.Gametype
	}
	return ""
}

func (x *CMsgGameServerPingQueryData) GetNumPlayers() uint32 {
	if x != nil && x.NumPlayers != nil {
		return *x.NumPlayers
	}
	return 0
}

func (x *CMsgGameServerPingQueryData) GetMaxPlayers() uint32 {
	if x != nil && x.MaxPlayers != nil {
		return *x.MaxPlayers
	}
	return 0
}

func (x *CMsgGameServerPingQueryData) GetNumBots() uint32 {
	if x != nil && x.NumBots != nil {
		return *x.NumBots
	}
	return 0
}

func (x *CMsgGameServerPingQueryData) GetPassword() bool {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return false
}

func (x *CMsgGameServerPingQueryData) GetSecure() bool {
	if x != nil && x.Secure != nil {
		return *x.Secure
	}
	return false
}

func (x *CMsgGameServerPingQueryData) GetDedicated() bool {
	if x != nil && x.Dedicated != nil {
		return *x.Dedicated
	}
	return false
}

func (x *CMsgGameServerPingQueryData) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *CMsgGameServerPingQueryData) GetSdrPopid() uint32 {
	if x != nil && x.SdrPopid != nil {
		return *x.SdrPopid
	}
	return 0
}

func (x *CMsgGameServerPingQueryData) GetSdrLocationString() string {
	if x != nil && x.SdrLocationString != nil {
		return *x.SdrLocationString
	}
	return ""
}

type CMsgGameServerPlayersQueryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*CMsgGameServerPlayersQueryData_Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
}

func (x *CMsgGameServerPlayersQueryData) Reset() {
	*x = CMsgGameServerPlayersQueryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerPlayersQueryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerPlayersQueryData) ProtoMessage() {}

func (x *CMsgGameServerPlayersQueryData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerPlayersQueryData.ProtoReflect.Descriptor instead.
func (*CMsgGameServerPlayersQueryData) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgGameServerPlayersQueryData) GetPlayers() []*CMsgGameServerPlayersQueryData_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type CMsgGameServerRulesQueryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*CMsgGameServerRulesQueryData_Rule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
}

func (x *CMsgGameServerRulesQueryData) Reset() {
	*x = CMsgGameServerRulesQueryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerRulesQueryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerRulesQueryData) ProtoMessage() {}

func (x *CMsgGameServerRulesQueryData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerRulesQueryData.ProtoReflect.Descriptor instead.
func (*CMsgGameServerRulesQueryData) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgGameServerRulesQueryData) GetRules() []*CMsgGameServerRulesQueryData_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type CGameServers_GameServerQuery_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PingData    *CMsgGameServerPingQueryData    `protobuf:"bytes,1,opt,name=ping_data,json=pingData" json:"ping_data,omitempty"`
	PlayersData *CMsgGameServerPlayersQueryData `protobuf:"bytes,2,opt,name=players_data,json=playersData" json:"players_data,omitempty"`
	RulesData   *CMsgGameServerRulesQueryData   `protobuf:"bytes,3,opt,name=rules_data,json=rulesData" json:"rules_data,omitempty"`
}

func (x *CGameServers_GameServerQuery_Response) Reset() {
	*x = CGameServers_GameServerQuery_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameServers_GameServerQuery_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_GameServerQuery_Response) ProtoMessage() {}

func (x *CGameServers_GameServerQuery_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_GameServerQuery_Response.ProtoReflect.Descriptor instead.
func (*CGameServers_GameServerQuery_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CGameServers_GameServerQuery_Response) GetPingData() *CMsgGameServerPingQueryData {
	if x != nil {
		return x.PingData
	}
	return nil
}

func (x *CGameServers_GameServerQuery_Response) GetPlayersData() *CMsgGameServerPlayersQueryData {
	if x != nil {
		return x.PlayersData
	}
	return nil
}

func (x *CGameServers_GameServerQuery_Response) GetRulesData() *CMsgGameServerRulesQueryData {
	if x != nil {
		return x.RulesData
	}
	return nil
}

type GameServerClient_QueryServerData_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GameServerClient_QueryServerData_Request) Reset() {
	*x = GameServerClient_QueryServerData_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerClient_QueryServerData_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerClient_QueryServerData_Request) ProtoMessage() {}

func (x *GameServerClient_QueryServerData_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerClient_QueryServerData_Request.ProtoReflect.Descriptor instead.
func (*GameServerClient_QueryServerData_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{10}
}

type GameServerClient_QueryServerData_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PingData    *CMsgGameServerPingQueryData    `protobuf:"bytes,1,opt,name=ping_data,json=pingData" json:"ping_data,omitempty"`
	PlayersData *CMsgGameServerPlayersQueryData `protobuf:"bytes,2,opt,name=players_data,json=playersData" json:"players_data,omitempty"`
	RulesData   *CMsgGameServerRulesQueryData   `protobuf:"bytes,3,opt,name=rules_data,json=rulesData" json:"rules_data,omitempty"`
}

func (x *GameServerClient_QueryServerData_Response) Reset() {
	*x = GameServerClient_QueryServerData_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameServerClient_QueryServerData_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameServerClient_QueryServerData_Response) ProtoMessage() {}

func (x *GameServerClient_QueryServerData_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameServerClient_QueryServerData_Response.ProtoReflect.Descriptor instead.
func (*GameServerClient_QueryServerData_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *GameServerClient_QueryServerData_Response) GetPingData() *CMsgGameServerPingQueryData {
	if x != nil {
		return x.PingData
	}
	return nil
}

func (x *GameServerClient_QueryServerData_Response) GetPlayersData() *CMsgGameServerPlayersQueryData {
	if x != nil {
		return x.PlayersData
	}
	return nil
}

func (x *GameServerClient_QueryServerData_Response) GetRulesData() *CMsgGameServerRulesQueryData {
	if x != nil {
		return x.RulesData
	}
	return nil
}

type CGameServers_GetServerList_Response_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr       *string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Gameport   *uint32 `protobuf:"varint,2,opt,name=gameport" json:"gameport,omitempty"`
	Specport   *uint32 `protobuf:"varint,3,opt,name=specport" json:"specport,omitempty"`
	Steamid    *uint64 `protobuf:"fixed64,4,opt,name=steamid" json:"steamid,omitempty"`
	Name       *string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Appid      *uint32 `protobuf:"varint,6,opt,name=appid" json:"appid,omitempty"`
	Gamedir    *string `protobuf:"bytes,7,opt,name=gamedir" json:"gamedir,omitempty"`
	Version    *string `protobuf:"bytes,8,opt,name=version" json:"version,omitempty"`
	Product    *string `protobuf:"bytes,9,opt,name=product" json:"product,omitempty"`
	Region     *int32  `protobuf:"varint,10,opt,name=region" json:"region,omitempty"`
	Players    *int32  `protobuf:"varint,11,opt,name=players" json:"players,omitempty"`
	MaxPlayers *int32  `protobuf:"varint,12,opt,name=max_players,json=maxPlayers" json:"max_players,omitempty"`
	Bots       *int32  `protobuf:"varint,13,opt,name=bots" json:"bots,omitempty"`
	Map        *string `protobuf:"bytes,14,opt,name=map" json:"map,omitempty"`
	Secure     *bool   `protobuf:"varint,15,opt,name=secure" json:"secure,omitempty"`
	Dedicated  *bool   `protobuf:"varint,16,opt,name=dedicated" json:"dedicated,omitempty"`
	Os         *string `protobuf:"bytes,17,opt,name=os" json:"os,omitempty"`
	Gametype   *string `protobuf:"bytes,18,opt,name=gametype" json:"gametype,omitempty"`
}

func (x *CGameServers_GetServerList_Response_Server) Reset() {
	*x = CGameServers_GetServerList_Response_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameServers_GetServerList_Response_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_GetServerList_Response_Server) ProtoMessage() {}

func (x *CGameServers_GetServerList_Response_Server) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_GetServerList_Response_Server.ProtoReflect.Descriptor instead.
func (*CGameServers_GetServerList_Response_Server) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CGameServers_GetServerList_Response_Server) GetAddr() string {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return ""
}

func (x *CGameServers_GetServerList_Response_Server) GetGameport() uint32 {
	if x != nil && x.Gameport != nil {
		return *x.Gameport
	}
	return 0
}

func (x *CGameServers_GetServerList_Response_Server) GetSpecport() uint32 {
	if x != nil && x.Specport != nil {
		return *x.Specport
	}
	return 0
}

func (x *CGameServers_GetServerList_Response_Server) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CGameServers_GetServerList_Response_Server) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CGameServers_GetServerList_Response_Server) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CGameServers_GetServerList_Response_Server) GetGamedir() string {
	if x != nil && x.Gamedir != nil {
		return *x.Gamedir
	}
	return ""
}

func (x *CGameServers_GetServerList_Response_Server) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *CGameServers_GetServerList_Response_Server) GetProduct() string {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return ""
}

func (x *CGameServers_GetServerList_Response_Server) GetRegion() int32 {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return 0
}

func (x *CGameServers_GetServerList_Response_Server) GetPlayers() int32 {
	if x != nil && x.Players != nil {
		return *x.Players
	}
	return 0
}

func (x *CGameServers_GetServerList_Response_Server) GetMaxPlayers() int32 {
	if x != nil && x.MaxPlayers != nil {
		return *x.MaxPlayers
	}
	return 0
}

func (x *CGameServers_GetServerList_Response_Server) GetBots() int32 {
	if x != nil && x.Bots != nil {
		return *x.Bots
	}
	return 0
}

func (x *CGameServers_GetServerList_Response_Server) GetMap() string {
	if x != nil && x.Map != nil {
		return *x.Map
	}
	return ""
}

func (x *CGameServers_GetServerList_Response_Server) GetSecure() bool {
	if x != nil && x.Secure != nil {
		return *x.Secure
	}
	return false
}

func (x *CGameServers_GetServerList_Response_Server) GetDedicated() bool {
	if x != nil && x.Dedicated != nil {
		return *x.Dedicated
	}
	return false
}

func (x *CGameServers_GetServerList_Response_Server) GetOs() string {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return ""
}

func (x *CGameServers_GetServerList_Response_Server) GetGametype() string {
	if x != nil && x.Gametype != nil {
		return *x.Gametype
	}
	return ""
}

type CGameServers_IPsWithSteamIDs_Response_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr    *string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Steamid *uint64 `protobuf:"fixed64,2,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CGameServers_IPsWithSteamIDs_Response_Server) Reset() {
	*x = CGameServers_IPsWithSteamIDs_Response_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CGameServers_IPsWithSteamIDs_Response_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CGameServers_IPsWithSteamIDs_Response_Server) ProtoMessage() {}

func (x *CGameServers_IPsWithSteamIDs_Response_Server) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CGameServers_IPsWithSteamIDs_Response_Server.ProtoReflect.Descriptor instead.
func (*CGameServers_IPsWithSteamIDs_Response_Server) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CGameServers_IPsWithSteamIDs_Response_Server) GetAddr() string {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return ""
}

func (x *CGameServers_IPsWithSteamIDs_Response_Server) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CMsgGameServerPlayersQueryData_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Score      *uint32 `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	TimePlayed *uint32 `protobuf:"varint,3,opt,name=time_played,json=timePlayed" json:"time_played,omitempty"`
}

func (x *CMsgGameServerPlayersQueryData_Player) Reset() {
	*x = CMsgGameServerPlayersQueryData_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerPlayersQueryData_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerPlayersQueryData_Player) ProtoMessage() {}

func (x *CMsgGameServerPlayersQueryData_Player) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerPlayersQueryData_Player.ProtoReflect.Descriptor instead.
func (*CMsgGameServerPlayersQueryData_Player) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CMsgGameServerPlayersQueryData_Player) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgGameServerPlayersQueryData_Player) GetScore() uint32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *CMsgGameServerPlayersQueryData_Player) GetTimePlayed() uint32 {
	if x != nil && x.TimePlayed != nil {
		return *x.TimePlayed
	}
	return 0
}

type CMsgGameServerRulesQueryData_Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule  *string `protobuf:"bytes,1,opt,name=rule" json:"rule,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgGameServerRulesQueryData_Rule) Reset() {
	*x = CMsgGameServerRulesQueryData_Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGameServerRulesQueryData_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGameServerRulesQueryData_Rule) ProtoMessage() {}

func (x *CMsgGameServerRulesQueryData_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_gameservers_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGameServerRulesQueryData_Rule.ProtoReflect.Descriptor instead.
func (*CMsgGameServerRulesQueryData_Rule) Descriptor() ([]byte, []int) {
	return file_steammessages_gameservers_steamclient_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CMsgGameServerRulesQueryData_Rule) GetRule() string {
	if x != nil && x.Rule != nil {
		return *x.Rule
	}
	return ""
}

func (x *CMsgGameServerRulesQueryData_Rule) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

var File_steammessages_gameservers_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_gameservers_steamclient_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae, 0x01, 0x0a, 0x22, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x82, 0xb5,
	0x18, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x56,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03, 0x31,
	0x30, 0x30, 0x42, 0x3b, 0x82, 0xb5, 0x18, 0x37, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xfd, 0x04, 0x0a, 0x23, 0x43, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x27, 0x82, 0xb5,
	0x18, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x1a, 0xe5,
	0x03, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x82, 0xb5, 0x18, 0x1e, 0x54, 0x68, 0x65,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x27, 0x73, 0x20, 0x49, 0x50, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x69, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x64, 0x69, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x6f,
	0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x61, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x2a, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x73, 0x42, 0x79, 0x49, 0x50, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x70, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x25, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x5f, 0x49, 0x50, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x44, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x49, 0x50,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x1a, 0x36, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x55,
	0x0a, 0x2a, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x50, 0x73, 0x42, 0x79, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x73, 0x22, 0xbb, 0x03, 0x0a, 0x22, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x46, 0x61,
	0x6b, 0x65, 0x49, 0x50, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x07,
	0x66, 0x61, 0x6b, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1e, 0x82,
	0xb5, 0x18, 0x1a, 0x46, 0x61, 0x6b, 0x65, 0x49, 0x50, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x06, 0x66,
	0x61, 0x6b, 0x65, 0x49, 0x70, 0x12, 0x3e, 0x0a, 0x09, 0x66, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0x82, 0xb5, 0x18, 0x1d, 0x46, 0x61,
	0x6b, 0x65, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x20, 0x74, 0x6f, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x08, 0x66, 0x61, 0x6b,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x50, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x39, 0x82, 0xb5, 0x18, 0x35, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x2e, 0x20, 0x20, 0x45, 0x61, 0x63, 0x68, 0x20, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x20, 0x68, 0x61, 0x73, 0x20, 0x69, 0x74, 0x73, 0x20, 0x6f, 0x77, 0x6e,
	0x20, 0x46, 0x61, 0x6b, 0x65, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x75, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x79, 0x46, 0x61, 0x6b, 0x65, 0x49, 0x50, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x45, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0d, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x17, 0x82, 0xb5, 0x18, 0x13,
	0x57, 0x68, 0x61, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x3f, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x53,
	0x0a, 0x0a, 0x45, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x50, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x10, 0x03, 0x22, 0xbc, 0x05, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x6d,
	0x65, 0x64, 0x69, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65,
	0x64, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6e, 0x75, 0x6d, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x64, 0x72, 0x5f, 0x70, 0x6f, 0x70,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x73, 0x64, 0x72, 0x50, 0x6f, 0x70,
	0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x64, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x64, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x22, 0xb7, 0x01, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0x53, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x22, 0x8a, 0x01, 0x0a,
	0x1c, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x30, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x25, 0x43, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x2a, 0x0a, 0x28, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe8, 0x01, 0x0a,
	0x29, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69,
	0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x70, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x32, 0xbe, 0x05, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x43, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xb5, 0x18, 0x2c, 0x47, 0x65, 0x74, 0x73, 0x20, 0x61,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0xa4, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x73, 0x42, 0x79, 0x49, 0x50,
	0x12, 0x2b, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44,
	0x73, 0x42, 0x79, 0x49, 0x50, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x49, 0x50, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x47, 0x65, 0x74, 0x73, 0x20,
	0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x73, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20,
	0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x49, 0x50, 0x73, 0x12, 0xad, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x50, 0x73, 0x42, 0x79,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x2b, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x50, 0x73, 0x42, 0x79, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x5f, 0x49, 0x50, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x44, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xb5,
	0x18, 0x3b, 0x47, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x73, 0x12, 0x90, 0x01,
	0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x46, 0x61, 0x6b, 0x65, 0x49, 0x50, 0x12,
	0x23, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x5f, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x46, 0x61, 0x6b, 0x65, 0x49, 0x50, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xb5,
	0x18, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x20, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x46, 0x61, 0x6b, 0x65, 0x49, 0x50,
	0x1a, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x20,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x32, 0xe9, 0x01, 0x0a, 0x10, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x97, 0x01,
	0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x29, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x20, 0x69, 0x73, 0x20, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x69,
	0x74, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x82, 0xb5, 0x18, 0x33, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x20, 0x65, 0x78, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0xc0, 0xb5, 0x18, 0x02, 0x42, 0x44, 0x42, 0x28, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_gameservers_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_gameservers_steamclient_proto_rawDescData = file_steammessages_gameservers_steamclient_proto_rawDesc
)

func file_steammessages_gameservers_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_gameservers_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_gameservers_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_gameservers_steamclient_proto_rawDescData)
	})
	return file_steammessages_gameservers_steamclient_proto_rawDescData
}

var file_steammessages_gameservers_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steammessages_gameservers_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_steammessages_gameservers_steamclient_proto_goTypes = []interface{}{
	(CGameServers_QueryByFakeIP_Request_EQueryType)(0),   // 0: CGameServers_QueryByFakeIP_Request.EQueryType
	(*CGameServers_GetServerList_Request)(nil),           // 1: CGameServers_GetServerList_Request
	(*CGameServers_GetServerList_Response)(nil),          // 2: CGameServers_GetServerList_Response
	(*CGameServers_GetServerSteamIDsByIP_Request)(nil),   // 3: CGameServers_GetServerSteamIDsByIP_Request
	(*CGameServers_IPsWithSteamIDs_Response)(nil),        // 4: CGameServers_IPsWithSteamIDs_Response
	(*CGameServers_GetServerIPsBySteamID_Request)(nil),   // 5: CGameServers_GetServerIPsBySteamID_Request
	(*CGameServers_QueryByFakeIP_Request)(nil),           // 6: CGameServers_QueryByFakeIP_Request
	(*CMsgGameServerPingQueryData)(nil),                  // 7: CMsgGameServerPingQueryData
	(*CMsgGameServerPlayersQueryData)(nil),               // 8: CMsgGameServerPlayersQueryData
	(*CMsgGameServerRulesQueryData)(nil),                 // 9: CMsgGameServerRulesQueryData
	(*CGameServers_GameServerQuery_Response)(nil),        // 10: CGameServers_GameServerQuery_Response
	(*GameServerClient_QueryServerData_Request)(nil),     // 11: GameServerClient_QueryServerData_Request
	(*GameServerClient_QueryServerData_Response)(nil),    // 12: GameServerClient_QueryServerData_Response
	(*CGameServers_GetServerList_Response_Server)(nil),   // 13: CGameServers_GetServerList_Response.Server
	(*CGameServers_IPsWithSteamIDs_Response_Server)(nil), // 14: CGameServers_IPsWithSteamIDs_Response.Server
	(*CMsgGameServerPlayersQueryData_Player)(nil),        // 15: CMsgGameServerPlayersQueryData.Player
	(*CMsgGameServerRulesQueryData_Rule)(nil),            // 16: CMsgGameServerRulesQueryData.Rule
	(*CMsgIPAddress)(nil),                                // 17: CMsgIPAddress
}
var file_steammessages_gameservers_steamclient_proto_depIdxs = []int32{
	13, // 0: CGameServers_GetServerList_Response.servers:type_name -> CGameServers_GetServerList_Response.Server
	14, // 1: CGameServers_IPsWithSteamIDs_Response.servers:type_name -> CGameServers_IPsWithSteamIDs_Response.Server
	0,  // 2: CGameServers_QueryByFakeIP_Request.query_type:type_name -> CGameServers_QueryByFakeIP_Request.EQueryType
	17, // 3: CMsgGameServerPingQueryData.server_ip:type_name -> CMsgIPAddress
	15, // 4: CMsgGameServerPlayersQueryData.players:type_name -> CMsgGameServerPlayersQueryData.Player
	16, // 5: CMsgGameServerRulesQueryData.rules:type_name -> CMsgGameServerRulesQueryData.Rule
	7,  // 6: CGameServers_GameServerQuery_Response.ping_data:type_name -> CMsgGameServerPingQueryData
	8,  // 7: CGameServers_GameServerQuery_Response.players_data:type_name -> CMsgGameServerPlayersQueryData
	9,  // 8: CGameServers_GameServerQuery_Response.rules_data:type_name -> CMsgGameServerRulesQueryData
	7,  // 9: GameServerClient_QueryServerData_Response.ping_data:type_name -> CMsgGameServerPingQueryData
	8,  // 10: GameServerClient_QueryServerData_Response.players_data:type_name -> CMsgGameServerPlayersQueryData
	9,  // 11: GameServerClient_QueryServerData_Response.rules_data:type_name -> CMsgGameServerRulesQueryData
	1,  // 12: GameServers.GetServerList:input_type -> CGameServers_GetServerList_Request
	3,  // 13: GameServers.GetServerSteamIDsByIP:input_type -> CGameServers_GetServerSteamIDsByIP_Request
	5,  // 14: GameServers.GetServerIPsBySteamID:input_type -> CGameServers_GetServerIPsBySteamID_Request
	6,  // 15: GameServers.QueryByFakeIP:input_type -> CGameServers_QueryByFakeIP_Request
	11, // 16: GameServerClient.QueryServerData:input_type -> GameServerClient_QueryServerData_Request
	2,  // 17: GameServers.GetServerList:output_type -> CGameServers_GetServerList_Response
	4,  // 18: GameServers.GetServerSteamIDsByIP:output_type -> CGameServers_IPsWithSteamIDs_Response
	4,  // 19: GameServers.GetServerIPsBySteamID:output_type -> CGameServers_IPsWithSteamIDs_Response
	10, // 20: GameServers.QueryByFakeIP:output_type -> CGameServers_GameServerQuery_Response
	12, // 21: GameServerClient.QueryServerData:output_type -> GameServerClient_QueryServerData_Response
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_steammessages_gameservers_steamclient_proto_init() }
func file_steammessages_gameservers_steamclient_proto_init() {
	if File_steammessages_gameservers_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_gameservers_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameServers_GetServerList_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gameservers_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameServers_GetServerList_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gameservers_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameServers_GetServerSteamIDsByIP_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gameservers_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameServers_IPsWithSteamIDs_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gameservers_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameServers_GetServerIPsBySteamID_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gameservers_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameServers_QueryByFakeIP_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gameservers_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerPingQueryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gameservers_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerPlayersQueryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gameservers_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerRulesQueryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gameservers_steamclient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameServers_GameServerQuery_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gameservers_steamclient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerClient_QueryServerData_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gameservers_steamclient_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameServerClient_QueryServerData_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gameservers_steamclient_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameServers_GetServerList_Response_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gameservers_steamclient_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CGameServers_IPsWithSteamIDs_Response_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gameservers_steamclient_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerPlayersQueryData_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_gameservers_steamclient_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGameServerRulesQueryData_Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_gameservers_steamclient_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steammessages_gameservers_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_gameservers_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_gameservers_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_gameservers_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_gameservers_steamclient_proto = out.File
	file_steammessages_gameservers_steamclient_proto_rawDesc = nil
	file_steammessages_gameservers_steamclient_proto_goTypes = nil
	file_steammessages_gameservers_steamclient_proto_depIdxs = nil
}
