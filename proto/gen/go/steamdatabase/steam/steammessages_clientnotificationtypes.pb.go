// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: steammessages_clientnotificationtypes.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EClientNotificationType int32

const (
	EClientNotificationType_k_EClientNotificationType_Invalid                                 EClientNotificationType = 0
	EClientNotificationType_k_EClientNotificationType_DownloadCompleted                       EClientNotificationType = 1
	EClientNotificationType_k_EClientNotificationType_FriendInvite                            EClientNotificationType = 2
	EClientNotificationType_k_EClientNotificationType_FriendInGame                            EClientNotificationType = 3
	EClientNotificationType_k_EClientNotificationType_FriendOnline                            EClientNotificationType = 4
	EClientNotificationType_k_EClientNotificationType_Achievement                             EClientNotificationType = 5
	EClientNotificationType_k_EClientNotificationType_LowBattery                              EClientNotificationType = 6
	EClientNotificationType_k_EClientNotificationType_SystemUpdate                            EClientNotificationType = 7
	EClientNotificationType_k_EClientNotificationType_FriendMessage                           EClientNotificationType = 8
	EClientNotificationType_k_EClientNotificationType_GroupChatMessage                        EClientNotificationType = 9
	EClientNotificationType_k_EClientNotificationType_FriendInviteRollup                      EClientNotificationType = 10
	EClientNotificationType_k_EClientNotificationType_FamilySharingDeviceAuthorizationChanged EClientNotificationType = 11
	EClientNotificationType_k_EClientNotificationType_FamilySharingStopPlaying                EClientNotificationType = 12
	EClientNotificationType_k_EClientNotificationType_FamilySharingLibraryAvailable           EClientNotificationType = 13
	EClientNotificationType_k_EClientNotificationType_Screenshot                              EClientNotificationType = 14
	EClientNotificationType_k_EClientNotificationType_CloudSyncFailure                        EClientNotificationType = 15
	EClientNotificationType_k_EClientNotificationType_CloudSyncConflict                       EClientNotificationType = 16
	EClientNotificationType_k_EClientNotificationType_IncomingVoiceChat                       EClientNotificationType = 17
	EClientNotificationType_k_EClientNotificationType_ClaimSteamDeckRewards                   EClientNotificationType = 18
	EClientNotificationType_k_EClientNotificationType_GiftReceived                            EClientNotificationType = 19
	EClientNotificationType_k_EClientNotificationType_ItemAnnouncement                        EClientNotificationType = 20
	EClientNotificationType_k_EClientNotificationType_HardwareSurvey                          EClientNotificationType = 21
	EClientNotificationType_k_EClientNotificationType_LowDiskSpace                            EClientNotificationType = 22
	EClientNotificationType_k_EClientNotificationType_BatteryTemperature                      EClientNotificationType = 23
	EClientNotificationType_k_EClientNotificationType_DockUnsupportedFirmware                 EClientNotificationType = 24
	EClientNotificationType_k_EClientNotificationType_PeerContentUpload                       EClientNotificationType = 25
	EClientNotificationType_k_EClientNotificationType_CannotReadControllerGuideButton         EClientNotificationType = 26
	EClientNotificationType_k_EClientNotificationType_Comment                                 EClientNotificationType = 27
	EClientNotificationType_k_EClientNotificationType_Wishlist                                EClientNotificationType = 28
	EClientNotificationType_k_EClientNotificationType_TradeOffer                              EClientNotificationType = 29
	EClientNotificationType_k_EClientNotificationType_AsyncGame                               EClientNotificationType = 30
	EClientNotificationType_k_EClientNotificationType_General                                 EClientNotificationType = 31
	EClientNotificationType_k_EClientNotificationType_HelpRequest                             EClientNotificationType = 32
	EClientNotificationType_k_EClientNotificationType_OverlaySplashScreen                     EClientNotificationType = 33
	EClientNotificationType_k_EClientNotificationType_BroadcastAvailableToWatch               EClientNotificationType = 34
	EClientNotificationType_k_EClientNotificationType_TimedTrialRemaining                     EClientNotificationType = 35
	EClientNotificationType_k_EClientNotificationType_LoginRefresh                            EClientNotificationType = 36
	EClientNotificationType_k_EClientNotificationType_MajorSale                               EClientNotificationType = 37
	EClientNotificationType_k_EClientNotificationType_TimerExpired                            EClientNotificationType = 38
	EClientNotificationType_k_EClientNotificationType_ModeratorMsg                            EClientNotificationType = 39
	EClientNotificationType_k_EClientNotificationType_SteamInputActionSetChanged              EClientNotificationType = 40
	EClientNotificationType_k_EClientNotificationType_RemoteClientConnection                  EClientNotificationType = 41
	EClientNotificationType_k_EClientNotificationType_RemoteClientStartStream                 EClientNotificationType = 42
	EClientNotificationType_k_EClientNotificationType_StreamingClientConnection               EClientNotificationType = 43
	EClientNotificationType_k_EClientNotificationType_FamilyInvite                            EClientNotificationType = 44
	EClientNotificationType_k_EClientNotificationType_PlaytimeWarning                         EClientNotificationType = 45
	EClientNotificationType_k_EClientNotificationType_FamilyPurchaseRequest                   EClientNotificationType = 46
	EClientNotificationType_k_EClientNotificationType_FamilyPurchaseRequestResponse           EClientNotificationType = 47
	EClientNotificationType_k_EClientNotificationType_ParentalFeatureRequest                  EClientNotificationType = 48
)

// Enum value maps for EClientNotificationType.
var (
	EClientNotificationType_name = map[int32]string{
		0:  "k_EClientNotificationType_Invalid",
		1:  "k_EClientNotificationType_DownloadCompleted",
		2:  "k_EClientNotificationType_FriendInvite",
		3:  "k_EClientNotificationType_FriendInGame",
		4:  "k_EClientNotificationType_FriendOnline",
		5:  "k_EClientNotificationType_Achievement",
		6:  "k_EClientNotificationType_LowBattery",
		7:  "k_EClientNotificationType_SystemUpdate",
		8:  "k_EClientNotificationType_FriendMessage",
		9:  "k_EClientNotificationType_GroupChatMessage",
		10: "k_EClientNotificationType_FriendInviteRollup",
		11: "k_EClientNotificationType_FamilySharingDeviceAuthorizationChanged",
		12: "k_EClientNotificationType_FamilySharingStopPlaying",
		13: "k_EClientNotificationType_FamilySharingLibraryAvailable",
		14: "k_EClientNotificationType_Screenshot",
		15: "k_EClientNotificationType_CloudSyncFailure",
		16: "k_EClientNotificationType_CloudSyncConflict",
		17: "k_EClientNotificationType_IncomingVoiceChat",
		18: "k_EClientNotificationType_ClaimSteamDeckRewards",
		19: "k_EClientNotificationType_GiftReceived",
		20: "k_EClientNotificationType_ItemAnnouncement",
		21: "k_EClientNotificationType_HardwareSurvey",
		22: "k_EClientNotificationType_LowDiskSpace",
		23: "k_EClientNotificationType_BatteryTemperature",
		24: "k_EClientNotificationType_DockUnsupportedFirmware",
		25: "k_EClientNotificationType_PeerContentUpload",
		26: "k_EClientNotificationType_CannotReadControllerGuideButton",
		27: "k_EClientNotificationType_Comment",
		28: "k_EClientNotificationType_Wishlist",
		29: "k_EClientNotificationType_TradeOffer",
		30: "k_EClientNotificationType_AsyncGame",
		31: "k_EClientNotificationType_General",
		32: "k_EClientNotificationType_HelpRequest",
		33: "k_EClientNotificationType_OverlaySplashScreen",
		34: "k_EClientNotificationType_BroadcastAvailableToWatch",
		35: "k_EClientNotificationType_TimedTrialRemaining",
		36: "k_EClientNotificationType_LoginRefresh",
		37: "k_EClientNotificationType_MajorSale",
		38: "k_EClientNotificationType_TimerExpired",
		39: "k_EClientNotificationType_ModeratorMsg",
		40: "k_EClientNotificationType_SteamInputActionSetChanged",
		41: "k_EClientNotificationType_RemoteClientConnection",
		42: "k_EClientNotificationType_RemoteClientStartStream",
		43: "k_EClientNotificationType_StreamingClientConnection",
		44: "k_EClientNotificationType_FamilyInvite",
		45: "k_EClientNotificationType_PlaytimeWarning",
		46: "k_EClientNotificationType_FamilyPurchaseRequest",
		47: "k_EClientNotificationType_FamilyPurchaseRequestResponse",
		48: "k_EClientNotificationType_ParentalFeatureRequest",
	}
	EClientNotificationType_value = map[string]int32{
		"k_EClientNotificationType_Invalid":                                 0,
		"k_EClientNotificationType_DownloadCompleted":                       1,
		"k_EClientNotificationType_FriendInvite":                            2,
		"k_EClientNotificationType_FriendInGame":                            3,
		"k_EClientNotificationType_FriendOnline":                            4,
		"k_EClientNotificationType_Achievement":                             5,
		"k_EClientNotificationType_LowBattery":                              6,
		"k_EClientNotificationType_SystemUpdate":                            7,
		"k_EClientNotificationType_FriendMessage":                           8,
		"k_EClientNotificationType_GroupChatMessage":                        9,
		"k_EClientNotificationType_FriendInviteRollup":                      10,
		"k_EClientNotificationType_FamilySharingDeviceAuthorizationChanged": 11,
		"k_EClientNotificationType_FamilySharingStopPlaying":                12,
		"k_EClientNotificationType_FamilySharingLibraryAvailable":           13,
		"k_EClientNotificationType_Screenshot":                              14,
		"k_EClientNotificationType_CloudSyncFailure":                        15,
		"k_EClientNotificationType_CloudSyncConflict":                       16,
		"k_EClientNotificationType_IncomingVoiceChat":                       17,
		"k_EClientNotificationType_ClaimSteamDeckRewards":                   18,
		"k_EClientNotificationType_GiftReceived":                            19,
		"k_EClientNotificationType_ItemAnnouncement":                        20,
		"k_EClientNotificationType_HardwareSurvey":                          21,
		"k_EClientNotificationType_LowDiskSpace":                            22,
		"k_EClientNotificationType_BatteryTemperature":                      23,
		"k_EClientNotificationType_DockUnsupportedFirmware":                 24,
		"k_EClientNotificationType_PeerContentUpload":                       25,
		"k_EClientNotificationType_CannotReadControllerGuideButton":         26,
		"k_EClientNotificationType_Comment":                                 27,
		"k_EClientNotificationType_Wishlist":                                28,
		"k_EClientNotificationType_TradeOffer":                              29,
		"k_EClientNotificationType_AsyncGame":                               30,
		"k_EClientNotificationType_General":                                 31,
		"k_EClientNotificationType_HelpRequest":                             32,
		"k_EClientNotificationType_OverlaySplashScreen":                     33,
		"k_EClientNotificationType_BroadcastAvailableToWatch":               34,
		"k_EClientNotificationType_TimedTrialRemaining":                     35,
		"k_EClientNotificationType_LoginRefresh":                            36,
		"k_EClientNotificationType_MajorSale":                               37,
		"k_EClientNotificationType_TimerExpired":                            38,
		"k_EClientNotificationType_ModeratorMsg":                            39,
		"k_EClientNotificationType_SteamInputActionSetChanged":              40,
		"k_EClientNotificationType_RemoteClientConnection":                  41,
		"k_EClientNotificationType_RemoteClientStartStream":                 42,
		"k_EClientNotificationType_StreamingClientConnection":               43,
		"k_EClientNotificationType_FamilyInvite":                            44,
		"k_EClientNotificationType_PlaytimeWarning":                         45,
		"k_EClientNotificationType_FamilyPurchaseRequest":                   46,
		"k_EClientNotificationType_FamilyPurchaseRequestResponse":           47,
		"k_EClientNotificationType_ParentalFeatureRequest":                  48,
	}
)

func (x EClientNotificationType) Enum() *EClientNotificationType {
	p := new(EClientNotificationType)
	*p = x
	return p
}

func (x EClientNotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EClientNotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientnotificationtypes_proto_enumTypes[0].Descriptor()
}

func (EClientNotificationType) Type() protoreflect.EnumType {
	return &file_steammessages_clientnotificationtypes_proto_enumTypes[0]
}

func (x EClientNotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EClientNotificationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EClientNotificationType(num)
	return nil
}

// Deprecated: Use EClientNotificationType.Descriptor instead.
func (EClientNotificationType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{0}
}

type ESystemUpdateNotificationType int32

const (
	ESystemUpdateNotificationType_k_ESystemUpdateNotificationType_Invalid      ESystemUpdateNotificationType = 0
	ESystemUpdateNotificationType_k_ESystemUpdateNotificationType_Available    ESystemUpdateNotificationType = 1
	ESystemUpdateNotificationType_k_ESystemUpdateNotificationType_NeedsRestart ESystemUpdateNotificationType = 2
)

// Enum value maps for ESystemUpdateNotificationType.
var (
	ESystemUpdateNotificationType_name = map[int32]string{
		0: "k_ESystemUpdateNotificationType_Invalid",
		1: "k_ESystemUpdateNotificationType_Available",
		2: "k_ESystemUpdateNotificationType_NeedsRestart",
	}
	ESystemUpdateNotificationType_value = map[string]int32{
		"k_ESystemUpdateNotificationType_Invalid":      0,
		"k_ESystemUpdateNotificationType_Available":    1,
		"k_ESystemUpdateNotificationType_NeedsRestart": 2,
	}
)

func (x ESystemUpdateNotificationType) Enum() *ESystemUpdateNotificationType {
	p := new(ESystemUpdateNotificationType)
	*p = x
	return p
}

func (x ESystemUpdateNotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESystemUpdateNotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientnotificationtypes_proto_enumTypes[1].Descriptor()
}

func (ESystemUpdateNotificationType) Type() protoreflect.EnumType {
	return &file_steammessages_clientnotificationtypes_proto_enumTypes[1]
}

func (x ESystemUpdateNotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESystemUpdateNotificationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESystemUpdateNotificationType(num)
	return nil
}

// Deprecated: Use ESystemUpdateNotificationType.Descriptor instead.
func (ESystemUpdateNotificationType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{1}
}

type CClientNotificationCloudSyncFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CClientNotificationCloudSyncFailure) Reset() {
	*x = CClientNotificationCloudSyncFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationCloudSyncFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationCloudSyncFailure) ProtoMessage() {}

func (x *CClientNotificationCloudSyncFailure) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationCloudSyncFailure.ProtoReflect.Descriptor instead.
func (*CClientNotificationCloudSyncFailure) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{0}
}

func (x *CClientNotificationCloudSyncFailure) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CClientNotificationCloudSyncConflict struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CClientNotificationCloudSyncConflict) Reset() {
	*x = CClientNotificationCloudSyncConflict{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationCloudSyncConflict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationCloudSyncConflict) ProtoMessage() {}

func (x *CClientNotificationCloudSyncConflict) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationCloudSyncConflict.ProtoReflect.Descriptor instead.
func (*CClientNotificationCloudSyncConflict) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{1}
}

func (x *CClientNotificationCloudSyncConflict) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CClientNotificationScreenshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenshotHandle *string `protobuf:"bytes,1,opt,name=screenshot_handle,json=screenshotHandle" json:"screenshot_handle,omitempty"`
	Description      *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	LocalUrl         *string `protobuf:"bytes,3,opt,name=local_url,json=localUrl" json:"local_url,omitempty"`
}

func (x *CClientNotificationScreenshot) Reset() {
	*x = CClientNotificationScreenshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationScreenshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationScreenshot) ProtoMessage() {}

func (x *CClientNotificationScreenshot) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationScreenshot.ProtoReflect.Descriptor instead.
func (*CClientNotificationScreenshot) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{2}
}

func (x *CClientNotificationScreenshot) GetScreenshotHandle() string {
	if x != nil && x.ScreenshotHandle != nil {
		return *x.ScreenshotHandle
	}
	return ""
}

func (x *CClientNotificationScreenshot) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CClientNotificationScreenshot) GetLocalUrl() string {
	if x != nil && x.LocalUrl != nil {
		return *x.LocalUrl
	}
	return ""
}

type CClientNotificationDownloadCompleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CClientNotificationDownloadCompleted) Reset() {
	*x = CClientNotificationDownloadCompleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationDownloadCompleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationDownloadCompleted) ProtoMessage() {}

func (x *CClientNotificationDownloadCompleted) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationDownloadCompleted.ProtoReflect.Descriptor instead.
func (*CClientNotificationDownloadCompleted) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{3}
}

func (x *CClientNotificationDownloadCompleted) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CClientNotificationFriendInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CClientNotificationFriendInvite) Reset() {
	*x = CClientNotificationFriendInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationFriendInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationFriendInvite) ProtoMessage() {}

func (x *CClientNotificationFriendInvite) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationFriendInvite.ProtoReflect.Descriptor instead.
func (*CClientNotificationFriendInvite) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{4}
}

func (x *CClientNotificationFriendInvite) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CClientNotificationFriendInviteRollup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewInviteCount *uint32 `protobuf:"varint,1,opt,name=new_invite_count,json=newInviteCount" json:"new_invite_count,omitempty"`
}

func (x *CClientNotificationFriendInviteRollup) Reset() {
	*x = CClientNotificationFriendInviteRollup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationFriendInviteRollup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationFriendInviteRollup) ProtoMessage() {}

func (x *CClientNotificationFriendInviteRollup) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationFriendInviteRollup.ProtoReflect.Descriptor instead.
func (*CClientNotificationFriendInviteRollup) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{5}
}

func (x *CClientNotificationFriendInviteRollup) GetNewInviteCount() uint32 {
	if x != nil && x.NewInviteCount != nil {
		return *x.NewInviteCount
	}
	return 0
}

type CClientNotificationFriendInGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid  *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	GameName *string `protobuf:"bytes,2,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
}

func (x *CClientNotificationFriendInGame) Reset() {
	*x = CClientNotificationFriendInGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationFriendInGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationFriendInGame) ProtoMessage() {}

func (x *CClientNotificationFriendInGame) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationFriendInGame.ProtoReflect.Descriptor instead.
func (*CClientNotificationFriendInGame) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{6}
}

func (x *CClientNotificationFriendInGame) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CClientNotificationFriendInGame) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

type CClientNotificationFriendOnline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CClientNotificationFriendOnline) Reset() {
	*x = CClientNotificationFriendOnline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationFriendOnline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationFriendOnline) ProtoMessage() {}

func (x *CClientNotificationFriendOnline) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationFriendOnline.ProtoReflect.Descriptor instead.
func (*CClientNotificationFriendOnline) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{7}
}

func (x *CClientNotificationFriendOnline) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CClientNotificationAchievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AchievementId     *string  `protobuf:"bytes,1,opt,name=achievement_id,json=achievementId" json:"achievement_id,omitempty"`
	Appid             *uint32  `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Name              *string  `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description       *string  `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	ImageUrl          *string  `protobuf:"bytes,5,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	Achieved          *bool    `protobuf:"varint,6,opt,name=achieved" json:"achieved,omitempty"`
	RtimeUnlocked     *uint32  `protobuf:"varint,7,opt,name=rtime_unlocked,json=rtimeUnlocked" json:"rtime_unlocked,omitempty"`
	MinProgress       *float32 `protobuf:"fixed32,8,opt,name=min_progress,json=minProgress" json:"min_progress,omitempty"`
	CurrentProgress   *float32 `protobuf:"fixed32,9,opt,name=current_progress,json=currentProgress" json:"current_progress,omitempty"`
	MaxProgress       *float32 `protobuf:"fixed32,10,opt,name=max_progress,json=maxProgress" json:"max_progress,omitempty"`
	GlobalAchievedPct *float32 `protobuf:"fixed32,11,opt,name=global_achieved_pct,json=globalAchievedPct" json:"global_achieved_pct,omitempty"`
}

func (x *CClientNotificationAchievement) Reset() {
	*x = CClientNotificationAchievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationAchievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationAchievement) ProtoMessage() {}

func (x *CClientNotificationAchievement) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationAchievement.ProtoReflect.Descriptor instead.
func (*CClientNotificationAchievement) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{8}
}

func (x *CClientNotificationAchievement) GetAchievementId() string {
	if x != nil && x.AchievementId != nil {
		return *x.AchievementId
	}
	return ""
}

func (x *CClientNotificationAchievement) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CClientNotificationAchievement) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CClientNotificationAchievement) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CClientNotificationAchievement) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *CClientNotificationAchievement) GetAchieved() bool {
	if x != nil && x.Achieved != nil {
		return *x.Achieved
	}
	return false
}

func (x *CClientNotificationAchievement) GetRtimeUnlocked() uint32 {
	if x != nil && x.RtimeUnlocked != nil {
		return *x.RtimeUnlocked
	}
	return 0
}

func (x *CClientNotificationAchievement) GetMinProgress() float32 {
	if x != nil && x.MinProgress != nil {
		return *x.MinProgress
	}
	return 0
}

func (x *CClientNotificationAchievement) GetCurrentProgress() float32 {
	if x != nil && x.CurrentProgress != nil {
		return *x.CurrentProgress
	}
	return 0
}

func (x *CClientNotificationAchievement) GetMaxProgress() float32 {
	if x != nil && x.MaxProgress != nil {
		return *x.MaxProgress
	}
	return 0
}

func (x *CClientNotificationAchievement) GetGlobalAchievedPct() float32 {
	if x != nil && x.GlobalAchievedPct != nil {
		return *x.GlobalAchievedPct
	}
	return 0
}

type CClientNotificationLowBattery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PctRemaining *float32 `protobuf:"fixed32,1,opt,name=pct_remaining,json=pctRemaining" json:"pct_remaining,omitempty"`
}

func (x *CClientNotificationLowBattery) Reset() {
	*x = CClientNotificationLowBattery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationLowBattery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationLowBattery) ProtoMessage() {}

func (x *CClientNotificationLowBattery) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationLowBattery.ProtoReflect.Descriptor instead.
func (*CClientNotificationLowBattery) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{9}
}

func (x *CClientNotificationLowBattery) GetPctRemaining() float32 {
	if x != nil && x.PctRemaining != nil {
		return *x.PctRemaining
	}
	return 0
}

type CClientNotificationSystemUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *ESystemUpdateNotificationType `protobuf:"varint,1,opt,name=type,enum=ESystemUpdateNotificationType,def=0" json:"type,omitempty"`
}

// Default values for CClientNotificationSystemUpdate fields.
const (
	Default_CClientNotificationSystemUpdate_Type = ESystemUpdateNotificationType_k_ESystemUpdateNotificationType_Invalid
)

func (x *CClientNotificationSystemUpdate) Reset() {
	*x = CClientNotificationSystemUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationSystemUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationSystemUpdate) ProtoMessage() {}

func (x *CClientNotificationSystemUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationSystemUpdate.ProtoReflect.Descriptor instead.
func (*CClientNotificationSystemUpdate) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{10}
}

func (x *CClientNotificationSystemUpdate) GetType() ESystemUpdateNotificationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CClientNotificationSystemUpdate_Type
}

type CClientNotificationFriendMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag              *string `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	Steamid          *string `protobuf:"bytes,2,opt,name=steamid" json:"steamid,omitempty"`
	Title            *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Body             *string `protobuf:"bytes,4,opt,name=body" json:"body,omitempty"`
	Icon             *string `protobuf:"bytes,5,opt,name=icon" json:"icon,omitempty"`
	Notificationid   *uint32 `protobuf:"varint,6,opt,name=notificationid" json:"notificationid,omitempty"`
	ResponseSteamurl *string `protobuf:"bytes,7,opt,name=response_steamurl,json=responseSteamurl" json:"response_steamurl,omitempty"`
}

func (x *CClientNotificationFriendMessage) Reset() {
	*x = CClientNotificationFriendMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationFriendMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationFriendMessage) ProtoMessage() {}

func (x *CClientNotificationFriendMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationFriendMessage.ProtoReflect.Descriptor instead.
func (*CClientNotificationFriendMessage) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{11}
}

func (x *CClientNotificationFriendMessage) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *CClientNotificationFriendMessage) GetSteamid() string {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return ""
}

func (x *CClientNotificationFriendMessage) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CClientNotificationFriendMessage) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *CClientNotificationFriendMessage) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *CClientNotificationFriendMessage) GetNotificationid() uint32 {
	if x != nil && x.Notificationid != nil {
		return *x.Notificationid
	}
	return 0
}

func (x *CClientNotificationFriendMessage) GetResponseSteamurl() string {
	if x != nil && x.ResponseSteamurl != nil {
		return *x.ResponseSteamurl
	}
	return ""
}

type CClientNotificationGroupChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag            *string `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	SteamidSender  *string `protobuf:"bytes,2,opt,name=steamid_sender,json=steamidSender" json:"steamid_sender,omitempty"`
	ChatGroupId    *string `protobuf:"bytes,3,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
	ChatId         *string `protobuf:"bytes,4,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	Title          *string `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	Body           *string `protobuf:"bytes,6,opt,name=body" json:"body,omitempty"`
	Rawbody        *string `protobuf:"bytes,7,opt,name=rawbody" json:"rawbody,omitempty"`
	Icon           *string `protobuf:"bytes,8,opt,name=icon" json:"icon,omitempty"`
	Notificationid *uint32 `protobuf:"varint,9,opt,name=notificationid" json:"notificationid,omitempty"`
}

func (x *CClientNotificationGroupChatMessage) Reset() {
	*x = CClientNotificationGroupChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationGroupChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationGroupChatMessage) ProtoMessage() {}

func (x *CClientNotificationGroupChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationGroupChatMessage.ProtoReflect.Descriptor instead.
func (*CClientNotificationGroupChatMessage) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{12}
}

func (x *CClientNotificationGroupChatMessage) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *CClientNotificationGroupChatMessage) GetSteamidSender() string {
	if x != nil && x.SteamidSender != nil {
		return *x.SteamidSender
	}
	return ""
}

func (x *CClientNotificationGroupChatMessage) GetChatGroupId() string {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return ""
}

func (x *CClientNotificationGroupChatMessage) GetChatId() string {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return ""
}

func (x *CClientNotificationGroupChatMessage) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CClientNotificationGroupChatMessage) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *CClientNotificationGroupChatMessage) GetRawbody() string {
	if x != nil && x.Rawbody != nil {
		return *x.Rawbody
	}
	return ""
}

func (x *CClientNotificationGroupChatMessage) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *CClientNotificationGroupChatMessage) GetNotificationid() uint32 {
	if x != nil && x.Notificationid != nil {
		return *x.Notificationid
	}
	return 0
}

type CClientNotificationFamilySharingDeviceAuthorizationChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountidOwner *uint32 `protobuf:"varint,1,opt,name=accountid_owner,json=accountidOwner" json:"accountid_owner,omitempty"`
	Authorized     *bool   `protobuf:"varint,2,opt,name=authorized" json:"authorized,omitempty"`
}

func (x *CClientNotificationFamilySharingDeviceAuthorizationChanged) Reset() {
	*x = CClientNotificationFamilySharingDeviceAuthorizationChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationFamilySharingDeviceAuthorizationChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationFamilySharingDeviceAuthorizationChanged) ProtoMessage() {}

func (x *CClientNotificationFamilySharingDeviceAuthorizationChanged) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationFamilySharingDeviceAuthorizationChanged.ProtoReflect.Descriptor instead.
func (*CClientNotificationFamilySharingDeviceAuthorizationChanged) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{13}
}

func (x *CClientNotificationFamilySharingDeviceAuthorizationChanged) GetAccountidOwner() uint32 {
	if x != nil && x.AccountidOwner != nil {
		return *x.AccountidOwner
	}
	return 0
}

func (x *CClientNotificationFamilySharingDeviceAuthorizationChanged) GetAuthorized() bool {
	if x != nil && x.Authorized != nil {
		return *x.Authorized
	}
	return false
}

type CClientNotificationFamilySharingStopPlaying struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountidOwner   *uint32 `protobuf:"varint,1,opt,name=accountid_owner,json=accountidOwner" json:"accountid_owner,omitempty"`
	SecondsRemaining *uint32 `protobuf:"varint,2,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
}

func (x *CClientNotificationFamilySharingStopPlaying) Reset() {
	*x = CClientNotificationFamilySharingStopPlaying{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationFamilySharingStopPlaying) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationFamilySharingStopPlaying) ProtoMessage() {}

func (x *CClientNotificationFamilySharingStopPlaying) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationFamilySharingStopPlaying.ProtoReflect.Descriptor instead.
func (*CClientNotificationFamilySharingStopPlaying) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{14}
}

func (x *CClientNotificationFamilySharingStopPlaying) GetAccountidOwner() uint32 {
	if x != nil && x.AccountidOwner != nil {
		return *x.AccountidOwner
	}
	return 0
}

func (x *CClientNotificationFamilySharingStopPlaying) GetSecondsRemaining() uint32 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

type CClientNotificationFamilySharingLibraryAvailable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountidOwner *uint32 `protobuf:"varint,1,opt,name=accountid_owner,json=accountidOwner" json:"accountid_owner,omitempty"`
}

func (x *CClientNotificationFamilySharingLibraryAvailable) Reset() {
	*x = CClientNotificationFamilySharingLibraryAvailable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationFamilySharingLibraryAvailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationFamilySharingLibraryAvailable) ProtoMessage() {}

func (x *CClientNotificationFamilySharingLibraryAvailable) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationFamilySharingLibraryAvailable.ProtoReflect.Descriptor instead.
func (*CClientNotificationFamilySharingLibraryAvailable) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{15}
}

func (x *CClientNotificationFamilySharingLibraryAvailable) GetAccountidOwner() uint32 {
	if x != nil && x.AccountidOwner != nil {
		return *x.AccountidOwner
	}
	return 0
}

type CClientNotificationIncomingVoiceChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CClientNotificationIncomingVoiceChat) Reset() {
	*x = CClientNotificationIncomingVoiceChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationIncomingVoiceChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationIncomingVoiceChat) ProtoMessage() {}

func (x *CClientNotificationIncomingVoiceChat) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationIncomingVoiceChat.ProtoReflect.Descriptor instead.
func (*CClientNotificationIncomingVoiceChat) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{16}
}

func (x *CClientNotificationIncomingVoiceChat) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CClientNotificationClaimSteamDeckRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CClientNotificationClaimSteamDeckRewards) Reset() {
	*x = CClientNotificationClaimSteamDeckRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationClaimSteamDeckRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationClaimSteamDeckRewards) ProtoMessage() {}

func (x *CClientNotificationClaimSteamDeckRewards) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationClaimSteamDeckRewards.ProtoReflect.Descriptor instead.
func (*CClientNotificationClaimSteamDeckRewards) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{17}
}

type CClientNotificationGiftReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderName *string `protobuf:"bytes,1,opt,name=sender_name,json=senderName" json:"sender_name,omitempty"`
}

func (x *CClientNotificationGiftReceived) Reset() {
	*x = CClientNotificationGiftReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationGiftReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationGiftReceived) ProtoMessage() {}

func (x *CClientNotificationGiftReceived) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationGiftReceived.ProtoReflect.Descriptor instead.
func (*CClientNotificationGiftReceived) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{18}
}

func (x *CClientNotificationGiftReceived) GetSenderName() string {
	if x != nil && x.SenderName != nil {
		return *x.SenderName
	}
	return ""
}

type CClientNotificationItemAnnouncement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewItemCount     *uint32 `protobuf:"varint,1,opt,name=new_item_count,json=newItemCount" json:"new_item_count,omitempty"`
	NewBackpackItems *bool   `protobuf:"varint,2,opt,name=new_backpack_items,json=newBackpackItems" json:"new_backpack_items,omitempty"`
}

func (x *CClientNotificationItemAnnouncement) Reset() {
	*x = CClientNotificationItemAnnouncement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationItemAnnouncement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationItemAnnouncement) ProtoMessage() {}

func (x *CClientNotificationItemAnnouncement) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationItemAnnouncement.ProtoReflect.Descriptor instead.
func (*CClientNotificationItemAnnouncement) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{19}
}

func (x *CClientNotificationItemAnnouncement) GetNewItemCount() uint32 {
	if x != nil && x.NewItemCount != nil {
		return *x.NewItemCount
	}
	return 0
}

func (x *CClientNotificationItemAnnouncement) GetNewBackpackItems() bool {
	if x != nil && x.NewBackpackItems != nil {
		return *x.NewBackpackItems
	}
	return false
}

type CClientNotificationHardwareSurveyPending struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CClientNotificationHardwareSurveyPending) Reset() {
	*x = CClientNotificationHardwareSurveyPending{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationHardwareSurveyPending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationHardwareSurveyPending) ProtoMessage() {}

func (x *CClientNotificationHardwareSurveyPending) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationHardwareSurveyPending.ProtoReflect.Descriptor instead.
func (*CClientNotificationHardwareSurveyPending) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{20}
}

type CClientNotificationLowDiskSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderIndex *uint32 `protobuf:"varint,1,opt,name=folder_index,json=folderIndex" json:"folder_index,omitempty"`
}

func (x *CClientNotificationLowDiskSpace) Reset() {
	*x = CClientNotificationLowDiskSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationLowDiskSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationLowDiskSpace) ProtoMessage() {}

func (x *CClientNotificationLowDiskSpace) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationLowDiskSpace.ProtoReflect.Descriptor instead.
func (*CClientNotificationLowDiskSpace) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{21}
}

func (x *CClientNotificationLowDiskSpace) GetFolderIndex() uint32 {
	if x != nil && x.FolderIndex != nil {
		return *x.FolderIndex
	}
	return 0
}

type CClientNotificationBatteryTemperature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Temperature      *uint32 `protobuf:"varint,1,opt,name=temperature" json:"temperature,omitempty"`
	NotificationType *string `protobuf:"bytes,2,opt,name=notification_type,json=notificationType" json:"notification_type,omitempty"`
}

func (x *CClientNotificationBatteryTemperature) Reset() {
	*x = CClientNotificationBatteryTemperature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationBatteryTemperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationBatteryTemperature) ProtoMessage() {}

func (x *CClientNotificationBatteryTemperature) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationBatteryTemperature.ProtoReflect.Descriptor instead.
func (*CClientNotificationBatteryTemperature) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{22}
}

func (x *CClientNotificationBatteryTemperature) GetTemperature() uint32 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

func (x *CClientNotificationBatteryTemperature) GetNotificationType() string {
	if x != nil && x.NotificationType != nil {
		return *x.NotificationType
	}
	return ""
}

type CClientNotificationDockUnsupportedFirmware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CClientNotificationDockUnsupportedFirmware) Reset() {
	*x = CClientNotificationDockUnsupportedFirmware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationDockUnsupportedFirmware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationDockUnsupportedFirmware) ProtoMessage() {}

func (x *CClientNotificationDockUnsupportedFirmware) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationDockUnsupportedFirmware.ProtoReflect.Descriptor instead.
func (*CClientNotificationDockUnsupportedFirmware) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{23}
}

type CClientNotificationPeerContentUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid    *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	PeerName *string `protobuf:"bytes,2,opt,name=peer_name,json=peerName" json:"peer_name,omitempty"`
}

func (x *CClientNotificationPeerContentUpload) Reset() {
	*x = CClientNotificationPeerContentUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationPeerContentUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationPeerContentUpload) ProtoMessage() {}

func (x *CClientNotificationPeerContentUpload) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationPeerContentUpload.ProtoReflect.Descriptor instead.
func (*CClientNotificationPeerContentUpload) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{24}
}

func (x *CClientNotificationPeerContentUpload) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CClientNotificationPeerContentUpload) GetPeerName() string {
	if x != nil && x.PeerName != nil {
		return *x.PeerName
	}
	return ""
}

type CClientNotificationCannotReadControllerGuideButton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerIndex *int32 `protobuf:"varint,1,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
}

func (x *CClientNotificationCannotReadControllerGuideButton) Reset() {
	*x = CClientNotificationCannotReadControllerGuideButton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationCannotReadControllerGuideButton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationCannotReadControllerGuideButton) ProtoMessage() {}

func (x *CClientNotificationCannotReadControllerGuideButton) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationCannotReadControllerGuideButton.ProtoReflect.Descriptor instead.
func (*CClientNotificationCannotReadControllerGuideButton) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{25}
}

func (x *CClientNotificationCannotReadControllerGuideButton) GetControllerIndex() int32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

type CClientNotificationOverlaySplashScreen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CClientNotificationOverlaySplashScreen) Reset() {
	*x = CClientNotificationOverlaySplashScreen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationOverlaySplashScreen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationOverlaySplashScreen) ProtoMessage() {}

func (x *CClientNotificationOverlaySplashScreen) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationOverlaySplashScreen.ProtoReflect.Descriptor instead.
func (*CClientNotificationOverlaySplashScreen) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{26}
}

type CClientNotificationBroadcastAvailableToWatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastPermission *int32 `protobuf:"varint,1,opt,name=broadcast_permission,json=broadcastPermission" json:"broadcast_permission,omitempty"`
}

func (x *CClientNotificationBroadcastAvailableToWatch) Reset() {
	*x = CClientNotificationBroadcastAvailableToWatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationBroadcastAvailableToWatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationBroadcastAvailableToWatch) ProtoMessage() {}

func (x *CClientNotificationBroadcastAvailableToWatch) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationBroadcastAvailableToWatch.ProtoReflect.Descriptor instead.
func (*CClientNotificationBroadcastAvailableToWatch) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{27}
}

func (x *CClientNotificationBroadcastAvailableToWatch) GetBroadcastPermission() int32 {
	if x != nil && x.BroadcastPermission != nil {
		return *x.BroadcastPermission
	}
	return 0
}

type CClientNotificationTimedTrialRemaining struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid          *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Icon           *string `protobuf:"bytes,2,opt,name=icon" json:"icon,omitempty"`
	Offline        *bool   `protobuf:"varint,3,opt,name=offline" json:"offline,omitempty"`
	AllowedSeconds *uint32 `protobuf:"varint,4,opt,name=allowed_seconds,json=allowedSeconds" json:"allowed_seconds,omitempty"`
	PlayedSeconds  *uint32 `protobuf:"varint,5,opt,name=played_seconds,json=playedSeconds" json:"played_seconds,omitempty"`
}

func (x *CClientNotificationTimedTrialRemaining) Reset() {
	*x = CClientNotificationTimedTrialRemaining{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationTimedTrialRemaining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationTimedTrialRemaining) ProtoMessage() {}

func (x *CClientNotificationTimedTrialRemaining) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationTimedTrialRemaining.ProtoReflect.Descriptor instead.
func (*CClientNotificationTimedTrialRemaining) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{28}
}

func (x *CClientNotificationTimedTrialRemaining) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CClientNotificationTimedTrialRemaining) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *CClientNotificationTimedTrialRemaining) GetOffline() bool {
	if x != nil && x.Offline != nil {
		return *x.Offline
	}
	return false
}

func (x *CClientNotificationTimedTrialRemaining) GetAllowedSeconds() uint32 {
	if x != nil && x.AllowedSeconds != nil {
		return *x.AllowedSeconds
	}
	return 0
}

func (x *CClientNotificationTimedTrialRemaining) GetPlayedSeconds() uint32 {
	if x != nil && x.PlayedSeconds != nil {
		return *x.PlayedSeconds
	}
	return 0
}

type CClientNotificationLoginRefresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CClientNotificationLoginRefresh) Reset() {
	*x = CClientNotificationLoginRefresh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationLoginRefresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationLoginRefresh) ProtoMessage() {}

func (x *CClientNotificationLoginRefresh) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationLoginRefresh.ProtoReflect.Descriptor instead.
func (*CClientNotificationLoginRefresh) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{29}
}

type CClientNotificationTimerExpired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CClientNotificationTimerExpired) Reset() {
	*x = CClientNotificationTimerExpired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationTimerExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationTimerExpired) ProtoMessage() {}

func (x *CClientNotificationTimerExpired) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationTimerExpired.ProtoReflect.Descriptor instead.
func (*CClientNotificationTimerExpired) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{30}
}

type CClientNotificationSteamInputActionSetChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControllerIndex *int32  `protobuf:"varint,1,opt,name=controller_index,json=controllerIndex" json:"controller_index,omitempty"`
	ActionSetName   *string `protobuf:"bytes,2,opt,name=action_set_name,json=actionSetName" json:"action_set_name,omitempty"`
}

func (x *CClientNotificationSteamInputActionSetChanged) Reset() {
	*x = CClientNotificationSteamInputActionSetChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationSteamInputActionSetChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationSteamInputActionSetChanged) ProtoMessage() {}

func (x *CClientNotificationSteamInputActionSetChanged) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationSteamInputActionSetChanged.ProtoReflect.Descriptor instead.
func (*CClientNotificationSteamInputActionSetChanged) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{31}
}

func (x *CClientNotificationSteamInputActionSetChanged) GetControllerIndex() int32 {
	if x != nil && x.ControllerIndex != nil {
		return *x.ControllerIndex
	}
	return 0
}

func (x *CClientNotificationSteamInputActionSetChanged) GetActionSetName() string {
	if x != nil && x.ActionSetName != nil {
		return *x.ActionSetName
	}
	return ""
}

type CClientNotificationRemoteClientConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Machine   *string `protobuf:"bytes,1,opt,name=machine" json:"machine,omitempty"`
	Connected *bool   `protobuf:"varint,2,opt,name=connected" json:"connected,omitempty"`
}

func (x *CClientNotificationRemoteClientConnection) Reset() {
	*x = CClientNotificationRemoteClientConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationRemoteClientConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationRemoteClientConnection) ProtoMessage() {}

func (x *CClientNotificationRemoteClientConnection) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationRemoteClientConnection.ProtoReflect.Descriptor instead.
func (*CClientNotificationRemoteClientConnection) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{32}
}

func (x *CClientNotificationRemoteClientConnection) GetMachine() string {
	if x != nil && x.Machine != nil {
		return *x.Machine
	}
	return ""
}

func (x *CClientNotificationRemoteClientConnection) GetConnected() bool {
	if x != nil && x.Connected != nil {
		return *x.Connected
	}
	return false
}

type CClientNotificationRemoteClientStartStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Machine  *string `protobuf:"bytes,1,opt,name=machine" json:"machine,omitempty"`
	GameName *string `protobuf:"bytes,2,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
}

func (x *CClientNotificationRemoteClientStartStream) Reset() {
	*x = CClientNotificationRemoteClientStartStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationRemoteClientStartStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationRemoteClientStartStream) ProtoMessage() {}

func (x *CClientNotificationRemoteClientStartStream) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationRemoteClientStartStream.ProtoReflect.Descriptor instead.
func (*CClientNotificationRemoteClientStartStream) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{33}
}

func (x *CClientNotificationRemoteClientStartStream) GetMachine() string {
	if x != nil && x.Machine != nil {
		return *x.Machine
	}
	return ""
}

func (x *CClientNotificationRemoteClientStartStream) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

type CClientNotificationStreamingClientConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname  *string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Machine   *string `protobuf:"bytes,2,opt,name=machine" json:"machine,omitempty"`
	Connected *bool   `protobuf:"varint,3,opt,name=connected" json:"connected,omitempty"`
}

func (x *CClientNotificationStreamingClientConnection) Reset() {
	*x = CClientNotificationStreamingClientConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationStreamingClientConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationStreamingClientConnection) ProtoMessage() {}

func (x *CClientNotificationStreamingClientConnection) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationStreamingClientConnection.ProtoReflect.Descriptor instead.
func (*CClientNotificationStreamingClientConnection) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{34}
}

func (x *CClientNotificationStreamingClientConnection) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *CClientNotificationStreamingClientConnection) GetMachine() string {
	if x != nil && x.Machine != nil {
		return *x.Machine
	}
	return ""
}

func (x *CClientNotificationStreamingClientConnection) GetConnected() bool {
	if x != nil && x.Connected != nil {
		return *x.Connected
	}
	return false
}

type CClientNotificationPlaytimeWarning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	PlaytimeRemaining *uint32 `protobuf:"varint,2,opt,name=playtime_remaining,json=playtimeRemaining" json:"playtime_remaining,omitempty"`
}

func (x *CClientNotificationPlaytimeWarning) Reset() {
	*x = CClientNotificationPlaytimeWarning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CClientNotificationPlaytimeWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CClientNotificationPlaytimeWarning) ProtoMessage() {}

func (x *CClientNotificationPlaytimeWarning) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientnotificationtypes_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CClientNotificationPlaytimeWarning.ProtoReflect.Descriptor instead.
func (*CClientNotificationPlaytimeWarning) Descriptor() ([]byte, []int) {
	return file_steammessages_clientnotificationtypes_proto_rawDescGZIP(), []int{35}
}

func (x *CClientNotificationPlaytimeWarning) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *CClientNotificationPlaytimeWarning) GetPlaytimeRemaining() uint32 {
	if x != nil && x.PlaytimeRemaining != nil {
		return *x.PlaytimeRemaining
	}
	return 0
}

var File_steammessages_clientnotificationtypes_proto protoreflect.FileDescriptor

var file_steammessages_clientnotificationtypes_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3b, 0x0a,
	0x23, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x24, 0x43, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x43, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x22, 0x3c, 0x0a, 0x24, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x1f, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x22, 0x51, 0x0a, 0x25, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65,
	0x77, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x58, 0x0a, 0x1f, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3b,
	0x0a, 0x1f, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x94, 0x03, 0x0a, 0x1e,
	0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x50,
	0x63, 0x74, 0x22, 0x44, 0x0a, 0x1d, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x77, 0x42, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x63, 0x74, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x7e, 0x0a, 0x1f, 0x43, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x45, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x27, 0x6b, 0x5f, 0x45, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x20, 0x43, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12,
	0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x75, 0x72, 0x6c, 0x22, 0x9b, 0x02, 0x0a,
	0x23, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69,
	0x64, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x3a, 0x43,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x2b, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x69,
	0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x5b, 0x0a, 0x30, 0x43, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x40, 0x0a, 0x24, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x28, 0x43, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x22, 0x42, 0x0a, 0x1f, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x79, 0x0a, 0x23, 0x43, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x6e, 0x65, 0x77, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x2a, 0x0a, 0x28, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x44,
	0x0a, 0x1f, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x76, 0x0a, 0x25, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2c, 0x0a, 0x2a,
	0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x22, 0x59, 0x0a, 0x24, 0x43, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x32, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x53, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x22, 0x61, 0x0a, 0x2c, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x31, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xbc, 0x01, 0x0a, 0x26, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x64,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x22, 0x21, 0x0a, 0x1f, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x2d, 0x43, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x63, 0x0a,
	0x29, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x22, 0x63, 0x0a, 0x2a, 0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x2c, 0x43, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x67, 0x0a, 0x22,
	0x43, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2a, 0xe4, 0x12, 0x0a, 0x17, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x10,
	0x03, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x04, 0x12, 0x29, 0x0a,
	0x25, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x6f, 0x77, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x10, 0x06, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x07, 0x12, 0x2b,
	0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x08, 0x12, 0x2e, 0x0a, 0x2a, 0x6b,
	0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x09, 0x12, 0x30, 0x0a, 0x2c, 0x6b,
	0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x10, 0x0a, 0x12, 0x45, 0x0a,
	0x41, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x10, 0x0b, 0x12, 0x36, 0x0a, 0x32, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x0c, 0x12, 0x3b, 0x0a, 0x37,
	0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x0d, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f,
	0x74, 0x10, 0x0e, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x10, 0x0f, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x10, 0x10, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x10, 0x11, 0x12, 0x33, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x10, 0x12, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f,
	0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x69, 0x66, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x10, 0x13, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x14, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x10, 0x15, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x4c, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x10, 0x16,
	0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x10, 0x17, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x44, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x10, 0x18, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x19, 0x12, 0x3d, 0x0a, 0x39, 0x6b, 0x5f,
	0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x10, 0x1a, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x1b,
	0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x69,
	0x73, 0x68, 0x6c, 0x69, 0x73, 0x74, 0x10, 0x1c, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x10, 0x1d, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x1e, 0x12, 0x25, 0x0a, 0x21, 0x6b,
	0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x10, 0x1f, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x20, 0x12, 0x31, 0x0a,
	0x2d, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x53, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x21,
	0x12, 0x37, 0x0a, 0x33, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x6f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x10, 0x22, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x23, 0x12, 0x2a, 0x0a, 0x26,
	0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x10, 0x24, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x10,
	0x25, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x26, 0x12, 0x2a, 0x0a,
	0x26, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x10, 0x27, 0x12, 0x38, 0x0a, 0x34, 0x6b, 0x5f, 0x45,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x10, 0x28, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x29, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f, 0x45,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0x2a,
	0x12, 0x37, 0x0a, 0x33, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2b, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x10, 0x2c, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x10, 0x2d, 0x12, 0x33, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x2e, 0x12, 0x3b, 0x0a, 0x37, 0x6b, 0x5f, 0x45,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0x2f, 0x12, 0x34, 0x0a, 0x30, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x30, 0x2a, 0xad, 0x01, 0x0a,
	0x1d, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b,
	0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x6b,
	0x5f, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x5f,
	0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x65,
	0x65, 0x64, 0x73, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x10, 0x02, 0x42, 0x47, 0x42, 0x29,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x13, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_clientnotificationtypes_proto_rawDescOnce sync.Once
	file_steammessages_clientnotificationtypes_proto_rawDescData = file_steammessages_clientnotificationtypes_proto_rawDesc
)

func file_steammessages_clientnotificationtypes_proto_rawDescGZIP() []byte {
	file_steammessages_clientnotificationtypes_proto_rawDescOnce.Do(func() {
		file_steammessages_clientnotificationtypes_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_clientnotificationtypes_proto_rawDescData)
	})
	return file_steammessages_clientnotificationtypes_proto_rawDescData
}

var file_steammessages_clientnotificationtypes_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_steammessages_clientnotificationtypes_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_steammessages_clientnotificationtypes_proto_goTypes = []interface{}{
	(EClientNotificationType)(0),                                       // 0: EClientNotificationType
	(ESystemUpdateNotificationType)(0),                                 // 1: ESystemUpdateNotificationType
	(*CClientNotificationCloudSyncFailure)(nil),                        // 2: CClientNotificationCloudSyncFailure
	(*CClientNotificationCloudSyncConflict)(nil),                       // 3: CClientNotificationCloudSyncConflict
	(*CClientNotificationScreenshot)(nil),                              // 4: CClientNotificationScreenshot
	(*CClientNotificationDownloadCompleted)(nil),                       // 5: CClientNotificationDownloadCompleted
	(*CClientNotificationFriendInvite)(nil),                            // 6: CClientNotificationFriendInvite
	(*CClientNotificationFriendInviteRollup)(nil),                      // 7: CClientNotificationFriendInviteRollup
	(*CClientNotificationFriendInGame)(nil),                            // 8: CClientNotificationFriendInGame
	(*CClientNotificationFriendOnline)(nil),                            // 9: CClientNotificationFriendOnline
	(*CClientNotificationAchievement)(nil),                             // 10: CClientNotificationAchievement
	(*CClientNotificationLowBattery)(nil),                              // 11: CClientNotificationLowBattery
	(*CClientNotificationSystemUpdate)(nil),                            // 12: CClientNotificationSystemUpdate
	(*CClientNotificationFriendMessage)(nil),                           // 13: CClientNotificationFriendMessage
	(*CClientNotificationGroupChatMessage)(nil),                        // 14: CClientNotificationGroupChatMessage
	(*CClientNotificationFamilySharingDeviceAuthorizationChanged)(nil), // 15: CClientNotificationFamilySharingDeviceAuthorizationChanged
	(*CClientNotificationFamilySharingStopPlaying)(nil),                // 16: CClientNotificationFamilySharingStopPlaying
	(*CClientNotificationFamilySharingLibraryAvailable)(nil),           // 17: CClientNotificationFamilySharingLibraryAvailable
	(*CClientNotificationIncomingVoiceChat)(nil),                       // 18: CClientNotificationIncomingVoiceChat
	(*CClientNotificationClaimSteamDeckRewards)(nil),                   // 19: CClientNotificationClaimSteamDeckRewards
	(*CClientNotificationGiftReceived)(nil),                            // 20: CClientNotificationGiftReceived
	(*CClientNotificationItemAnnouncement)(nil),                        // 21: CClientNotificationItemAnnouncement
	(*CClientNotificationHardwareSurveyPending)(nil),                   // 22: CClientNotificationHardwareSurveyPending
	(*CClientNotificationLowDiskSpace)(nil),                            // 23: CClientNotificationLowDiskSpace
	(*CClientNotificationBatteryTemperature)(nil),                      // 24: CClientNotificationBatteryTemperature
	(*CClientNotificationDockUnsupportedFirmware)(nil),                 // 25: CClientNotificationDockUnsupportedFirmware
	(*CClientNotificationPeerContentUpload)(nil),                       // 26: CClientNotificationPeerContentUpload
	(*CClientNotificationCannotReadControllerGuideButton)(nil),         // 27: CClientNotificationCannotReadControllerGuideButton
	(*CClientNotificationOverlaySplashScreen)(nil),                     // 28: CClientNotificationOverlaySplashScreen
	(*CClientNotificationBroadcastAvailableToWatch)(nil),               // 29: CClientNotificationBroadcastAvailableToWatch
	(*CClientNotificationTimedTrialRemaining)(nil),                     // 30: CClientNotificationTimedTrialRemaining
	(*CClientNotificationLoginRefresh)(nil),                            // 31: CClientNotificationLoginRefresh
	(*CClientNotificationTimerExpired)(nil),                            // 32: CClientNotificationTimerExpired
	(*CClientNotificationSteamInputActionSetChanged)(nil),              // 33: CClientNotificationSteamInputActionSetChanged
	(*CClientNotificationRemoteClientConnection)(nil),                  // 34: CClientNotificationRemoteClientConnection
	(*CClientNotificationRemoteClientStartStream)(nil),                 // 35: CClientNotificationRemoteClientStartStream
	(*CClientNotificationStreamingClientConnection)(nil),               // 36: CClientNotificationStreamingClientConnection
	(*CClientNotificationPlaytimeWarning)(nil),                         // 37: CClientNotificationPlaytimeWarning
}
var file_steammessages_clientnotificationtypes_proto_depIdxs = []int32{
	1, // 0: CClientNotificationSystemUpdate.type:type_name -> ESystemUpdateNotificationType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_steammessages_clientnotificationtypes_proto_init() }
func file_steammessages_clientnotificationtypes_proto_init() {
	if File_steammessages_clientnotificationtypes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_steammessages_clientnotificationtypes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationCloudSyncFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationCloudSyncConflict); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationScreenshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationDownloadCompleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationFriendInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationFriendInviteRollup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationFriendInGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationFriendOnline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationAchievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationLowBattery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationSystemUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationFriendMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationGroupChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationFamilySharingDeviceAuthorizationChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationFamilySharingStopPlaying); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationFamilySharingLibraryAvailable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationIncomingVoiceChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationClaimSteamDeckRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationGiftReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationItemAnnouncement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationHardwareSurveyPending); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationLowDiskSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationBatteryTemperature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationDockUnsupportedFirmware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationPeerContentUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationCannotReadControllerGuideButton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationOverlaySplashScreen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationBroadcastAvailableToWatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationTimedTrialRemaining); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationLoginRefresh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationTimerExpired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationSteamInputActionSetChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationRemoteClientConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationRemoteClientStartStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationStreamingClientConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientnotificationtypes_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CClientNotificationPlaytimeWarning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_clientnotificationtypes_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_clientnotificationtypes_proto_goTypes,
		DependencyIndexes: file_steammessages_clientnotificationtypes_proto_depIdxs,
		EnumInfos:         file_steammessages_clientnotificationtypes_proto_enumTypes,
		MessageInfos:      file_steammessages_clientnotificationtypes_proto_msgTypes,
	}.Build()
	File_steammessages_clientnotificationtypes_proto = out.File
	file_steammessages_clientnotificationtypes_proto_rawDesc = nil
	file_steammessages_clientnotificationtypes_proto_goTypes = nil
	file_steammessages_clientnotificationtypes_proto_depIdxs = nil
}
