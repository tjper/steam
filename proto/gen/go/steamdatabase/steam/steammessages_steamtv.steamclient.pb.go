// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: steammessages_steamtv.steamclient.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EBroadcastImageType int32

const (
	EBroadcastImageType_k_EBroadcastImageType_None       EBroadcastImageType = 0
	EBroadcastImageType_k_EBroadcastImageType_Offline    EBroadcastImageType = 1
	EBroadcastImageType_k_EBroadcastImageType_Standby    EBroadcastImageType = 2
	EBroadcastImageType_k_EBroadcastImageType_Avatar     EBroadcastImageType = 3
	EBroadcastImageType_k_EBroadcastImageType_Summary    EBroadcastImageType = 4
	EBroadcastImageType_k_EBroadcastImageType_Background EBroadcastImageType = 5
	EBroadcastImageType_k_EBroadcastImageType_Emoticon   EBroadcastImageType = 6
)

// Enum value maps for EBroadcastImageType.
var (
	EBroadcastImageType_name = map[int32]string{
		0: "k_EBroadcastImageType_None",
		1: "k_EBroadcastImageType_Offline",
		2: "k_EBroadcastImageType_Standby",
		3: "k_EBroadcastImageType_Avatar",
		4: "k_EBroadcastImageType_Summary",
		5: "k_EBroadcastImageType_Background",
		6: "k_EBroadcastImageType_Emoticon",
	}
	EBroadcastImageType_value = map[string]int32{
		"k_EBroadcastImageType_None":       0,
		"k_EBroadcastImageType_Offline":    1,
		"k_EBroadcastImageType_Standby":    2,
		"k_EBroadcastImageType_Avatar":     3,
		"k_EBroadcastImageType_Summary":    4,
		"k_EBroadcastImageType_Background": 5,
		"k_EBroadcastImageType_Emoticon":   6,
	}
)

func (x EBroadcastImageType) Enum() *EBroadcastImageType {
	p := new(EBroadcastImageType)
	*p = x
	return p
}

func (x EBroadcastImageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBroadcastImageType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_steamtv_steamclient_proto_enumTypes[0].Descriptor()
}

func (EBroadcastImageType) Type() protoreflect.EnumType {
	return &file_steammessages_steamtv_steamclient_proto_enumTypes[0]
}

func (x EBroadcastImageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EBroadcastImageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EBroadcastImageType(num)
	return nil
}

// Deprecated: Use EBroadcastImageType.Descriptor instead.
func (EBroadcastImageType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{0}
}

type EGetGamesAlgorithm int32

const (
	EGetGamesAlgorithm_k_EGetGamesAlgorithm_Default    EGetGamesAlgorithm = 1
	EGetGamesAlgorithm_k_EGetGamesAlgorithm_MostPlayed EGetGamesAlgorithm = 2
	EGetGamesAlgorithm_k_EGetGamesAlgorithm_PopularNew EGetGamesAlgorithm = 3
)

// Enum value maps for EGetGamesAlgorithm.
var (
	EGetGamesAlgorithm_name = map[int32]string{
		1: "k_EGetGamesAlgorithm_Default",
		2: "k_EGetGamesAlgorithm_MostPlayed",
		3: "k_EGetGamesAlgorithm_PopularNew",
	}
	EGetGamesAlgorithm_value = map[string]int32{
		"k_EGetGamesAlgorithm_Default":    1,
		"k_EGetGamesAlgorithm_MostPlayed": 2,
		"k_EGetGamesAlgorithm_PopularNew": 3,
	}
)

func (x EGetGamesAlgorithm) Enum() *EGetGamesAlgorithm {
	p := new(EGetGamesAlgorithm)
	*p = x
	return p
}

func (x EGetGamesAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGetGamesAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_steamtv_steamclient_proto_enumTypes[1].Descriptor()
}

func (EGetGamesAlgorithm) Type() protoreflect.EnumType {
	return &file_steammessages_steamtv_steamclient_proto_enumTypes[1]
}

func (x EGetGamesAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGetGamesAlgorithm) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGetGamesAlgorithm(num)
	return nil
}

// Deprecated: Use EGetGamesAlgorithm.Descriptor instead.
func (EGetGamesAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{1}
}

type EGetChannelsAlgorithm int32

const (
	EGetChannelsAlgorithm_k_EGetChannelsAlgorithm_Default   EGetChannelsAlgorithm = 1
	EGetChannelsAlgorithm_k_EGetChannelsAlgorithm_Friends   EGetChannelsAlgorithm = 2
	EGetChannelsAlgorithm_k_EGetChannelsAlgorithm_Featured  EGetChannelsAlgorithm = 3
	EGetChannelsAlgorithm_k_EGetChannelsAlgorithm_Developer EGetChannelsAlgorithm = 4
	EGetChannelsAlgorithm_k_EGetChannelsAlgorithm_Following EGetChannelsAlgorithm = 5
)

// Enum value maps for EGetChannelsAlgorithm.
var (
	EGetChannelsAlgorithm_name = map[int32]string{
		1: "k_EGetChannelsAlgorithm_Default",
		2: "k_EGetChannelsAlgorithm_Friends",
		3: "k_EGetChannelsAlgorithm_Featured",
		4: "k_EGetChannelsAlgorithm_Developer",
		5: "k_EGetChannelsAlgorithm_Following",
	}
	EGetChannelsAlgorithm_value = map[string]int32{
		"k_EGetChannelsAlgorithm_Default":   1,
		"k_EGetChannelsAlgorithm_Friends":   2,
		"k_EGetChannelsAlgorithm_Featured":  3,
		"k_EGetChannelsAlgorithm_Developer": 4,
		"k_EGetChannelsAlgorithm_Following": 5,
	}
)

func (x EGetChannelsAlgorithm) Enum() *EGetChannelsAlgorithm {
	p := new(EGetChannelsAlgorithm)
	*p = x
	return p
}

func (x EGetChannelsAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGetChannelsAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_steamtv_steamclient_proto_enumTypes[2].Descriptor()
}

func (EGetChannelsAlgorithm) Type() protoreflect.EnumType {
	return &file_steammessages_steamtv_steamclient_proto_enumTypes[2]
}

func (x EGetChannelsAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EGetChannelsAlgorithm) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EGetChannelsAlgorithm(num)
	return nil
}

// Deprecated: Use EGetChannelsAlgorithm.Descriptor instead.
func (EGetChannelsAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{2}
}

type ESteamTVContentTemplate int32

const (
	ESteamTVContentTemplate_k_ESteamTVContentTemplate_Invalid      ESteamTVContentTemplate = 0
	ESteamTVContentTemplate_k_ESteamTVContentTemplate_Takeover     ESteamTVContentTemplate = 1
	ESteamTVContentTemplate_k_ESteamTVContentTemplate_SingleGame   ESteamTVContentTemplate = 2
	ESteamTVContentTemplate_k_ESteamTVContentTemplate_GameList     ESteamTVContentTemplate = 3
	ESteamTVContentTemplate_k_ESteamTVContentTemplate_QuickExplore ESteamTVContentTemplate = 4
	ESteamTVContentTemplate_k_ESteamTVContentTemplate_ConveyorBelt ESteamTVContentTemplate = 5
	ESteamTVContentTemplate_k_ESteamTVContentTemplate_WatchParty   ESteamTVContentTemplate = 6
	ESteamTVContentTemplate_k_ESteamTVContentTemplate_Developer    ESteamTVContentTemplate = 7
	ESteamTVContentTemplate_k_ESteamTVContentTemplate_Event        ESteamTVContentTemplate = 8
)

// Enum value maps for ESteamTVContentTemplate.
var (
	ESteamTVContentTemplate_name = map[int32]string{
		0: "k_ESteamTVContentTemplate_Invalid",
		1: "k_ESteamTVContentTemplate_Takeover",
		2: "k_ESteamTVContentTemplate_SingleGame",
		3: "k_ESteamTVContentTemplate_GameList",
		4: "k_ESteamTVContentTemplate_QuickExplore",
		5: "k_ESteamTVContentTemplate_ConveyorBelt",
		6: "k_ESteamTVContentTemplate_WatchParty",
		7: "k_ESteamTVContentTemplate_Developer",
		8: "k_ESteamTVContentTemplate_Event",
	}
	ESteamTVContentTemplate_value = map[string]int32{
		"k_ESteamTVContentTemplate_Invalid":      0,
		"k_ESteamTVContentTemplate_Takeover":     1,
		"k_ESteamTVContentTemplate_SingleGame":   2,
		"k_ESteamTVContentTemplate_GameList":     3,
		"k_ESteamTVContentTemplate_QuickExplore": 4,
		"k_ESteamTVContentTemplate_ConveyorBelt": 5,
		"k_ESteamTVContentTemplate_WatchParty":   6,
		"k_ESteamTVContentTemplate_Developer":    7,
		"k_ESteamTVContentTemplate_Event":        8,
	}
)

func (x ESteamTVContentTemplate) Enum() *ESteamTVContentTemplate {
	p := new(ESteamTVContentTemplate)
	*p = x
	return p
}

func (x ESteamTVContentTemplate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamTVContentTemplate) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_steamtv_steamclient_proto_enumTypes[3].Descriptor()
}

func (ESteamTVContentTemplate) Type() protoreflect.EnumType {
	return &file_steammessages_steamtv_steamclient_proto_enumTypes[3]
}

func (x ESteamTVContentTemplate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamTVContentTemplate) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamTVContentTemplate(num)
	return nil
}

// Deprecated: Use ESteamTVContentTemplate.Descriptor instead.
func (ESteamTVContentTemplate) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{3}
}

type CSteamTV_CreateBroadcastChannel_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueName *string `protobuf:"bytes,1,opt,name=unique_name,json=uniqueName" json:"unique_name,omitempty"`
}

func (x *CSteamTV_CreateBroadcastChannel_Request) Reset() {
	*x = CSteamTV_CreateBroadcastChannel_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_CreateBroadcastChannel_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_CreateBroadcastChannel_Request) ProtoMessage() {}

func (x *CSteamTV_CreateBroadcastChannel_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_CreateBroadcastChannel_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_CreateBroadcastChannel_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CSteamTV_CreateBroadcastChannel_Request) GetUniqueName() string {
	if x != nil && x.UniqueName != nil {
		return *x.UniqueName
	}
	return ""
}

type CSteamTV_CreateBroadcastChannel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
}

func (x *CSteamTV_CreateBroadcastChannel_Response) Reset() {
	*x = CSteamTV_CreateBroadcastChannel_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_CreateBroadcastChannel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_CreateBroadcastChannel_Response) ProtoMessage() {}

func (x *CSteamTV_CreateBroadcastChannel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_CreateBroadcastChannel_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_CreateBroadcastChannel_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CSteamTV_CreateBroadcastChannel_Response) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_GetBroadcastChannelID_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueName *string `protobuf:"bytes,1,opt,name=unique_name,json=uniqueName" json:"unique_name,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelID_Request) Reset() {
	*x = CSteamTV_GetBroadcastChannelID_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelID_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelID_Request) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelID_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelID_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelID_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CSteamTV_GetBroadcastChannelID_Request) GetUniqueName() string {
	if x != nil && x.UniqueName != nil {
		return *x.UniqueName
	}
	return ""
}

type CSteamTV_GetBroadcastChannelID_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	UniqueName         *string `protobuf:"bytes,2,opt,name=unique_name,json=uniqueName" json:"unique_name,omitempty"`
	Steamid            *uint64 `protobuf:"fixed64,3,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelID_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelID_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelID_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelID_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelID_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelID_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelID_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CSteamTV_GetBroadcastChannelID_Response) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelID_Response) GetUniqueName() string {
	if x != nil && x.UniqueName != nil {
		return *x.UniqueName
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelID_Response) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CSteamTV_SetBroadcastChannelProfile_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	Name               *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Language           *string `protobuf:"bytes,3,opt,name=language" json:"language,omitempty"`
	Headline           *string `protobuf:"bytes,4,opt,name=headline" json:"headline,omitempty"`
	Summary            *string `protobuf:"bytes,5,opt,name=summary" json:"summary,omitempty"`
	AvatarHash         *string `protobuf:"bytes,6,opt,name=avatar_hash,json=avatarHash" json:"avatar_hash,omitempty"`
	Schedule           *string `protobuf:"bytes,7,opt,name=schedule" json:"schedule,omitempty"`
	Rules              *string `protobuf:"bytes,8,opt,name=rules" json:"rules,omitempty"`
	Panels             *string `protobuf:"bytes,9,opt,name=panels" json:"panels,omitempty"`
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) Reset() {
	*x = CSteamTV_SetBroadcastChannelProfile_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetBroadcastChannelProfile_Request) ProtoMessage() {}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetBroadcastChannelProfile_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetBroadcastChannelProfile_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) GetHeadline() string {
	if x != nil && x.Headline != nil {
		return *x.Headline
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) GetAvatarHash() string {
	if x != nil && x.AvatarHash != nil {
		return *x.AvatarHash
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) GetSchedule() string {
	if x != nil && x.Schedule != nil {
		return *x.Schedule
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) GetRules() string {
	if x != nil && x.Rules != nil {
		return *x.Rules
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelProfile_Request) GetPanels() string {
	if x != nil && x.Panels != nil {
		return *x.Panels
	}
	return ""
}

type CSteamTV_SetBroadcastChannelProfile_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_SetBroadcastChannelProfile_Response) Reset() {
	*x = CSteamTV_SetBroadcastChannelProfile_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_SetBroadcastChannelProfile_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetBroadcastChannelProfile_Response) ProtoMessage() {}

func (x *CSteamTV_SetBroadcastChannelProfile_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetBroadcastChannelProfile_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetBroadcastChannelProfile_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{5}
}

type CSteamTV_GetBroadcastChannelProfile_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelProfile_Request) Reset() {
	*x = CSteamTV_GetBroadcastChannelProfile_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelProfile_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelProfile_Request) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelProfile_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelProfile_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelProfile_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CSteamTV_GetBroadcastChannelProfile_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_GetBroadcastChannelProfile_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueName   *string `protobuf:"bytes,1,opt,name=unique_name,json=uniqueName" json:"unique_name,omitempty"`
	OwnerSteamid *uint64 `protobuf:"fixed64,2,opt,name=owner_steamid,json=ownerSteamid" json:"owner_steamid,omitempty"`
	Name         *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Language     *string `protobuf:"bytes,4,opt,name=language" json:"language,omitempty"`
	Headline     *string `protobuf:"bytes,5,opt,name=headline" json:"headline,omitempty"`
	Summary      *string `protobuf:"bytes,6,opt,name=summary" json:"summary,omitempty"`
	Schedule     *string `protobuf:"bytes,7,opt,name=schedule" json:"schedule,omitempty"`
	Rules        *string `protobuf:"bytes,8,opt,name=rules" json:"rules,omitempty"`
	Panels       *string `protobuf:"bytes,9,opt,name=panels" json:"panels,omitempty"`
	IsPartnered  *bool   `protobuf:"varint,10,opt,name=is_partnered,json=isPartnered" json:"is_partnered,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelProfile_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelProfile_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelProfile_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelProfile_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetUniqueName() string {
	if x != nil && x.UniqueName != nil {
		return *x.UniqueName
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetOwnerSteamid() uint64 {
	if x != nil && x.OwnerSteamid != nil {
		return *x.OwnerSteamid
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetHeadline() string {
	if x != nil && x.Headline != nil {
		return *x.Headline
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetSchedule() string {
	if x != nil && x.Schedule != nil {
		return *x.Schedule
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetRules() string {
	if x != nil && x.Rules != nil {
		return *x.Rules
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetPanels() string {
	if x != nil && x.Panels != nil {
		return *x.Panels
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelProfile_Response) GetIsPartnered() bool {
	if x != nil && x.IsPartnered != nil {
		return *x.IsPartnered
	}
	return false
}

type CSteamTV_SetBroadcastChannelImage_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64              `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	ImageType          *EBroadcastImageType `protobuf:"varint,2,opt,name=image_type,json=imageType,enum=EBroadcastImageType,def=0" json:"image_type,omitempty"`
	ImageIndex         *uint32              `protobuf:"varint,3,opt,name=image_index,json=imageIndex" json:"image_index,omitempty"`
	ImageWidth         *uint32              `protobuf:"varint,4,opt,name=image_width,json=imageWidth" json:"image_width,omitempty"`
	ImageHeight        *uint32              `protobuf:"varint,5,opt,name=image_height,json=imageHeight" json:"image_height,omitempty"`
	FileSize           *uint32              `protobuf:"varint,6,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	FileExtension      *string              `protobuf:"bytes,7,opt,name=file_extension,json=fileExtension" json:"file_extension,omitempty"`
	FileHash           *string              `protobuf:"bytes,8,opt,name=file_hash,json=fileHash" json:"file_hash,omitempty"`
	Undo               *bool                `protobuf:"varint,9,opt,name=undo" json:"undo,omitempty"`
}

// Default values for CSteamTV_SetBroadcastChannelImage_Request fields.
const (
	Default_CSteamTV_SetBroadcastChannelImage_Request_ImageType = EBroadcastImageType_k_EBroadcastImageType_None
)

func (x *CSteamTV_SetBroadcastChannelImage_Request) Reset() {
	*x = CSteamTV_SetBroadcastChannelImage_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetBroadcastChannelImage_Request) ProtoMessage() {}

func (x *CSteamTV_SetBroadcastChannelImage_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetBroadcastChannelImage_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetBroadcastChannelImage_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) GetImageType() EBroadcastImageType {
	if x != nil && x.ImageType != nil {
		return *x.ImageType
	}
	return Default_CSteamTV_SetBroadcastChannelImage_Request_ImageType
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) GetImageIndex() uint32 {
	if x != nil && x.ImageIndex != nil {
		return *x.ImageIndex
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) GetImageWidth() uint32 {
	if x != nil && x.ImageWidth != nil {
		return *x.ImageWidth
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) GetImageHeight() uint32 {
	if x != nil && x.ImageHeight != nil {
		return *x.ImageHeight
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) GetFileExtension() string {
	if x != nil && x.FileExtension != nil {
		return *x.FileExtension
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) GetFileHash() string {
	if x != nil && x.FileHash != nil {
		return *x.FileHash
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelImage_Request) GetUndo() bool {
	if x != nil && x.Undo != nil {
		return *x.Undo
	}
	return false
}

type CSteamTV_SetBroadcastChannelImage_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplaceImageHash *string `protobuf:"bytes,1,opt,name=replace_image_hash,json=replaceImageHash" json:"replace_image_hash,omitempty"`
}

func (x *CSteamTV_SetBroadcastChannelImage_Response) Reset() {
	*x = CSteamTV_SetBroadcastChannelImage_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_SetBroadcastChannelImage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetBroadcastChannelImage_Response) ProtoMessage() {}

func (x *CSteamTV_SetBroadcastChannelImage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetBroadcastChannelImage_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetBroadcastChannelImage_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CSteamTV_SetBroadcastChannelImage_Response) GetReplaceImageHash() string {
	if x != nil && x.ReplaceImageHash != nil {
		return *x.ReplaceImageHash
	}
	return ""
}

type CSteamTV_GetBroadcastChannelImages_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64               `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	ImageTypes         []EBroadcastImageType `protobuf:"varint,2,rep,name=image_types,json=imageTypes,enum=EBroadcastImageType" json:"image_types,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelImages_Request) Reset() {
	*x = CSteamTV_GetBroadcastChannelImages_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelImages_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelImages_Request) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelImages_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelImages_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelImages_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CSteamTV_GetBroadcastChannelImages_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelImages_Request) GetImageTypes() []EBroadcastImageType {
	if x != nil {
		return x.ImageTypes
	}
	return nil
}

type CSteamTV_GetBroadcastChannelImages_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Images []*CSteamTV_GetBroadcastChannelImages_Response_Images `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelImages_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelImages_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelImages_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelImages_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelImages_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelImages_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelImages_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CSteamTV_GetBroadcastChannelImages_Response) GetImages() []*CSteamTV_GetBroadcastChannelImages_Response_Images {
	if x != nil {
		return x.Images
	}
	return nil
}

type CSteamTV_SetBroadcastChannelLinkRegions_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64                                                  `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	Links              []*CSteamTV_SetBroadcastChannelLinkRegions_Request_Links `protobuf:"bytes,2,rep,name=links" json:"links,omitempty"`
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request) Reset() {
	*x = CSteamTV_SetBroadcastChannelLinkRegions_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetBroadcastChannelLinkRegions_Request) ProtoMessage() {}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetBroadcastChannelLinkRegions_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetBroadcastChannelLinkRegions_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request) GetLinks() []*CSteamTV_SetBroadcastChannelLinkRegions_Request_Links {
	if x != nil {
		return x.Links
	}
	return nil
}

type CSteamTV_SetBroadcastChannelLinkRegions_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Response) Reset() {
	*x = CSteamTV_SetBroadcastChannelLinkRegions_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetBroadcastChannelLinkRegions_Response) ProtoMessage() {}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetBroadcastChannelLinkRegions_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetBroadcastChannelLinkRegions_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{13}
}

type CSteamTV_GetBroadcastChannelLinks_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelLinks_Request) Reset() {
	*x = CSteamTV_GetBroadcastChannelLinks_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelLinks_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelLinks_Request) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelLinks_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelLinks_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelLinks_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CSteamTV_GetBroadcastChannelLinks_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_GetBroadcastChannelLinks_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Links []*CSteamTV_GetBroadcastChannelLinks_Response_Links `protobuf:"bytes,1,rep,name=links" json:"links,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelLinks_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelLinks_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelLinks_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelLinks_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelLinks_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response) GetLinks() []*CSteamTV_GetBroadcastChannelLinks_Response_Links {
	if x != nil {
		return x.Links
	}
	return nil
}

type CSteamTV_GetBroadcastChannelBroadcasters_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Request) Reset() {
	*x = CSteamTV_GetBroadcastChannelBroadcasters_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelBroadcasters_Request) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelBroadcasters_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelBroadcasters_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_GetBroadcastChannelBroadcasters_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcasters []*CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster `protobuf:"bytes,1,rep,name=broadcasters" json:"broadcasters,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelBroadcasters_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelBroadcasters_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelBroadcasters_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelBroadcasters_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response) GetBroadcasters() []*CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster {
	if x != nil {
		return x.Broadcasters
	}
	return nil
}

type CSteamTV_GetFollowedChannels_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_GetFollowedChannels_Request) Reset() {
	*x = CSteamTV_GetFollowedChannels_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetFollowedChannels_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetFollowedChannels_Request) ProtoMessage() {}

func (x *CSteamTV_GetFollowedChannels_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetFollowedChannels_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetFollowedChannels_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{18}
}

type GetBroadcastChannelEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	UniqueName         *string `protobuf:"bytes,2,opt,name=unique_name,json=uniqueName" json:"unique_name,omitempty"`
	Name               *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Appid              *uint32 `protobuf:"varint,4,opt,name=appid" json:"appid,omitempty"`
	Viewers            *uint64 `protobuf:"varint,5,opt,name=viewers" json:"viewers,omitempty"`
	Views              *uint64 `protobuf:"varint,6,opt,name=views" json:"views,omitempty"`
	ThumbnailUrl       *string `protobuf:"bytes,7,opt,name=thumbnail_url,json=thumbnailUrl" json:"thumbnail_url,omitempty"`
	Followers          *uint64 `protobuf:"varint,8,opt,name=followers" json:"followers,omitempty"`
	Headline           *string `protobuf:"bytes,9,opt,name=headline" json:"headline,omitempty"`
	AvatarUrl          *string `protobuf:"bytes,10,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	BroadcasterSteamid *uint64 `protobuf:"fixed64,11,opt,name=broadcaster_steamid,json=broadcasterSteamid" json:"broadcaster_steamid,omitempty"`
	Subscribers        *uint64 `protobuf:"varint,12,opt,name=subscribers" json:"subscribers,omitempty"`
	BackgroundUrl      *string `protobuf:"bytes,13,opt,name=background_url,json=backgroundUrl" json:"background_url,omitempty"`
	IsFeatured         *bool   `protobuf:"varint,14,opt,name=is_featured,json=isFeatured" json:"is_featured,omitempty"`
	IsDisabled         *bool   `protobuf:"varint,15,opt,name=is_disabled,json=isDisabled" json:"is_disabled,omitempty"`
	IsLive             *bool   `protobuf:"varint,16,opt,name=is_live,json=isLive" json:"is_live,omitempty"`
	Language           *string `protobuf:"bytes,17,opt,name=language" json:"language,omitempty"`
	Reports            *uint32 `protobuf:"varint,18,opt,name=reports" json:"reports,omitempty"`
	IsPartnered        *bool   `protobuf:"varint,19,opt,name=is_partnered,json=isPartnered" json:"is_partnered,omitempty"`
}

func (x *GetBroadcastChannelEntry) Reset() {
	*x = GetBroadcastChannelEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBroadcastChannelEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBroadcastChannelEntry) ProtoMessage() {}

func (x *GetBroadcastChannelEntry) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBroadcastChannelEntry.ProtoReflect.Descriptor instead.
func (*GetBroadcastChannelEntry) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *GetBroadcastChannelEntry) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetUniqueName() string {
	if x != nil && x.UniqueName != nil {
		return *x.UniqueName
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetViewers() uint64 {
	if x != nil && x.Viewers != nil {
		return *x.Viewers
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetViews() uint64 {
	if x != nil && x.Views != nil {
		return *x.Views
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetFollowers() uint64 {
	if x != nil && x.Followers != nil {
		return *x.Followers
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetHeadline() string {
	if x != nil && x.Headline != nil {
		return *x.Headline
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetAvatarUrl() string {
	if x != nil && x.AvatarUrl != nil {
		return *x.AvatarUrl
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetBroadcasterSteamid() uint64 {
	if x != nil && x.BroadcasterSteamid != nil {
		return *x.BroadcasterSteamid
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetSubscribers() uint64 {
	if x != nil && x.Subscribers != nil {
		return *x.Subscribers
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetBackgroundUrl() string {
	if x != nil && x.BackgroundUrl != nil {
		return *x.BackgroundUrl
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetIsFeatured() bool {
	if x != nil && x.IsFeatured != nil {
		return *x.IsFeatured
	}
	return false
}

func (x *GetBroadcastChannelEntry) GetIsDisabled() bool {
	if x != nil && x.IsDisabled != nil {
		return *x.IsDisabled
	}
	return false
}

func (x *GetBroadcastChannelEntry) GetIsLive() bool {
	if x != nil && x.IsLive != nil {
		return *x.IsLive
	}
	return false
}

func (x *GetBroadcastChannelEntry) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *GetBroadcastChannelEntry) GetReports() uint32 {
	if x != nil && x.Reports != nil {
		return *x.Reports
	}
	return 0
}

func (x *GetBroadcastChannelEntry) GetIsPartnered() bool {
	if x != nil && x.IsPartnered != nil {
		return *x.IsPartnered
	}
	return false
}

type CSteamTV_GetFollowedChannels_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CSteamTV_GetFollowedChannels_Response) Reset() {
	*x = CSteamTV_GetFollowedChannels_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetFollowedChannels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetFollowedChannels_Response) ProtoMessage() {}

func (x *CSteamTV_GetFollowedChannels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetFollowedChannels_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetFollowedChannels_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CSteamTV_GetFollowedChannels_Response) GetResults() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_GetSubscribedChannels_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_GetSubscribedChannels_Request) Reset() {
	*x = CSteamTV_GetSubscribedChannels_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetSubscribedChannels_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetSubscribedChannels_Request) ProtoMessage() {}

func (x *CSteamTV_GetSubscribedChannels_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetSubscribedChannels_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetSubscribedChannels_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{21}
}

type CSteamTV_GetSubscribedChannels_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CSteamTV_GetSubscribedChannels_Response) Reset() {
	*x = CSteamTV_GetSubscribedChannels_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetSubscribedChannels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetSubscribedChannels_Response) ProtoMessage() {}

func (x *CSteamTV_GetSubscribedChannels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetSubscribedChannels_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetSubscribedChannels_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{22}
}

func (x *CSteamTV_GetSubscribedChannels_Response) GetResults() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_GetBroadcastChannelStatus_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelStatus_Request) Reset() {
	*x = CSteamTV_GetBroadcastChannelStatus_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelStatus_Request) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelStatus_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelStatus_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{23}
}

func (x *CSteamTV_GetBroadcastChannelStatus_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_GetBroadcastChannelStatus_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLive             *bool   `protobuf:"varint,1,opt,name=is_live,json=isLive" json:"is_live,omitempty"`
	IsDisabled         *bool   `protobuf:"varint,2,opt,name=is_disabled,json=isDisabled" json:"is_disabled,omitempty"`
	Appid              *uint32 `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	Viewers            *uint64 `protobuf:"varint,4,opt,name=viewers" json:"viewers,omitempty"`
	Views              *uint64 `protobuf:"varint,5,opt,name=views" json:"views,omitempty"`
	BroadcasterSteamid *uint64 `protobuf:"fixed64,6,opt,name=broadcaster_steamid,json=broadcasterSteamid" json:"broadcaster_steamid,omitempty"`
	ThumbnailUrl       *string `protobuf:"bytes,7,opt,name=thumbnail_url,json=thumbnailUrl" json:"thumbnail_url,omitempty"`
	Followers          *uint64 `protobuf:"varint,8,opt,name=followers" json:"followers,omitempty"`
	Subscribers        *uint64 `protobuf:"varint,9,opt,name=subscribers" json:"subscribers,omitempty"`
	UniqueName         *string `protobuf:"bytes,10,opt,name=unique_name,json=uniqueName" json:"unique_name,omitempty"`
	BroadcastSessionId *uint64 `protobuf:"varint,11,opt,name=broadcast_session_id,json=broadcastSessionId" json:"broadcast_session_id,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelStatus_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelStatus_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelStatus_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelStatus_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{24}
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetIsLive() bool {
	if x != nil && x.IsLive != nil {
		return *x.IsLive
	}
	return false
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetIsDisabled() bool {
	if x != nil && x.IsDisabled != nil {
		return *x.IsDisabled
	}
	return false
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetViewers() uint64 {
	if x != nil && x.Viewers != nil {
		return *x.Viewers
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetViews() uint64 {
	if x != nil && x.Views != nil {
		return *x.Views
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetBroadcasterSteamid() uint64 {
	if x != nil && x.BroadcasterSteamid != nil {
		return *x.BroadcasterSteamid
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetThumbnailUrl() string {
	if x != nil && x.ThumbnailUrl != nil {
		return *x.ThumbnailUrl
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetFollowers() uint64 {
	if x != nil && x.Followers != nil {
		return *x.Followers
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetSubscribers() uint64 {
	if x != nil && x.Subscribers != nil {
		return *x.Subscribers
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetUniqueName() string {
	if x != nil && x.UniqueName != nil {
		return *x.UniqueName
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelStatus_Response) GetBroadcastSessionId() uint64 {
	if x != nil && x.BroadcastSessionId != nil {
		return *x.BroadcastSessionId
	}
	return 0
}

type CSteamTV_FollowBroadcastChannel_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	Undo               *bool   `protobuf:"varint,2,opt,name=undo" json:"undo,omitempty"`
}

func (x *CSteamTV_FollowBroadcastChannel_Request) Reset() {
	*x = CSteamTV_FollowBroadcastChannel_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_FollowBroadcastChannel_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_FollowBroadcastChannel_Request) ProtoMessage() {}

func (x *CSteamTV_FollowBroadcastChannel_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_FollowBroadcastChannel_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_FollowBroadcastChannel_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{25}
}

func (x *CSteamTV_FollowBroadcastChannel_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_FollowBroadcastChannel_Request) GetUndo() bool {
	if x != nil && x.Undo != nil {
		return *x.Undo
	}
	return false
}

type CSteamTV_FollowBroadcastChannel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFollowed *bool `protobuf:"varint,1,opt,name=is_followed,json=isFollowed" json:"is_followed,omitempty"`
}

func (x *CSteamTV_FollowBroadcastChannel_Response) Reset() {
	*x = CSteamTV_FollowBroadcastChannel_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_FollowBroadcastChannel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_FollowBroadcastChannel_Response) ProtoMessage() {}

func (x *CSteamTV_FollowBroadcastChannel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_FollowBroadcastChannel_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_FollowBroadcastChannel_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{26}
}

func (x *CSteamTV_FollowBroadcastChannel_Response) GetIsFollowed() bool {
	if x != nil && x.IsFollowed != nil {
		return *x.IsFollowed
	}
	return false
}

type CSteamTV_SubscribeBroadcastChannel_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
}

func (x *CSteamTV_SubscribeBroadcastChannel_Request) Reset() {
	*x = CSteamTV_SubscribeBroadcastChannel_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_SubscribeBroadcastChannel_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SubscribeBroadcastChannel_Request) ProtoMessage() {}

func (x *CSteamTV_SubscribeBroadcastChannel_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SubscribeBroadcastChannel_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_SubscribeBroadcastChannel_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{27}
}

func (x *CSteamTV_SubscribeBroadcastChannel_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_SubscribeBroadcastChannel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSubscribed *bool `protobuf:"varint,1,opt,name=is_subscribed,json=isSubscribed" json:"is_subscribed,omitempty"`
}

func (x *CSteamTV_SubscribeBroadcastChannel_Response) Reset() {
	*x = CSteamTV_SubscribeBroadcastChannel_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_SubscribeBroadcastChannel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SubscribeBroadcastChannel_Response) ProtoMessage() {}

func (x *CSteamTV_SubscribeBroadcastChannel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SubscribeBroadcastChannel_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_SubscribeBroadcastChannel_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{28}
}

func (x *CSteamTV_SubscribeBroadcastChannel_Response) GetIsSubscribed() bool {
	if x != nil && x.IsSubscribed != nil {
		return *x.IsSubscribed
	}
	return false
}

type CSteamTV_GetBroadcastChannelClips_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelClips_Request) Reset() {
	*x = CSteamTV_GetBroadcastChannelClips_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelClips_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelClips_Request) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelClips_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelClips_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelClips_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{29}
}

func (x *CSteamTV_GetBroadcastChannelClips_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_BroadcastClipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastClipId    *uint64 `protobuf:"varint,1,opt,name=broadcast_clip_id,json=broadcastClipId" json:"broadcast_clip_id,omitempty"`
	ChannelId          *uint64 `protobuf:"varint,2,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	AppId              *uint32 `protobuf:"varint,3,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	BroadcasterSteamid *uint64 `protobuf:"fixed64,4,opt,name=broadcaster_steamid,json=broadcasterSteamid" json:"broadcaster_steamid,omitempty"`
	CreatorSteamid     *uint64 `protobuf:"fixed64,5,opt,name=creator_steamid,json=creatorSteamid" json:"creator_steamid,omitempty"`
	VideoDescription   *string `protobuf:"bytes,6,opt,name=video_description,json=videoDescription" json:"video_description,omitempty"`
	LiveTime           *uint32 `protobuf:"varint,7,opt,name=live_time,json=liveTime" json:"live_time,omitempty"`
	LengthMs           *uint32 `protobuf:"varint,8,opt,name=length_ms,json=lengthMs" json:"length_ms,omitempty"`
	ThumbnailPath      *string `protobuf:"bytes,9,opt,name=thumbnail_path,json=thumbnailPath" json:"thumbnail_path,omitempty"`
}

func (x *CSteamTV_BroadcastClipInfo) Reset() {
	*x = CSteamTV_BroadcastClipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_BroadcastClipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_BroadcastClipInfo) ProtoMessage() {}

func (x *CSteamTV_BroadcastClipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_BroadcastClipInfo.ProtoReflect.Descriptor instead.
func (*CSteamTV_BroadcastClipInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{30}
}

func (x *CSteamTV_BroadcastClipInfo) GetBroadcastClipId() uint64 {
	if x != nil && x.BroadcastClipId != nil {
		return *x.BroadcastClipId
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetChannelId() uint64 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetBroadcasterSteamid() uint64 {
	if x != nil && x.BroadcasterSteamid != nil {
		return *x.BroadcasterSteamid
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetCreatorSteamid() uint64 {
	if x != nil && x.CreatorSteamid != nil {
		return *x.CreatorSteamid
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetVideoDescription() string {
	if x != nil && x.VideoDescription != nil {
		return *x.VideoDescription
	}
	return ""
}

func (x *CSteamTV_BroadcastClipInfo) GetLiveTime() uint32 {
	if x != nil && x.LiveTime != nil {
		return *x.LiveTime
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetLengthMs() uint32 {
	if x != nil && x.LengthMs != nil {
		return *x.LengthMs
	}
	return 0
}

func (x *CSteamTV_BroadcastClipInfo) GetThumbnailPath() string {
	if x != nil && x.ThumbnailPath != nil {
		return *x.ThumbnailPath
	}
	return ""
}

type CSteamTV_GetBroadcastChannelClips_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clips         []*CSteamTV_BroadcastClipInfo `protobuf:"bytes,1,rep,name=clips" json:"clips,omitempty"`
	ThumbnailHost *string                       `protobuf:"bytes,2,opt,name=thumbnail_host,json=thumbnailHost" json:"thumbnail_host,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelClips_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelClips_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelClips_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelClips_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelClips_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelClips_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelClips_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{31}
}

func (x *CSteamTV_GetBroadcastChannelClips_Response) GetClips() []*CSteamTV_BroadcastClipInfo {
	if x != nil {
		return x.Clips
	}
	return nil
}

func (x *CSteamTV_GetBroadcastChannelClips_Response) GetThumbnailHost() string {
	if x != nil && x.ThumbnailHost != nil {
		return *x.ThumbnailHost
	}
	return ""
}

type CSteamTV_ReportBroadcastChannel_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	Reason             *string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
}

func (x *CSteamTV_ReportBroadcastChannel_Request) Reset() {
	*x = CSteamTV_ReportBroadcastChannel_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_ReportBroadcastChannel_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_ReportBroadcastChannel_Request) ProtoMessage() {}

func (x *CSteamTV_ReportBroadcastChannel_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_ReportBroadcastChannel_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_ReportBroadcastChannel_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{32}
}

func (x *CSteamTV_ReportBroadcastChannel_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_ReportBroadcastChannel_Request) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type CSteamTV_ReportBroadcastChannel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_ReportBroadcastChannel_Response) Reset() {
	*x = CSteamTV_ReportBroadcastChannel_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_ReportBroadcastChannel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_ReportBroadcastChannel_Response) ProtoMessage() {}

func (x *CSteamTV_ReportBroadcastChannel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_ReportBroadcastChannel_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_ReportBroadcastChannel_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{33}
}

type CSteamTV_GetBroadcastChannelInteraction_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelInteraction_Request) Reset() {
	*x = CSteamTV_GetBroadcastChannelInteraction_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelInteraction_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelInteraction_Request) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelInteraction_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelInteraction_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelInteraction_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{34}
}

func (x *CSteamTV_GetBroadcastChannelInteraction_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_GetBroadcastChannelInteraction_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFollowed   *bool `protobuf:"varint,1,opt,name=is_followed,json=isFollowed" json:"is_followed,omitempty"`
	IsSubscribed *bool `protobuf:"varint,2,opt,name=is_subscribed,json=isSubscribed" json:"is_subscribed,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelInteraction_Response) Reset() {
	*x = CSteamTV_GetBroadcastChannelInteraction_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelInteraction_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelInteraction_Response) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelInteraction_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelInteraction_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelInteraction_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{35}
}

func (x *CSteamTV_GetBroadcastChannelInteraction_Response) GetIsFollowed() bool {
	if x != nil && x.IsFollowed != nil {
		return *x.IsFollowed
	}
	return false
}

func (x *CSteamTV_GetBroadcastChannelInteraction_Response) GetIsSubscribed() bool {
	if x != nil && x.IsSubscribed != nil {
		return *x.IsSubscribed
	}
	return false
}

type CSteamTV_GetGames_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid     *uint32             `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Algorithm *EGetGamesAlgorithm `protobuf:"varint,2,opt,name=algorithm,enum=EGetGamesAlgorithm,def=1" json:"algorithm,omitempty"`
	Count     *uint32             `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

// Default values for CSteamTV_GetGames_Request fields.
const (
	Default_CSteamTV_GetGames_Request_Algorithm = EGetGamesAlgorithm_k_EGetGamesAlgorithm_Default
)

func (x *CSteamTV_GetGames_Request) Reset() {
	*x = CSteamTV_GetGames_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetGames_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetGames_Request) ProtoMessage() {}

func (x *CSteamTV_GetGames_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetGames_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetGames_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{36}
}

func (x *CSteamTV_GetGames_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamTV_GetGames_Request) GetAlgorithm() EGetGamesAlgorithm {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return Default_CSteamTV_GetGames_Request_Algorithm
}

func (x *CSteamTV_GetGames_Request) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CSteamTV_Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid       *uint32                     `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Name        *string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Image       *string                     `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Viewers     *uint64                     `protobuf:"varint,4,opt,name=viewers" json:"viewers,omitempty"`
	Channels    []*GetBroadcastChannelEntry `protobuf:"bytes,5,rep,name=channels" json:"channels,omitempty"`
	ReleaseDate *string                     `protobuf:"bytes,6,opt,name=release_date,json=releaseDate" json:"release_date,omitempty"`
	Developer   *string                     `protobuf:"bytes,7,opt,name=developer" json:"developer,omitempty"`
	Publisher   *string                     `protobuf:"bytes,8,opt,name=publisher" json:"publisher,omitempty"`
}

func (x *CSteamTV_Game) Reset() {
	*x = CSteamTV_Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_Game) ProtoMessage() {}

func (x *CSteamTV_Game) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_Game.ProtoReflect.Descriptor instead.
func (*CSteamTV_Game) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{37}
}

func (x *CSteamTV_Game) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamTV_Game) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSteamTV_Game) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *CSteamTV_Game) GetViewers() uint64 {
	if x != nil && x.Viewers != nil {
		return *x.Viewers
	}
	return 0
}

func (x *CSteamTV_Game) GetChannels() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *CSteamTV_Game) GetReleaseDate() string {
	if x != nil && x.ReleaseDate != nil {
		return *x.ReleaseDate
	}
	return ""
}

func (x *CSteamTV_Game) GetDeveloper() string {
	if x != nil && x.Developer != nil {
		return *x.Developer
	}
	return ""
}

func (x *CSteamTV_Game) GetPublisher() string {
	if x != nil && x.Publisher != nil {
		return *x.Publisher
	}
	return ""
}

type CSteamTV_GetGames_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CSteamTV_Game `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CSteamTV_GetGames_Response) Reset() {
	*x = CSteamTV_GetGames_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetGames_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetGames_Response) ProtoMessage() {}

func (x *CSteamTV_GetGames_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetGames_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetGames_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{38}
}

func (x *CSteamTV_GetGames_Response) GetResults() []*CSteamTV_Game {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_GetChannels_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Algorithm *EGetChannelsAlgorithm `protobuf:"varint,1,opt,name=algorithm,enum=EGetChannelsAlgorithm,def=1" json:"algorithm,omitempty"`
	Count     *uint32                `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	Appid     *uint32                `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
}

// Default values for CSteamTV_GetChannels_Request fields.
const (
	Default_CSteamTV_GetChannels_Request_Algorithm = EGetChannelsAlgorithm_k_EGetChannelsAlgorithm_Default
)

func (x *CSteamTV_GetChannels_Request) Reset() {
	*x = CSteamTV_GetChannels_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetChannels_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetChannels_Request) ProtoMessage() {}

func (x *CSteamTV_GetChannels_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetChannels_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetChannels_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{39}
}

func (x *CSteamTV_GetChannels_Request) GetAlgorithm() EGetChannelsAlgorithm {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return Default_CSteamTV_GetChannels_Request_Algorithm
}

func (x *CSteamTV_GetChannels_Request) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CSteamTV_GetChannels_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CSteamTV_GetChannels_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CSteamTV_GetChannels_Response) Reset() {
	*x = CSteamTV_GetChannels_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetChannels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetChannels_Response) ProtoMessage() {}

func (x *CSteamTV_GetChannels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetChannels_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetChannels_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{40}
}

func (x *CSteamTV_GetChannels_Response) GetResults() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_AddChatBan_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	ChatterSteamid     *uint64 `protobuf:"fixed64,2,opt,name=chatter_steamid,json=chatterSteamid" json:"chatter_steamid,omitempty"`
	Duration           *uint32 `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
	Permanent          *bool   `protobuf:"varint,4,opt,name=permanent" json:"permanent,omitempty"`
	Undo               *bool   `protobuf:"varint,5,opt,name=undo" json:"undo,omitempty"`
}

func (x *CSteamTV_AddChatBan_Request) Reset() {
	*x = CSteamTV_AddChatBan_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_AddChatBan_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AddChatBan_Request) ProtoMessage() {}

func (x *CSteamTV_AddChatBan_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AddChatBan_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_AddChatBan_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{41}
}

func (x *CSteamTV_AddChatBan_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_AddChatBan_Request) GetChatterSteamid() uint64 {
	if x != nil && x.ChatterSteamid != nil {
		return *x.ChatterSteamid
	}
	return 0
}

func (x *CSteamTV_AddChatBan_Request) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *CSteamTV_AddChatBan_Request) GetPermanent() bool {
	if x != nil && x.Permanent != nil {
		return *x.Permanent
	}
	return false
}

func (x *CSteamTV_AddChatBan_Request) GetUndo() bool {
	if x != nil && x.Undo != nil {
		return *x.Undo
	}
	return false
}

type CSteamTV_AddChatBan_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_AddChatBan_Response) Reset() {
	*x = CSteamTV_AddChatBan_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_AddChatBan_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AddChatBan_Response) ProtoMessage() {}

func (x *CSteamTV_AddChatBan_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AddChatBan_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_AddChatBan_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{42}
}

type CSteamTV_GetChatBans_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
}

func (x *CSteamTV_GetChatBans_Request) Reset() {
	*x = CSteamTV_GetChatBans_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetChatBans_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetChatBans_Request) ProtoMessage() {}

func (x *CSteamTV_GetChatBans_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetChatBans_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetChatBans_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{43}
}

func (x *CSteamTV_GetChatBans_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_ChatBan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuerSteamid  *uint64 `protobuf:"fixed64,1,opt,name=issuer_steamid,json=issuerSteamid" json:"issuer_steamid,omitempty"`
	ChatterSteamid *uint64 `protobuf:"fixed64,2,opt,name=chatter_steamid,json=chatterSteamid" json:"chatter_steamid,omitempty"`
	TimeExpires    *string `protobuf:"bytes,3,opt,name=time_expires,json=timeExpires" json:"time_expires,omitempty"`
	Permanent      *bool   `protobuf:"varint,4,opt,name=permanent" json:"permanent,omitempty"`
	Name           *string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
}

func (x *CSteamTV_ChatBan) Reset() {
	*x = CSteamTV_ChatBan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_ChatBan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_ChatBan) ProtoMessage() {}

func (x *CSteamTV_ChatBan) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_ChatBan.ProtoReflect.Descriptor instead.
func (*CSteamTV_ChatBan) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{44}
}

func (x *CSteamTV_ChatBan) GetIssuerSteamid() uint64 {
	if x != nil && x.IssuerSteamid != nil {
		return *x.IssuerSteamid
	}
	return 0
}

func (x *CSteamTV_ChatBan) GetChatterSteamid() uint64 {
	if x != nil && x.ChatterSteamid != nil {
		return *x.ChatterSteamid
	}
	return 0
}

func (x *CSteamTV_ChatBan) GetTimeExpires() string {
	if x != nil && x.TimeExpires != nil {
		return *x.TimeExpires
	}
	return ""
}

func (x *CSteamTV_ChatBan) GetPermanent() bool {
	if x != nil && x.Permanent != nil {
		return *x.Permanent
	}
	return false
}

func (x *CSteamTV_ChatBan) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CSteamTV_GetChatBans_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CSteamTV_ChatBan `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CSteamTV_GetChatBans_Response) Reset() {
	*x = CSteamTV_GetChatBans_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetChatBans_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetChatBans_Response) ProtoMessage() {}

func (x *CSteamTV_GetChatBans_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetChatBans_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetChatBans_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{45}
}

func (x *CSteamTV_GetChatBans_Response) GetResults() []*CSteamTV_ChatBan {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_AddChatModerator_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	ModeratorSteamid   *uint64 `protobuf:"fixed64,2,opt,name=moderator_steamid,json=moderatorSteamid" json:"moderator_steamid,omitempty"`
	Undo               *bool   `protobuf:"varint,3,opt,name=undo" json:"undo,omitempty"`
}

func (x *CSteamTV_AddChatModerator_Request) Reset() {
	*x = CSteamTV_AddChatModerator_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_AddChatModerator_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AddChatModerator_Request) ProtoMessage() {}

func (x *CSteamTV_AddChatModerator_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AddChatModerator_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_AddChatModerator_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{46}
}

func (x *CSteamTV_AddChatModerator_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_AddChatModerator_Request) GetModeratorSteamid() uint64 {
	if x != nil && x.ModeratorSteamid != nil {
		return *x.ModeratorSteamid
	}
	return 0
}

func (x *CSteamTV_AddChatModerator_Request) GetUndo() bool {
	if x != nil && x.Undo != nil {
		return *x.Undo
	}
	return false
}

type CSteamTV_AddChatModerator_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_AddChatModerator_Response) Reset() {
	*x = CSteamTV_AddChatModerator_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_AddChatModerator_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AddChatModerator_Response) ProtoMessage() {}

func (x *CSteamTV_AddChatModerator_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AddChatModerator_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_AddChatModerator_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{47}
}

type CSteamTV_GetChatModerators_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
}

func (x *CSteamTV_GetChatModerators_Request) Reset() {
	*x = CSteamTV_GetChatModerators_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetChatModerators_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetChatModerators_Request) ProtoMessage() {}

func (x *CSteamTV_GetChatModerators_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetChatModerators_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetChatModerators_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{48}
}

func (x *CSteamTV_GetChatModerators_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_ChatModerator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Name    *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *CSteamTV_ChatModerator) Reset() {
	*x = CSteamTV_ChatModerator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_ChatModerator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_ChatModerator) ProtoMessage() {}

func (x *CSteamTV_ChatModerator) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_ChatModerator.ProtoReflect.Descriptor instead.
func (*CSteamTV_ChatModerator) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{49}
}

func (x *CSteamTV_ChatModerator) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CSteamTV_ChatModerator) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CSteamTV_GetChatModerators_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CSteamTV_ChatModerator `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CSteamTV_GetChatModerators_Response) Reset() {
	*x = CSteamTV_GetChatModerators_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetChatModerators_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetChatModerators_Response) ProtoMessage() {}

func (x *CSteamTV_GetChatModerators_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetChatModerators_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetChatModerators_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{50}
}

func (x *CSteamTV_GetChatModerators_Response) GetResults() []*CSteamTV_ChatModerator {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_AddWordBan_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
	Word               *string `protobuf:"bytes,2,opt,name=word" json:"word,omitempty"`
	Undo               *bool   `protobuf:"varint,3,opt,name=undo" json:"undo,omitempty"`
}

func (x *CSteamTV_AddWordBan_Request) Reset() {
	*x = CSteamTV_AddWordBan_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_AddWordBan_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AddWordBan_Request) ProtoMessage() {}

func (x *CSteamTV_AddWordBan_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AddWordBan_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_AddWordBan_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{51}
}

func (x *CSteamTV_AddWordBan_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

func (x *CSteamTV_AddWordBan_Request) GetWord() string {
	if x != nil && x.Word != nil {
		return *x.Word
	}
	return ""
}

func (x *CSteamTV_AddWordBan_Request) GetUndo() bool {
	if x != nil && x.Undo != nil {
		return *x.Undo
	}
	return false
}

type CSteamTV_AddWordBan_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_AddWordBan_Response) Reset() {
	*x = CSteamTV_AddWordBan_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_AddWordBan_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AddWordBan_Response) ProtoMessage() {}

func (x *CSteamTV_AddWordBan_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AddWordBan_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_AddWordBan_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{52}
}

type CSteamTV_GetWordBans_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
}

func (x *CSteamTV_GetWordBans_Request) Reset() {
	*x = CSteamTV_GetWordBans_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetWordBans_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetWordBans_Request) ProtoMessage() {}

func (x *CSteamTV_GetWordBans_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetWordBans_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetWordBans_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{53}
}

func (x *CSteamTV_GetWordBans_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_GetWordBans_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []string `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CSteamTV_GetWordBans_Response) Reset() {
	*x = CSteamTV_GetWordBans_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetWordBans_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetWordBans_Response) ProtoMessage() {}

func (x *CSteamTV_GetWordBans_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetWordBans_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetWordBans_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{54}
}

func (x *CSteamTV_GetWordBans_Response) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_JoinChat_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastChannelId *uint64 `protobuf:"fixed64,1,opt,name=broadcast_channel_id,json=broadcastChannelId" json:"broadcast_channel_id,omitempty"`
}

func (x *CSteamTV_JoinChat_Request) Reset() {
	*x = CSteamTV_JoinChat_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_JoinChat_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_JoinChat_Request) ProtoMessage() {}

func (x *CSteamTV_JoinChat_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_JoinChat_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_JoinChat_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{55}
}

func (x *CSteamTV_JoinChat_Request) GetBroadcastChannelId() uint64 {
	if x != nil && x.BroadcastChannelId != nil {
		return *x.BroadcastChannelId
	}
	return 0
}

type CSteamTV_JoinChat_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId          *uint64  `protobuf:"fixed64,1,opt,name=chat_id,json=chatId" json:"chat_id,omitempty"`
	ViewUrlTemplate *string  `protobuf:"bytes,2,opt,name=view_url_template,json=viewUrlTemplate" json:"view_url_template,omitempty"`
	FlairGroupIds   []uint64 `protobuf:"varint,3,rep,name=flair_group_ids,json=flairGroupIds" json:"flair_group_ids,omitempty"`
}

func (x *CSteamTV_JoinChat_Response) Reset() {
	*x = CSteamTV_JoinChat_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_JoinChat_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_JoinChat_Response) ProtoMessage() {}

func (x *CSteamTV_JoinChat_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_JoinChat_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_JoinChat_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{56}
}

func (x *CSteamTV_JoinChat_Response) GetChatId() uint64 {
	if x != nil && x.ChatId != nil {
		return *x.ChatId
	}
	return 0
}

func (x *CSteamTV_JoinChat_Response) GetViewUrlTemplate() string {
	if x != nil && x.ViewUrlTemplate != nil {
		return *x.ViewUrlTemplate
	}
	return ""
}

func (x *CSteamTV_JoinChat_Response) GetFlairGroupIds() []uint64 {
	if x != nil {
		return x.FlairGroupIds
	}
	return nil
}

type CSteamTV_Search_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term *string `protobuf:"bytes,1,opt,name=term" json:"term,omitempty"`
}

func (x *CSteamTV_Search_Request) Reset() {
	*x = CSteamTV_Search_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_Search_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_Search_Request) ProtoMessage() {}

func (x *CSteamTV_Search_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_Search_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_Search_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{57}
}

func (x *CSteamTV_Search_Request) GetTerm() string {
	if x != nil && x.Term != nil {
		return *x.Term
	}
	return ""
}

type CSteamTV_Search_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CSteamTV_Search_Response) Reset() {
	*x = CSteamTV_Search_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_Search_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_Search_Response) ProtoMessage() {}

func (x *CSteamTV_Search_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_Search_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_Search_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{58}
}

func (x *CSteamTV_Search_Response) GetResults() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_GetSteamTVUserSettings_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_GetSteamTVUserSettings_Request) Reset() {
	*x = CSteamTV_GetSteamTVUserSettings_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetSteamTVUserSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetSteamTVUserSettings_Request) ProtoMessage() {}

func (x *CSteamTV_GetSteamTVUserSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetSteamTVUserSettings_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetSteamTVUserSettings_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{59}
}

type CSteamTV_GetSteamTVUserSettings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamLiveEmail        *bool `protobuf:"varint,1,opt,name=stream_live_email,json=streamLiveEmail" json:"stream_live_email,omitempty"`
	StreamLiveNotification *bool `protobuf:"varint,2,opt,name=stream_live_notification,json=streamLiveNotification" json:"stream_live_notification,omitempty"`
}

func (x *CSteamTV_GetSteamTVUserSettings_Response) Reset() {
	*x = CSteamTV_GetSteamTVUserSettings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetSteamTVUserSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetSteamTVUserSettings_Response) ProtoMessage() {}

func (x *CSteamTV_GetSteamTVUserSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetSteamTVUserSettings_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetSteamTVUserSettings_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{60}
}

func (x *CSteamTV_GetSteamTVUserSettings_Response) GetStreamLiveEmail() bool {
	if x != nil && x.StreamLiveEmail != nil {
		return *x.StreamLiveEmail
	}
	return false
}

func (x *CSteamTV_GetSteamTVUserSettings_Response) GetStreamLiveNotification() bool {
	if x != nil && x.StreamLiveNotification != nil {
		return *x.StreamLiveNotification
	}
	return false
}

type CSteamTV_SetSteamTVUserSettings_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamLiveEmail        *bool `protobuf:"varint,1,opt,name=stream_live_email,json=streamLiveEmail" json:"stream_live_email,omitempty"`
	StreamLiveNotification *bool `protobuf:"varint,2,opt,name=stream_live_notification,json=streamLiveNotification" json:"stream_live_notification,omitempty"`
}

func (x *CSteamTV_SetSteamTVUserSettings_Request) Reset() {
	*x = CSteamTV_SetSteamTVUserSettings_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_SetSteamTVUserSettings_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetSteamTVUserSettings_Request) ProtoMessage() {}

func (x *CSteamTV_SetSteamTVUserSettings_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetSteamTVUserSettings_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetSteamTVUserSettings_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{61}
}

func (x *CSteamTV_SetSteamTVUserSettings_Request) GetStreamLiveEmail() bool {
	if x != nil && x.StreamLiveEmail != nil {
		return *x.StreamLiveEmail
	}
	return false
}

func (x *CSteamTV_SetSteamTVUserSettings_Request) GetStreamLiveNotification() bool {
	if x != nil && x.StreamLiveNotification != nil {
		return *x.StreamLiveNotification
	}
	return false
}

type CSteamTV_SetSteamTVUserSettings_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_SetSteamTVUserSettings_Response) Reset() {
	*x = CSteamTV_SetSteamTVUserSettings_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_SetSteamTVUserSettings_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetSteamTVUserSettings_Response) ProtoMessage() {}

func (x *CSteamTV_SetSteamTVUserSettings_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetSteamTVUserSettings_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetSteamTVUserSettings_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{62}
}

type CSteamTV_GetMyBroadcastChannels_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_GetMyBroadcastChannels_Request) Reset() {
	*x = CSteamTV_GetMyBroadcastChannels_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetMyBroadcastChannels_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetMyBroadcastChannels_Request) ProtoMessage() {}

func (x *CSteamTV_GetMyBroadcastChannels_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetMyBroadcastChannels_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetMyBroadcastChannels_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{63}
}

type CSteamTV_GetMyBroadcastChannels_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (x *CSteamTV_GetMyBroadcastChannels_Response) Reset() {
	*x = CSteamTV_GetMyBroadcastChannels_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetMyBroadcastChannels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetMyBroadcastChannels_Response) ProtoMessage() {}

func (x *CSteamTV_GetMyBroadcastChannels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetMyBroadcastChannels_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetMyBroadcastChannels_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{64}
}

func (x *CSteamTV_GetMyBroadcastChannels_Response) GetResults() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Results
	}
	return nil
}

type CSteamTV_GetHomePageContents_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CSteamTV_GetHomePageContents_Request) Reset() {
	*x = CSteamTV_GetHomePageContents_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetHomePageContents_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetHomePageContents_Request) ProtoMessage() {}

func (x *CSteamTV_GetHomePageContents_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetHomePageContents_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetHomePageContents_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{65}
}

type CSteamTV_HomePageTemplate_Takeover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcasts []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=broadcasts" json:"broadcasts,omitempty"`
}

func (x *CSteamTV_HomePageTemplate_Takeover) Reset() {
	*x = CSteamTV_HomePageTemplate_Takeover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_HomePageTemplate_Takeover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_Takeover) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_Takeover) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_Takeover.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_Takeover) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{66}
}

func (x *CSteamTV_HomePageTemplate_Takeover) GetBroadcasts() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcasts
	}
	return nil
}

type CSteamTV_HomePageTemplate_SingleGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcasts []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=broadcasts" json:"broadcasts,omitempty"`
	Appid      *uint32                     `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Title      *string                     `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
}

func (x *CSteamTV_HomePageTemplate_SingleGame) Reset() {
	*x = CSteamTV_HomePageTemplate_SingleGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_HomePageTemplate_SingleGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_SingleGame) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_SingleGame) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_SingleGame.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_SingleGame) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{67}
}

func (x *CSteamTV_HomePageTemplate_SingleGame) GetBroadcasts() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcasts
	}
	return nil
}

func (x *CSteamTV_HomePageTemplate_SingleGame) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CSteamTV_HomePageTemplate_SingleGame) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type GameListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid     *uint32                   `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	GameName  *string                   `protobuf:"bytes,2,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	Broadcast *GetBroadcastChannelEntry `protobuf:"bytes,3,opt,name=broadcast" json:"broadcast,omitempty"`
}

func (x *GameListEntry) Reset() {
	*x = GameListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameListEntry) ProtoMessage() {}

func (x *GameListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameListEntry.ProtoReflect.Descriptor instead.
func (*GameListEntry) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{68}
}

func (x *GameListEntry) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *GameListEntry) GetGameName() string {
	if x != nil && x.GameName != nil {
		return *x.GameName
	}
	return ""
}

func (x *GameListEntry) GetBroadcast() *GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcast
	}
	return nil
}

type CSteamTV_HomePageTemplate_GameList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*GameListEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	Title   *string          `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (x *CSteamTV_HomePageTemplate_GameList) Reset() {
	*x = CSteamTV_HomePageTemplate_GameList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_HomePageTemplate_GameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_GameList) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_GameList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_GameList.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_GameList) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{69}
}

func (x *CSteamTV_HomePageTemplate_GameList) GetEntries() []*GameListEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *CSteamTV_HomePageTemplate_GameList) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CSteamTV_HomePageTemplate_QuickExplore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcasts []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=broadcasts" json:"broadcasts,omitempty"`
	Title      *string                     `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (x *CSteamTV_HomePageTemplate_QuickExplore) Reset() {
	*x = CSteamTV_HomePageTemplate_QuickExplore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_HomePageTemplate_QuickExplore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_QuickExplore) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_QuickExplore) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_QuickExplore.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_QuickExplore) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{70}
}

func (x *CSteamTV_HomePageTemplate_QuickExplore) GetBroadcasts() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcasts
	}
	return nil
}

func (x *CSteamTV_HomePageTemplate_QuickExplore) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CSteamTV_HomePageTemplate_ConveyorBelt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcasts []*GetBroadcastChannelEntry `protobuf:"bytes,1,rep,name=broadcasts" json:"broadcasts,omitempty"`
	Title      *string                     `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (x *CSteamTV_HomePageTemplate_ConveyorBelt) Reset() {
	*x = CSteamTV_HomePageTemplate_ConveyorBelt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_HomePageTemplate_ConveyorBelt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_ConveyorBelt) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_ConveyorBelt) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_ConveyorBelt.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_ConveyorBelt) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{71}
}

func (x *CSteamTV_HomePageTemplate_ConveyorBelt) GetBroadcasts() []*GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcasts
	}
	return nil
}

func (x *CSteamTV_HomePageTemplate_ConveyorBelt) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CSteamTV_HomePageTemplate_WatchParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcast   *GetBroadcastChannelEntry `protobuf:"bytes,1,opt,name=broadcast" json:"broadcast,omitempty"`
	Title       *string                   `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	ChatGroupId *uint64                   `protobuf:"varint,3,opt,name=chat_group_id,json=chatGroupId" json:"chat_group_id,omitempty"`
}

func (x *CSteamTV_HomePageTemplate_WatchParty) Reset() {
	*x = CSteamTV_HomePageTemplate_WatchParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_HomePageTemplate_WatchParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_WatchParty) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_WatchParty) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_WatchParty.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_WatchParty) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{72}
}

func (x *CSteamTV_HomePageTemplate_WatchParty) GetBroadcast() *GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcast
	}
	return nil
}

func (x *CSteamTV_HomePageTemplate_WatchParty) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CSteamTV_HomePageTemplate_WatchParty) GetChatGroupId() uint64 {
	if x != nil && x.ChatGroupId != nil {
		return *x.ChatGroupId
	}
	return 0
}

type CSteamTV_HomePageTemplate_Developer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Broadcast *GetBroadcastChannelEntry `protobuf:"bytes,1,opt,name=broadcast" json:"broadcast,omitempty"`
	Title     *string                   `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (x *CSteamTV_HomePageTemplate_Developer) Reset() {
	*x = CSteamTV_HomePageTemplate_Developer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_HomePageTemplate_Developer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_Developer) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_Developer) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_Developer.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_Developer) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{73}
}

func (x *CSteamTV_HomePageTemplate_Developer) GetBroadcast() *GetBroadcastChannelEntry {
	if x != nil {
		return x.Broadcast
	}
	return nil
}

func (x *CSteamTV_HomePageTemplate_Developer) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CSteamTV_HomePageTemplate_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title *string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
}

func (x *CSteamTV_HomePageTemplate_Event) Reset() {
	*x = CSteamTV_HomePageTemplate_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_HomePageTemplate_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageTemplate_Event) ProtoMessage() {}

func (x *CSteamTV_HomePageTemplate_Event) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageTemplate_Event.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageTemplate_Event) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{74}
}

func (x *CSteamTV_HomePageTemplate_Event) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type CSteamTV_HomePageContentRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateType *ESteamTVContentTemplate                `protobuf:"varint,1,opt,name=template_type,json=templateType,enum=ESteamTVContentTemplate,def=0" json:"template_type,omitempty"`
	Takeover     *CSteamTV_HomePageTemplate_Takeover     `protobuf:"bytes,2,opt,name=takeover" json:"takeover,omitempty"`
	SingleGame   *CSteamTV_HomePageTemplate_SingleGame   `protobuf:"bytes,3,opt,name=single_game,json=singleGame" json:"single_game,omitempty"`
	GameList     *CSteamTV_HomePageTemplate_GameList     `protobuf:"bytes,4,opt,name=game_list,json=gameList" json:"game_list,omitempty"`
	QuickExplore *CSteamTV_HomePageTemplate_QuickExplore `protobuf:"bytes,5,opt,name=quick_explore,json=quickExplore" json:"quick_explore,omitempty"`
	ConveyorBelt *CSteamTV_HomePageTemplate_ConveyorBelt `protobuf:"bytes,6,opt,name=conveyor_belt,json=conveyorBelt" json:"conveyor_belt,omitempty"`
	WatchParty   *CSteamTV_HomePageTemplate_WatchParty   `protobuf:"bytes,7,opt,name=watch_party,json=watchParty" json:"watch_party,omitempty"`
	Developer    *CSteamTV_HomePageTemplate_Developer    `protobuf:"bytes,8,opt,name=developer" json:"developer,omitempty"`
	Event        *CSteamTV_HomePageTemplate_Event        `protobuf:"bytes,9,opt,name=event" json:"event,omitempty"`
}

// Default values for CSteamTV_HomePageContentRow fields.
const (
	Default_CSteamTV_HomePageContentRow_TemplateType = ESteamTVContentTemplate_k_ESteamTVContentTemplate_Invalid
)

func (x *CSteamTV_HomePageContentRow) Reset() {
	*x = CSteamTV_HomePageContentRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_HomePageContentRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_HomePageContentRow) ProtoMessage() {}

func (x *CSteamTV_HomePageContentRow) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_HomePageContentRow.ProtoReflect.Descriptor instead.
func (*CSteamTV_HomePageContentRow) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{75}
}

func (x *CSteamTV_HomePageContentRow) GetTemplateType() ESteamTVContentTemplate {
	if x != nil && x.TemplateType != nil {
		return *x.TemplateType
	}
	return Default_CSteamTV_HomePageContentRow_TemplateType
}

func (x *CSteamTV_HomePageContentRow) GetTakeover() *CSteamTV_HomePageTemplate_Takeover {
	if x != nil {
		return x.Takeover
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetSingleGame() *CSteamTV_HomePageTemplate_SingleGame {
	if x != nil {
		return x.SingleGame
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetGameList() *CSteamTV_HomePageTemplate_GameList {
	if x != nil {
		return x.GameList
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetQuickExplore() *CSteamTV_HomePageTemplate_QuickExplore {
	if x != nil {
		return x.QuickExplore
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetConveyorBelt() *CSteamTV_HomePageTemplate_ConveyorBelt {
	if x != nil {
		return x.ConveyorBelt
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetWatchParty() *CSteamTV_HomePageTemplate_WatchParty {
	if x != nil {
		return x.WatchParty
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetDeveloper() *CSteamTV_HomePageTemplate_Developer {
	if x != nil {
		return x.Developer
	}
	return nil
}

func (x *CSteamTV_HomePageContentRow) GetEvent() *CSteamTV_HomePageTemplate_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type CSteamTV_GetHomePageContents_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows []*CSteamTV_HomePageContentRow `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
}

func (x *CSteamTV_GetHomePageContents_Response) Reset() {
	*x = CSteamTV_GetHomePageContents_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetHomePageContents_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetHomePageContents_Response) ProtoMessage() {}

func (x *CSteamTV_GetHomePageContents_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetHomePageContents_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetHomePageContents_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{76}
}

func (x *CSteamTV_GetHomePageContents_Response) GetRows() []*CSteamTV_HomePageContentRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

type CSteamTV_AppCheer_SingleCheerType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheerType   *uint32 `protobuf:"varint,1,opt,name=cheer_type,json=cheerType" json:"cheer_type,omitempty"`
	CheerAmount *uint32 `protobuf:"varint,2,opt,name=cheer_amount,json=cheerAmount" json:"cheer_amount,omitempty"`
}

func (x *CSteamTV_AppCheer_SingleCheerType) Reset() {
	*x = CSteamTV_AppCheer_SingleCheerType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_AppCheer_SingleCheerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AppCheer_SingleCheerType) ProtoMessage() {}

func (x *CSteamTV_AppCheer_SingleCheerType) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AppCheer_SingleCheerType.ProtoReflect.Descriptor instead.
func (*CSteamTV_AppCheer_SingleCheerType) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{77}
}

func (x *CSteamTV_AppCheer_SingleCheerType) GetCheerType() uint32 {
	if x != nil && x.CheerType != nil {
		return *x.CheerType
	}
	return 0
}

func (x *CSteamTV_AppCheer_SingleCheerType) GetCheerAmount() uint32 {
	if x != nil && x.CheerAmount != nil {
		return *x.CheerAmount
	}
	return 0
}

type CSteamTV_AppCheer_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId         *uint32                              `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	CheerTargetId *uint64                              `protobuf:"fixed64,2,opt,name=cheer_target_id,json=cheerTargetId" json:"cheer_target_id,omitempty"`
	Cheers        []*CSteamTV_AppCheer_SingleCheerType `protobuf:"bytes,3,rep,name=cheers" json:"cheers,omitempty"`
}

func (x *CSteamTV_AppCheer_Request) Reset() {
	*x = CSteamTV_AppCheer_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_AppCheer_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AppCheer_Request) ProtoMessage() {}

func (x *CSteamTV_AppCheer_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AppCheer_Request.ProtoReflect.Descriptor instead.
func (*CSteamTV_AppCheer_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{78}
}

func (x *CSteamTV_AppCheer_Request) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CSteamTV_AppCheer_Request) GetCheerTargetId() uint64 {
	if x != nil && x.CheerTargetId != nil {
		return *x.CheerTargetId
	}
	return 0
}

func (x *CSteamTV_AppCheer_Request) GetCheers() []*CSteamTV_AppCheer_SingleCheerType {
	if x != nil {
		return x.Cheers
	}
	return nil
}

type CSteamTV_AppCheer_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregationDelayMs *uint32 `protobuf:"varint,1,opt,name=aggregation_delay_ms,json=aggregationDelayMs" json:"aggregation_delay_ms,omitempty"`
}

func (x *CSteamTV_AppCheer_Response) Reset() {
	*x = CSteamTV_AppCheer_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_AppCheer_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_AppCheer_Response) ProtoMessage() {}

func (x *CSteamTV_AppCheer_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_AppCheer_Response.ProtoReflect.Descriptor instead.
func (*CSteamTV_AppCheer_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{79}
}

func (x *CSteamTV_AppCheer_Response) GetAggregationDelayMs() uint32 {
	if x != nil && x.AggregationDelayMs != nil {
		return *x.AggregationDelayMs
	}
	return 0
}

type CSteamTV_GetBroadcastChannelImages_Response_Images struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageType  *EBroadcastImageType `protobuf:"varint,1,opt,name=image_type,json=imageType,enum=EBroadcastImageType,def=0" json:"image_type,omitempty"`
	ImagePath  *string              `protobuf:"bytes,2,opt,name=image_path,json=imagePath" json:"image_path,omitempty"`
	ImageIndex *uint32              `protobuf:"varint,3,opt,name=image_index,json=imageIndex" json:"image_index,omitempty"`
}

// Default values for CSteamTV_GetBroadcastChannelImages_Response_Images fields.
const (
	Default_CSteamTV_GetBroadcastChannelImages_Response_Images_ImageType = EBroadcastImageType_k_EBroadcastImageType_None
)

func (x *CSteamTV_GetBroadcastChannelImages_Response_Images) Reset() {
	*x = CSteamTV_GetBroadcastChannelImages_Response_Images{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelImages_Response_Images) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelImages_Response_Images) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelImages_Response_Images) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelImages_Response_Images.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelImages_Response_Images) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CSteamTV_GetBroadcastChannelImages_Response_Images) GetImageType() EBroadcastImageType {
	if x != nil && x.ImageType != nil {
		return *x.ImageType
	}
	return Default_CSteamTV_GetBroadcastChannelImages_Response_Images_ImageType
}

func (x *CSteamTV_GetBroadcastChannelImages_Response_Images) GetImagePath() string {
	if x != nil && x.ImagePath != nil {
		return *x.ImagePath
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelImages_Response_Images) GetImageIndex() uint32 {
	if x != nil && x.ImageIndex != nil {
		return *x.ImageIndex
	}
	return 0
}

type CSteamTV_SetBroadcastChannelLinkRegions_Request_Links struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkIndex       *uint32 `protobuf:"varint,1,opt,name=link_index,json=linkIndex" json:"link_index,omitempty"`
	Url             *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	LinkDescription *string `protobuf:"bytes,3,opt,name=link_description,json=linkDescription" json:"link_description,omitempty"`
	Left            *uint32 `protobuf:"varint,4,opt,name=left" json:"left,omitempty"`
	Top             *uint32 `protobuf:"varint,5,opt,name=top" json:"top,omitempty"`
	Width           *uint32 `protobuf:"varint,6,opt,name=width" json:"width,omitempty"`
	Height          *uint32 `protobuf:"varint,7,opt,name=height" json:"height,omitempty"`
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) Reset() {
	*x = CSteamTV_SetBroadcastChannelLinkRegions_Request_Links{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) ProtoMessage() {}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_SetBroadcastChannelLinkRegions_Request_Links.ProtoReflect.Descriptor instead.
func (*CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetLinkIndex() uint32 {
	if x != nil && x.LinkIndex != nil {
		return *x.LinkIndex
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetLinkDescription() string {
	if x != nil && x.LinkDescription != nil {
		return *x.LinkDescription
	}
	return ""
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetLeft() uint32 {
	if x != nil && x.Left != nil {
		return *x.Left
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetTop() uint32 {
	if x != nil && x.Top != nil {
		return *x.Top
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CSteamTV_SetBroadcastChannelLinkRegions_Request_Links) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type CSteamTV_GetBroadcastChannelLinks_Response_Links struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkIndex       *uint32 `protobuf:"varint,1,opt,name=link_index,json=linkIndex" json:"link_index,omitempty"`
	Url             *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	LinkDescription *string `protobuf:"bytes,3,opt,name=link_description,json=linkDescription" json:"link_description,omitempty"`
	Left            *uint32 `protobuf:"varint,4,opt,name=left" json:"left,omitempty"`
	Top             *uint32 `protobuf:"varint,5,opt,name=top" json:"top,omitempty"`
	Width           *uint32 `protobuf:"varint,6,opt,name=width" json:"width,omitempty"`
	Height          *uint32 `protobuf:"varint,7,opt,name=height" json:"height,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) Reset() {
	*x = CSteamTV_GetBroadcastChannelLinks_Response_Links{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelLinks_Response_Links) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelLinks_Response_Links.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelLinks_Response_Links) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetLinkIndex() uint32 {
	if x != nil && x.LinkIndex != nil {
		return *x.LinkIndex
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetLinkDescription() string {
	if x != nil && x.LinkDescription != nil {
		return *x.LinkDescription
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetLeft() uint32 {
	if x != nil && x.Left != nil {
		return *x.Left
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetTop() uint32 {
	if x != nil && x.Top != nil {
		return *x.Top
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelLinks_Response_Links) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid   *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Name      *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	RtmpToken *string `protobuf:"bytes,3,opt,name=rtmp_token,json=rtmpToken" json:"rtmp_token,omitempty"`
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) Reset() {
	*x = CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) ProtoMessage() {}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_steamtv_steamclient_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster.ProtoReflect.Descriptor instead.
func (*CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) Descriptor() ([]byte, []int) {
	return file_steammessages_steamtv_steamclient_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster) GetRtmpToken() string {
	if x != nil && x.RtmpToken != nil {
		return *x.RtmpToken
	}
	return ""
}

var File_steammessages_steamtv_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_steamtv_steamclient_proto_rawDesc = []byte{
	0x0a, 0x27, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x74, 0x76, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x89, 0x01, 0x0a, 0x27, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a,
	0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3d, 0x82, 0xb5, 0x18, 0x39, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x70, 0x61, 0x72,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x56, 0x20, 0x55, 0x52,
	0x4c, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7b, 0x0a,
	0x28, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x14, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x1d, 0x82, 0xb5, 0x18, 0x19, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x49,
	0x44, 0x20, 0x6f, 0x72, 0x20, 0x30, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x26, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x29, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xee,
	0x01, 0x0a, 0x27, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x14, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x1d, 0x82, 0xb5, 0x18, 0x19, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20,
	0x49, 0x44, 0x20, 0x6f, 0x72, 0x20, 0x30, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0x82, 0xb5, 0x18, 0x16, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x42, 0x1b, 0x82, 0xb5, 0x18, 0x17, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22,
	0xd9, 0x04, 0x0a, 0x2b, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x65, 0x74,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4a, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18, 0x82,
	0xb5, 0x18, 0x14, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x49, 0x44, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x82, 0xb5, 0x18, 0x11, 0x6c,
	0x6f, 0x6e, 0x67, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x28, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x82, 0xb5, 0x18, 0x18, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x20,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x64, 0x65, 0x73, 0x63, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x82,
	0xb5, 0x18, 0x17, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20,
	0x64, 0x65, 0x73, 0x63, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x82, 0xb5, 0x18, 0x15, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x20, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x20, 0x68,
	0x61, 0x73, 0x68, 0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x3a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0x82, 0xb5, 0x18, 0x1a, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x82, 0xb5, 0x18, 0x17,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x4b,
	0x0a, 0x06, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33,
	0x82, 0xb5, 0x18, 0x2f, 0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x20, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x52, 0x06, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x2e, 0x0a, 0x2c, 0x43,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x2b, 0x43,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x14, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20,
	0x49, 0x44, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x99, 0x05, 0x0a, 0x2c, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x82, 0xb5,
	0x18, 0x39, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x20, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x56, 0x20, 0x55, 0x52, 0x4c, 0x52, 0x0a, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x42, 0x1b,
	0x82, 0xb5, 0x18, 0x17, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x0c, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x82, 0xb5, 0x18, 0x11, 0x6c, 0x6f, 0x6e,
	0x67, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x20, 0x28, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x39, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0x82, 0xb5, 0x18, 0x19, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x20, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x82, 0xb5,
	0x18, 0x18, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x82, 0xb5, 0x18, 0x1a, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x31, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b,
	0x82, 0xb5, 0x18, 0x17, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x4b, 0x0a, 0x06, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x33, 0x82, 0xb5, 0x18, 0x2f, 0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x20, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x52, 0x06, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x65, 0x64, 0x22, 0xfe, 0x04, 0x0a, 0x29, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f,
	0x53, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4a, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18,
	0x82, 0xb5, 0x18, 0x14, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x49, 0x44, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x0a,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1a, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f,
	0x6e, 0x65, 0x42, 0x13, 0x82, 0xb5, 0x18, 0x0f, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x69, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x48, 0x82, 0xb5, 0x18, 0x44, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20,
	0x28, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a,
	0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x13, 0x82, 0xb5, 0x18, 0x0f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x20, 0x69, 0x6e,
	0x20, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x82, 0xb5, 0x18, 0x10, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x73, 0x52,
	0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x29, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0c, 0x82, 0xb5, 0x18, 0x08, 0x69, 0x6e, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0x82, 0xb5, 0x18, 0x07, 0x65, 0x67, 0x20, 0x2e, 0x6a, 0x70, 0x67, 0x52, 0x0d, 0x66, 0x69,
	0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d,
	0x82, 0xb5, 0x18, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x53, 0x48, 0x41, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3a, 0x0a, 0x04, 0x75, 0x6e, 0x64, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x26, 0x82, 0xb5, 0x18, 0x22, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x75,
	0x6e, 0x64, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x2a, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x53, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6a, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c,
	0x82, 0xb5, 0x18, 0x38, 0x73, 0x65, 0x74, 0x20, 0x69, 0x66, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x53, 0x48, 0x41, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x10, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0xcc,
	0x01, 0x0a, 0x2a, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18, 0x82, 0xb5, 0x18,
	0x14, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x20, 0x49, 0x44, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x1b, 0x82, 0xb5, 0x18, 0x17, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xe5, 0x02,
	0x0a, 0x2b, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x1a, 0xe8, 0x01, 0x0a, 0x06, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x45, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x1a, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x42, 0x15, 0x82, 0xb5, 0x18,
	0x11, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a,
	0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0x82, 0xb5, 0x18, 0x1a, 0x50, 0x61, 0x74, 0x68, 0x20, 0x74, 0x6f, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x0b,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x16, 0x82, 0xb5, 0x18, 0x12, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xdc, 0x05, 0x0a, 0x2f, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x53, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x14, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x49,
	0x44, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f,
	0x53, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x05, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x1a, 0x8e, 0x04, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x57, 0x0a,
	0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x38, 0x82, 0xb5, 0x18, 0x34, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x28, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x20,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x68, 0x69, 0x67, 0x68, 0x65,
	0x72, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x29, 0x52, 0x09, 0x6c, 0x69, 0x6e,
	0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x55, 0x52, 0x4c, 0x20, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x60, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x82, 0xb5,
	0x18, 0x31, 0x55, 0x52, 0x4c, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x73, 0x68, 0x6f, 0x77,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x58, 0x20, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x31, 0x30, 0x30, 0x74, 0x68,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x25, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74,
	0x12, 0x48, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x36, 0x82,
	0xb5, 0x18, 0x32, 0x54, 0x6f, 0x70, 0x20, 0x59, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x69, 0x6e, 0x20, 0x31, 0x30, 0x30, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20,
	0x25, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x49, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x33, 0x82, 0xb5, 0x18, 0x2f, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x20, 0x57, 0x69, 0x64, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x20, 0x31,
	0x30, 0x30, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x25, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x4d, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x35, 0x82, 0xb5, 0x18, 0x31, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x20, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x31, 0x30, 0x30, 0x74,
	0x68, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x25, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x32, 0x0a, 0x30, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x53, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x0a, 0x29, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x42, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x49, 0x44, 0x52, 0x12, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x22, 0x86, 0x05, 0x0a, 0x2a, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x1a, 0x8e, 0x04, 0x0a, 0x05, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x57, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x38, 0x82, 0xb5, 0x18, 0x34, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x28,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x68, 0x61, 0x73,
	0x20, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x29, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x82, 0xb5, 0x18, 0x04, 0x55,
	0x52, 0x4c, 0x20, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x60, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x35, 0x82, 0xb5, 0x18, 0x31, 0x55, 0x52, 0x4c, 0x20, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x69, 0x6c,
	0x6c, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69,
	0x6e, 0x6b, 0x20, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x4c, 0x65,
	0x66, 0x74, 0x20, 0x58, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e,
	0x20, 0x31, 0x30, 0x30, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x25, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x48, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x54, 0x6f, 0x70, 0x20, 0x59, 0x20, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x31, 0x30, 0x30, 0x74, 0x68,
	0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x25, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x03, 0x74, 0x6f, 0x70,
	0x12, 0x49, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x33, 0x82, 0xb5, 0x18, 0x2f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x20, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x20, 0x69, 0x6e, 0x20, 0x31, 0x30, 0x30, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20,
	0x25, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x4d, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x35, 0x82, 0xb5, 0x18,
	0x31, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x20, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x69,
	0x6e, 0x20, 0x31, 0x30, 0x30, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x25, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x7e, 0x0a, 0x30, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18, 0x82, 0xb5,
	0x18, 0x14, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x20, 0x49, 0x44, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xc2, 0x02, 0x0a, 0x31, 0x43,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x62, 0x0a, 0x0c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0xa8, 0x01, 0x0a, 0x0b, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x49, 0x44, 0x52,
	0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x82, 0xb5, 0x18, 0x10, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x74, 0x6d, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x82, 0xb5, 0x18, 0x18, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x72, 0x74, 0x6d, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x26, 0x0a, 0x24, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8c, 0x0a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x42, 0x1d, 0x82, 0xb5, 0x18, 0x19, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x72, 0x20,
	0x30, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x82, 0xb5, 0x18, 0x25,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x55, 0x52, 0x4c, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1f, 0x82, 0xb5, 0x18, 0x1b, 0x4c, 0x6f, 0x6e, 0x67, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x34, 0x82, 0xb5, 0x18, 0x30, 0x54, 0x68, 0x65, 0x20, 0x67,
	0x61, 0x6d, 0x65, 0x20, 0x49, 0x44, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x20, 0x69, 0x73, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x28, 0x82, 0xb5, 0x18, 0x24, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x6c, 0x79, 0x20, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x29, 0x82, 0xb5, 0x18, 0x25, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19,
	0x82, 0xb5, 0x18, 0x15, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x20, 0x55, 0x52, 0x4c, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x45, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x27, 0x82, 0xb5, 0x18, 0x23,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x39,
	0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0x82, 0xb5, 0x18, 0x19, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x82,
	0xb5, 0x18, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x20, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x20, 0x75, 0x72, 0x6c, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55,
	0x72, 0x6c, 0x12, 0x52, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x06, 0x42,
	0x21, 0x82, 0xb5, 0x18, 0x1d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x29, 0x82, 0xb5, 0x18,
	0x25, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x82, 0xb5, 0x18,
	0x14, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x20, 0x75, 0x72, 0x6c, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x55, 0x72, 0x6c, 0x12, 0x44, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x23, 0x82, 0xb5, 0x18, 0x1f, 0x57,
	0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x20, 0x69, 0x73, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x52, 0x0a,
	0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x23, 0x82, 0xb5, 0x18, 0x1f, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x3d, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x24, 0x82, 0xb5, 0x18, 0x20, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x69, 0x73, 0x20, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x12,
	0x3d, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0x82, 0xb5, 0x18, 0x1d, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x69,
	0x73, 0x20, 0x69, 0x6e, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x43,
	0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x29, 0x82, 0xb5, 0x18, 0x25, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x68, 0x61, 0x73, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x65, 0x64, 0x22, 0x7a, 0x0a, 0x25, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1c, 0x82, 0xb5, 0x18,
	0x18, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7c, 0x0a, 0x27,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x1c, 0x82, 0xb5, 0x18, 0x18, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x78, 0x0a, 0x2a, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x49, 0x44,
	0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x22, 0x98, 0x06, 0x0a, 0x2b, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x69, 0x73, 0x20, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x54, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x33, 0x82, 0xb5, 0x18, 0x2f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x34, 0x82, 0xb5, 0x18, 0x30, 0x54, 0x68, 0x65, 0x20, 0x67, 0x61, 0x6d, 0x65,
	0x20, 0x49, 0x44, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x69, 0x73,
	0x20, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12,
	0x42, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x28, 0x82, 0xb5, 0x18, 0x24, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x20, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x29, 0x82, 0xb5, 0x18, 0x25, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x76, 0x69, 0x65, 0x77, 0x73, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x05, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x06, 0x42, 0x21, 0x82, 0xb5, 0x18, 0x1d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x19, 0x82, 0xb5, 0x18, 0x15, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x20, 0x55, 0x52, 0x4c, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x45, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x27, 0x82, 0xb5, 0x18,
	0x23, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12,
	0x4b, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x29, 0x82, 0xb5, 0x18, 0x25, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xb4, 0x01, 0x0a, 0x27, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x14, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x20, 0x49, 0x44, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x04, 0x75, 0x6e, 0x64, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x29, 0x82, 0xb5, 0x18, 0x25, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20,
	0x75, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x04, 0x75, 0x6e, 0x64, 0x6f, 0x22, 0x72, 0x0a, 0x28, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x25, 0x82, 0xb5, 0x18, 0x21, 0x57, 0x68, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73,
	0x20, 0x6e, 0x6f, 0x77, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x69, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x78, 0x0a, 0x2a, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x49, 0x44,
	0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x2b, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x26, 0x82, 0xb5, 0x18, 0x22,
	0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x77, 0x20, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
	0x22, 0x5d, 0x0a, 0x29, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6c, 0x69, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x12, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22,
	0x86, 0x05, 0x0a, 0x1a, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41,
	0x0a, 0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x15, 0x82, 0xb5, 0x18, 0x11, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x6c, 0x69, 0x70, 0x20, 0x49, 0x44,
	0x52, 0x0f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x70, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x18, 0x82, 0xb5, 0x18, 0x14, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x49, 0x44, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0x82, 0xb5, 0x18, 0x1c,
	0x41, 0x70, 0x70, 0x20, 0x49, 0x44, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x69, 0x73,
	0x20, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06,
	0x42, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x3f, 0x0a,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x42, 0x16, 0x82, 0xb5, 0x18, 0x12, 0x43, 0x6c, 0x69, 0x70,
	0x2d, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x52, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x57,
	0x0a, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x82, 0xb5, 0x18, 0x26, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x63, 0x6c, 0x69, 0x70, 0x52, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x82, 0xb5, 0x18, 0x22,
	0x47, 0x4d, 0x54, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x70, 0x20, 0x77, 0x61,
	0x73, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x64, 0x20, 0x6c, 0x69,
	0x76, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x09,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x19, 0x82, 0xb5, 0x18, 0x15, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x20, 0x69, 0x6e, 0x20, 0x4d, 0x53, 0x52, 0x08, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x4d, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x82, 0xb5,
	0x18, 0x27, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x20, 0x55, 0x52,
	0x4c, 0x20, 0x6f, 0x6e, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x22, 0x86, 0x01, 0x0a, 0x2a, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x70, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x6c, 0x69, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x56, 0x5f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x48, 0x6f, 0x73,
	0x74, 0x22, 0xac, 0x01, 0x0a, 0x27, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18, 0x82, 0xb5, 0x18,
	0x14, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x20, 0x49, 0x44, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x82, 0xb5, 0x18, 0x19, 0x54,
	0x68, 0x65, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x2a, 0x0a, 0x28, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x2f,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4a, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x18, 0x82,
	0xb5, 0x18, 0x14, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x49, 0x44, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x30,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x57, 0x68, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x12, 0x58, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x33, 0x82, 0xb5, 0x18, 0x2f, 0x57, 0x68,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x68,
	0x61, 0x73, 0x20, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0c, 0x69,
	0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x22, 0x96, 0x02, 0x0a, 0x19,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x54, 0x68,
	0x65, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x61, 0x6d,
	0x65, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x09, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x45,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x3a, 0x1c, 0x6b, 0x5f, 0x45, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42,
	0x35, 0x82, 0xb5, 0x18, 0x31, 0x54, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x70,
	0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x12, 0x41, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x2b, 0x82, 0xb5, 0x18, 0x27, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9f, 0x03, 0x0a, 0x0d, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x56, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x54, 0x68, 0x65, 0x20, 0x49,
	0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0x82, 0xb5, 0x18, 0x15, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0x82, 0xb5, 0x18, 0x16, 0x54, 0x68, 0x65, 0x20, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x27, 0x82, 0xb5, 0x18, 0x23, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x67, 0x61, 0x6d, 0x65,
	0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x25, 0x82, 0xb5, 0x18, 0x21, 0x4c, 0x69, 0x76, 0x65,
	0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x22, 0x5d, 0x0a, 0x1a, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x82, 0xb5, 0x18, 0x11, 0x54, 0x68, 0x65, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x1c, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x45, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x3a, 0x1f, 0x6b, 0x5f, 0x45, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x42, 0x38, 0x82, 0xb5, 0x18, 0x34, 0x54, 0x68, 0x65, 0x20, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x09, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x41, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0x82, 0xb5, 0x18, 0x27, 0x54, 0x68, 0x65,
	0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0x82, 0xb5, 0x18, 0x21,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x7b, 0x0a, 0x1d, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x25, 0x82, 0xb5, 0x18, 0x21, 0x54, 0x68, 0x65, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x20,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x1b, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e,
	0x64, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x75, 0x6e, 0x64, 0x6f, 0x22, 0x1e,
	0x0a, 0x1c, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x68,
	0x61, 0x74, 0x42, 0x61, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50,
	0x0a, 0x1c, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x42, 0x61, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x12, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x22, 0xb7, 0x01, 0x0a, 0x10, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x43, 0x68,
	0x61, 0x74, 0x42, 0x61, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x68, 0x61, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d,
	0x61, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x65, 0x72,
	0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x1d, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61,
	0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x42,
	0x14, 0x82, 0xb5, 0x18, 0x10, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x62, 0x61, 0x6e, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x96,
	0x01, 0x0a, 0x21, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x41, 0x64, 0x64, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x64, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x75, 0x6e, 0x64, 0x6f, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x56, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a,
	0x22, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x16, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x56, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x74, 0x0a,
	0x23, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x1a,
	0x82, 0xb5, 0x18, 0x16, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0x77, 0x0a, 0x1b, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f,
	0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x64, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x75, 0x6e, 0x64, 0x6f, 0x22, 0x1e, 0x0a, 0x1c,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x64,
	0x42, 0x61, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x1c,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64,
	0x42, 0x61, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x57,
	0x0a, 0x1d, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x64, 0x42, 0x61, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x1c, 0x82, 0xb5, 0x18, 0x18, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4d, 0x0a, 0x19, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x56, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x1a, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x56, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x55,
	0x72, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6c,
	0x61, 0x69, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x73, 0x22, 0x2d, 0x0a, 0x17, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x72,
	0x6d, 0x22, 0x6d, 0x0a, 0x18, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1c, 0x82, 0xb5, 0x18, 0x18, 0x54,
	0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x29, 0x0a, 0x27, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf5, 0x01, 0x0a, 0x28,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x56, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x2a, 0x82, 0xb5, 0x18, 0x26, 0x53, 0x65, 0x6e, 0x64, 0x20, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x52,
	0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x71, 0x0a, 0x18, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x37, 0x82, 0xb5, 0x18, 0x33, 0x53, 0x65, 0x6e, 0x64, 0x20, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x52, 0x16, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xf4, 0x01, 0x0a, 0x27, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x53, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x56, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2a, 0x82, 0xb5, 0x18, 0x26,
	0x53, 0x65, 0x6e, 0x64, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69,
	0x76, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x71, 0x0a, 0x18, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x37, 0x82, 0xb5, 0x18, 0x33, 0x53,
	0x65, 0x6e, 0x64, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x73, 0x52, 0x16, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x28, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x56, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x0a, 0x27, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x7d, 0x0a, 0x28, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65,
	0x74, 0x4d, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1c, 0x82, 0xb5, 0x18, 0x18, 0x54,
	0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x26, 0x0a, 0x24, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x22, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x54, 0x61, 0x6b, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x24, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x7b, 0x0a, 0x0d, 0x47, 0x61, 0x6d,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x22, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x79, 0x0a, 0x26,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x45,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x79, 0x0a, 0x26, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x79, 0x6f, 0x72, 0x42, 0x65, 0x6c,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x24, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f,
	0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x74,
	0x0a, 0x23, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x22, 0x37, 0x0a, 0x1f, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xaa, 0x05,
	0x0a, 0x1b, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x60, 0x0a,
	0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x3a, 0x21,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3f, 0x0a, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x54, 0x61,
	0x6b, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0d, 0x71, 0x75,
	0x69, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x52, 0x0c, 0x71, 0x75, 0x69, 0x63,
	0x6b, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x79, 0x6f, 0x72, 0x5f, 0x62, 0x65, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x79, 0x6f, 0x72, 0x42, 0x65, 0x6c, 0x74, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x79,
	0x6f, 0x72, 0x42, 0x65, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x42,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x09, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x59, 0x0a, 0x25, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x48, 0x6f, 0x6d,
	0x65, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x52,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x21, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x41, 0x70, 0x70, 0x43, 0x68, 0x65, 0x65, 0x72, 0x5f, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x43, 0x68, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a, 0x0a, 0x63,
	0x68, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x4c, 0x82, 0xb5, 0x18, 0x48, 0x54, 0x68, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x63, 0x68, 0x65, 0x65, 0x72, 0x2e, 0x20, 0x41, 0x70, 0x70, 0x20, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x28, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x20, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2c, 0x20, 0x68, 0x65, 0x72, 0x6f, 0x65, 0x73, 0x2c, 0x20,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x65, 0x74, 0x63, 0x29, 0x52, 0x09, 0x63,
	0x68, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x65,
	0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19,
	0x82, 0xb5, 0x18, 0x15, 0x54, 0x68, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x63, 0x68, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x65, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfc, 0x02, 0x0a, 0x19, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x56, 0x5f, 0x41, 0x70, 0x70, 0x43, 0x68, 0x65, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0x82, 0xb5, 0x18, 0x19, 0x41, 0x70, 0x70, 0x20, 0x49, 0x44,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x68, 0x65, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x2e, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x94, 0x01, 0x0a, 0x0f, 0x63,
	0x68, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x42, 0x6c, 0x82, 0xb5, 0x18, 0x68, 0x54, 0x68, 0x65, 0x20, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x68, 0x65, 0x65, 0x72, 0x65,
	0x64, 0x20, 0x6f, 0x6e, 0x2e, 0x20, 0x49, 0x44, 0x20, 0x69, 0x73, 0x20, 0x61, 0x70, 0x70, 0x20,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x28, 0x63, 0x6f, 0x75, 0x6c, 0x64,
	0x20, 0x62, 0x65, 0x20, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x69, 0x64, 0x2c, 0x20, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x20, 0x69, 0x64, 0x2c, 0x20, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x20, 0x69, 0x64,
	0x2c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x69, 0x64, 0x2c, 0x20, 0x65, 0x74, 0x63,
	0x29, 0x2e, 0x52, 0x0d, 0x63, 0x68, 0x65, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x91, 0x01, 0x0a, 0x06, 0x63, 0x68, 0x65, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x41, 0x70,
	0x70, 0x43, 0x68, 0x65, 0x65, 0x72, 0x5f, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x68, 0x65,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x55, 0x82, 0xb5, 0x18, 0x51, 0x54, 0x68, 0x65, 0x20,
	0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x68, 0x65, 0x65, 0x72, 0x73, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x28, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x69, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x29, 0x2e, 0x52, 0x06, 0x63,
	0x68, 0x65, 0x65, 0x72, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x1a, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x41, 0x70, 0x70, 0x43, 0x68, 0x65, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0xe4, 0x01, 0x0a, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0xb1, 0x01, 0x82, 0xb5, 0x18, 0xac, 0x01, 0x54, 0x68, 0x65, 0x20, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x69, 0x6e,
	0x20, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x20, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x20, 0x63,
	0x68, 0x65, 0x65, 0x72, 0x73, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x73, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x61, 0x6c,
	0x6c, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x6b, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x6c, 0x6f, 0x77, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x20, 0x73,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x2a, 0x8a, 0x02, 0x0a, 0x13,
	0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x6b,
	0x5f, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x10, 0x04, 0x12, 0x24,
	0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x6d,
	0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x10, 0x06, 0x2a, 0x80, 0x01, 0x0a, 0x12, 0x45, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12,
	0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x4d, 0x6f, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x47, 0x65, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x50,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x4e, 0x65, 0x77, 0x10, 0x03, 0x2a, 0xd5, 0x01, 0x0a, 0x15,
	0x45, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f,
	0x45, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x10, 0x02, 0x12,
	0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x5f, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21,
	0x6b, 0x5f, 0x45, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x10, 0x05, 0x2a, 0x8a, 0x03, 0x0a, 0x17, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x54, 0x56, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x54, 0x61, 0x6b, 0x65, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x01, 0x12, 0x28,
	0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x03,
	0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x79,
	0x6f, 0x72, 0x42, 0x65, 0x6c, 0x74, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x08,
	0x32, 0xbf, 0x26, 0x0a, 0x07, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x12, 0x8e, 0x01, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xb5,
	0x18, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x12, 0xb1, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x27, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xb5, 0x18, 0x41,
	0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61,
	0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x62, 0x79, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x6f, 0x72, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x44, 0x12, 0xa1, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x2c, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x65, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x65, 0x74, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82,
	0xb5, 0x18, 0x22, 0x53, 0x65, 0x74, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x12, 0xa1, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x2c, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65,
	0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x26, 0x82, 0xb5, 0x18, 0x22, 0x47, 0x65, 0x74, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x12, 0x99, 0x01, 0x0a, 0x18, 0x53, 0x65,
	0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x56, 0x5f, 0x53, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x65,
	0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x24, 0x82, 0xb5, 0x18, 0x20, 0x53, 0x65, 0x74, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x20, 0x68, 0x61, 0x73, 0x68, 0x12, 0x98, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20,
	0x82, 0xb5, 0x18, 0x1c, 0x47, 0x65, 0x74, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x12, 0xad, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53,
	0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x53, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xb5, 0x18, 0x22, 0x53, 0x65,
	0x74, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x9b, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2a, 0x2e,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xb5, 0x18, 0x22, 0x47, 0x65, 0x74, 0x20,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xbb,
	0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x31, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65,
	0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xb5, 0x18, 0x2d, 0x47,
	0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x93, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x25, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f,
	0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x20, 0x62, 0x79, 0x20, 0x61, 0x20, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x12, 0x9c, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x27, 0x2e, 0x43,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x30, 0x82, 0xb5, 0x18, 0x2c, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x69, 0x73, 0x20, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x20, 0x74,
	0x6f, 0x12, 0x9d, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2b, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xb5, 0x18, 0x21,
	0x47, 0x65, 0x74, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x6c, 0x69, 0x76, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x8d, 0x01, 0x0a, 0x16, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x2e, 0x43,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x56, 0x5f, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1e, 0x82, 0xb5, 0x18, 0x1a, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x61, 0x20,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x9c, 0x01, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x2b, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xb5, 0x18, 0x20,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x94, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x70, 0x73, 0x12, 0x2a, 0x2e,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x70,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6c, 0x69, 0x70, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xb5, 0x18, 0x1b, 0x47, 0x65, 0x74, 0x20,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x20, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x28, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xb5, 0x18, 0x1a, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x20, 0x61, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0xc1, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x43,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3a, 0x82, 0xb5, 0x18, 0x36, 0x47, 0x65, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x73, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47,
	0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x7d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x1d, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f,
	0x82, 0xb5, 0x18, 0x2b, 0x47, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x20, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0xa0, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x12, 0x1c,
	0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x42, 0x61, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x43,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x42,
	0x61, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x82, 0xb5, 0x18,
	0x51, 0x53, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x6e, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e,
	0x73, 0x12, 0x1d, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x42, 0x61, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x31, 0x82, 0xb5, 0x18, 0x2d, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x62, 0x61, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x20, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x56, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x43,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x38, 0x82, 0xb5, 0x18, 0x34, 0x41, 0x64, 0x64, 0x20, 0x6f, 0x72, 0x20, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x20, 0x61, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x9d, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x23, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x56, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xb5,
	0x18, 0x39, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x8c, 0x01, 0x0a, 0x0a,
	0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x6e, 0x12, 0x1c, 0x2e, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x6e,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x56, 0x5f, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x6e, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xb5, 0x18, 0x3d, 0x41, 0x64, 0x64,
	0x20, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x61, 0x20, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x20, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x63, 0x68, 0x61, 0x74, 0x12, 0x90, 0x01, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x6e, 0x73, 0x12, 0x1d, 0x2e, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x6e,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x42, 0x61, 0x6e, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xb5, 0x18, 0x3e, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x20, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x6f, 0x0a,
	0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1a, 0x2e, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x54, 0x56, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2a, 0x82, 0xb5, 0x18, 0x26, 0x4a, 0x6f, 0x69, 0x6e, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x68, 0x61, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x61, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x7a,
	0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x54, 0x56, 0x5f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82,
	0xb5, 0x18, 0x37, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x20, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x54, 0x56, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xb5, 0x18, 0x21,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73,
	0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x91, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x2e, 0x43,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x53, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x54, 0x56, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54,
	0x56, 0x5f, 0x53, 0x65, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xb5, 0x18, 0x1e, 0x53, 0x65, 0x74, 0x73, 0x20, 0x61, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x27, 0x73, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x20, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x28, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x4d,
	0x79, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xb5, 0x18, 0x36, 0x47, 0x65, 0x74, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x77, 0x6e,
	0x73, 0x12, 0x8c, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xb5, 0x18, 0x22, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x8a, 0x01, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x43, 0x68, 0x65, 0x65, 0x72, 0x12, 0x1a, 0x2e,
	0x43, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x54, 0x56, 0x5f, 0x41, 0x70, 0x70, 0x43, 0x68, 0x65, 0x65,
	0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x43, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x54, 0x56, 0x5f, 0x41, 0x70, 0x70, 0x43, 0x68, 0x65, 0x65, 0x72, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xb5, 0x18, 0x41, 0x54, 0x68, 0x65, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x63, 0x68, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x61, 0x70, 0x70, 0x2e, 0x1a, 0x23, 0x82,
	0xb5, 0x18, 0x1f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x20, 0x54, 0x56, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x40, 0x42, 0x24, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x74, 0x76, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x13, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_steamtv_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_steamtv_steamclient_proto_rawDescData = file_steammessages_steamtv_steamclient_proto_rawDesc
)

func file_steammessages_steamtv_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_steamtv_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_steamtv_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_steamtv_steamclient_proto_rawDescData)
	})
	return file_steammessages_steamtv_steamclient_proto_rawDescData
}

var file_steammessages_steamtv_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_steammessages_steamtv_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 84)
var file_steammessages_steamtv_steamclient_proto_goTypes = []interface{}{
	(EBroadcastImageType)(0),                                              // 0: EBroadcastImageType
	(EGetGamesAlgorithm)(0),                                               // 1: EGetGamesAlgorithm
	(EGetChannelsAlgorithm)(0),                                            // 2: EGetChannelsAlgorithm
	(ESteamTVContentTemplate)(0),                                          // 3: ESteamTVContentTemplate
	(*CSteamTV_CreateBroadcastChannel_Request)(nil),                       // 4: CSteamTV_CreateBroadcastChannel_Request
	(*CSteamTV_CreateBroadcastChannel_Response)(nil),                      // 5: CSteamTV_CreateBroadcastChannel_Response
	(*CSteamTV_GetBroadcastChannelID_Request)(nil),                        // 6: CSteamTV_GetBroadcastChannelID_Request
	(*CSteamTV_GetBroadcastChannelID_Response)(nil),                       // 7: CSteamTV_GetBroadcastChannelID_Response
	(*CSteamTV_SetBroadcastChannelProfile_Request)(nil),                   // 8: CSteamTV_SetBroadcastChannelProfile_Request
	(*CSteamTV_SetBroadcastChannelProfile_Response)(nil),                  // 9: CSteamTV_SetBroadcastChannelProfile_Response
	(*CSteamTV_GetBroadcastChannelProfile_Request)(nil),                   // 10: CSteamTV_GetBroadcastChannelProfile_Request
	(*CSteamTV_GetBroadcastChannelProfile_Response)(nil),                  // 11: CSteamTV_GetBroadcastChannelProfile_Response
	(*CSteamTV_SetBroadcastChannelImage_Request)(nil),                     // 12: CSteamTV_SetBroadcastChannelImage_Request
	(*CSteamTV_SetBroadcastChannelImage_Response)(nil),                    // 13: CSteamTV_SetBroadcastChannelImage_Response
	(*CSteamTV_GetBroadcastChannelImages_Request)(nil),                    // 14: CSteamTV_GetBroadcastChannelImages_Request
	(*CSteamTV_GetBroadcastChannelImages_Response)(nil),                   // 15: CSteamTV_GetBroadcastChannelImages_Response
	(*CSteamTV_SetBroadcastChannelLinkRegions_Request)(nil),               // 16: CSteamTV_SetBroadcastChannelLinkRegions_Request
	(*CSteamTV_SetBroadcastChannelLinkRegions_Response)(nil),              // 17: CSteamTV_SetBroadcastChannelLinkRegions_Response
	(*CSteamTV_GetBroadcastChannelLinks_Request)(nil),                     // 18: CSteamTV_GetBroadcastChannelLinks_Request
	(*CSteamTV_GetBroadcastChannelLinks_Response)(nil),                    // 19: CSteamTV_GetBroadcastChannelLinks_Response
	(*CSteamTV_GetBroadcastChannelBroadcasters_Request)(nil),              // 20: CSteamTV_GetBroadcastChannelBroadcasters_Request
	(*CSteamTV_GetBroadcastChannelBroadcasters_Response)(nil),             // 21: CSteamTV_GetBroadcastChannelBroadcasters_Response
	(*CSteamTV_GetFollowedChannels_Request)(nil),                          // 22: CSteamTV_GetFollowedChannels_Request
	(*GetBroadcastChannelEntry)(nil),                                      // 23: GetBroadcastChannelEntry
	(*CSteamTV_GetFollowedChannels_Response)(nil),                         // 24: CSteamTV_GetFollowedChannels_Response
	(*CSteamTV_GetSubscribedChannels_Request)(nil),                        // 25: CSteamTV_GetSubscribedChannels_Request
	(*CSteamTV_GetSubscribedChannels_Response)(nil),                       // 26: CSteamTV_GetSubscribedChannels_Response
	(*CSteamTV_GetBroadcastChannelStatus_Request)(nil),                    // 27: CSteamTV_GetBroadcastChannelStatus_Request
	(*CSteamTV_GetBroadcastChannelStatus_Response)(nil),                   // 28: CSteamTV_GetBroadcastChannelStatus_Response
	(*CSteamTV_FollowBroadcastChannel_Request)(nil),                       // 29: CSteamTV_FollowBroadcastChannel_Request
	(*CSteamTV_FollowBroadcastChannel_Response)(nil),                      // 30: CSteamTV_FollowBroadcastChannel_Response
	(*CSteamTV_SubscribeBroadcastChannel_Request)(nil),                    // 31: CSteamTV_SubscribeBroadcastChannel_Request
	(*CSteamTV_SubscribeBroadcastChannel_Response)(nil),                   // 32: CSteamTV_SubscribeBroadcastChannel_Response
	(*CSteamTV_GetBroadcastChannelClips_Request)(nil),                     // 33: CSteamTV_GetBroadcastChannelClips_Request
	(*CSteamTV_BroadcastClipInfo)(nil),                                    // 34: CSteamTV_BroadcastClipInfo
	(*CSteamTV_GetBroadcastChannelClips_Response)(nil),                    // 35: CSteamTV_GetBroadcastChannelClips_Response
	(*CSteamTV_ReportBroadcastChannel_Request)(nil),                       // 36: CSteamTV_ReportBroadcastChannel_Request
	(*CSteamTV_ReportBroadcastChannel_Response)(nil),                      // 37: CSteamTV_ReportBroadcastChannel_Response
	(*CSteamTV_GetBroadcastChannelInteraction_Request)(nil),               // 38: CSteamTV_GetBroadcastChannelInteraction_Request
	(*CSteamTV_GetBroadcastChannelInteraction_Response)(nil),              // 39: CSteamTV_GetBroadcastChannelInteraction_Response
	(*CSteamTV_GetGames_Request)(nil),                                     // 40: CSteamTV_GetGames_Request
	(*CSteamTV_Game)(nil),                                                 // 41: CSteamTV_Game
	(*CSteamTV_GetGames_Response)(nil),                                    // 42: CSteamTV_GetGames_Response
	(*CSteamTV_GetChannels_Request)(nil),                                  // 43: CSteamTV_GetChannels_Request
	(*CSteamTV_GetChannels_Response)(nil),                                 // 44: CSteamTV_GetChannels_Response
	(*CSteamTV_AddChatBan_Request)(nil),                                   // 45: CSteamTV_AddChatBan_Request
	(*CSteamTV_AddChatBan_Response)(nil),                                  // 46: CSteamTV_AddChatBan_Response
	(*CSteamTV_GetChatBans_Request)(nil),                                  // 47: CSteamTV_GetChatBans_Request
	(*CSteamTV_ChatBan)(nil),                                              // 48: CSteamTV_ChatBan
	(*CSteamTV_GetChatBans_Response)(nil),                                 // 49: CSteamTV_GetChatBans_Response
	(*CSteamTV_AddChatModerator_Request)(nil),                             // 50: CSteamTV_AddChatModerator_Request
	(*CSteamTV_AddChatModerator_Response)(nil),                            // 51: CSteamTV_AddChatModerator_Response
	(*CSteamTV_GetChatModerators_Request)(nil),                            // 52: CSteamTV_GetChatModerators_Request
	(*CSteamTV_ChatModerator)(nil),                                        // 53: CSteamTV_ChatModerator
	(*CSteamTV_GetChatModerators_Response)(nil),                           // 54: CSteamTV_GetChatModerators_Response
	(*CSteamTV_AddWordBan_Request)(nil),                                   // 55: CSteamTV_AddWordBan_Request
	(*CSteamTV_AddWordBan_Response)(nil),                                  // 56: CSteamTV_AddWordBan_Response
	(*CSteamTV_GetWordBans_Request)(nil),                                  // 57: CSteamTV_GetWordBans_Request
	(*CSteamTV_GetWordBans_Response)(nil),                                 // 58: CSteamTV_GetWordBans_Response
	(*CSteamTV_JoinChat_Request)(nil),                                     // 59: CSteamTV_JoinChat_Request
	(*CSteamTV_JoinChat_Response)(nil),                                    // 60: CSteamTV_JoinChat_Response
	(*CSteamTV_Search_Request)(nil),                                       // 61: CSteamTV_Search_Request
	(*CSteamTV_Search_Response)(nil),                                      // 62: CSteamTV_Search_Response
	(*CSteamTV_GetSteamTVUserSettings_Request)(nil),                       // 63: CSteamTV_GetSteamTVUserSettings_Request
	(*CSteamTV_GetSteamTVUserSettings_Response)(nil),                      // 64: CSteamTV_GetSteamTVUserSettings_Response
	(*CSteamTV_SetSteamTVUserSettings_Request)(nil),                       // 65: CSteamTV_SetSteamTVUserSettings_Request
	(*CSteamTV_SetSteamTVUserSettings_Response)(nil),                      // 66: CSteamTV_SetSteamTVUserSettings_Response
	(*CSteamTV_GetMyBroadcastChannels_Request)(nil),                       // 67: CSteamTV_GetMyBroadcastChannels_Request
	(*CSteamTV_GetMyBroadcastChannels_Response)(nil),                      // 68: CSteamTV_GetMyBroadcastChannels_Response
	(*CSteamTV_GetHomePageContents_Request)(nil),                          // 69: CSteamTV_GetHomePageContents_Request
	(*CSteamTV_HomePageTemplate_Takeover)(nil),                            // 70: CSteamTV_HomePageTemplate_Takeover
	(*CSteamTV_HomePageTemplate_SingleGame)(nil),                          // 71: CSteamTV_HomePageTemplate_SingleGame
	(*GameListEntry)(nil),                                                 // 72: GameListEntry
	(*CSteamTV_HomePageTemplate_GameList)(nil),                            // 73: CSteamTV_HomePageTemplate_GameList
	(*CSteamTV_HomePageTemplate_QuickExplore)(nil),                        // 74: CSteamTV_HomePageTemplate_QuickExplore
	(*CSteamTV_HomePageTemplate_ConveyorBelt)(nil),                        // 75: CSteamTV_HomePageTemplate_ConveyorBelt
	(*CSteamTV_HomePageTemplate_WatchParty)(nil),                          // 76: CSteamTV_HomePageTemplate_WatchParty
	(*CSteamTV_HomePageTemplate_Developer)(nil),                           // 77: CSteamTV_HomePageTemplate_Developer
	(*CSteamTV_HomePageTemplate_Event)(nil),                               // 78: CSteamTV_HomePageTemplate_Event
	(*CSteamTV_HomePageContentRow)(nil),                                   // 79: CSteamTV_HomePageContentRow
	(*CSteamTV_GetHomePageContents_Response)(nil),                         // 80: CSteamTV_GetHomePageContents_Response
	(*CSteamTV_AppCheer_SingleCheerType)(nil),                             // 81: CSteamTV_AppCheer_SingleCheerType
	(*CSteamTV_AppCheer_Request)(nil),                                     // 82: CSteamTV_AppCheer_Request
	(*CSteamTV_AppCheer_Response)(nil),                                    // 83: CSteamTV_AppCheer_Response
	(*CSteamTV_GetBroadcastChannelImages_Response_Images)(nil),            // 84: CSteamTV_GetBroadcastChannelImages_Response.Images
	(*CSteamTV_SetBroadcastChannelLinkRegions_Request_Links)(nil),         // 85: CSteamTV_SetBroadcastChannelLinkRegions_Request.Links
	(*CSteamTV_GetBroadcastChannelLinks_Response_Links)(nil),              // 86: CSteamTV_GetBroadcastChannelLinks_Response.Links
	(*CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster)(nil), // 87: CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster
}
var file_steammessages_steamtv_steamclient_proto_depIdxs = []int32{
	0,  // 0: CSteamTV_SetBroadcastChannelImage_Request.image_type:type_name -> EBroadcastImageType
	0,  // 1: CSteamTV_GetBroadcastChannelImages_Request.image_types:type_name -> EBroadcastImageType
	84, // 2: CSteamTV_GetBroadcastChannelImages_Response.images:type_name -> CSteamTV_GetBroadcastChannelImages_Response.Images
	85, // 3: CSteamTV_SetBroadcastChannelLinkRegions_Request.links:type_name -> CSteamTV_SetBroadcastChannelLinkRegions_Request.Links
	86, // 4: CSteamTV_GetBroadcastChannelLinks_Response.links:type_name -> CSteamTV_GetBroadcastChannelLinks_Response.Links
	87, // 5: CSteamTV_GetBroadcastChannelBroadcasters_Response.broadcasters:type_name -> CSteamTV_GetBroadcastChannelBroadcasters_Response.Broadcaster
	23, // 6: CSteamTV_GetFollowedChannels_Response.results:type_name -> GetBroadcastChannelEntry
	23, // 7: CSteamTV_GetSubscribedChannels_Response.results:type_name -> GetBroadcastChannelEntry
	34, // 8: CSteamTV_GetBroadcastChannelClips_Response.clips:type_name -> CSteamTV_BroadcastClipInfo
	1,  // 9: CSteamTV_GetGames_Request.algorithm:type_name -> EGetGamesAlgorithm
	23, // 10: CSteamTV_Game.channels:type_name -> GetBroadcastChannelEntry
	41, // 11: CSteamTV_GetGames_Response.results:type_name -> CSteamTV_Game
	2,  // 12: CSteamTV_GetChannels_Request.algorithm:type_name -> EGetChannelsAlgorithm
	23, // 13: CSteamTV_GetChannels_Response.results:type_name -> GetBroadcastChannelEntry
	48, // 14: CSteamTV_GetChatBans_Response.results:type_name -> CSteamTV_ChatBan
	53, // 15: CSteamTV_GetChatModerators_Response.results:type_name -> CSteamTV_ChatModerator
	23, // 16: CSteamTV_Search_Response.results:type_name -> GetBroadcastChannelEntry
	23, // 17: CSteamTV_GetMyBroadcastChannels_Response.results:type_name -> GetBroadcastChannelEntry
	23, // 18: CSteamTV_HomePageTemplate_Takeover.broadcasts:type_name -> GetBroadcastChannelEntry
	23, // 19: CSteamTV_HomePageTemplate_SingleGame.broadcasts:type_name -> GetBroadcastChannelEntry
	23, // 20: GameListEntry.broadcast:type_name -> GetBroadcastChannelEntry
	72, // 21: CSteamTV_HomePageTemplate_GameList.entries:type_name -> GameListEntry
	23, // 22: CSteamTV_HomePageTemplate_QuickExplore.broadcasts:type_name -> GetBroadcastChannelEntry
	23, // 23: CSteamTV_HomePageTemplate_ConveyorBelt.broadcasts:type_name -> GetBroadcastChannelEntry
	23, // 24: CSteamTV_HomePageTemplate_WatchParty.broadcast:type_name -> GetBroadcastChannelEntry
	23, // 25: CSteamTV_HomePageTemplate_Developer.broadcast:type_name -> GetBroadcastChannelEntry
	3,  // 26: CSteamTV_HomePageContentRow.template_type:type_name -> ESteamTVContentTemplate
	70, // 27: CSteamTV_HomePageContentRow.takeover:type_name -> CSteamTV_HomePageTemplate_Takeover
	71, // 28: CSteamTV_HomePageContentRow.single_game:type_name -> CSteamTV_HomePageTemplate_SingleGame
	73, // 29: CSteamTV_HomePageContentRow.game_list:type_name -> CSteamTV_HomePageTemplate_GameList
	74, // 30: CSteamTV_HomePageContentRow.quick_explore:type_name -> CSteamTV_HomePageTemplate_QuickExplore
	75, // 31: CSteamTV_HomePageContentRow.conveyor_belt:type_name -> CSteamTV_HomePageTemplate_ConveyorBelt
	76, // 32: CSteamTV_HomePageContentRow.watch_party:type_name -> CSteamTV_HomePageTemplate_WatchParty
	77, // 33: CSteamTV_HomePageContentRow.developer:type_name -> CSteamTV_HomePageTemplate_Developer
	78, // 34: CSteamTV_HomePageContentRow.event:type_name -> CSteamTV_HomePageTemplate_Event
	79, // 35: CSteamTV_GetHomePageContents_Response.rows:type_name -> CSteamTV_HomePageContentRow
	81, // 36: CSteamTV_AppCheer_Request.cheers:type_name -> CSteamTV_AppCheer_SingleCheerType
	0,  // 37: CSteamTV_GetBroadcastChannelImages_Response.Images.image_type:type_name -> EBroadcastImageType
	4,  // 38: SteamTV.CreateBroadcastChannel:input_type -> CSteamTV_CreateBroadcastChannel_Request
	6,  // 39: SteamTV.GetBroadcastChannelID:input_type -> CSteamTV_GetBroadcastChannelID_Request
	8,  // 40: SteamTV.SetBroadcastChannelProfile:input_type -> CSteamTV_SetBroadcastChannelProfile_Request
	10, // 41: SteamTV.GetBroadcastChannelProfile:input_type -> CSteamTV_GetBroadcastChannelProfile_Request
	12, // 42: SteamTV.SetBroadcastChannelImage:input_type -> CSteamTV_SetBroadcastChannelImage_Request
	14, // 43: SteamTV.GetBroadcastChannelImages:input_type -> CSteamTV_GetBroadcastChannelImages_Request
	16, // 44: SteamTV.SetBroadcastChannelLinkRegions:input_type -> CSteamTV_SetBroadcastChannelLinkRegions_Request
	18, // 45: SteamTV.GetBroadcastChannelLinks:input_type -> CSteamTV_GetBroadcastChannelLinks_Request
	20, // 46: SteamTV.GetBroadcastChannelBroadcasters:input_type -> CSteamTV_GetBroadcastChannelBroadcasters_Request
	22, // 47: SteamTV.GetFollowedChannels:input_type -> CSteamTV_GetFollowedChannels_Request
	25, // 48: SteamTV.GetSubscribedChannels:input_type -> CSteamTV_GetSubscribedChannels_Request
	27, // 49: SteamTV.GetBroadcastChannelStatus:input_type -> CSteamTV_GetBroadcastChannelStatus_Request
	29, // 50: SteamTV.FollowBroadcastChannel:input_type -> CSteamTV_FollowBroadcastChannel_Request
	31, // 51: SteamTV.SubscribeBroadcastChannel:input_type -> CSteamTV_SubscribeBroadcastChannel_Request
	33, // 52: SteamTV.GetBroadcastChannelClips:input_type -> CSteamTV_GetBroadcastChannelClips_Request
	36, // 53: SteamTV.ReportBroadcastChannel:input_type -> CSteamTV_ReportBroadcastChannel_Request
	38, // 54: SteamTV.GetBroadcastChannelInteraction:input_type -> CSteamTV_GetBroadcastChannelInteraction_Request
	40, // 55: SteamTV.GetGames:input_type -> CSteamTV_GetGames_Request
	43, // 56: SteamTV.GetChannels:input_type -> CSteamTV_GetChannels_Request
	45, // 57: SteamTV.AddChatBan:input_type -> CSteamTV_AddChatBan_Request
	47, // 58: SteamTV.GetChatBans:input_type -> CSteamTV_GetChatBans_Request
	50, // 59: SteamTV.AddChatModerator:input_type -> CSteamTV_AddChatModerator_Request
	52, // 60: SteamTV.GetChatModerators:input_type -> CSteamTV_GetChatModerators_Request
	55, // 61: SteamTV.AddWordBan:input_type -> CSteamTV_AddWordBan_Request
	57, // 62: SteamTV.GetWordBans:input_type -> CSteamTV_GetWordBans_Request
	59, // 63: SteamTV.JoinChat:input_type -> CSteamTV_JoinChat_Request
	61, // 64: SteamTV.Search:input_type -> CSteamTV_Search_Request
	63, // 65: SteamTV.GetSteamTVUserSettings:input_type -> CSteamTV_GetSteamTVUserSettings_Request
	65, // 66: SteamTV.SetSteamTVUserSettings:input_type -> CSteamTV_SetSteamTVUserSettings_Request
	67, // 67: SteamTV.GetMyBroadcastChannels:input_type -> CSteamTV_GetMyBroadcastChannels_Request
	69, // 68: SteamTV.GetHomePageContents:input_type -> CSteamTV_GetHomePageContents_Request
	82, // 69: SteamTV.AppCheer:input_type -> CSteamTV_AppCheer_Request
	5,  // 70: SteamTV.CreateBroadcastChannel:output_type -> CSteamTV_CreateBroadcastChannel_Response
	7,  // 71: SteamTV.GetBroadcastChannelID:output_type -> CSteamTV_GetBroadcastChannelID_Response
	9,  // 72: SteamTV.SetBroadcastChannelProfile:output_type -> CSteamTV_SetBroadcastChannelProfile_Response
	11, // 73: SteamTV.GetBroadcastChannelProfile:output_type -> CSteamTV_GetBroadcastChannelProfile_Response
	13, // 74: SteamTV.SetBroadcastChannelImage:output_type -> CSteamTV_SetBroadcastChannelImage_Response
	15, // 75: SteamTV.GetBroadcastChannelImages:output_type -> CSteamTV_GetBroadcastChannelImages_Response
	17, // 76: SteamTV.SetBroadcastChannelLinkRegions:output_type -> CSteamTV_SetBroadcastChannelLinkRegions_Response
	19, // 77: SteamTV.GetBroadcastChannelLinks:output_type -> CSteamTV_GetBroadcastChannelLinks_Response
	21, // 78: SteamTV.GetBroadcastChannelBroadcasters:output_type -> CSteamTV_GetBroadcastChannelBroadcasters_Response
	24, // 79: SteamTV.GetFollowedChannels:output_type -> CSteamTV_GetFollowedChannels_Response
	26, // 80: SteamTV.GetSubscribedChannels:output_type -> CSteamTV_GetSubscribedChannels_Response
	28, // 81: SteamTV.GetBroadcastChannelStatus:output_type -> CSteamTV_GetBroadcastChannelStatus_Response
	30, // 82: SteamTV.FollowBroadcastChannel:output_type -> CSteamTV_FollowBroadcastChannel_Response
	32, // 83: SteamTV.SubscribeBroadcastChannel:output_type -> CSteamTV_SubscribeBroadcastChannel_Response
	35, // 84: SteamTV.GetBroadcastChannelClips:output_type -> CSteamTV_GetBroadcastChannelClips_Response
	37, // 85: SteamTV.ReportBroadcastChannel:output_type -> CSteamTV_ReportBroadcastChannel_Response
	39, // 86: SteamTV.GetBroadcastChannelInteraction:output_type -> CSteamTV_GetBroadcastChannelInteraction_Response
	42, // 87: SteamTV.GetGames:output_type -> CSteamTV_GetGames_Response
	44, // 88: SteamTV.GetChannels:output_type -> CSteamTV_GetChannels_Response
	46, // 89: SteamTV.AddChatBan:output_type -> CSteamTV_AddChatBan_Response
	49, // 90: SteamTV.GetChatBans:output_type -> CSteamTV_GetChatBans_Response
	51, // 91: SteamTV.AddChatModerator:output_type -> CSteamTV_AddChatModerator_Response
	54, // 92: SteamTV.GetChatModerators:output_type -> CSteamTV_GetChatModerators_Response
	56, // 93: SteamTV.AddWordBan:output_type -> CSteamTV_AddWordBan_Response
	58, // 94: SteamTV.GetWordBans:output_type -> CSteamTV_GetWordBans_Response
	60, // 95: SteamTV.JoinChat:output_type -> CSteamTV_JoinChat_Response
	62, // 96: SteamTV.Search:output_type -> CSteamTV_Search_Response
	64, // 97: SteamTV.GetSteamTVUserSettings:output_type -> CSteamTV_GetSteamTVUserSettings_Response
	66, // 98: SteamTV.SetSteamTVUserSettings:output_type -> CSteamTV_SetSteamTVUserSettings_Response
	68, // 99: SteamTV.GetMyBroadcastChannels:output_type -> CSteamTV_GetMyBroadcastChannels_Response
	80, // 100: SteamTV.GetHomePageContents:output_type -> CSteamTV_GetHomePageContents_Response
	83, // 101: SteamTV.AppCheer:output_type -> CSteamTV_AppCheer_Response
	70, // [70:102] is the sub-list for method output_type
	38, // [38:70] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_steammessages_steamtv_steamclient_proto_init() }
func file_steammessages_steamtv_steamclient_proto_init() {
	if File_steammessages_steamtv_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_steamtv_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_CreateBroadcastChannel_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_CreateBroadcastChannel_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelID_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelID_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_SetBroadcastChannelProfile_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_SetBroadcastChannelProfile_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelProfile_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelProfile_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_SetBroadcastChannelImage_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_SetBroadcastChannelImage_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelImages_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelImages_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_SetBroadcastChannelLinkRegions_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_SetBroadcastChannelLinkRegions_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelLinks_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelLinks_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelBroadcasters_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelBroadcasters_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetFollowedChannels_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBroadcastChannelEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetFollowedChannels_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetSubscribedChannels_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetSubscribedChannels_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelStatus_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelStatus_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_FollowBroadcastChannel_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_FollowBroadcastChannel_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_SubscribeBroadcastChannel_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_SubscribeBroadcastChannel_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelClips_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_BroadcastClipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelClips_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_ReportBroadcastChannel_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_ReportBroadcastChannel_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelInteraction_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelInteraction_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetGames_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetGames_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetChannels_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetChannels_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_AddChatBan_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_AddChatBan_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetChatBans_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_ChatBan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetChatBans_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_AddChatModerator_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_AddChatModerator_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetChatModerators_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_ChatModerator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetChatModerators_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_AddWordBan_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_AddWordBan_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetWordBans_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetWordBans_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_JoinChat_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_JoinChat_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_Search_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_Search_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetSteamTVUserSettings_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetSteamTVUserSettings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_SetSteamTVUserSettings_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_SetSteamTVUserSettings_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetMyBroadcastChannels_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetMyBroadcastChannels_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetHomePageContents_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_HomePageTemplate_Takeover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_HomePageTemplate_SingleGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_HomePageTemplate_GameList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_HomePageTemplate_QuickExplore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_HomePageTemplate_ConveyorBelt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_HomePageTemplate_WatchParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_HomePageTemplate_Developer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_HomePageTemplate_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_HomePageContentRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetHomePageContents_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_AppCheer_SingleCheerType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_AppCheer_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_AppCheer_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelImages_Response_Images); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_SetBroadcastChannelLinkRegions_Request_Links); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelLinks_Response_Links); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_steamtv_steamclient_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSteamTV_GetBroadcastChannelBroadcasters_Response_Broadcaster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_steamtv_steamclient_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   84,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_steamtv_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_steamtv_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_steamtv_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_steamtv_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_steamtv_steamclient_proto = out.File
	file_steammessages_steamtv_steamclient_proto_rawDesc = nil
	file_steammessages_steamtv_steamclient_proto_goTypes = nil
	file_steammessages_steamtv_steamclient_proto_depIdxs = nil
}
