// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: steammessages_clientserver_mms.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EMMSLobbyStatus int32

const (
	EMMSLobbyStatus_k_EMMSLobbyStatusInvalid      EMMSLobbyStatus = 0
	EMMSLobbyStatus_k_EMMSLobbyStatusExists       EMMSLobbyStatus = 1
	EMMSLobbyStatus_k_EMMSLobbyStatusDoesNotExist EMMSLobbyStatus = 2
	EMMSLobbyStatus_k_EMMSLobbyStatusNotAMember   EMMSLobbyStatus = 3
)

// Enum value maps for EMMSLobbyStatus.
var (
	EMMSLobbyStatus_name = map[int32]string{
		0: "k_EMMSLobbyStatusInvalid",
		1: "k_EMMSLobbyStatusExists",
		2: "k_EMMSLobbyStatusDoesNotExist",
		3: "k_EMMSLobbyStatusNotAMember",
	}
	EMMSLobbyStatus_value = map[string]int32{
		"k_EMMSLobbyStatusInvalid":      0,
		"k_EMMSLobbyStatusExists":       1,
		"k_EMMSLobbyStatusDoesNotExist": 2,
		"k_EMMSLobbyStatusNotAMember":   3,
	}
)

func (x EMMSLobbyStatus) Enum() *EMMSLobbyStatus {
	p := new(EMMSLobbyStatus)
	*p = x
	return p
}

func (x EMMSLobbyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMMSLobbyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientserver_mms_proto_enumTypes[0].Descriptor()
}

func (EMMSLobbyStatus) Type() protoreflect.EnumType {
	return &file_steammessages_clientserver_mms_proto_enumTypes[0]
}

func (x EMMSLobbyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EMMSLobbyStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EMMSLobbyStatus(num)
	return nil
}

// Deprecated: Use EMMSLobbyStatus.Descriptor instead.
func (EMMSLobbyStatus) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{0}
}

type CMsgClientMMSSetRatelimitPolicyOnClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                     *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	EnableRateLimits          *bool   `protobuf:"varint,2,opt,name=enable_rate_limits,json=enableRateLimits" json:"enable_rate_limits,omitempty"`
	SecondsPerMessage         *int32  `protobuf:"varint,3,opt,name=seconds_per_message,json=secondsPerMessage" json:"seconds_per_message,omitempty"`
	MillisecondsPerDataUpdate *int32  `protobuf:"varint,4,opt,name=milliseconds_per_data_update,json=millisecondsPerDataUpdate" json:"milliseconds_per_data_update,omitempty"`
}

func (x *CMsgClientMMSSetRatelimitPolicyOnClient) Reset() {
	*x = CMsgClientMMSSetRatelimitPolicyOnClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSSetRatelimitPolicyOnClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSSetRatelimitPolicyOnClient) ProtoMessage() {}

func (x *CMsgClientMMSSetRatelimitPolicyOnClient) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSSetRatelimitPolicyOnClient.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSSetRatelimitPolicyOnClient) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgClientMMSSetRatelimitPolicyOnClient) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSSetRatelimitPolicyOnClient) GetEnableRateLimits() bool {
	if x != nil && x.EnableRateLimits != nil {
		return *x.EnableRateLimits
	}
	return false
}

func (x *CMsgClientMMSSetRatelimitPolicyOnClient) GetSecondsPerMessage() int32 {
	if x != nil && x.SecondsPerMessage != nil {
		return *x.SecondsPerMessage
	}
	return 0
}

func (x *CMsgClientMMSSetRatelimitPolicyOnClient) GetMillisecondsPerDataUpdate() int32 {
	if x != nil && x.MillisecondsPerDataUpdate != nil {
		return *x.MillisecondsPerDataUpdate
	}
	return 0
}

type CMsgClientMMSCreateLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId              *uint32        `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	MaxMembers         *int32         `protobuf:"varint,2,opt,name=max_members,json=maxMembers" json:"max_members,omitempty"`
	LobbyType          *int32         `protobuf:"varint,3,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	LobbyFlags         *int32         `protobuf:"varint,4,opt,name=lobby_flags,json=lobbyFlags" json:"lobby_flags,omitempty"`
	CellId             *uint32        `protobuf:"varint,5,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	DeprecatedPublicIp *uint32        `protobuf:"varint,6,opt,name=deprecated_public_ip,json=deprecatedPublicIp" json:"deprecated_public_ip,omitempty"`
	Metadata           []byte         `protobuf:"bytes,7,opt,name=metadata" json:"metadata,omitempty"`
	PersonaNameOwner   *string        `protobuf:"bytes,8,opt,name=persona_name_owner,json=personaNameOwner" json:"persona_name_owner,omitempty"`
	PublicIp           *CMsgIPAddress `protobuf:"bytes,9,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
}

func (x *CMsgClientMMSCreateLobby) Reset() {
	*x = CMsgClientMMSCreateLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSCreateLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSCreateLobby) ProtoMessage() {}

func (x *CMsgClientMMSCreateLobby) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSCreateLobby.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSCreateLobby) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgClientMMSCreateLobby) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSCreateLobby) GetMaxMembers() int32 {
	if x != nil && x.MaxMembers != nil {
		return *x.MaxMembers
	}
	return 0
}

func (x *CMsgClientMMSCreateLobby) GetLobbyType() int32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

func (x *CMsgClientMMSCreateLobby) GetLobbyFlags() int32 {
	if x != nil && x.LobbyFlags != nil {
		return *x.LobbyFlags
	}
	return 0
}

func (x *CMsgClientMMSCreateLobby) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CMsgClientMMSCreateLobby) GetDeprecatedPublicIp() uint32 {
	if x != nil && x.DeprecatedPublicIp != nil {
		return *x.DeprecatedPublicIp
	}
	return 0
}

func (x *CMsgClientMMSCreateLobby) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CMsgClientMMSCreateLobby) GetPersonaNameOwner() string {
	if x != nil && x.PersonaNameOwner != nil {
		return *x.PersonaNameOwner
	}
	return ""
}

func (x *CMsgClientMMSCreateLobby) GetPublicIp() *CMsgIPAddress {
	if x != nil {
		return x.PublicIp
	}
	return nil
}

type CMsgClientMMSCreateLobbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	Eresult      *int32  `protobuf:"varint,3,opt,name=eresult,def=2" json:"eresult,omitempty"`
}

// Default values for CMsgClientMMSCreateLobbyResponse fields.
const (
	Default_CMsgClientMMSCreateLobbyResponse_Eresult = int32(2)
)

func (x *CMsgClientMMSCreateLobbyResponse) Reset() {
	*x = CMsgClientMMSCreateLobbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSCreateLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSCreateLobbyResponse) ProtoMessage() {}

func (x *CMsgClientMMSCreateLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSCreateLobbyResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSCreateLobbyResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgClientMMSCreateLobbyResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSCreateLobbyResponse) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSCreateLobbyResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientMMSCreateLobbyResponse_Eresult
}

type CMsgClientMMSJoinLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	PersonaName  *string `protobuf:"bytes,3,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
}

func (x *CMsgClientMMSJoinLobby) Reset() {
	*x = CMsgClientMMSJoinLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSJoinLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSJoinLobby) ProtoMessage() {}

func (x *CMsgClientMMSJoinLobby) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSJoinLobby.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSJoinLobby) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgClientMMSJoinLobby) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSJoinLobby) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSJoinLobby) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

type CMsgClientMMSJoinLobbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                 *uint32                                  `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby          *uint64                                  `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	ChatRoomEnterResponse *int32                                   `protobuf:"varint,3,opt,name=chat_room_enter_response,json=chatRoomEnterResponse" json:"chat_room_enter_response,omitempty"`
	MaxMembers            *int32                                   `protobuf:"varint,4,opt,name=max_members,json=maxMembers" json:"max_members,omitempty"`
	LobbyType             *int32                                   `protobuf:"varint,5,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	LobbyFlags            *int32                                   `protobuf:"varint,6,opt,name=lobby_flags,json=lobbyFlags" json:"lobby_flags,omitempty"`
	SteamIdOwner          *uint64                                  `protobuf:"fixed64,7,opt,name=steam_id_owner,json=steamIdOwner" json:"steam_id_owner,omitempty"`
	Metadata              []byte                                   `protobuf:"bytes,8,opt,name=metadata" json:"metadata,omitempty"`
	Members               []*CMsgClientMMSJoinLobbyResponse_Member `protobuf:"bytes,9,rep,name=members" json:"members,omitempty"`
}

func (x *CMsgClientMMSJoinLobbyResponse) Reset() {
	*x = CMsgClientMMSJoinLobbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSJoinLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSJoinLobbyResponse) ProtoMessage() {}

func (x *CMsgClientMMSJoinLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSJoinLobbyResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSJoinLobbyResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgClientMMSJoinLobbyResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSJoinLobbyResponse) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSJoinLobbyResponse) GetChatRoomEnterResponse() int32 {
	if x != nil && x.ChatRoomEnterResponse != nil {
		return *x.ChatRoomEnterResponse
	}
	return 0
}

func (x *CMsgClientMMSJoinLobbyResponse) GetMaxMembers() int32 {
	if x != nil && x.MaxMembers != nil {
		return *x.MaxMembers
	}
	return 0
}

func (x *CMsgClientMMSJoinLobbyResponse) GetLobbyType() int32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

func (x *CMsgClientMMSJoinLobbyResponse) GetLobbyFlags() int32 {
	if x != nil && x.LobbyFlags != nil {
		return *x.LobbyFlags
	}
	return 0
}

func (x *CMsgClientMMSJoinLobbyResponse) GetSteamIdOwner() uint64 {
	if x != nil && x.SteamIdOwner != nil {
		return *x.SteamIdOwner
	}
	return 0
}

func (x *CMsgClientMMSJoinLobbyResponse) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CMsgClientMMSJoinLobbyResponse) GetMembers() []*CMsgClientMMSJoinLobbyResponse_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type CMsgClientMMSLeaveLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
}

func (x *CMsgClientMMSLeaveLobby) Reset() {
	*x = CMsgClientMMSLeaveLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSLeaveLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSLeaveLobby) ProtoMessage() {}

func (x *CMsgClientMMSLeaveLobby) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSLeaveLobby.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSLeaveLobby) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgClientMMSLeaveLobby) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSLeaveLobby) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

type CMsgClientMMSLeaveLobbyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	Eresult      *int32  `protobuf:"varint,3,opt,name=eresult,def=2" json:"eresult,omitempty"`
}

// Default values for CMsgClientMMSLeaveLobbyResponse fields.
const (
	Default_CMsgClientMMSLeaveLobbyResponse_Eresult = int32(2)
)

func (x *CMsgClientMMSLeaveLobbyResponse) Reset() {
	*x = CMsgClientMMSLeaveLobbyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSLeaveLobbyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSLeaveLobbyResponse) ProtoMessage() {}

func (x *CMsgClientMMSLeaveLobbyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSLeaveLobbyResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSLeaveLobbyResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgClientMMSLeaveLobbyResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSLeaveLobbyResponse) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSLeaveLobbyResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientMMSLeaveLobbyResponse_Eresult
}

type CMsgClientMMSGetLobbyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId               *uint32                             `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	NumLobbiesRequested *int32                              `protobuf:"varint,3,opt,name=num_lobbies_requested,json=numLobbiesRequested" json:"num_lobbies_requested,omitempty"`
	CellId              *uint32                             `protobuf:"varint,4,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	DeprecatedPublicIp  *uint32                             `protobuf:"varint,5,opt,name=deprecated_public_ip,json=deprecatedPublicIp" json:"deprecated_public_ip,omitempty"`
	Filters             []*CMsgClientMMSGetLobbyList_Filter `protobuf:"bytes,6,rep,name=filters" json:"filters,omitempty"`
	PublicIp            *CMsgIPAddress                      `protobuf:"bytes,7,opt,name=public_ip,json=publicIp" json:"public_ip,omitempty"`
}

func (x *CMsgClientMMSGetLobbyList) Reset() {
	*x = CMsgClientMMSGetLobbyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSGetLobbyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSGetLobbyList) ProtoMessage() {}

func (x *CMsgClientMMSGetLobbyList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSGetLobbyList.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSGetLobbyList) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgClientMMSGetLobbyList) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyList) GetNumLobbiesRequested() int32 {
	if x != nil && x.NumLobbiesRequested != nil {
		return *x.NumLobbiesRequested
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyList) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyList) GetDeprecatedPublicIp() uint32 {
	if x != nil && x.DeprecatedPublicIp != nil {
		return *x.DeprecatedPublicIp
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyList) GetFilters() []*CMsgClientMMSGetLobbyList_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *CMsgClientMMSGetLobbyList) GetPublicIp() *CMsgIPAddress {
	if x != nil {
		return x.PublicIp
	}
	return nil
}

type CMsgClientMMSGetLobbyListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId   *uint32                                    `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Eresult *int32                                     `protobuf:"varint,3,opt,name=eresult,def=2" json:"eresult,omitempty"`
	Lobbies []*CMsgClientMMSGetLobbyListResponse_Lobby `protobuf:"bytes,4,rep,name=lobbies" json:"lobbies,omitempty"`
}

// Default values for CMsgClientMMSGetLobbyListResponse fields.
const (
	Default_CMsgClientMMSGetLobbyListResponse_Eresult = int32(2)
)

func (x *CMsgClientMMSGetLobbyListResponse) Reset() {
	*x = CMsgClientMMSGetLobbyListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSGetLobbyListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSGetLobbyListResponse) ProtoMessage() {}

func (x *CMsgClientMMSGetLobbyListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSGetLobbyListResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSGetLobbyListResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{8}
}

func (x *CMsgClientMMSGetLobbyListResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyListResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientMMSGetLobbyListResponse_Eresult
}

func (x *CMsgClientMMSGetLobbyListResponse) GetLobbies() []*CMsgClientMMSGetLobbyListResponse_Lobby {
	if x != nil {
		return x.Lobbies
	}
	return nil
}

type CMsgClientMMSSetLobbyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId         *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby  *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	SteamIdMember *uint64 `protobuf:"fixed64,3,opt,name=steam_id_member,json=steamIdMember" json:"steam_id_member,omitempty"`
	MaxMembers    *int32  `protobuf:"varint,4,opt,name=max_members,json=maxMembers" json:"max_members,omitempty"`
	LobbyType     *int32  `protobuf:"varint,5,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	LobbyFlags    *int32  `protobuf:"varint,6,opt,name=lobby_flags,json=lobbyFlags" json:"lobby_flags,omitempty"`
	Metadata      []byte  `protobuf:"bytes,7,opt,name=metadata" json:"metadata,omitempty"`
}

func (x *CMsgClientMMSSetLobbyData) Reset() {
	*x = CMsgClientMMSSetLobbyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSSetLobbyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSSetLobbyData) ProtoMessage() {}

func (x *CMsgClientMMSSetLobbyData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSSetLobbyData.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSSetLobbyData) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgClientMMSSetLobbyData) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyData) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyData) GetSteamIdMember() uint64 {
	if x != nil && x.SteamIdMember != nil {
		return *x.SteamIdMember
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyData) GetMaxMembers() int32 {
	if x != nil && x.MaxMembers != nil {
		return *x.MaxMembers
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyData) GetLobbyType() int32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyData) GetLobbyFlags() int32 {
	if x != nil && x.LobbyFlags != nil {
		return *x.LobbyFlags
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyData) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CMsgClientMMSSetLobbyDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	Eresult      *int32  `protobuf:"varint,3,opt,name=eresult,def=2" json:"eresult,omitempty"`
}

// Default values for CMsgClientMMSSetLobbyDataResponse fields.
const (
	Default_CMsgClientMMSSetLobbyDataResponse_Eresult = int32(2)
)

func (x *CMsgClientMMSSetLobbyDataResponse) Reset() {
	*x = CMsgClientMMSSetLobbyDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSSetLobbyDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSSetLobbyDataResponse) ProtoMessage() {}

func (x *CMsgClientMMSSetLobbyDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSSetLobbyDataResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSSetLobbyDataResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgClientMMSSetLobbyDataResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyDataResponse) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyDataResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientMMSSetLobbyDataResponse_Eresult
}

type CMsgClientMMSGetLobbyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
}

func (x *CMsgClientMMSGetLobbyData) Reset() {
	*x = CMsgClientMMSGetLobbyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSGetLobbyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSGetLobbyData) ProtoMessage() {}

func (x *CMsgClientMMSGetLobbyData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSGetLobbyData.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSGetLobbyData) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgClientMMSGetLobbyData) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyData) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

type CMsgClientMMSLobbyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                    *uint32                          `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby             *uint64                          `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	NumMembers               *int32                           `protobuf:"varint,3,opt,name=num_members,json=numMembers" json:"num_members,omitempty"`
	MaxMembers               *int32                           `protobuf:"varint,4,opt,name=max_members,json=maxMembers" json:"max_members,omitempty"`
	LobbyType                *int32                           `protobuf:"varint,5,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	LobbyFlags               *int32                           `protobuf:"varint,6,opt,name=lobby_flags,json=lobbyFlags" json:"lobby_flags,omitempty"`
	SteamIdOwner             *uint64                          `protobuf:"fixed64,7,opt,name=steam_id_owner,json=steamIdOwner" json:"steam_id_owner,omitempty"`
	Metadata                 []byte                           `protobuf:"bytes,8,opt,name=metadata" json:"metadata,omitempty"`
	Members                  []*CMsgClientMMSLobbyData_Member `protobuf:"bytes,9,rep,name=members" json:"members,omitempty"`
	LobbyCellid              *uint32                          `protobuf:"varint,10,opt,name=lobby_cellid,json=lobbyCellid" json:"lobby_cellid,omitempty"`
	OwnerShouldAcceptChanges *bool                            `protobuf:"varint,11,opt,name=owner_should_accept_changes,json=ownerShouldAcceptChanges" json:"owner_should_accept_changes,omitempty"`
}

func (x *CMsgClientMMSLobbyData) Reset() {
	*x = CMsgClientMMSLobbyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSLobbyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSLobbyData) ProtoMessage() {}

func (x *CMsgClientMMSLobbyData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSLobbyData.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSLobbyData) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgClientMMSLobbyData) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSLobbyData) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSLobbyData) GetNumMembers() int32 {
	if x != nil && x.NumMembers != nil {
		return *x.NumMembers
	}
	return 0
}

func (x *CMsgClientMMSLobbyData) GetMaxMembers() int32 {
	if x != nil && x.MaxMembers != nil {
		return *x.MaxMembers
	}
	return 0
}

func (x *CMsgClientMMSLobbyData) GetLobbyType() int32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

func (x *CMsgClientMMSLobbyData) GetLobbyFlags() int32 {
	if x != nil && x.LobbyFlags != nil {
		return *x.LobbyFlags
	}
	return 0
}

func (x *CMsgClientMMSLobbyData) GetSteamIdOwner() uint64 {
	if x != nil && x.SteamIdOwner != nil {
		return *x.SteamIdOwner
	}
	return 0
}

func (x *CMsgClientMMSLobbyData) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CMsgClientMMSLobbyData) GetMembers() []*CMsgClientMMSLobbyData_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CMsgClientMMSLobbyData) GetLobbyCellid() uint32 {
	if x != nil && x.LobbyCellid != nil {
		return *x.LobbyCellid
	}
	return 0
}

func (x *CMsgClientMMSLobbyData) GetOwnerShouldAcceptChanges() bool {
	if x != nil && x.OwnerShouldAcceptChanges != nil {
		return *x.OwnerShouldAcceptChanges
	}
	return false
}

type CMsgClientMMSSendLobbyChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId         *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby  *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	SteamIdTarget *uint64 `protobuf:"fixed64,3,opt,name=steam_id_target,json=steamIdTarget" json:"steam_id_target,omitempty"`
	LobbyMessage  []byte  `protobuf:"bytes,4,opt,name=lobby_message,json=lobbyMessage" json:"lobby_message,omitempty"`
}

func (x *CMsgClientMMSSendLobbyChatMsg) Reset() {
	*x = CMsgClientMMSSendLobbyChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSSendLobbyChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSSendLobbyChatMsg) ProtoMessage() {}

func (x *CMsgClientMMSSendLobbyChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSSendLobbyChatMsg.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSSendLobbyChatMsg) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgClientMMSSendLobbyChatMsg) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSSendLobbyChatMsg) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSSendLobbyChatMsg) GetSteamIdTarget() uint64 {
	if x != nil && x.SteamIdTarget != nil {
		return *x.SteamIdTarget
	}
	return 0
}

func (x *CMsgClientMMSSendLobbyChatMsg) GetLobbyMessage() []byte {
	if x != nil {
		return x.LobbyMessage
	}
	return nil
}

type CMsgClientMMSLobbyChatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId         *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby  *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	SteamIdSender *uint64 `protobuf:"fixed64,3,opt,name=steam_id_sender,json=steamIdSender" json:"steam_id_sender,omitempty"`
	LobbyMessage  []byte  `protobuf:"bytes,4,opt,name=lobby_message,json=lobbyMessage" json:"lobby_message,omitempty"`
}

func (x *CMsgClientMMSLobbyChatMsg) Reset() {
	*x = CMsgClientMMSLobbyChatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSLobbyChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSLobbyChatMsg) ProtoMessage() {}

func (x *CMsgClientMMSLobbyChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSLobbyChatMsg.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSLobbyChatMsg) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgClientMMSLobbyChatMsg) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSLobbyChatMsg) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSLobbyChatMsg) GetSteamIdSender() uint64 {
	if x != nil && x.SteamIdSender != nil {
		return *x.SteamIdSender
	}
	return 0
}

func (x *CMsgClientMMSLobbyChatMsg) GetLobbyMessage() []byte {
	if x != nil {
		return x.LobbyMessage
	}
	return nil
}

type CMsgClientMMSSetLobbyOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby    *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	SteamIdNewOwner *uint64 `protobuf:"fixed64,3,opt,name=steam_id_new_owner,json=steamIdNewOwner" json:"steam_id_new_owner,omitempty"`
}

func (x *CMsgClientMMSSetLobbyOwner) Reset() {
	*x = CMsgClientMMSSetLobbyOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSSetLobbyOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSSetLobbyOwner) ProtoMessage() {}

func (x *CMsgClientMMSSetLobbyOwner) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSSetLobbyOwner.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSSetLobbyOwner) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgClientMMSSetLobbyOwner) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyOwner) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyOwner) GetSteamIdNewOwner() uint64 {
	if x != nil && x.SteamIdNewOwner != nil {
		return *x.SteamIdNewOwner
	}
	return 0
}

type CMsgClientMMSSetLobbyOwnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	Eresult      *int32  `protobuf:"varint,3,opt,name=eresult,def=2" json:"eresult,omitempty"`
}

// Default values for CMsgClientMMSSetLobbyOwnerResponse fields.
const (
	Default_CMsgClientMMSSetLobbyOwnerResponse_Eresult = int32(2)
)

func (x *CMsgClientMMSSetLobbyOwnerResponse) Reset() {
	*x = CMsgClientMMSSetLobbyOwnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSSetLobbyOwnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSSetLobbyOwnerResponse) ProtoMessage() {}

func (x *CMsgClientMMSSetLobbyOwnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSSetLobbyOwnerResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSSetLobbyOwnerResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgClientMMSSetLobbyOwnerResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyOwnerResponse) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyOwnerResponse) GetEresult() int32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgClientMMSSetLobbyOwnerResponse_Eresult
}

type CMsgClientMMSSetLobbyLinked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId         *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby  *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	SteamIdLobby2 *uint64 `protobuf:"fixed64,3,opt,name=steam_id_lobby2,json=steamIdLobby2" json:"steam_id_lobby2,omitempty"`
}

func (x *CMsgClientMMSSetLobbyLinked) Reset() {
	*x = CMsgClientMMSSetLobbyLinked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSSetLobbyLinked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSSetLobbyLinked) ProtoMessage() {}

func (x *CMsgClientMMSSetLobbyLinked) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSSetLobbyLinked.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSSetLobbyLinked) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgClientMMSSetLobbyLinked) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyLinked) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyLinked) GetSteamIdLobby2() uint64 {
	if x != nil && x.SteamIdLobby2 != nil {
		return *x.SteamIdLobby2
	}
	return 0
}

type CMsgClientMMSSetLobbyGameServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                  *uint32        `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby           *uint64        `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	DeprecatedGameServerIp *uint32        `protobuf:"varint,3,opt,name=deprecated_game_server_ip,json=deprecatedGameServerIp" json:"deprecated_game_server_ip,omitempty"`
	GameServerPort         *uint32        `protobuf:"varint,4,opt,name=game_server_port,json=gameServerPort" json:"game_server_port,omitempty"`
	GameServerSteamId      *uint64        `protobuf:"fixed64,5,opt,name=game_server_steam_id,json=gameServerSteamId" json:"game_server_steam_id,omitempty"`
	GameServerIp           *CMsgIPAddress `protobuf:"bytes,6,opt,name=game_server_ip,json=gameServerIp" json:"game_server_ip,omitempty"`
}

func (x *CMsgClientMMSSetLobbyGameServer) Reset() {
	*x = CMsgClientMMSSetLobbyGameServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSSetLobbyGameServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSSetLobbyGameServer) ProtoMessage() {}

func (x *CMsgClientMMSSetLobbyGameServer) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSSetLobbyGameServer.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSSetLobbyGameServer) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgClientMMSSetLobbyGameServer) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyGameServer) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyGameServer) GetDeprecatedGameServerIp() uint32 {
	if x != nil && x.DeprecatedGameServerIp != nil {
		return *x.DeprecatedGameServerIp
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyGameServer) GetGameServerPort() uint32 {
	if x != nil && x.GameServerPort != nil {
		return *x.GameServerPort
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyGameServer) GetGameServerSteamId() uint64 {
	if x != nil && x.GameServerSteamId != nil {
		return *x.GameServerSteamId
	}
	return 0
}

func (x *CMsgClientMMSSetLobbyGameServer) GetGameServerIp() *CMsgIPAddress {
	if x != nil {
		return x.GameServerIp
	}
	return nil
}

type CMsgClientMMSLobbyGameServerSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId                  *uint32        `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby           *uint64        `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	DeprecatedGameServerIp *uint32        `protobuf:"varint,3,opt,name=deprecated_game_server_ip,json=deprecatedGameServerIp" json:"deprecated_game_server_ip,omitempty"`
	GameServerPort         *uint32        `protobuf:"varint,4,opt,name=game_server_port,json=gameServerPort" json:"game_server_port,omitempty"`
	GameServerSteamId      *uint64        `protobuf:"fixed64,5,opt,name=game_server_steam_id,json=gameServerSteamId" json:"game_server_steam_id,omitempty"`
	GameServerIp           *CMsgIPAddress `protobuf:"bytes,6,opt,name=game_server_ip,json=gameServerIp" json:"game_server_ip,omitempty"`
}

func (x *CMsgClientMMSLobbyGameServerSet) Reset() {
	*x = CMsgClientMMSLobbyGameServerSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSLobbyGameServerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSLobbyGameServerSet) ProtoMessage() {}

func (x *CMsgClientMMSLobbyGameServerSet) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSLobbyGameServerSet.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSLobbyGameServerSet) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgClientMMSLobbyGameServerSet) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSLobbyGameServerSet) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSLobbyGameServerSet) GetDeprecatedGameServerIp() uint32 {
	if x != nil && x.DeprecatedGameServerIp != nil {
		return *x.DeprecatedGameServerIp
	}
	return 0
}

func (x *CMsgClientMMSLobbyGameServerSet) GetGameServerPort() uint32 {
	if x != nil && x.GameServerPort != nil {
		return *x.GameServerPort
	}
	return 0
}

func (x *CMsgClientMMSLobbyGameServerSet) GetGameServerSteamId() uint64 {
	if x != nil && x.GameServerSteamId != nil {
		return *x.GameServerSteamId
	}
	return 0
}

func (x *CMsgClientMMSLobbyGameServerSet) GetGameServerIp() *CMsgIPAddress {
	if x != nil {
		return x.GameServerIp
	}
	return nil
}

type CMsgClientMMSUserJoinedLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	SteamIdUser  *uint64 `protobuf:"fixed64,3,opt,name=steam_id_user,json=steamIdUser" json:"steam_id_user,omitempty"`
	PersonaName  *string `protobuf:"bytes,4,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
}

func (x *CMsgClientMMSUserJoinedLobby) Reset() {
	*x = CMsgClientMMSUserJoinedLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSUserJoinedLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSUserJoinedLobby) ProtoMessage() {}

func (x *CMsgClientMMSUserJoinedLobby) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSUserJoinedLobby.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSUserJoinedLobby) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgClientMMSUserJoinedLobby) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSUserJoinedLobby) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSUserJoinedLobby) GetSteamIdUser() uint64 {
	if x != nil && x.SteamIdUser != nil {
		return *x.SteamIdUser
	}
	return 0
}

func (x *CMsgClientMMSUserJoinedLobby) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

type CMsgClientMMSUserLeftLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	SteamIdUser  *uint64 `protobuf:"fixed64,3,opt,name=steam_id_user,json=steamIdUser" json:"steam_id_user,omitempty"`
	PersonaName  *string `protobuf:"bytes,4,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
}

func (x *CMsgClientMMSUserLeftLobby) Reset() {
	*x = CMsgClientMMSUserLeftLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSUserLeftLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSUserLeftLobby) ProtoMessage() {}

func (x *CMsgClientMMSUserLeftLobby) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSUserLeftLobby.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSUserLeftLobby) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgClientMMSUserLeftLobby) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSUserLeftLobby) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSUserLeftLobby) GetSteamIdUser() uint64 {
	if x != nil && x.SteamIdUser != nil {
		return *x.SteamIdUser
	}
	return 0
}

func (x *CMsgClientMMSUserLeftLobby) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

type CMsgClientMMSInviteToLobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId              *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby       *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	SteamIdUserInvited *uint64 `protobuf:"fixed64,3,opt,name=steam_id_user_invited,json=steamIdUserInvited" json:"steam_id_user_invited,omitempty"`
}

func (x *CMsgClientMMSInviteToLobby) Reset() {
	*x = CMsgClientMMSInviteToLobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSInviteToLobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSInviteToLobby) ProtoMessage() {}

func (x *CMsgClientMMSInviteToLobby) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSInviteToLobby.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSInviteToLobby) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgClientMMSInviteToLobby) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSInviteToLobby) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSInviteToLobby) GetSteamIdUserInvited() uint64 {
	if x != nil && x.SteamIdUserInvited != nil {
		return *x.SteamIdUserInvited
	}
	return 0
}

type CMsgClientMMSGetLobbyStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           *uint32 `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby    *uint64 `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	ClaimMembership *bool   `protobuf:"varint,3,opt,name=claim_membership,json=claimMembership" json:"claim_membership,omitempty"`
	ClaimOwnership  *bool   `protobuf:"varint,4,opt,name=claim_ownership,json=claimOwnership" json:"claim_ownership,omitempty"`
}

func (x *CMsgClientMMSGetLobbyStatus) Reset() {
	*x = CMsgClientMMSGetLobbyStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSGetLobbyStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSGetLobbyStatus) ProtoMessage() {}

func (x *CMsgClientMMSGetLobbyStatus) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSGetLobbyStatus.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSGetLobbyStatus) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgClientMMSGetLobbyStatus) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyStatus) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyStatus) GetClaimMembership() bool {
	if x != nil && x.ClaimMembership != nil {
		return *x.ClaimMembership
	}
	return false
}

func (x *CMsgClientMMSGetLobbyStatus) GetClaimOwnership() bool {
	if x != nil && x.ClaimOwnership != nil {
		return *x.ClaimOwnership
	}
	return false
}

type CMsgClientMMSGetLobbyStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId        *uint32          `protobuf:"varint,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	SteamIdLobby *uint64          `protobuf:"fixed64,2,opt,name=steam_id_lobby,json=steamIdLobby" json:"steam_id_lobby,omitempty"`
	LobbyStatus  *EMMSLobbyStatus `protobuf:"varint,3,opt,name=lobby_status,json=lobbyStatus,enum=EMMSLobbyStatus,def=0" json:"lobby_status,omitempty"`
}

// Default values for CMsgClientMMSGetLobbyStatusResponse fields.
const (
	Default_CMsgClientMMSGetLobbyStatusResponse_LobbyStatus = EMMSLobbyStatus_k_EMMSLobbyStatusInvalid
)

func (x *CMsgClientMMSGetLobbyStatusResponse) Reset() {
	*x = CMsgClientMMSGetLobbyStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSGetLobbyStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSGetLobbyStatusResponse) ProtoMessage() {}

func (x *CMsgClientMMSGetLobbyStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSGetLobbyStatusResponse.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSGetLobbyStatusResponse) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgClientMMSGetLobbyStatusResponse) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyStatusResponse) GetSteamIdLobby() uint64 {
	if x != nil && x.SteamIdLobby != nil {
		return *x.SteamIdLobby
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyStatusResponse) GetLobbyStatus() EMMSLobbyStatus {
	if x != nil && x.LobbyStatus != nil {
		return *x.LobbyStatus
	}
	return Default_CMsgClientMMSGetLobbyStatusResponse_LobbyStatus
}

type CMsgClientMMSJoinLobbyResponse_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId     *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	PersonaName *string `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	Metadata    []byte  `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
}

func (x *CMsgClientMMSJoinLobbyResponse_Member) Reset() {
	*x = CMsgClientMMSJoinLobbyResponse_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSJoinLobbyResponse_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSJoinLobbyResponse_Member) ProtoMessage() {}

func (x *CMsgClientMMSJoinLobbyResponse_Member) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSJoinLobbyResponse_Member.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSJoinLobbyResponse_Member) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CMsgClientMMSJoinLobbyResponse_Member) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgClientMMSJoinLobbyResponse_Member) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CMsgClientMMSJoinLobbyResponse_Member) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CMsgClientMMSGetLobbyList_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value       *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Comparision *int32  `protobuf:"varint,3,opt,name=comparision" json:"comparision,omitempty"`
	FilterType  *int32  `protobuf:"varint,4,opt,name=filter_type,json=filterType" json:"filter_type,omitempty"`
}

func (x *CMsgClientMMSGetLobbyList_Filter) Reset() {
	*x = CMsgClientMMSGetLobbyList_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSGetLobbyList_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSGetLobbyList_Filter) ProtoMessage() {}

func (x *CMsgClientMMSGetLobbyList_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSGetLobbyList_Filter.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSGetLobbyList_Filter) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CMsgClientMMSGetLobbyList_Filter) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CMsgClientMMSGetLobbyList_Filter) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *CMsgClientMMSGetLobbyList_Filter) GetComparision() int32 {
	if x != nil && x.Comparision != nil {
		return *x.Comparision
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyList_Filter) GetFilterType() int32 {
	if x != nil && x.FilterType != nil {
		return *x.FilterType
	}
	return 0
}

type CMsgClientMMSGetLobbyListResponse_Lobby struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId    *uint64  `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	MaxMembers *int32   `protobuf:"varint,2,opt,name=max_members,json=maxMembers" json:"max_members,omitempty"`
	LobbyType  *int32   `protobuf:"varint,3,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	LobbyFlags *int32   `protobuf:"varint,4,opt,name=lobby_flags,json=lobbyFlags" json:"lobby_flags,omitempty"`
	Metadata   []byte   `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"`
	NumMembers *int32   `protobuf:"varint,6,opt,name=num_members,json=numMembers" json:"num_members,omitempty"`
	Distance   *float32 `protobuf:"fixed32,7,opt,name=distance" json:"distance,omitempty"`
	Weight     *int64   `protobuf:"varint,8,opt,name=weight" json:"weight,omitempty"`
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) Reset() {
	*x = CMsgClientMMSGetLobbyListResponse_Lobby{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSGetLobbyListResponse_Lobby) ProtoMessage() {}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSGetLobbyListResponse_Lobby.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSGetLobbyListResponse_Lobby) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) GetMaxMembers() int32 {
	if x != nil && x.MaxMembers != nil {
		return *x.MaxMembers
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) GetLobbyType() int32 {
	if x != nil && x.LobbyType != nil {
		return *x.LobbyType
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) GetLobbyFlags() int32 {
	if x != nil && x.LobbyFlags != nil {
		return *x.LobbyFlags
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) GetNumMembers() int32 {
	if x != nil && x.NumMembers != nil {
		return *x.NumMembers
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) GetDistance() float32 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

func (x *CMsgClientMMSGetLobbyListResponse_Lobby) GetWeight() int64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

type CMsgClientMMSLobbyData_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamId     *uint64 `protobuf:"fixed64,1,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	PersonaName *string `protobuf:"bytes,2,opt,name=persona_name,json=personaName" json:"persona_name,omitempty"`
	Metadata    []byte  `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
}

func (x *CMsgClientMMSLobbyData_Member) Reset() {
	*x = CMsgClientMMSLobbyData_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientserver_mms_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientMMSLobbyData_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientMMSLobbyData_Member) ProtoMessage() {}

func (x *CMsgClientMMSLobbyData_Member) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientserver_mms_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientMMSLobbyData_Member.ProtoReflect.Descriptor instead.
func (*CMsgClientMMSLobbyData_Member) Descriptor() ([]byte, []int) {
	return file_steammessages_clientserver_mms_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CMsgClientMMSLobbyData_Member) GetSteamId() uint64 {
	if x != nil && x.SteamId != nil {
		return *x.SteamId
	}
	return 0
}

func (x *CMsgClientMMSLobbyData_Member) GetPersonaName() string {
	if x != nil && x.PersonaName != nil {
		return *x.PersonaName
	}
	return ""
}

func (x *CMsgClientMMSLobbyData_Member) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_steammessages_clientserver_mms_proto protoreflect.FileDescriptor

var file_steammessages_clientserver_mms_proto_rawDesc = []byte{
	0x0a, 0x24, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xdf, 0x01, 0x0a, 0x27, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x4d, 0x53, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x50, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x4d, 0x53, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x22, 0x7c, 0x0a, 0x20, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07,
	0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x78, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xdf, 0x03, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x4d, 0x53, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f,
	0x62, 0x62, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x4a, 0x6f,
	0x69, 0x6e, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a,
	0x62, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x56, 0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x4d, 0x53, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x22, 0x7b, 0x0a, 0x1f, 0x43,
	0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1b, 0x0a, 0x07, 0x65,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52,
	0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x90, 0x03, 0x0a, 0x19, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x75,
	0x6d, 0x4c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x3b, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43,
	0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x1a, 0x73, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x92, 0x03, 0x0a, 0x21,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x52, 0x07, 0x6c, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x1a, 0xf4, 0x01, 0x0a, 0x05, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0xfd, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x4d, 0x53, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x7d, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d,
	0x53, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x58, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x22, 0x99, 0x04, 0x0a, 0x16, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x65, 0x6c, 0x6c,
	0x69, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x1a, 0x62, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa9, 0x01, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c,
	0x6f, 0x62, 0x62, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xa5, 0x01, 0x0a, 0x19, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x4d, 0x53, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6c, 0x6f, 0x62,
	0x62, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x1a, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x53, 0x65, 0x74, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4e, 0x65, 0x77, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x22, 0x7e, 0x0a, 0x22, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x4d, 0x53, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x4d, 0x53, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x32, 0x22, 0xaa, 0x02, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x62, 0x62,
	0x79, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x64, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a,
	0x14, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x67, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x70, 0x22, 0xaa, 0x02, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70,
	0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0e, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x70, 0x22, 0xa2, 0x01, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x4d, 0x53, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12,
	0x22, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x54, 0x6f, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x12, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x73,
	0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x62,
	0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0xb1, 0x01, 0x0a, 0x23, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x4d, 0x53, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x4d,
	0x0a, 0x0c, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x45, 0x4d, 0x4d, 0x53, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x4d, 0x53, 0x4c, 0x6f,
	0x62, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x0b, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x90, 0x01,
	0x0a, 0x0f, 0x45, 0x4d, 0x4d, 0x53, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x4d, 0x4d, 0x53, 0x4c, 0x6f, 0x62, 0x62, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x4d, 0x4d, 0x53, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d,
	0x6b, 0x5f, 0x45, 0x4d, 0x4d, 0x53, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x02, 0x12,
	0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x4d, 0x4d, 0x53, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x03,
	0x42, 0x3f, 0x42, 0x21, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6d, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x80, 0x01,
	0x00,
}

var (
	file_steammessages_clientserver_mms_proto_rawDescOnce sync.Once
	file_steammessages_clientserver_mms_proto_rawDescData = file_steammessages_clientserver_mms_proto_rawDesc
)

func file_steammessages_clientserver_mms_proto_rawDescGZIP() []byte {
	file_steammessages_clientserver_mms_proto_rawDescOnce.Do(func() {
		file_steammessages_clientserver_mms_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_clientserver_mms_proto_rawDescData)
	})
	return file_steammessages_clientserver_mms_proto_rawDescData
}

var file_steammessages_clientserver_mms_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steammessages_clientserver_mms_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_steammessages_clientserver_mms_proto_goTypes = []interface{}{
	(EMMSLobbyStatus)(0),                            // 0: EMMSLobbyStatus
	(*CMsgClientMMSSetRatelimitPolicyOnClient)(nil), // 1: CMsgClientMMSSetRatelimitPolicyOnClient
	(*CMsgClientMMSCreateLobby)(nil),                // 2: CMsgClientMMSCreateLobby
	(*CMsgClientMMSCreateLobbyResponse)(nil),        // 3: CMsgClientMMSCreateLobbyResponse
	(*CMsgClientMMSJoinLobby)(nil),                  // 4: CMsgClientMMSJoinLobby
	(*CMsgClientMMSJoinLobbyResponse)(nil),          // 5: CMsgClientMMSJoinLobbyResponse
	(*CMsgClientMMSLeaveLobby)(nil),                 // 6: CMsgClientMMSLeaveLobby
	(*CMsgClientMMSLeaveLobbyResponse)(nil),         // 7: CMsgClientMMSLeaveLobbyResponse
	(*CMsgClientMMSGetLobbyList)(nil),               // 8: CMsgClientMMSGetLobbyList
	(*CMsgClientMMSGetLobbyListResponse)(nil),       // 9: CMsgClientMMSGetLobbyListResponse
	(*CMsgClientMMSSetLobbyData)(nil),               // 10: CMsgClientMMSSetLobbyData
	(*CMsgClientMMSSetLobbyDataResponse)(nil),       // 11: CMsgClientMMSSetLobbyDataResponse
	(*CMsgClientMMSGetLobbyData)(nil),               // 12: CMsgClientMMSGetLobbyData
	(*CMsgClientMMSLobbyData)(nil),                  // 13: CMsgClientMMSLobbyData
	(*CMsgClientMMSSendLobbyChatMsg)(nil),           // 14: CMsgClientMMSSendLobbyChatMsg
	(*CMsgClientMMSLobbyChatMsg)(nil),               // 15: CMsgClientMMSLobbyChatMsg
	(*CMsgClientMMSSetLobbyOwner)(nil),              // 16: CMsgClientMMSSetLobbyOwner
	(*CMsgClientMMSSetLobbyOwnerResponse)(nil),      // 17: CMsgClientMMSSetLobbyOwnerResponse
	(*CMsgClientMMSSetLobbyLinked)(nil),             // 18: CMsgClientMMSSetLobbyLinked
	(*CMsgClientMMSSetLobbyGameServer)(nil),         // 19: CMsgClientMMSSetLobbyGameServer
	(*CMsgClientMMSLobbyGameServerSet)(nil),         // 20: CMsgClientMMSLobbyGameServerSet
	(*CMsgClientMMSUserJoinedLobby)(nil),            // 21: CMsgClientMMSUserJoinedLobby
	(*CMsgClientMMSUserLeftLobby)(nil),              // 22: CMsgClientMMSUserLeftLobby
	(*CMsgClientMMSInviteToLobby)(nil),              // 23: CMsgClientMMSInviteToLobby
	(*CMsgClientMMSGetLobbyStatus)(nil),             // 24: CMsgClientMMSGetLobbyStatus
	(*CMsgClientMMSGetLobbyStatusResponse)(nil),     // 25: CMsgClientMMSGetLobbyStatusResponse
	(*CMsgClientMMSJoinLobbyResponse_Member)(nil),   // 26: CMsgClientMMSJoinLobbyResponse.Member
	(*CMsgClientMMSGetLobbyList_Filter)(nil),        // 27: CMsgClientMMSGetLobbyList.Filter
	(*CMsgClientMMSGetLobbyListResponse_Lobby)(nil), // 28: CMsgClientMMSGetLobbyListResponse.Lobby
	(*CMsgClientMMSLobbyData_Member)(nil),           // 29: CMsgClientMMSLobbyData.Member
	(*CMsgIPAddress)(nil),                           // 30: CMsgIPAddress
}
var file_steammessages_clientserver_mms_proto_depIdxs = []int32{
	30, // 0: CMsgClientMMSCreateLobby.public_ip:type_name -> CMsgIPAddress
	26, // 1: CMsgClientMMSJoinLobbyResponse.members:type_name -> CMsgClientMMSJoinLobbyResponse.Member
	27, // 2: CMsgClientMMSGetLobbyList.filters:type_name -> CMsgClientMMSGetLobbyList.Filter
	30, // 3: CMsgClientMMSGetLobbyList.public_ip:type_name -> CMsgIPAddress
	28, // 4: CMsgClientMMSGetLobbyListResponse.lobbies:type_name -> CMsgClientMMSGetLobbyListResponse.Lobby
	29, // 5: CMsgClientMMSLobbyData.members:type_name -> CMsgClientMMSLobbyData.Member
	30, // 6: CMsgClientMMSSetLobbyGameServer.game_server_ip:type_name -> CMsgIPAddress
	30, // 7: CMsgClientMMSLobbyGameServerSet.game_server_ip:type_name -> CMsgIPAddress
	0,  // 8: CMsgClientMMSGetLobbyStatusResponse.lobby_status:type_name -> EMMSLobbyStatus
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_steammessages_clientserver_mms_proto_init() }
func file_steammessages_clientserver_mms_proto_init() {
	if File_steammessages_clientserver_mms_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_clientserver_mms_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSSetRatelimitPolicyOnClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSCreateLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSCreateLobbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSJoinLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSJoinLobbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSLeaveLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSLeaveLobbyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSGetLobbyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSGetLobbyListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSSetLobbyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSSetLobbyDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSGetLobbyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSLobbyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSSendLobbyChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSLobbyChatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSSetLobbyOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSSetLobbyOwnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSSetLobbyLinked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSSetLobbyGameServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSLobbyGameServerSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSUserJoinedLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSUserLeftLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSInviteToLobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSGetLobbyStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSGetLobbyStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSJoinLobbyResponse_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSGetLobbyList_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSGetLobbyListResponse_Lobby); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientserver_mms_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientMMSLobbyData_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_clientserver_mms_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_clientserver_mms_proto_goTypes,
		DependencyIndexes: file_steammessages_clientserver_mms_proto_depIdxs,
		EnumInfos:         file_steammessages_clientserver_mms_proto_enumTypes,
		MessageInfos:      file_steammessages_clientserver_mms_proto_msgTypes,
	}.Build()
	File_steammessages_clientserver_mms_proto = out.File
	file_steammessages_clientserver_mms_proto_rawDesc = nil
	file_steammessages_clientserver_mms_proto_goTypes = nil
	file_steammessages_clientserver_mms_proto_depIdxs = nil
}
