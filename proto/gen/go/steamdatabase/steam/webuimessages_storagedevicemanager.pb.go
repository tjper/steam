// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: webuimessages_storagedevicemanager.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CStorageDeviceManager_IsServiceAvailable_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CStorageDeviceManager_IsServiceAvailable_Request) Reset() {
	*x = CStorageDeviceManager_IsServiceAvailable_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStorageDeviceManager_IsServiceAvailable_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStorageDeviceManager_IsServiceAvailable_Request) ProtoMessage() {}

func (x *CStorageDeviceManager_IsServiceAvailable_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStorageDeviceManager_IsServiceAvailable_Request.ProtoReflect.Descriptor instead.
func (*CStorageDeviceManager_IsServiceAvailable_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_storagedevicemanager_proto_rawDescGZIP(), []int{0}
}

type CStorageDeviceManager_IsServiceAvailable_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAvailable *bool `protobuf:"varint,1,opt,name=is_available,json=isAvailable" json:"is_available,omitempty"`
}

func (x *CStorageDeviceManager_IsServiceAvailable_Response) Reset() {
	*x = CStorageDeviceManager_IsServiceAvailable_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStorageDeviceManager_IsServiceAvailable_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStorageDeviceManager_IsServiceAvailable_Response) ProtoMessage() {}

func (x *CStorageDeviceManager_IsServiceAvailable_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStorageDeviceManager_IsServiceAvailable_Response.ProtoReflect.Descriptor instead.
func (*CStorageDeviceManager_IsServiceAvailable_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_storagedevicemanager_proto_rawDescGZIP(), []int{1}
}

func (x *CStorageDeviceManager_IsServiceAvailable_Response) GetIsAvailable() bool {
	if x != nil && x.IsAvailable != nil {
		return *x.IsAvailable
	}
	return false
}

type CStorageDeviceManagerDrive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *uint32                 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Model            *string                 `protobuf:"bytes,2,opt,name=model" json:"model,omitempty"`
	Vendor           *string                 `protobuf:"bytes,3,opt,name=vendor" json:"vendor,omitempty"`
	Serial           *string                 `protobuf:"bytes,4,opt,name=serial" json:"serial,omitempty"`
	IsEjectable      *bool                   `protobuf:"varint,5,opt,name=is_ejectable,json=isEjectable" json:"is_ejectable,omitempty"`
	SizeBytes        *uint64                 `protobuf:"varint,6,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	MediaType        *EStorageDriveMediaType `protobuf:"varint,7,opt,name=media_type,json=mediaType,enum=EStorageDriveMediaType,def=0" json:"media_type,omitempty"`
	IsUnformatted    *bool                   `protobuf:"varint,8,opt,name=is_unformatted,json=isUnformatted" json:"is_unformatted,omitempty"`
	AdoptStage       *EStorageFormatStage    `protobuf:"varint,9,opt,name=adopt_stage,json=adoptStage,enum=EStorageFormatStage,def=0" json:"adopt_stage,omitempty"`
	IsFormattable    *bool                   `protobuf:"varint,10,opt,name=is_formattable,json=isFormattable" json:"is_formattable,omitempty"`
	IsMediaAvailable *bool                   `protobuf:"varint,11,opt,name=is_media_available,json=isMediaAvailable" json:"is_media_available,omitempty"`
}

// Default values for CStorageDeviceManagerDrive fields.
const (
	Default_CStorageDeviceManagerDrive_Id         = uint32(0)
	Default_CStorageDeviceManagerDrive_MediaType  = EStorageDriveMediaType_k_EStorageDriveMediaType_Invalid
	Default_CStorageDeviceManagerDrive_AdoptStage = EStorageFormatStage_k_EStorageFormatStage_Invalid
)

func (x *CStorageDeviceManagerDrive) Reset() {
	*x = CStorageDeviceManagerDrive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStorageDeviceManagerDrive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStorageDeviceManagerDrive) ProtoMessage() {}

func (x *CStorageDeviceManagerDrive) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStorageDeviceManagerDrive.ProtoReflect.Descriptor instead.
func (*CStorageDeviceManagerDrive) Descriptor() ([]byte, []int) {
	return file_webuimessages_storagedevicemanager_proto_rawDescGZIP(), []int{2}
}

func (x *CStorageDeviceManagerDrive) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CStorageDeviceManagerDrive_Id
}

func (x *CStorageDeviceManagerDrive) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *CStorageDeviceManagerDrive) GetVendor() string {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return ""
}

func (x *CStorageDeviceManagerDrive) GetSerial() string {
	if x != nil && x.Serial != nil {
		return *x.Serial
	}
	return ""
}

func (x *CStorageDeviceManagerDrive) GetIsEjectable() bool {
	if x != nil && x.IsEjectable != nil {
		return *x.IsEjectable
	}
	return false
}

func (x *CStorageDeviceManagerDrive) GetSizeBytes() uint64 {
	if x != nil && x.SizeBytes != nil {
		return *x.SizeBytes
	}
	return 0
}

func (x *CStorageDeviceManagerDrive) GetMediaType() EStorageDriveMediaType {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return Default_CStorageDeviceManagerDrive_MediaType
}

func (x *CStorageDeviceManagerDrive) GetIsUnformatted() bool {
	if x != nil && x.IsUnformatted != nil {
		return *x.IsUnformatted
	}
	return false
}

func (x *CStorageDeviceManagerDrive) GetAdoptStage() EStorageFormatStage {
	if x != nil && x.AdoptStage != nil {
		return *x.AdoptStage
	}
	return Default_CStorageDeviceManagerDrive_AdoptStage
}

func (x *CStorageDeviceManagerDrive) GetIsFormattable() bool {
	if x != nil && x.IsFormattable != nil {
		return *x.IsFormattable
	}
	return false
}

func (x *CStorageDeviceManagerDrive) GetIsMediaAvailable() bool {
	if x != nil && x.IsMediaAvailable != nil {
		return *x.IsMediaAvailable
	}
	return false
}

type CStorageDeviceManagerBlockDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *uint32                      `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	DriveId        *uint32                      `protobuf:"varint,2,opt,name=drive_id,json=driveId,def=0" json:"drive_id,omitempty"`
	Path           *string                      `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	FriendlyPath   *string                      `protobuf:"bytes,4,opt,name=friendly_path,json=friendlyPath" json:"friendly_path,omitempty"`
	Label          *string                      `protobuf:"bytes,5,opt,name=label" json:"label,omitempty"`
	SizeBytes      *uint64                      `protobuf:"varint,6,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	IsFormattable  *bool                        `protobuf:"varint,7,opt,name=is_formattable,json=isFormattable" json:"is_formattable,omitempty"`
	IsReadOnly     *bool                        `protobuf:"varint,8,opt,name=is_read_only,json=isReadOnly" json:"is_read_only,omitempty"`
	IsRootDevice   *bool                        `protobuf:"varint,9,opt,name=is_root_device,json=isRootDevice" json:"is_root_device,omitempty"`
	ContentType    *EStorageBlockContentType    `protobuf:"varint,10,opt,name=content_type,json=contentType,enum=EStorageBlockContentType,def=0" json:"content_type,omitempty"`
	FilesystemType *EStorageBlockFileSystemType `protobuf:"varint,11,opt,name=filesystem_type,json=filesystemType,enum=EStorageBlockFileSystemType,def=0" json:"filesystem_type,omitempty"`
	MountPaths     []string                     `protobuf:"bytes,12,rep,name=mount_paths,json=mountPaths" json:"mount_paths,omitempty"`
	IsUnmounting   *bool                        `protobuf:"varint,13,opt,name=is_unmounting,json=isUnmounting" json:"is_unmounting,omitempty"`
}

// Default values for CStorageDeviceManagerBlockDevice fields.
const (
	Default_CStorageDeviceManagerBlockDevice_Id             = uint32(0)
	Default_CStorageDeviceManagerBlockDevice_DriveId        = uint32(0)
	Default_CStorageDeviceManagerBlockDevice_ContentType    = EStorageBlockContentType_k_EStorageBlockContentType_Invalid
	Default_CStorageDeviceManagerBlockDevice_FilesystemType = EStorageBlockFileSystemType_k_EStorageBlockFileSystemType_Invalid
)

func (x *CStorageDeviceManagerBlockDevice) Reset() {
	*x = CStorageDeviceManagerBlockDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStorageDeviceManagerBlockDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStorageDeviceManagerBlockDevice) ProtoMessage() {}

func (x *CStorageDeviceManagerBlockDevice) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStorageDeviceManagerBlockDevice.ProtoReflect.Descriptor instead.
func (*CStorageDeviceManagerBlockDevice) Descriptor() ([]byte, []int) {
	return file_webuimessages_storagedevicemanager_proto_rawDescGZIP(), []int{3}
}

func (x *CStorageDeviceManagerBlockDevice) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CStorageDeviceManagerBlockDevice_Id
}

func (x *CStorageDeviceManagerBlockDevice) GetDriveId() uint32 {
	if x != nil && x.DriveId != nil {
		return *x.DriveId
	}
	return Default_CStorageDeviceManagerBlockDevice_DriveId
}

func (x *CStorageDeviceManagerBlockDevice) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *CStorageDeviceManagerBlockDevice) GetFriendlyPath() string {
	if x != nil && x.FriendlyPath != nil {
		return *x.FriendlyPath
	}
	return ""
}

func (x *CStorageDeviceManagerBlockDevice) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *CStorageDeviceManagerBlockDevice) GetSizeBytes() uint64 {
	if x != nil && x.SizeBytes != nil {
		return *x.SizeBytes
	}
	return 0
}

func (x *CStorageDeviceManagerBlockDevice) GetIsFormattable() bool {
	if x != nil && x.IsFormattable != nil {
		return *x.IsFormattable
	}
	return false
}

func (x *CStorageDeviceManagerBlockDevice) GetIsReadOnly() bool {
	if x != nil && x.IsReadOnly != nil {
		return *x.IsReadOnly
	}
	return false
}

func (x *CStorageDeviceManagerBlockDevice) GetIsRootDevice() bool {
	if x != nil && x.IsRootDevice != nil {
		return *x.IsRootDevice
	}
	return false
}

func (x *CStorageDeviceManagerBlockDevice) GetContentType() EStorageBlockContentType {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return Default_CStorageDeviceManagerBlockDevice_ContentType
}

func (x *CStorageDeviceManagerBlockDevice) GetFilesystemType() EStorageBlockFileSystemType {
	if x != nil && x.FilesystemType != nil {
		return *x.FilesystemType
	}
	return Default_CStorageDeviceManagerBlockDevice_FilesystemType
}

func (x *CStorageDeviceManagerBlockDevice) GetMountPaths() []string {
	if x != nil {
		return x.MountPaths
	}
	return nil
}

func (x *CStorageDeviceManagerBlockDevice) GetIsUnmounting() bool {
	if x != nil && x.IsUnmounting != nil {
		return *x.IsUnmounting
	}
	return false
}

type CStorageDeviceManagerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drives             []*CStorageDeviceManagerDrive       `protobuf:"bytes,1,rep,name=drives" json:"drives,omitempty"`
	BlockDevices       []*CStorageDeviceManagerBlockDevice `protobuf:"bytes,2,rep,name=block_devices,json=blockDevices" json:"block_devices,omitempty"`
	IsUnmountSupported *bool                               `protobuf:"varint,3,opt,name=is_unmount_supported,json=isUnmountSupported" json:"is_unmount_supported,omitempty"`
	IsTrimSupported    *bool                               `protobuf:"varint,4,opt,name=is_trim_supported,json=isTrimSupported" json:"is_trim_supported,omitempty"`
	IsTrimRunning      *bool                               `protobuf:"varint,5,opt,name=is_trim_running,json=isTrimRunning" json:"is_trim_running,omitempty"`
	IsAdoptSupported   *bool                               `protobuf:"varint,6,opt,name=is_adopt_supported,json=isAdoptSupported" json:"is_adopt_supported,omitempty"`
}

func (x *CStorageDeviceManagerState) Reset() {
	*x = CStorageDeviceManagerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStorageDeviceManagerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStorageDeviceManagerState) ProtoMessage() {}

func (x *CStorageDeviceManagerState) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStorageDeviceManagerState.ProtoReflect.Descriptor instead.
func (*CStorageDeviceManagerState) Descriptor() ([]byte, []int) {
	return file_webuimessages_storagedevicemanager_proto_rawDescGZIP(), []int{4}
}

func (x *CStorageDeviceManagerState) GetDrives() []*CStorageDeviceManagerDrive {
	if x != nil {
		return x.Drives
	}
	return nil
}

func (x *CStorageDeviceManagerState) GetBlockDevices() []*CStorageDeviceManagerBlockDevice {
	if x != nil {
		return x.BlockDevices
	}
	return nil
}

func (x *CStorageDeviceManagerState) GetIsUnmountSupported() bool {
	if x != nil && x.IsUnmountSupported != nil {
		return *x.IsUnmountSupported
	}
	return false
}

func (x *CStorageDeviceManagerState) GetIsTrimSupported() bool {
	if x != nil && x.IsTrimSupported != nil {
		return *x.IsTrimSupported
	}
	return false
}

func (x *CStorageDeviceManagerState) GetIsTrimRunning() bool {
	if x != nil && x.IsTrimRunning != nil {
		return *x.IsTrimRunning
	}
	return false
}

func (x *CStorageDeviceManagerState) GetIsAdoptSupported() bool {
	if x != nil && x.IsAdoptSupported != nil {
		return *x.IsAdoptSupported
	}
	return false
}

type CStorageDeviceManager_GetState_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CStorageDeviceManager_GetState_Request) Reset() {
	*x = CStorageDeviceManager_GetState_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStorageDeviceManager_GetState_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStorageDeviceManager_GetState_Request) ProtoMessage() {}

func (x *CStorageDeviceManager_GetState_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStorageDeviceManager_GetState_Request.ProtoReflect.Descriptor instead.
func (*CStorageDeviceManager_GetState_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_storagedevicemanager_proto_rawDescGZIP(), []int{5}
}

type CStorageDeviceManager_GetState_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *CStorageDeviceManagerState `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
}

func (x *CStorageDeviceManager_GetState_Response) Reset() {
	*x = CStorageDeviceManager_GetState_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStorageDeviceManager_GetState_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStorageDeviceManager_GetState_Response) ProtoMessage() {}

func (x *CStorageDeviceManager_GetState_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStorageDeviceManager_GetState_Response.ProtoReflect.Descriptor instead.
func (*CStorageDeviceManager_GetState_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_storagedevicemanager_proto_rawDescGZIP(), []int{6}
}

func (x *CStorageDeviceManager_GetState_Response) GetState() *CStorageDeviceManagerState {
	if x != nil {
		return x.State
	}
	return nil
}

type CStorageDeviceManager_StateChanged_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CStorageDeviceManager_StateChanged_Notification) Reset() {
	*x = CStorageDeviceManager_StateChanged_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStorageDeviceManager_StateChanged_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStorageDeviceManager_StateChanged_Notification) ProtoMessage() {}

func (x *CStorageDeviceManager_StateChanged_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStorageDeviceManager_StateChanged_Notification.ProtoReflect.Descriptor instead.
func (*CStorageDeviceManager_StateChanged_Notification) Descriptor() ([]byte, []int) {
	return file_webuimessages_storagedevicemanager_proto_rawDescGZIP(), []int{7}
}

type CStorageDeviceManager_Eject_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriveId *uint32 `protobuf:"varint,1,opt,name=drive_id,json=driveId" json:"drive_id,omitempty"`
}

func (x *CStorageDeviceManager_Eject_Request) Reset() {
	*x = CStorageDeviceManager_Eject_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStorageDeviceManager_Eject_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStorageDeviceManager_Eject_Request) ProtoMessage() {}

func (x *CStorageDeviceManager_Eject_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStorageDeviceManager_Eject_Request.ProtoReflect.Descriptor instead.
func (*CStorageDeviceManager_Eject_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_storagedevicemanager_proto_rawDescGZIP(), []int{8}
}

func (x *CStorageDeviceManager_Eject_Request) GetDriveId() uint32 {
	if x != nil && x.DriveId != nil {
		return *x.DriveId
	}
	return 0
}

type CStorageDeviceManager_Eject_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CStorageDeviceManager_Eject_Response) Reset() {
	*x = CStorageDeviceManager_Eject_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStorageDeviceManager_Eject_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStorageDeviceManager_Eject_Response) ProtoMessage() {}

func (x *CStorageDeviceManager_Eject_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStorageDeviceManager_Eject_Response.ProtoReflect.Descriptor instead.
func (*CStorageDeviceManager_Eject_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_storagedevicemanager_proto_rawDescGZIP(), []int{9}
}

type CStorageDeviceManager_Adopt_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DriveId *uint32 `protobuf:"varint,1,opt,name=drive_id,json=driveId" json:"drive_id,omitempty"`
	Label   *string `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
}

func (x *CStorageDeviceManager_Adopt_Request) Reset() {
	*x = CStorageDeviceManager_Adopt_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStorageDeviceManager_Adopt_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStorageDeviceManager_Adopt_Request) ProtoMessage() {}

func (x *CStorageDeviceManager_Adopt_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStorageDeviceManager_Adopt_Request.ProtoReflect.Descriptor instead.
func (*CStorageDeviceManager_Adopt_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_storagedevicemanager_proto_rawDescGZIP(), []int{10}
}

func (x *CStorageDeviceManager_Adopt_Request) GetDriveId() uint32 {
	if x != nil && x.DriveId != nil {
		return *x.DriveId
	}
	return 0
}

func (x *CStorageDeviceManager_Adopt_Request) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

type CStorageDeviceManager_Adopt_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CStorageDeviceManager_Adopt_Response) Reset() {
	*x = CStorageDeviceManager_Adopt_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStorageDeviceManager_Adopt_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStorageDeviceManager_Adopt_Response) ProtoMessage() {}

func (x *CStorageDeviceManager_Adopt_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStorageDeviceManager_Adopt_Response.ProtoReflect.Descriptor instead.
func (*CStorageDeviceManager_Adopt_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_storagedevicemanager_proto_rawDescGZIP(), []int{11}
}

type CStorageDeviceManager_Format_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockDeviceId *uint32 `protobuf:"varint,1,opt,name=block_device_id,json=blockDeviceId" json:"block_device_id,omitempty"`
}

func (x *CStorageDeviceManager_Format_Request) Reset() {
	*x = CStorageDeviceManager_Format_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStorageDeviceManager_Format_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStorageDeviceManager_Format_Request) ProtoMessage() {}

func (x *CStorageDeviceManager_Format_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStorageDeviceManager_Format_Request.ProtoReflect.Descriptor instead.
func (*CStorageDeviceManager_Format_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_storagedevicemanager_proto_rawDescGZIP(), []int{12}
}

func (x *CStorageDeviceManager_Format_Request) GetBlockDeviceId() uint32 {
	if x != nil && x.BlockDeviceId != nil {
		return *x.BlockDeviceId
	}
	return 0
}

type CStorageDeviceManager_Format_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CStorageDeviceManager_Format_Response) Reset() {
	*x = CStorageDeviceManager_Format_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStorageDeviceManager_Format_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStorageDeviceManager_Format_Response) ProtoMessage() {}

func (x *CStorageDeviceManager_Format_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStorageDeviceManager_Format_Response.ProtoReflect.Descriptor instead.
func (*CStorageDeviceManager_Format_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_storagedevicemanager_proto_rawDescGZIP(), []int{13}
}

type CStorageDeviceManager_Unmount_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockDeviceId *uint32 `protobuf:"varint,1,opt,name=block_device_id,json=blockDeviceId" json:"block_device_id,omitempty"`
}

func (x *CStorageDeviceManager_Unmount_Request) Reset() {
	*x = CStorageDeviceManager_Unmount_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStorageDeviceManager_Unmount_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStorageDeviceManager_Unmount_Request) ProtoMessage() {}

func (x *CStorageDeviceManager_Unmount_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStorageDeviceManager_Unmount_Request.ProtoReflect.Descriptor instead.
func (*CStorageDeviceManager_Unmount_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_storagedevicemanager_proto_rawDescGZIP(), []int{14}
}

func (x *CStorageDeviceManager_Unmount_Request) GetBlockDeviceId() uint32 {
	if x != nil && x.BlockDeviceId != nil {
		return *x.BlockDeviceId
	}
	return 0
}

type CStorageDeviceManager_Unmount_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CStorageDeviceManager_Unmount_Response) Reset() {
	*x = CStorageDeviceManager_Unmount_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStorageDeviceManager_Unmount_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStorageDeviceManager_Unmount_Response) ProtoMessage() {}

func (x *CStorageDeviceManager_Unmount_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStorageDeviceManager_Unmount_Response.ProtoReflect.Descriptor instead.
func (*CStorageDeviceManager_Unmount_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_storagedevicemanager_proto_rawDescGZIP(), []int{15}
}

type CStorageDeviceManager_TrimAll_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CStorageDeviceManager_TrimAll_Request) Reset() {
	*x = CStorageDeviceManager_TrimAll_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStorageDeviceManager_TrimAll_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStorageDeviceManager_TrimAll_Request) ProtoMessage() {}

func (x *CStorageDeviceManager_TrimAll_Request) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStorageDeviceManager_TrimAll_Request.ProtoReflect.Descriptor instead.
func (*CStorageDeviceManager_TrimAll_Request) Descriptor() ([]byte, []int) {
	return file_webuimessages_storagedevicemanager_proto_rawDescGZIP(), []int{16}
}

type CStorageDeviceManager_TrimAll_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CStorageDeviceManager_TrimAll_Response) Reset() {
	*x = CStorageDeviceManager_TrimAll_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStorageDeviceManager_TrimAll_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStorageDeviceManager_TrimAll_Response) ProtoMessage() {}

func (x *CStorageDeviceManager_TrimAll_Response) ProtoReflect() protoreflect.Message {
	mi := &file_webuimessages_storagedevicemanager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStorageDeviceManager_TrimAll_Response.ProtoReflect.Descriptor instead.
func (*CStorageDeviceManager_TrimAll_Response) Descriptor() ([]byte, []int) {
	return file_webuimessages_storagedevicemanager_proto_rawDescGZIP(), []int{17}
}

var File_webuimessages_storagedevicemanager_proto protoreflect.FileDescriptor

var file_webuimessages_storagedevicemanager_proto_rawDesc = []byte{
	0x0a, 0x28, 0x77, 0x65, 0x62, 0x75, 0x69, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x77, 0x65, 0x62, 0x75, 0x69, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x30, 0x43,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x49, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x56, 0x0a, 0x31, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x49, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xe3, 0x03, 0x0a, 0x1a, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x58, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x73, 0x5f, 0x75, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x55, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74,
	0x65, 0x64, 0x12, 0x54, 0x0a, 0x0b, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x3a, 0x1d, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0a, 0x61, 0x64,
	0x6f, 0x70, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xc6, 0x04,
	0x0a, 0x20, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x6c, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x60, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x6c, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x45, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x55, 0x6e, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xcd, 0x02, 0x0a, 0x1a, 0x43, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x69, 0x73, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x6d, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x73, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x54, 0x72, 0x69,
	0x6d, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x61,
	0x64, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x41, 0x64, 0x6f, 0x70, 0x74, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x5c, 0x0a, 0x27, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x31,
	0x0a, 0x2f, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x40, 0x0a, 0x23, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x45, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x49, 0x64, 0x22, 0x26, 0x0a, 0x24, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x45, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x23, 0x43,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x41, 0x64, 0x6f, 0x70, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x72, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x22, 0x26, 0x0a, 0x24, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x41, 0x64, 0x6f,
	0x70, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x24, 0x43,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x43,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x0a, 0x25, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x55, 0x6e,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x55,
	0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x27, 0x0a, 0x25, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x54, 0x72, 0x69, 0x6d, 0x41, 0x6c, 0x6c,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x54, 0x72, 0x69, 0x6d, 0x41, 0x6c, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x8f, 0x06, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x7b, 0x0a, 0x12, 0x49,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x31, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x49, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x49, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x30, 0x2e,
	0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x10, 0x2e, 0x57, 0x65, 0x62, 0x55, 0x49, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x05, 0x41, 0x64, 0x6f, 0x70, 0x74, 0x12, 0x24, 0x2e, 0x43, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5f, 0x41, 0x64, 0x6f, 0x70, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x41, 0x64, 0x6f, 0x70, 0x74, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x45, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x24, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x45,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a,
	0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x25, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x07, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x43, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x5f, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5a, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x6d, 0x41, 0x6c, 0x6c, 0x12, 0x26, 0x2e,
	0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x54, 0x72, 0x69, 0x6d, 0x41, 0x6c, 0x6c, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x54, 0x72,
	0x69, 0x6d, 0x41, 0x6c, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x04,
	0x80, 0x97, 0x22, 0x01, 0x42, 0x44, 0x42, 0x26, 0x57, 0x65, 0x62, 0x75, 0x69, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x01,
	0x50, 0x01, 0x5a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x80, 0x01, 0x01,
}

var (
	file_webuimessages_storagedevicemanager_proto_rawDescOnce sync.Once
	file_webuimessages_storagedevicemanager_proto_rawDescData = file_webuimessages_storagedevicemanager_proto_rawDesc
)

func file_webuimessages_storagedevicemanager_proto_rawDescGZIP() []byte {
	file_webuimessages_storagedevicemanager_proto_rawDescOnce.Do(func() {
		file_webuimessages_storagedevicemanager_proto_rawDescData = protoimpl.X.CompressGZIP(file_webuimessages_storagedevicemanager_proto_rawDescData)
	})
	return file_webuimessages_storagedevicemanager_proto_rawDescData
}

var file_webuimessages_storagedevicemanager_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_webuimessages_storagedevicemanager_proto_goTypes = []interface{}{
	(*CStorageDeviceManager_IsServiceAvailable_Request)(nil),  // 0: CStorageDeviceManager_IsServiceAvailable_Request
	(*CStorageDeviceManager_IsServiceAvailable_Response)(nil), // 1: CStorageDeviceManager_IsServiceAvailable_Response
	(*CStorageDeviceManagerDrive)(nil),                        // 2: CStorageDeviceManagerDrive
	(*CStorageDeviceManagerBlockDevice)(nil),                  // 3: CStorageDeviceManagerBlockDevice
	(*CStorageDeviceManagerState)(nil),                        // 4: CStorageDeviceManagerState
	(*CStorageDeviceManager_GetState_Request)(nil),            // 5: CStorageDeviceManager_GetState_Request
	(*CStorageDeviceManager_GetState_Response)(nil),           // 6: CStorageDeviceManager_GetState_Response
	(*CStorageDeviceManager_StateChanged_Notification)(nil),   // 7: CStorageDeviceManager_StateChanged_Notification
	(*CStorageDeviceManager_Eject_Request)(nil),               // 8: CStorageDeviceManager_Eject_Request
	(*CStorageDeviceManager_Eject_Response)(nil),              // 9: CStorageDeviceManager_Eject_Response
	(*CStorageDeviceManager_Adopt_Request)(nil),               // 10: CStorageDeviceManager_Adopt_Request
	(*CStorageDeviceManager_Adopt_Response)(nil),              // 11: CStorageDeviceManager_Adopt_Response
	(*CStorageDeviceManager_Format_Request)(nil),              // 12: CStorageDeviceManager_Format_Request
	(*CStorageDeviceManager_Format_Response)(nil),             // 13: CStorageDeviceManager_Format_Response
	(*CStorageDeviceManager_Unmount_Request)(nil),             // 14: CStorageDeviceManager_Unmount_Request
	(*CStorageDeviceManager_Unmount_Response)(nil),            // 15: CStorageDeviceManager_Unmount_Response
	(*CStorageDeviceManager_TrimAll_Request)(nil),             // 16: CStorageDeviceManager_TrimAll_Request
	(*CStorageDeviceManager_TrimAll_Response)(nil),            // 17: CStorageDeviceManager_TrimAll_Response
	(EStorageDriveMediaType)(0),                               // 18: EStorageDriveMediaType
	(EStorageFormatStage)(0),                                  // 19: EStorageFormatStage
	(EStorageBlockContentType)(0),                             // 20: EStorageBlockContentType
	(EStorageBlockFileSystemType)(0),                          // 21: EStorageBlockFileSystemType
	(*WebUINoResponse)(nil),                                   // 22: WebUINoResponse
}
var file_webuimessages_storagedevicemanager_proto_depIdxs = []int32{
	18, // 0: CStorageDeviceManagerDrive.media_type:type_name -> EStorageDriveMediaType
	19, // 1: CStorageDeviceManagerDrive.adopt_stage:type_name -> EStorageFormatStage
	20, // 2: CStorageDeviceManagerBlockDevice.content_type:type_name -> EStorageBlockContentType
	21, // 3: CStorageDeviceManagerBlockDevice.filesystem_type:type_name -> EStorageBlockFileSystemType
	2,  // 4: CStorageDeviceManagerState.drives:type_name -> CStorageDeviceManagerDrive
	3,  // 5: CStorageDeviceManagerState.block_devices:type_name -> CStorageDeviceManagerBlockDevice
	4,  // 6: CStorageDeviceManager_GetState_Response.state:type_name -> CStorageDeviceManagerState
	0,  // 7: StorageDeviceManager.IsServiceAvailable:input_type -> CStorageDeviceManager_IsServiceAvailable_Request
	5,  // 8: StorageDeviceManager.GetState:input_type -> CStorageDeviceManager_GetState_Request
	7,  // 9: StorageDeviceManager.NotifyStateChanged:input_type -> CStorageDeviceManager_StateChanged_Notification
	10, // 10: StorageDeviceManager.Adopt:input_type -> CStorageDeviceManager_Adopt_Request
	8,  // 11: StorageDeviceManager.Eject:input_type -> CStorageDeviceManager_Eject_Request
	12, // 12: StorageDeviceManager.Format:input_type -> CStorageDeviceManager_Format_Request
	14, // 13: StorageDeviceManager.Unmount:input_type -> CStorageDeviceManager_Unmount_Request
	16, // 14: StorageDeviceManager.TrimAll:input_type -> CStorageDeviceManager_TrimAll_Request
	1,  // 15: StorageDeviceManager.IsServiceAvailable:output_type -> CStorageDeviceManager_IsServiceAvailable_Response
	6,  // 16: StorageDeviceManager.GetState:output_type -> CStorageDeviceManager_GetState_Response
	22, // 17: StorageDeviceManager.NotifyStateChanged:output_type -> WebUINoResponse
	11, // 18: StorageDeviceManager.Adopt:output_type -> CStorageDeviceManager_Adopt_Response
	9,  // 19: StorageDeviceManager.Eject:output_type -> CStorageDeviceManager_Eject_Response
	13, // 20: StorageDeviceManager.Format:output_type -> CStorageDeviceManager_Format_Response
	15, // 21: StorageDeviceManager.Unmount:output_type -> CStorageDeviceManager_Unmount_Response
	17, // 22: StorageDeviceManager.TrimAll:output_type -> CStorageDeviceManager_TrimAll_Response
	15, // [15:23] is the sub-list for method output_type
	7,  // [7:15] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_webuimessages_storagedevicemanager_proto_init() }
func file_webuimessages_storagedevicemanager_proto_init() {
	if File_webuimessages_storagedevicemanager_proto != nil {
		return
	}
	file_enums_proto_init()
	file_steammessages_base_proto_init()
	file_webuimessages_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_webuimessages_storagedevicemanager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStorageDeviceManager_IsServiceAvailable_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_storagedevicemanager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStorageDeviceManager_IsServiceAvailable_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_storagedevicemanager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStorageDeviceManagerDrive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_storagedevicemanager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStorageDeviceManagerBlockDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_storagedevicemanager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStorageDeviceManagerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_storagedevicemanager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStorageDeviceManager_GetState_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_storagedevicemanager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStorageDeviceManager_GetState_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_storagedevicemanager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStorageDeviceManager_StateChanged_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_storagedevicemanager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStorageDeviceManager_Eject_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_storagedevicemanager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStorageDeviceManager_Eject_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_storagedevicemanager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStorageDeviceManager_Adopt_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_storagedevicemanager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStorageDeviceManager_Adopt_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_storagedevicemanager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStorageDeviceManager_Format_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_storagedevicemanager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStorageDeviceManager_Format_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_storagedevicemanager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStorageDeviceManager_Unmount_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_storagedevicemanager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStorageDeviceManager_Unmount_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_storagedevicemanager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStorageDeviceManager_TrimAll_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webuimessages_storagedevicemanager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStorageDeviceManager_TrimAll_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_webuimessages_storagedevicemanager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_webuimessages_storagedevicemanager_proto_goTypes,
		DependencyIndexes: file_webuimessages_storagedevicemanager_proto_depIdxs,
		MessageInfos:      file_webuimessages_storagedevicemanager_proto_msgTypes,
	}.Build()
	File_webuimessages_storagedevicemanager_proto = out.File
	file_webuimessages_storagedevicemanager_proto_rawDesc = nil
	file_webuimessages_storagedevicemanager_proto_goTypes = nil
	file_webuimessages_storagedevicemanager_proto_depIdxs = nil
}
