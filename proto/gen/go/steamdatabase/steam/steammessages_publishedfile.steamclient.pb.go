// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: steammessages_publishedfile.steamclient.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EPublishedFileRevision int32

const (
	EPublishedFileRevision_k_EPublishedFileRevision_Default                EPublishedFileRevision = 0
	EPublishedFileRevision_k_EPublishedFileRevision_Latest                 EPublishedFileRevision = 1
	EPublishedFileRevision_k_EPublishedFileRevision_ApprovedSnapshot       EPublishedFileRevision = 2
	EPublishedFileRevision_k_EPublishedFileRevision_ApprovedSnapshot_China EPublishedFileRevision = 3
	EPublishedFileRevision_k_EPublishedFileRevision_RejectedSnapshot       EPublishedFileRevision = 4
	EPublishedFileRevision_k_EPublishedFileRevision_RejectedSnapshot_China EPublishedFileRevision = 5
)

// Enum value maps for EPublishedFileRevision.
var (
	EPublishedFileRevision_name = map[int32]string{
		0: "k_EPublishedFileRevision_Default",
		1: "k_EPublishedFileRevision_Latest",
		2: "k_EPublishedFileRevision_ApprovedSnapshot",
		3: "k_EPublishedFileRevision_ApprovedSnapshot_China",
		4: "k_EPublishedFileRevision_RejectedSnapshot",
		5: "k_EPublishedFileRevision_RejectedSnapshot_China",
	}
	EPublishedFileRevision_value = map[string]int32{
		"k_EPublishedFileRevision_Default":                0,
		"k_EPublishedFileRevision_Latest":                 1,
		"k_EPublishedFileRevision_ApprovedSnapshot":       2,
		"k_EPublishedFileRevision_ApprovedSnapshot_China": 3,
		"k_EPublishedFileRevision_RejectedSnapshot":       4,
		"k_EPublishedFileRevision_RejectedSnapshot_China": 5,
	}
)

func (x EPublishedFileRevision) Enum() *EPublishedFileRevision {
	p := new(EPublishedFileRevision)
	*p = x
	return p
}

func (x EPublishedFileRevision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPublishedFileRevision) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_publishedfile_steamclient_proto_enumTypes[0].Descriptor()
}

func (EPublishedFileRevision) Type() protoreflect.EnumType {
	return &file_steammessages_publishedfile_steamclient_proto_enumTypes[0]
}

func (x EPublishedFileRevision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPublishedFileRevision) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPublishedFileRevision(num)
	return nil
}

// Deprecated: Use EPublishedFileRevision.Descriptor instead.
func (EPublishedFileRevision) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{0}
}

type EPublishedFileForSaleStatus int32

const (
	EPublishedFileForSaleStatus_k_PFFSS_NotForSale        EPublishedFileForSaleStatus = 0
	EPublishedFileForSaleStatus_k_PFFSS_PendingApproval   EPublishedFileForSaleStatus = 1
	EPublishedFileForSaleStatus_k_PFFSS_ApprovedForSale   EPublishedFileForSaleStatus = 2
	EPublishedFileForSaleStatus_k_PFFSS_RejectedForSale   EPublishedFileForSaleStatus = 3
	EPublishedFileForSaleStatus_k_PFFSS_NoLongerForSale   EPublishedFileForSaleStatus = 4
	EPublishedFileForSaleStatus_k_PFFSS_TentativeApproval EPublishedFileForSaleStatus = 5
)

// Enum value maps for EPublishedFileForSaleStatus.
var (
	EPublishedFileForSaleStatus_name = map[int32]string{
		0: "k_PFFSS_NotForSale",
		1: "k_PFFSS_PendingApproval",
		2: "k_PFFSS_ApprovedForSale",
		3: "k_PFFSS_RejectedForSale",
		4: "k_PFFSS_NoLongerForSale",
		5: "k_PFFSS_TentativeApproval",
	}
	EPublishedFileForSaleStatus_value = map[string]int32{
		"k_PFFSS_NotForSale":        0,
		"k_PFFSS_PendingApproval":   1,
		"k_PFFSS_ApprovedForSale":   2,
		"k_PFFSS_RejectedForSale":   3,
		"k_PFFSS_NoLongerForSale":   4,
		"k_PFFSS_TentativeApproval": 5,
	}
)

func (x EPublishedFileForSaleStatus) Enum() *EPublishedFileForSaleStatus {
	p := new(EPublishedFileForSaleStatus)
	*p = x
	return p
}

func (x EPublishedFileForSaleStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPublishedFileForSaleStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_publishedfile_steamclient_proto_enumTypes[1].Descriptor()
}

func (EPublishedFileForSaleStatus) Type() protoreflect.EnumType {
	return &file_steammessages_publishedfile_steamclient_proto_enumTypes[1]
}

func (x EPublishedFileForSaleStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EPublishedFileForSaleStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EPublishedFileForSaleStatus(num)
	return nil
}

// Deprecated: Use EPublishedFileForSaleStatus.Descriptor instead.
func (EPublishedFileForSaleStatus) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{1}
}

type CPublishedFile_Vote_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	VoteUp          *bool   `protobuf:"varint,2,opt,name=vote_up,json=voteUp" json:"vote_up,omitempty"`
}

func (x *CPublishedFile_Vote_Request) Reset() {
	*x = CPublishedFile_Vote_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Vote_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Vote_Request) ProtoMessage() {}

func (x *CPublishedFile_Vote_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Vote_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Vote_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CPublishedFile_Vote_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_Vote_Request) GetVoteUp() bool {
	if x != nil && x.VoteUp != nil {
		return *x.VoteUp
	}
	return false
}

type CPublishedFile_Vote_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPublishedFile_Vote_Response) Reset() {
	*x = CPublishedFile_Vote_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Vote_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Vote_Response) ProtoMessage() {}

func (x *CPublishedFile_Vote_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Vote_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Vote_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{1}
}

type CPublishedFile_Subscribe_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	ListType        *uint32 `protobuf:"varint,2,opt,name=list_type,json=listType" json:"list_type,omitempty"`
	Appid           *int32  `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	NotifyClient    *bool   `protobuf:"varint,4,opt,name=notify_client,json=notifyClient" json:"notify_client,omitempty"`
}

func (x *CPublishedFile_Subscribe_Request) Reset() {
	*x = CPublishedFile_Subscribe_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Subscribe_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Subscribe_Request) ProtoMessage() {}

func (x *CPublishedFile_Subscribe_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Subscribe_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Subscribe_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CPublishedFile_Subscribe_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_Subscribe_Request) GetListType() uint32 {
	if x != nil && x.ListType != nil {
		return *x.ListType
	}
	return 0
}

func (x *CPublishedFile_Subscribe_Request) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_Subscribe_Request) GetNotifyClient() bool {
	if x != nil && x.NotifyClient != nil {
		return *x.NotifyClient
	}
	return false
}

type CPublishedFile_Subscribe_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPublishedFile_Subscribe_Response) Reset() {
	*x = CPublishedFile_Subscribe_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Subscribe_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Subscribe_Response) ProtoMessage() {}

func (x *CPublishedFile_Subscribe_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Subscribe_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Subscribe_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{3}
}

type CPublishedFile_Unsubscribe_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	ListType        *uint32 `protobuf:"varint,2,opt,name=list_type,json=listType" json:"list_type,omitempty"`
	Appid           *int32  `protobuf:"varint,3,opt,name=appid" json:"appid,omitempty"`
	NotifyClient    *bool   `protobuf:"varint,4,opt,name=notify_client,json=notifyClient" json:"notify_client,omitempty"`
}

func (x *CPublishedFile_Unsubscribe_Request) Reset() {
	*x = CPublishedFile_Unsubscribe_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Unsubscribe_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Unsubscribe_Request) ProtoMessage() {}

func (x *CPublishedFile_Unsubscribe_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Unsubscribe_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Unsubscribe_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CPublishedFile_Unsubscribe_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_Unsubscribe_Request) GetListType() uint32 {
	if x != nil && x.ListType != nil {
		return *x.ListType
	}
	return 0
}

func (x *CPublishedFile_Unsubscribe_Request) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_Unsubscribe_Request) GetNotifyClient() bool {
	if x != nil && x.NotifyClient != nil {
		return *x.NotifyClient
	}
	return false
}

type CPublishedFile_Unsubscribe_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPublishedFile_Unsubscribe_Response) Reset() {
	*x = CPublishedFile_Unsubscribe_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Unsubscribe_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Unsubscribe_Response) ProtoMessage() {}

func (x *CPublishedFile_Unsubscribe_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Unsubscribe_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Unsubscribe_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{5}
}

type CPublishedFile_CanSubscribe_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
}

func (x *CPublishedFile_CanSubscribe_Request) Reset() {
	*x = CPublishedFile_CanSubscribe_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_CanSubscribe_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_CanSubscribe_Request) ProtoMessage() {}

func (x *CPublishedFile_CanSubscribe_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_CanSubscribe_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_CanSubscribe_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CPublishedFile_CanSubscribe_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

type CPublishedFile_CanSubscribe_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanSubscribe *bool `protobuf:"varint,1,opt,name=can_subscribe,json=canSubscribe" json:"can_subscribe,omitempty"`
}

func (x *CPublishedFile_CanSubscribe_Response) Reset() {
	*x = CPublishedFile_CanSubscribe_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_CanSubscribe_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_CanSubscribe_Response) ProtoMessage() {}

func (x *CPublishedFile_CanSubscribe_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_CanSubscribe_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_CanSubscribe_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CPublishedFile_CanSubscribe_Response) GetCanSubscribe() bool {
	if x != nil && x.CanSubscribe != nil {
		return *x.CanSubscribe
	}
	return false
}

type CPublishedFile_GetSubSectionData_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid    *uint64                 `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	ForTableOfContents *bool                   `protobuf:"varint,2,opt,name=for_table_of_contents,json=forTableOfContents" json:"for_table_of_contents,omitempty"`
	SpecificSectionid  *uint64                 `protobuf:"varint,3,opt,name=specific_sectionid,json=specificSectionid" json:"specific_sectionid,omitempty"`
	DesiredRevision    *EPublishedFileRevision `protobuf:"varint,4,opt,name=desired_revision,json=desiredRevision,enum=EPublishedFileRevision,def=0" json:"desired_revision,omitempty"`
}

// Default values for CPublishedFile_GetSubSectionData_Request fields.
const (
	Default_CPublishedFile_GetSubSectionData_Request_DesiredRevision = EPublishedFileRevision_k_EPublishedFileRevision_Default
)

func (x *CPublishedFile_GetSubSectionData_Request) Reset() {
	*x = CPublishedFile_GetSubSectionData_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetSubSectionData_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetSubSectionData_Request) ProtoMessage() {}

func (x *CPublishedFile_GetSubSectionData_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetSubSectionData_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetSubSectionData_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CPublishedFile_GetSubSectionData_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_GetSubSectionData_Request) GetForTableOfContents() bool {
	if x != nil && x.ForTableOfContents != nil {
		return *x.ForTableOfContents
	}
	return false
}

func (x *CPublishedFile_GetSubSectionData_Request) GetSpecificSectionid() uint64 {
	if x != nil && x.SpecificSectionid != nil {
		return *x.SpecificSectionid
	}
	return 0
}

func (x *CPublishedFile_GetSubSectionData_Request) GetDesiredRevision() EPublishedFileRevision {
	if x != nil && x.DesiredRevision != nil {
		return *x.DesiredRevision
	}
	return Default_CPublishedFile_GetSubSectionData_Request_DesiredRevision
}

type PublishedFileSubSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sectionid       *uint64 `protobuf:"varint,1,opt,name=sectionid" json:"sectionid,omitempty"`
	Title           *string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	DescriptionText *string `protobuf:"bytes,3,opt,name=description_text,json=descriptionText" json:"description_text,omitempty"`
	SortOrder       *uint32 `protobuf:"varint,4,opt,name=sort_order,json=sortOrder" json:"sort_order,omitempty"`
}

func (x *PublishedFileSubSection) Reset() {
	*x = PublishedFileSubSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedFileSubSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileSubSection) ProtoMessage() {}

func (x *PublishedFileSubSection) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileSubSection.ProtoReflect.Descriptor instead.
func (*PublishedFileSubSection) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *PublishedFileSubSection) GetSectionid() uint64 {
	if x != nil && x.Sectionid != nil {
		return *x.Sectionid
	}
	return 0
}

func (x *PublishedFileSubSection) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PublishedFileSubSection) GetDescriptionText() string {
	if x != nil && x.DescriptionText != nil {
		return *x.DescriptionText
	}
	return ""
}

func (x *PublishedFileSubSection) GetSortOrder() uint32 {
	if x != nil && x.SortOrder != nil {
		return *x.SortOrder
	}
	return 0
}

type CPublishedFile_GetSubSectionData_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubSections []*PublishedFileSubSection `protobuf:"bytes,1,rep,name=sub_sections,json=subSections" json:"sub_sections,omitempty"`
}

func (x *CPublishedFile_GetSubSectionData_Response) Reset() {
	*x = CPublishedFile_GetSubSectionData_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetSubSectionData_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetSubSectionData_Response) ProtoMessage() {}

func (x *CPublishedFile_GetSubSectionData_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetSubSectionData_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetSubSectionData_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CPublishedFile_GetSubSectionData_Response) GetSubSections() []*PublishedFileSubSection {
	if x != nil {
		return x.SubSections
	}
	return nil
}

type CPublishedFile_Publish_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid                *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ConsumerAppid        *uint32  `protobuf:"varint,2,opt,name=consumer_appid,json=consumerAppid" json:"consumer_appid,omitempty"`
	Cloudfilename        *string  `protobuf:"bytes,3,opt,name=cloudfilename" json:"cloudfilename,omitempty"`
	PreviewCloudfilename *string  `protobuf:"bytes,4,opt,name=preview_cloudfilename,json=previewCloudfilename" json:"preview_cloudfilename,omitempty"`
	Title                *string  `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	FileDescription      *string  `protobuf:"bytes,6,opt,name=file_description,json=fileDescription" json:"file_description,omitempty"`
	FileType             *uint32  `protobuf:"varint,7,opt,name=file_type,json=fileType" json:"file_type,omitempty"`
	ConsumerShortcutName *string  `protobuf:"bytes,8,opt,name=consumer_shortcut_name,json=consumerShortcutName" json:"consumer_shortcut_name,omitempty"`
	YoutubeUsername      *string  `protobuf:"bytes,9,opt,name=youtube_username,json=youtubeUsername" json:"youtube_username,omitempty"`
	YoutubeVideoid       *string  `protobuf:"bytes,10,opt,name=youtube_videoid,json=youtubeVideoid" json:"youtube_videoid,omitempty"`
	Visibility           *uint32  `protobuf:"varint,11,opt,name=visibility" json:"visibility,omitempty"`
	RedirectUri          *string  `protobuf:"bytes,12,opt,name=redirect_uri,json=redirectUri" json:"redirect_uri,omitempty"`
	Tags                 []string `protobuf:"bytes,13,rep,name=tags" json:"tags,omitempty"`
	CollectionType       *string  `protobuf:"bytes,14,opt,name=collection_type,json=collectionType" json:"collection_type,omitempty"`
	GameType             *string  `protobuf:"bytes,15,opt,name=game_type,json=gameType" json:"game_type,omitempty"`
	Url                  *string  `protobuf:"bytes,16,opt,name=url" json:"url,omitempty"`
}

func (x *CPublishedFile_Publish_Request) Reset() {
	*x = CPublishedFile_Publish_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Publish_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Publish_Request) ProtoMessage() {}

func (x *CPublishedFile_Publish_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Publish_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Publish_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CPublishedFile_Publish_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_Publish_Request) GetConsumerAppid() uint32 {
	if x != nil && x.ConsumerAppid != nil {
		return *x.ConsumerAppid
	}
	return 0
}

func (x *CPublishedFile_Publish_Request) GetCloudfilename() string {
	if x != nil && x.Cloudfilename != nil {
		return *x.Cloudfilename
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetPreviewCloudfilename() string {
	if x != nil && x.PreviewCloudfilename != nil {
		return *x.PreviewCloudfilename
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetFileDescription() string {
	if x != nil && x.FileDescription != nil {
		return *x.FileDescription
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *CPublishedFile_Publish_Request) GetConsumerShortcutName() string {
	if x != nil && x.ConsumerShortcutName != nil {
		return *x.ConsumerShortcutName
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetYoutubeUsername() string {
	if x != nil && x.YoutubeUsername != nil {
		return *x.YoutubeUsername
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetYoutubeVideoid() string {
	if x != nil && x.YoutubeVideoid != nil {
		return *x.YoutubeVideoid
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetVisibility() uint32 {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return 0
}

func (x *CPublishedFile_Publish_Request) GetRedirectUri() string {
	if x != nil && x.RedirectUri != nil {
		return *x.RedirectUri
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CPublishedFile_Publish_Request) GetCollectionType() string {
	if x != nil && x.CollectionType != nil {
		return *x.CollectionType
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetGameType() string {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return ""
}

func (x *CPublishedFile_Publish_Request) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type CPublishedFile_Publish_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	RedirectUri     *string `protobuf:"bytes,2,opt,name=redirect_uri,json=redirectUri" json:"redirect_uri,omitempty"`
}

func (x *CPublishedFile_Publish_Response) Reset() {
	*x = CPublishedFile_Publish_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Publish_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Publish_Response) ProtoMessage() {}

func (x *CPublishedFile_Publish_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Publish_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Publish_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CPublishedFile_Publish_Response) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_Publish_Response) GetRedirectUri() string {
	if x != nil && x.RedirectUri != nil {
		return *x.RedirectUri
	}
	return ""
}

type CPublishedFile_GetDetails_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileids          []uint64                `protobuf:"fixed64,1,rep,name=publishedfileids" json:"publishedfileids,omitempty"`
	Includetags               *bool                   `protobuf:"varint,2,opt,name=includetags" json:"includetags,omitempty"`
	Includeadditionalpreviews *bool                   `protobuf:"varint,3,opt,name=includeadditionalpreviews" json:"includeadditionalpreviews,omitempty"`
	Includechildren           *bool                   `protobuf:"varint,4,opt,name=includechildren" json:"includechildren,omitempty"`
	Includekvtags             *bool                   `protobuf:"varint,5,opt,name=includekvtags" json:"includekvtags,omitempty"`
	Includevotes              *bool                   `protobuf:"varint,6,opt,name=includevotes" json:"includevotes,omitempty"`
	ShortDescription          *bool                   `protobuf:"varint,8,opt,name=short_description,json=shortDescription" json:"short_description,omitempty"`
	Includeforsaledata        *bool                   `protobuf:"varint,10,opt,name=includeforsaledata" json:"includeforsaledata,omitempty"`
	Includemetadata           *bool                   `protobuf:"varint,11,opt,name=includemetadata" json:"includemetadata,omitempty"`
	Language                  *int32                  `protobuf:"varint,12,opt,name=language,def=0" json:"language,omitempty"`
	ReturnPlaytimeStats       *uint32                 `protobuf:"varint,13,opt,name=return_playtime_stats,json=returnPlaytimeStats" json:"return_playtime_stats,omitempty"`
	Appid                     *uint32                 `protobuf:"varint,14,opt,name=appid" json:"appid,omitempty"`
	StripDescriptionBbcode    *bool                   `protobuf:"varint,15,opt,name=strip_description_bbcode,json=stripDescriptionBbcode" json:"strip_description_bbcode,omitempty"`
	DesiredRevision           *EPublishedFileRevision `protobuf:"varint,16,opt,name=desired_revision,json=desiredRevision,enum=EPublishedFileRevision,def=0" json:"desired_revision,omitempty"`
	Includereactions          *bool                   `protobuf:"varint,17,opt,name=includereactions,def=0" json:"includereactions,omitempty"`
}

// Default values for CPublishedFile_GetDetails_Request fields.
const (
	Default_CPublishedFile_GetDetails_Request_Language         = int32(0)
	Default_CPublishedFile_GetDetails_Request_DesiredRevision  = EPublishedFileRevision_k_EPublishedFileRevision_Default
	Default_CPublishedFile_GetDetails_Request_Includereactions = bool(false)
)

func (x *CPublishedFile_GetDetails_Request) Reset() {
	*x = CPublishedFile_GetDetails_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetDetails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetDetails_Request) ProtoMessage() {}

func (x *CPublishedFile_GetDetails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetDetails_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetDetails_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CPublishedFile_GetDetails_Request) GetPublishedfileids() []uint64 {
	if x != nil {
		return x.Publishedfileids
	}
	return nil
}

func (x *CPublishedFile_GetDetails_Request) GetIncludetags() bool {
	if x != nil && x.Includetags != nil {
		return *x.Includetags
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludeadditionalpreviews() bool {
	if x != nil && x.Includeadditionalpreviews != nil {
		return *x.Includeadditionalpreviews
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludechildren() bool {
	if x != nil && x.Includechildren != nil {
		return *x.Includechildren
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludekvtags() bool {
	if x != nil && x.Includekvtags != nil {
		return *x.Includekvtags
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludevotes() bool {
	if x != nil && x.Includevotes != nil {
		return *x.Includevotes
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetShortDescription() bool {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludeforsaledata() bool {
	if x != nil && x.Includeforsaledata != nil {
		return *x.Includeforsaledata
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetIncludemetadata() bool {
	if x != nil && x.Includemetadata != nil {
		return *x.Includemetadata
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return Default_CPublishedFile_GetDetails_Request_Language
}

func (x *CPublishedFile_GetDetails_Request) GetReturnPlaytimeStats() uint32 {
	if x != nil && x.ReturnPlaytimeStats != nil {
		return *x.ReturnPlaytimeStats
	}
	return 0
}

func (x *CPublishedFile_GetDetails_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_GetDetails_Request) GetStripDescriptionBbcode() bool {
	if x != nil && x.StripDescriptionBbcode != nil {
		return *x.StripDescriptionBbcode
	}
	return false
}

func (x *CPublishedFile_GetDetails_Request) GetDesiredRevision() EPublishedFileRevision {
	if x != nil && x.DesiredRevision != nil {
		return *x.DesiredRevision
	}
	return Default_CPublishedFile_GetDetails_Request_DesiredRevision
}

func (x *CPublishedFile_GetDetails_Request) GetIncludereactions() bool {
	if x != nil && x.Includereactions != nil {
		return *x.Includereactions
	}
	return Default_CPublishedFile_GetDetails_Request_Includereactions
}

type PublishedFileDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result                     *uint32                             `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Publishedfileid            *uint64                             `protobuf:"varint,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Creator                    *uint64                             `protobuf:"fixed64,3,opt,name=creator" json:"creator,omitempty"`
	CreatorAppid               *uint32                             `protobuf:"varint,4,opt,name=creator_appid,json=creatorAppid" json:"creator_appid,omitempty"`
	ConsumerAppid              *uint32                             `protobuf:"varint,5,opt,name=consumer_appid,json=consumerAppid" json:"consumer_appid,omitempty"`
	ConsumerShortcutid         *uint32                             `protobuf:"varint,6,opt,name=consumer_shortcutid,json=consumerShortcutid" json:"consumer_shortcutid,omitempty"`
	Filename                   *string                             `protobuf:"bytes,7,opt,name=filename" json:"filename,omitempty"`
	FileSize                   *uint64                             `protobuf:"varint,8,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	PreviewFileSize            *uint64                             `protobuf:"varint,9,opt,name=preview_file_size,json=previewFileSize" json:"preview_file_size,omitempty"`
	FileUrl                    *string                             `protobuf:"bytes,10,opt,name=file_url,json=fileUrl" json:"file_url,omitempty"`
	PreviewUrl                 *string                             `protobuf:"bytes,11,opt,name=preview_url,json=previewUrl" json:"preview_url,omitempty"`
	Youtubevideoid             *string                             `protobuf:"bytes,12,opt,name=youtubevideoid" json:"youtubevideoid,omitempty"`
	Url                        *string                             `protobuf:"bytes,13,opt,name=url" json:"url,omitempty"`
	HcontentFile               *uint64                             `protobuf:"fixed64,14,opt,name=hcontent_file,json=hcontentFile" json:"hcontent_file,omitempty"`
	HcontentPreview            *uint64                             `protobuf:"fixed64,15,opt,name=hcontent_preview,json=hcontentPreview" json:"hcontent_preview,omitempty"`
	Title                      *string                             `protobuf:"bytes,16,opt,name=title" json:"title,omitempty"`
	FileDescription            *string                             `protobuf:"bytes,17,opt,name=file_description,json=fileDescription" json:"file_description,omitempty"`
	ShortDescription           *string                             `protobuf:"bytes,18,opt,name=short_description,json=shortDescription" json:"short_description,omitempty"`
	TimeCreated                *uint32                             `protobuf:"varint,19,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	TimeUpdated                *uint32                             `protobuf:"varint,20,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	Visibility                 *uint32                             `protobuf:"varint,21,opt,name=visibility" json:"visibility,omitempty"`
	Flags                      *uint32                             `protobuf:"varint,22,opt,name=flags" json:"flags,omitempty"`
	WorkshopFile               *bool                               `protobuf:"varint,23,opt,name=workshop_file,json=workshopFile" json:"workshop_file,omitempty"`
	WorkshopAccepted           *bool                               `protobuf:"varint,24,opt,name=workshop_accepted,json=workshopAccepted" json:"workshop_accepted,omitempty"`
	ShowSubscribeAll           *bool                               `protobuf:"varint,25,opt,name=show_subscribe_all,json=showSubscribeAll" json:"show_subscribe_all,omitempty"`
	NumCommentsDeveloper       *int32                              `protobuf:"varint,26,opt,name=num_comments_developer,json=numCommentsDeveloper" json:"num_comments_developer,omitempty"`
	NumCommentsPublic          *int32                              `protobuf:"varint,27,opt,name=num_comments_public,json=numCommentsPublic" json:"num_comments_public,omitempty"`
	Banned                     *bool                               `protobuf:"varint,28,opt,name=banned" json:"banned,omitempty"`
	BanReason                  *string                             `protobuf:"bytes,29,opt,name=ban_reason,json=banReason" json:"ban_reason,omitempty"`
	Banner                     *uint64                             `protobuf:"fixed64,30,opt,name=banner" json:"banner,omitempty"`
	CanBeDeleted               *bool                               `protobuf:"varint,31,opt,name=can_be_deleted,json=canBeDeleted" json:"can_be_deleted,omitempty"`
	Incompatible               *bool                               `protobuf:"varint,32,opt,name=incompatible" json:"incompatible,omitempty"`
	AppName                    *string                             `protobuf:"bytes,33,opt,name=app_name,json=appName" json:"app_name,omitempty"`
	FileType                   *uint32                             `protobuf:"varint,34,opt,name=file_type,json=fileType" json:"file_type,omitempty"`
	CanSubscribe               *bool                               `protobuf:"varint,35,opt,name=can_subscribe,json=canSubscribe" json:"can_subscribe,omitempty"`
	Subscriptions              *uint32                             `protobuf:"varint,36,opt,name=subscriptions" json:"subscriptions,omitempty"`
	Favorited                  *uint32                             `protobuf:"varint,37,opt,name=favorited" json:"favorited,omitempty"`
	Followers                  *uint32                             `protobuf:"varint,38,opt,name=followers" json:"followers,omitempty"`
	LifetimeSubscriptions      *uint32                             `protobuf:"varint,39,opt,name=lifetime_subscriptions,json=lifetimeSubscriptions" json:"lifetime_subscriptions,omitempty"`
	LifetimeFavorited          *uint32                             `protobuf:"varint,40,opt,name=lifetime_favorited,json=lifetimeFavorited" json:"lifetime_favorited,omitempty"`
	LifetimeFollowers          *uint32                             `protobuf:"varint,41,opt,name=lifetime_followers,json=lifetimeFollowers" json:"lifetime_followers,omitempty"`
	LifetimePlaytime           *uint64                             `protobuf:"varint,62,opt,name=lifetime_playtime,json=lifetimePlaytime" json:"lifetime_playtime,omitempty"`
	LifetimePlaytimeSessions   *uint64                             `protobuf:"varint,63,opt,name=lifetime_playtime_sessions,json=lifetimePlaytimeSessions" json:"lifetime_playtime_sessions,omitempty"`
	Views                      *uint32                             `protobuf:"varint,42,opt,name=views" json:"views,omitempty"`
	ImageWidth                 *uint32                             `protobuf:"varint,43,opt,name=image_width,json=imageWidth" json:"image_width,omitempty"`
	ImageHeight                *uint32                             `protobuf:"varint,44,opt,name=image_height,json=imageHeight" json:"image_height,omitempty"`
	ImageUrl                   *string                             `protobuf:"bytes,45,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	SpoilerTag                 *bool                               `protobuf:"varint,46,opt,name=spoiler_tag,json=spoilerTag" json:"spoiler_tag,omitempty"`
	Shortcutid                 *uint32                             `protobuf:"varint,47,opt,name=shortcutid" json:"shortcutid,omitempty"`
	Shortcutname               *string                             `protobuf:"bytes,48,opt,name=shortcutname" json:"shortcutname,omitempty"`
	NumChildren                *uint32                             `protobuf:"varint,49,opt,name=num_children,json=numChildren" json:"num_children,omitempty"`
	NumReports                 *uint32                             `protobuf:"varint,50,opt,name=num_reports,json=numReports" json:"num_reports,omitempty"`
	Previews                   []*PublishedFileDetails_Preview     `protobuf:"bytes,51,rep,name=previews" json:"previews,omitempty"`
	Tags                       []*PublishedFileDetails_Tag         `protobuf:"bytes,52,rep,name=tags" json:"tags,omitempty"`
	Children                   []*PublishedFileDetails_Child       `protobuf:"bytes,53,rep,name=children" json:"children,omitempty"`
	Kvtags                     []*PublishedFileDetails_KVTag       `protobuf:"bytes,54,rep,name=kvtags" json:"kvtags,omitempty"`
	VoteData                   *PublishedFileDetails_VoteData      `protobuf:"bytes,55,opt,name=vote_data,json=voteData" json:"vote_data,omitempty"`
	PlaytimeStats              *PublishedFileDetails_PlaytimeStats `protobuf:"bytes,64,opt,name=playtime_stats,json=playtimeStats" json:"playtime_stats,omitempty"`
	TimeSubscribed             *uint32                             `protobuf:"varint,56,opt,name=time_subscribed,json=timeSubscribed" json:"time_subscribed,omitempty"`
	ForSaleData                *PublishedFileDetails_ForSaleData   `protobuf:"bytes,57,opt,name=for_sale_data,json=forSaleData" json:"for_sale_data,omitempty"`
	Metadata                   *string                             `protobuf:"bytes,58,opt,name=metadata" json:"metadata,omitempty"`
	Language                   *int32                              `protobuf:"varint,61,opt,name=language,def=0" json:"language,omitempty"`
	MaybeInappropriateSex      *bool                               `protobuf:"varint,65,opt,name=maybe_inappropriate_sex,json=maybeInappropriateSex" json:"maybe_inappropriate_sex,omitempty"`
	MaybeInappropriateViolence *bool                               `protobuf:"varint,66,opt,name=maybe_inappropriate_violence,json=maybeInappropriateViolence" json:"maybe_inappropriate_violence,omitempty"`
	ContentDescriptorids       []EContentDescriptorID              `protobuf:"varint,72,rep,name=content_descriptorids,json=contentDescriptorids,enum=EContentDescriptorID" json:"content_descriptorids,omitempty"`
	RevisionChangeNumber       *uint64                             `protobuf:"varint,67,opt,name=revision_change_number,json=revisionChangeNumber" json:"revision_change_number,omitempty"`
	Revision                   *EPublishedFileRevision             `protobuf:"varint,68,opt,name=revision,enum=EPublishedFileRevision,def=0" json:"revision,omitempty"`
	AvailableRevisions         []EPublishedFileRevision            `protobuf:"varint,69,rep,name=available_revisions,json=availableRevisions,enum=EPublishedFileRevision" json:"available_revisions,omitempty"`
	Reactions                  []*PublishedFileDetails_Reaction    `protobuf:"bytes,70,rep,name=reactions" json:"reactions,omitempty"`
	BanTextCheckResult         *EBanContentCheckResult             `protobuf:"varint,71,opt,name=ban_text_check_result,json=banTextCheckResult,enum=EBanContentCheckResult,def=0" json:"ban_text_check_result,omitempty"`
	SearchScore                *float32                            `protobuf:"fixed32,73,opt,name=search_score,json=searchScore" json:"search_score,omitempty"`
}

// Default values for PublishedFileDetails fields.
const (
	Default_PublishedFileDetails_Language           = int32(0)
	Default_PublishedFileDetails_Revision           = EPublishedFileRevision_k_EPublishedFileRevision_Default
	Default_PublishedFileDetails_BanTextCheckResult = EBanContentCheckResult_k_EBanContentCheckResult_NotScanned
)

func (x *PublishedFileDetails) Reset() {
	*x = PublishedFileDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedFileDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails) ProtoMessage() {}

func (x *PublishedFileDetails) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *PublishedFileDetails) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *PublishedFileDetails) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *PublishedFileDetails) GetCreator() uint64 {
	if x != nil && x.Creator != nil {
		return *x.Creator
	}
	return 0
}

func (x *PublishedFileDetails) GetCreatorAppid() uint32 {
	if x != nil && x.CreatorAppid != nil {
		return *x.CreatorAppid
	}
	return 0
}

func (x *PublishedFileDetails) GetConsumerAppid() uint32 {
	if x != nil && x.ConsumerAppid != nil {
		return *x.ConsumerAppid
	}
	return 0
}

func (x *PublishedFileDetails) GetConsumerShortcutid() uint32 {
	if x != nil && x.ConsumerShortcutid != nil {
		return *x.ConsumerShortcutid
	}
	return 0
}

func (x *PublishedFileDetails) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *PublishedFileDetails) GetFileSize() uint64 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *PublishedFileDetails) GetPreviewFileSize() uint64 {
	if x != nil && x.PreviewFileSize != nil {
		return *x.PreviewFileSize
	}
	return 0
}

func (x *PublishedFileDetails) GetFileUrl() string {
	if x != nil && x.FileUrl != nil {
		return *x.FileUrl
	}
	return ""
}

func (x *PublishedFileDetails) GetPreviewUrl() string {
	if x != nil && x.PreviewUrl != nil {
		return *x.PreviewUrl
	}
	return ""
}

func (x *PublishedFileDetails) GetYoutubevideoid() string {
	if x != nil && x.Youtubevideoid != nil {
		return *x.Youtubevideoid
	}
	return ""
}

func (x *PublishedFileDetails) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PublishedFileDetails) GetHcontentFile() uint64 {
	if x != nil && x.HcontentFile != nil {
		return *x.HcontentFile
	}
	return 0
}

func (x *PublishedFileDetails) GetHcontentPreview() uint64 {
	if x != nil && x.HcontentPreview != nil {
		return *x.HcontentPreview
	}
	return 0
}

func (x *PublishedFileDetails) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PublishedFileDetails) GetFileDescription() string {
	if x != nil && x.FileDescription != nil {
		return *x.FileDescription
	}
	return ""
}

func (x *PublishedFileDetails) GetShortDescription() string {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return ""
}

func (x *PublishedFileDetails) GetTimeCreated() uint32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

func (x *PublishedFileDetails) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

func (x *PublishedFileDetails) GetVisibility() uint32 {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return 0
}

func (x *PublishedFileDetails) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *PublishedFileDetails) GetWorkshopFile() bool {
	if x != nil && x.WorkshopFile != nil {
		return *x.WorkshopFile
	}
	return false
}

func (x *PublishedFileDetails) GetWorkshopAccepted() bool {
	if x != nil && x.WorkshopAccepted != nil {
		return *x.WorkshopAccepted
	}
	return false
}

func (x *PublishedFileDetails) GetShowSubscribeAll() bool {
	if x != nil && x.ShowSubscribeAll != nil {
		return *x.ShowSubscribeAll
	}
	return false
}

func (x *PublishedFileDetails) GetNumCommentsDeveloper() int32 {
	if x != nil && x.NumCommentsDeveloper != nil {
		return *x.NumCommentsDeveloper
	}
	return 0
}

func (x *PublishedFileDetails) GetNumCommentsPublic() int32 {
	if x != nil && x.NumCommentsPublic != nil {
		return *x.NumCommentsPublic
	}
	return 0
}

func (x *PublishedFileDetails) GetBanned() bool {
	if x != nil && x.Banned != nil {
		return *x.Banned
	}
	return false
}

func (x *PublishedFileDetails) GetBanReason() string {
	if x != nil && x.BanReason != nil {
		return *x.BanReason
	}
	return ""
}

func (x *PublishedFileDetails) GetBanner() uint64 {
	if x != nil && x.Banner != nil {
		return *x.Banner
	}
	return 0
}

func (x *PublishedFileDetails) GetCanBeDeleted() bool {
	if x != nil && x.CanBeDeleted != nil {
		return *x.CanBeDeleted
	}
	return false
}

func (x *PublishedFileDetails) GetIncompatible() bool {
	if x != nil && x.Incompatible != nil {
		return *x.Incompatible
	}
	return false
}

func (x *PublishedFileDetails) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *PublishedFileDetails) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

func (x *PublishedFileDetails) GetCanSubscribe() bool {
	if x != nil && x.CanSubscribe != nil {
		return *x.CanSubscribe
	}
	return false
}

func (x *PublishedFileDetails) GetSubscriptions() uint32 {
	if x != nil && x.Subscriptions != nil {
		return *x.Subscriptions
	}
	return 0
}

func (x *PublishedFileDetails) GetFavorited() uint32 {
	if x != nil && x.Favorited != nil {
		return *x.Favorited
	}
	return 0
}

func (x *PublishedFileDetails) GetFollowers() uint32 {
	if x != nil && x.Followers != nil {
		return *x.Followers
	}
	return 0
}

func (x *PublishedFileDetails) GetLifetimeSubscriptions() uint32 {
	if x != nil && x.LifetimeSubscriptions != nil {
		return *x.LifetimeSubscriptions
	}
	return 0
}

func (x *PublishedFileDetails) GetLifetimeFavorited() uint32 {
	if x != nil && x.LifetimeFavorited != nil {
		return *x.LifetimeFavorited
	}
	return 0
}

func (x *PublishedFileDetails) GetLifetimeFollowers() uint32 {
	if x != nil && x.LifetimeFollowers != nil {
		return *x.LifetimeFollowers
	}
	return 0
}

func (x *PublishedFileDetails) GetLifetimePlaytime() uint64 {
	if x != nil && x.LifetimePlaytime != nil {
		return *x.LifetimePlaytime
	}
	return 0
}

func (x *PublishedFileDetails) GetLifetimePlaytimeSessions() uint64 {
	if x != nil && x.LifetimePlaytimeSessions != nil {
		return *x.LifetimePlaytimeSessions
	}
	return 0
}

func (x *PublishedFileDetails) GetViews() uint32 {
	if x != nil && x.Views != nil {
		return *x.Views
	}
	return 0
}

func (x *PublishedFileDetails) GetImageWidth() uint32 {
	if x != nil && x.ImageWidth != nil {
		return *x.ImageWidth
	}
	return 0
}

func (x *PublishedFileDetails) GetImageHeight() uint32 {
	if x != nil && x.ImageHeight != nil {
		return *x.ImageHeight
	}
	return 0
}

func (x *PublishedFileDetails) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *PublishedFileDetails) GetSpoilerTag() bool {
	if x != nil && x.SpoilerTag != nil {
		return *x.SpoilerTag
	}
	return false
}

func (x *PublishedFileDetails) GetShortcutid() uint32 {
	if x != nil && x.Shortcutid != nil {
		return *x.Shortcutid
	}
	return 0
}

func (x *PublishedFileDetails) GetShortcutname() string {
	if x != nil && x.Shortcutname != nil {
		return *x.Shortcutname
	}
	return ""
}

func (x *PublishedFileDetails) GetNumChildren() uint32 {
	if x != nil && x.NumChildren != nil {
		return *x.NumChildren
	}
	return 0
}

func (x *PublishedFileDetails) GetNumReports() uint32 {
	if x != nil && x.NumReports != nil {
		return *x.NumReports
	}
	return 0
}

func (x *PublishedFileDetails) GetPreviews() []*PublishedFileDetails_Preview {
	if x != nil {
		return x.Previews
	}
	return nil
}

func (x *PublishedFileDetails) GetTags() []*PublishedFileDetails_Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PublishedFileDetails) GetChildren() []*PublishedFileDetails_Child {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *PublishedFileDetails) GetKvtags() []*PublishedFileDetails_KVTag {
	if x != nil {
		return x.Kvtags
	}
	return nil
}

func (x *PublishedFileDetails) GetVoteData() *PublishedFileDetails_VoteData {
	if x != nil {
		return x.VoteData
	}
	return nil
}

func (x *PublishedFileDetails) GetPlaytimeStats() *PublishedFileDetails_PlaytimeStats {
	if x != nil {
		return x.PlaytimeStats
	}
	return nil
}

func (x *PublishedFileDetails) GetTimeSubscribed() uint32 {
	if x != nil && x.TimeSubscribed != nil {
		return *x.TimeSubscribed
	}
	return 0
}

func (x *PublishedFileDetails) GetForSaleData() *PublishedFileDetails_ForSaleData {
	if x != nil {
		return x.ForSaleData
	}
	return nil
}

func (x *PublishedFileDetails) GetMetadata() string {
	if x != nil && x.Metadata != nil {
		return *x.Metadata
	}
	return ""
}

func (x *PublishedFileDetails) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return Default_PublishedFileDetails_Language
}

func (x *PublishedFileDetails) GetMaybeInappropriateSex() bool {
	if x != nil && x.MaybeInappropriateSex != nil {
		return *x.MaybeInappropriateSex
	}
	return false
}

func (x *PublishedFileDetails) GetMaybeInappropriateViolence() bool {
	if x != nil && x.MaybeInappropriateViolence != nil {
		return *x.MaybeInappropriateViolence
	}
	return false
}

func (x *PublishedFileDetails) GetContentDescriptorids() []EContentDescriptorID {
	if x != nil {
		return x.ContentDescriptorids
	}
	return nil
}

func (x *PublishedFileDetails) GetRevisionChangeNumber() uint64 {
	if x != nil && x.RevisionChangeNumber != nil {
		return *x.RevisionChangeNumber
	}
	return 0
}

func (x *PublishedFileDetails) GetRevision() EPublishedFileRevision {
	if x != nil && x.Revision != nil {
		return *x.Revision
	}
	return Default_PublishedFileDetails_Revision
}

func (x *PublishedFileDetails) GetAvailableRevisions() []EPublishedFileRevision {
	if x != nil {
		return x.AvailableRevisions
	}
	return nil
}

func (x *PublishedFileDetails) GetReactions() []*PublishedFileDetails_Reaction {
	if x != nil {
		return x.Reactions
	}
	return nil
}

func (x *PublishedFileDetails) GetBanTextCheckResult() EBanContentCheckResult {
	if x != nil && x.BanTextCheckResult != nil {
		return *x.BanTextCheckResult
	}
	return Default_PublishedFileDetails_BanTextCheckResult
}

func (x *PublishedFileDetails) GetSearchScore() float32 {
	if x != nil && x.SearchScore != nil {
		return *x.SearchScore
	}
	return 0
}

type CPublishedFile_GetDetails_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfiledetails []*PublishedFileDetails `protobuf:"bytes,1,rep,name=publishedfiledetails" json:"publishedfiledetails,omitempty"`
}

func (x *CPublishedFile_GetDetails_Response) Reset() {
	*x = CPublishedFile_GetDetails_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetDetails_Response) ProtoMessage() {}

func (x *CPublishedFile_GetDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetDetails_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetDetails_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CPublishedFile_GetDetails_Response) GetPublishedfiledetails() []*PublishedFileDetails {
	if x != nil {
		return x.Publishedfiledetails
	}
	return nil
}

type CPublishedFile_GetItemInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid           *uint32                                            `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	LastTimeUpdated *uint32                                            `protobuf:"varint,2,opt,name=last_time_updated,json=lastTimeUpdated" json:"last_time_updated,omitempty"`
	WorkshopItems   []*CPublishedFile_GetItemInfo_Request_WorkshopItem `protobuf:"bytes,3,rep,name=workshop_items,json=workshopItems" json:"workshop_items,omitempty"`
}

func (x *CPublishedFile_GetItemInfo_Request) Reset() {
	*x = CPublishedFile_GetItemInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetItemInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetItemInfo_Request) ProtoMessage() {}

func (x *CPublishedFile_GetItemInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetItemInfo_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetItemInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CPublishedFile_GetItemInfo_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_GetItemInfo_Request) GetLastTimeUpdated() uint32 {
	if x != nil && x.LastTimeUpdated != nil {
		return *x.LastTimeUpdated
	}
	return 0
}

func (x *CPublishedFile_GetItemInfo_Request) GetWorkshopItems() []*CPublishedFile_GetItemInfo_Request_WorkshopItem {
	if x != nil {
		return x.WorkshopItems
	}
	return nil
}

type CPublishedFile_GetItemInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateTime    *uint32                                                 `protobuf:"varint,1,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	WorkshopItems []*CPublishedFile_GetItemInfo_Response_WorkshopItemInfo `protobuf:"bytes,2,rep,name=workshop_items,json=workshopItems" json:"workshop_items,omitempty"`
	PrivateItems  []uint64                                                `protobuf:"fixed64,3,rep,name=private_items,json=privateItems" json:"private_items,omitempty"`
}

func (x *CPublishedFile_GetItemInfo_Response) Reset() {
	*x = CPublishedFile_GetItemInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetItemInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetItemInfo_Response) ProtoMessage() {}

func (x *CPublishedFile_GetItemInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetItemInfo_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetItemInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{17}
}

func (x *CPublishedFile_GetItemInfo_Response) GetUpdateTime() uint32 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *CPublishedFile_GetItemInfo_Response) GetWorkshopItems() []*CPublishedFile_GetItemInfo_Response_WorkshopItemInfo {
	if x != nil {
		return x.WorkshopItems
	}
	return nil
}

func (x *CPublishedFile_GetItemInfo_Response) GetPrivateItems() []uint64 {
	if x != nil {
		return x.PrivateItems
	}
	return nil
}

type CPublishedFile_GetUserFiles_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid                    *uint64                                         `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Appid                      *uint32                                         `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Shortcutid                 *uint32                                         `protobuf:"varint,3,opt,name=shortcutid" json:"shortcutid,omitempty"`
	Page                       *uint32                                         `protobuf:"varint,4,opt,name=page,def=1" json:"page,omitempty"`
	Numperpage                 *uint32                                         `protobuf:"varint,5,opt,name=numperpage,def=1" json:"numperpage,omitempty"`
	Type                       *string                                         `protobuf:"bytes,6,opt,name=type,def=myfiles" json:"type,omitempty"`
	Sortmethod                 *string                                         `protobuf:"bytes,7,opt,name=sortmethod,def=lastupdated" json:"sortmethod,omitempty"`
	Privacy                    *uint32                                         `protobuf:"varint,9,opt,name=privacy" json:"privacy,omitempty"`
	Requiredtags               []string                                        `protobuf:"bytes,10,rep,name=requiredtags" json:"requiredtags,omitempty"`
	Excludedtags               []string                                        `protobuf:"bytes,11,rep,name=excludedtags" json:"excludedtags,omitempty"`
	RequiredKvTags             []*CPublishedFile_GetUserFiles_Request_KVTag    `protobuf:"bytes,30,rep,name=required_kv_tags,json=requiredKvTags" json:"required_kv_tags,omitempty"`
	Filetype                   *uint32                                         `protobuf:"varint,14,opt,name=filetype" json:"filetype,omitempty"`
	CreatorAppid               *uint32                                         `protobuf:"varint,15,opt,name=creator_appid,json=creatorAppid" json:"creator_appid,omitempty"`
	MatchCloudFilename         *string                                         `protobuf:"bytes,16,opt,name=match_cloud_filename,json=matchCloudFilename" json:"match_cloud_filename,omitempty"`
	CacheMaxAgeSeconds         *uint32                                         `protobuf:"varint,27,opt,name=cache_max_age_seconds,json=cacheMaxAgeSeconds,def=0" json:"cache_max_age_seconds,omitempty"`
	Language                   *int32                                          `protobuf:"varint,29,opt,name=language,def=0" json:"language,omitempty"`
	Taggroups                  []*CPublishedFile_GetUserFiles_Request_TagGroup `protobuf:"bytes,34,rep,name=taggroups" json:"taggroups,omitempty"`
	ExcludedContentDescriptors []EContentDescriptorID                          `protobuf:"varint,37,rep,name=excluded_content_descriptors,json=excludedContentDescriptors,enum=EContentDescriptorID" json:"excluded_content_descriptors,omitempty"`
	Totalonly                  *bool                                           `protobuf:"varint,17,opt,name=totalonly" json:"totalonly,omitempty"`
	IdsOnly                    *bool                                           `protobuf:"varint,18,opt,name=ids_only,json=idsOnly" json:"ids_only,omitempty"`
	ReturnVoteData             *bool                                           `protobuf:"varint,19,opt,name=return_vote_data,json=returnVoteData,def=1" json:"return_vote_data,omitempty"`
	ReturnTags                 *bool                                           `protobuf:"varint,20,opt,name=return_tags,json=returnTags" json:"return_tags,omitempty"`
	ReturnKvTags               *bool                                           `protobuf:"varint,21,opt,name=return_kv_tags,json=returnKvTags,def=1" json:"return_kv_tags,omitempty"`
	ReturnPreviews             *bool                                           `protobuf:"varint,22,opt,name=return_previews,json=returnPreviews" json:"return_previews,omitempty"`
	ReturnChildren             *bool                                           `protobuf:"varint,23,opt,name=return_children,json=returnChildren" json:"return_children,omitempty"`
	ReturnShortDescription     *bool                                           `protobuf:"varint,24,opt,name=return_short_description,json=returnShortDescription,def=1" json:"return_short_description,omitempty"`
	ReturnForSaleData          *bool                                           `protobuf:"varint,26,opt,name=return_for_sale_data,json=returnForSaleData" json:"return_for_sale_data,omitempty"`
	ReturnMetadata             *bool                                           `protobuf:"varint,28,opt,name=return_metadata,json=returnMetadata,def=0" json:"return_metadata,omitempty"`
	ReturnPlaytimeStats        *uint32                                         `protobuf:"varint,31,opt,name=return_playtime_stats,json=returnPlaytimeStats" json:"return_playtime_stats,omitempty"`
	StripDescriptionBbcode     *bool                                           `protobuf:"varint,32,opt,name=strip_description_bbcode,json=stripDescriptionBbcode" json:"strip_description_bbcode,omitempty"`
	ReturnReactions            *bool                                           `protobuf:"varint,35,opt,name=return_reactions,json=returnReactions,def=0" json:"return_reactions,omitempty"`
	StartindexOverride         *uint32                                         `protobuf:"varint,25,opt,name=startindex_override,json=startindexOverride" json:"startindex_override,omitempty"`
	DesiredRevision            *EPublishedFileRevision                         `protobuf:"varint,33,opt,name=desired_revision,json=desiredRevision,enum=EPublishedFileRevision,def=0" json:"desired_revision,omitempty"`
	ReturnApps                 *bool                                           `protobuf:"varint,36,opt,name=return_apps,json=returnApps" json:"return_apps,omitempty"`
}

// Default values for CPublishedFile_GetUserFiles_Request fields.
const (
	Default_CPublishedFile_GetUserFiles_Request_Page                   = uint32(1)
	Default_CPublishedFile_GetUserFiles_Request_Numperpage             = uint32(1)
	Default_CPublishedFile_GetUserFiles_Request_Type                   = string("myfiles")
	Default_CPublishedFile_GetUserFiles_Request_Sortmethod             = string("lastupdated")
	Default_CPublishedFile_GetUserFiles_Request_CacheMaxAgeSeconds     = uint32(0)
	Default_CPublishedFile_GetUserFiles_Request_Language               = int32(0)
	Default_CPublishedFile_GetUserFiles_Request_ReturnVoteData         = bool(true)
	Default_CPublishedFile_GetUserFiles_Request_ReturnKvTags           = bool(true)
	Default_CPublishedFile_GetUserFiles_Request_ReturnShortDescription = bool(true)
	Default_CPublishedFile_GetUserFiles_Request_ReturnMetadata         = bool(false)
	Default_CPublishedFile_GetUserFiles_Request_ReturnReactions        = bool(false)
	Default_CPublishedFile_GetUserFiles_Request_DesiredRevision        = EPublishedFileRevision_k_EPublishedFileRevision_Default
)

func (x *CPublishedFile_GetUserFiles_Request) Reset() {
	*x = CPublishedFile_GetUserFiles_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetUserFiles_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserFiles_Request) ProtoMessage() {}

func (x *CPublishedFile_GetUserFiles_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserFiles_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserFiles_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *CPublishedFile_GetUserFiles_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetShortcutid() uint32 {
	if x != nil && x.Shortcutid != nil {
		return *x.Shortcutid
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetPage() uint32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return Default_CPublishedFile_GetUserFiles_Request_Page
}

func (x *CPublishedFile_GetUserFiles_Request) GetNumperpage() uint32 {
	if x != nil && x.Numperpage != nil {
		return *x.Numperpage
	}
	return Default_CPublishedFile_GetUserFiles_Request_Numperpage
}

func (x *CPublishedFile_GetUserFiles_Request) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CPublishedFile_GetUserFiles_Request_Type
}

func (x *CPublishedFile_GetUserFiles_Request) GetSortmethod() string {
	if x != nil && x.Sortmethod != nil {
		return *x.Sortmethod
	}
	return Default_CPublishedFile_GetUserFiles_Request_Sortmethod
}

func (x *CPublishedFile_GetUserFiles_Request) GetPrivacy() uint32 {
	if x != nil && x.Privacy != nil {
		return *x.Privacy
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetRequiredtags() []string {
	if x != nil {
		return x.Requiredtags
	}
	return nil
}

func (x *CPublishedFile_GetUserFiles_Request) GetExcludedtags() []string {
	if x != nil {
		return x.Excludedtags
	}
	return nil
}

func (x *CPublishedFile_GetUserFiles_Request) GetRequiredKvTags() []*CPublishedFile_GetUserFiles_Request_KVTag {
	if x != nil {
		return x.RequiredKvTags
	}
	return nil
}

func (x *CPublishedFile_GetUserFiles_Request) GetFiletype() uint32 {
	if x != nil && x.Filetype != nil {
		return *x.Filetype
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetCreatorAppid() uint32 {
	if x != nil && x.CreatorAppid != nil {
		return *x.CreatorAppid
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetMatchCloudFilename() string {
	if x != nil && x.MatchCloudFilename != nil {
		return *x.MatchCloudFilename
	}
	return ""
}

func (x *CPublishedFile_GetUserFiles_Request) GetCacheMaxAgeSeconds() uint32 {
	if x != nil && x.CacheMaxAgeSeconds != nil {
		return *x.CacheMaxAgeSeconds
	}
	return Default_CPublishedFile_GetUserFiles_Request_CacheMaxAgeSeconds
}

func (x *CPublishedFile_GetUserFiles_Request) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return Default_CPublishedFile_GetUserFiles_Request_Language
}

func (x *CPublishedFile_GetUserFiles_Request) GetTaggroups() []*CPublishedFile_GetUserFiles_Request_TagGroup {
	if x != nil {
		return x.Taggroups
	}
	return nil
}

func (x *CPublishedFile_GetUserFiles_Request) GetExcludedContentDescriptors() []EContentDescriptorID {
	if x != nil {
		return x.ExcludedContentDescriptors
	}
	return nil
}

func (x *CPublishedFile_GetUserFiles_Request) GetTotalonly() bool {
	if x != nil && x.Totalonly != nil {
		return *x.Totalonly
	}
	return false
}

func (x *CPublishedFile_GetUserFiles_Request) GetIdsOnly() bool {
	if x != nil && x.IdsOnly != nil {
		return *x.IdsOnly
	}
	return false
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnVoteData() bool {
	if x != nil && x.ReturnVoteData != nil {
		return *x.ReturnVoteData
	}
	return Default_CPublishedFile_GetUserFiles_Request_ReturnVoteData
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnTags() bool {
	if x != nil && x.ReturnTags != nil {
		return *x.ReturnTags
	}
	return false
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnKvTags() bool {
	if x != nil && x.ReturnKvTags != nil {
		return *x.ReturnKvTags
	}
	return Default_CPublishedFile_GetUserFiles_Request_ReturnKvTags
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnPreviews() bool {
	if x != nil && x.ReturnPreviews != nil {
		return *x.ReturnPreviews
	}
	return false
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnChildren() bool {
	if x != nil && x.ReturnChildren != nil {
		return *x.ReturnChildren
	}
	return false
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnShortDescription() bool {
	if x != nil && x.ReturnShortDescription != nil {
		return *x.ReturnShortDescription
	}
	return Default_CPublishedFile_GetUserFiles_Request_ReturnShortDescription
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnForSaleData() bool {
	if x != nil && x.ReturnForSaleData != nil {
		return *x.ReturnForSaleData
	}
	return false
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnMetadata() bool {
	if x != nil && x.ReturnMetadata != nil {
		return *x.ReturnMetadata
	}
	return Default_CPublishedFile_GetUserFiles_Request_ReturnMetadata
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnPlaytimeStats() uint32 {
	if x != nil && x.ReturnPlaytimeStats != nil {
		return *x.ReturnPlaytimeStats
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetStripDescriptionBbcode() bool {
	if x != nil && x.StripDescriptionBbcode != nil {
		return *x.StripDescriptionBbcode
	}
	return false
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnReactions() bool {
	if x != nil && x.ReturnReactions != nil {
		return *x.ReturnReactions
	}
	return Default_CPublishedFile_GetUserFiles_Request_ReturnReactions
}

func (x *CPublishedFile_GetUserFiles_Request) GetStartindexOverride() uint32 {
	if x != nil && x.StartindexOverride != nil {
		return *x.StartindexOverride
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Request) GetDesiredRevision() EPublishedFileRevision {
	if x != nil && x.DesiredRevision != nil {
		return *x.DesiredRevision
	}
	return Default_CPublishedFile_GetUserFiles_Request_DesiredRevision
}

func (x *CPublishedFile_GetUserFiles_Request) GetReturnApps() bool {
	if x != nil && x.ReturnApps != nil {
		return *x.ReturnApps
	}
	return false
}

type CPublishedFile_GetUserFiles_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total                *uint32                                     `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Startindex           *uint32                                     `protobuf:"varint,2,opt,name=startindex" json:"startindex,omitempty"`
	Publishedfiledetails []*PublishedFileDetails                     `protobuf:"bytes,3,rep,name=publishedfiledetails" json:"publishedfiledetails,omitempty"`
	Apps                 []*CPublishedFile_GetUserFiles_Response_App `protobuf:"bytes,4,rep,name=apps" json:"apps,omitempty"`
}

func (x *CPublishedFile_GetUserFiles_Response) Reset() {
	*x = CPublishedFile_GetUserFiles_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetUserFiles_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserFiles_Response) ProtoMessage() {}

func (x *CPublishedFile_GetUserFiles_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserFiles_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserFiles_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{19}
}

func (x *CPublishedFile_GetUserFiles_Response) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Response) GetStartindex() uint32 {
	if x != nil && x.Startindex != nil {
		return *x.Startindex
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Response) GetPublishedfiledetails() []*PublishedFileDetails {
	if x != nil {
		return x.Publishedfiledetails
	}
	return nil
}

func (x *CPublishedFile_GetUserFiles_Response) GetApps() []*CPublishedFile_GetUserFiles_Response_App {
	if x != nil {
		return x.Apps
	}
	return nil
}

type CPublishedFile_AreFilesInSubscriptionList_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid            *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Publishedfileids []uint64 `protobuf:"fixed64,2,rep,name=publishedfileids" json:"publishedfileids,omitempty"`
	Listtype         *uint32  `protobuf:"varint,3,opt,name=listtype" json:"listtype,omitempty"`
	Filetype         *uint32  `protobuf:"varint,4,opt,name=filetype" json:"filetype,omitempty"`
	Workshopfiletype *uint32  `protobuf:"varint,5,opt,name=workshopfiletype" json:"workshopfiletype,omitempty"`
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Request) Reset() {
	*x = CPublishedFile_AreFilesInSubscriptionList_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_AreFilesInSubscriptionList_Request) ProtoMessage() {}

func (x *CPublishedFile_AreFilesInSubscriptionList_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_AreFilesInSubscriptionList_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_AreFilesInSubscriptionList_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Request) GetPublishedfileids() []uint64 {
	if x != nil {
		return x.Publishedfileids
	}
	return nil
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Request) GetListtype() uint32 {
	if x != nil && x.Listtype != nil {
		return *x.Listtype
	}
	return 0
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Request) GetFiletype() uint32 {
	if x != nil && x.Filetype != nil {
		return *x.Filetype
	}
	return 0
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Request) GetWorkshopfiletype() uint32 {
	if x != nil && x.Workshopfiletype != nil {
		return *x.Workshopfiletype
	}
	return 0
}

type CPublishedFile_AreFilesInSubscriptionList_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*CPublishedFile_AreFilesInSubscriptionList_Response_InList `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Response) Reset() {
	*x = CPublishedFile_AreFilesInSubscriptionList_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_AreFilesInSubscriptionList_Response) ProtoMessage() {}

func (x *CPublishedFile_AreFilesInSubscriptionList_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_AreFilesInSubscriptionList_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_AreFilesInSubscriptionList_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{21}
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Response) GetFiles() []*CPublishedFile_AreFilesInSubscriptionList_Response_InList {
	if x != nil {
		return x.Files
	}
	return nil
}

type CPublishedFile_Update_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid           *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Publishedfileid *uint64  `protobuf:"fixed64,2,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Title           *string  `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	FileDescription *string  `protobuf:"bytes,4,opt,name=file_description,json=fileDescription" json:"file_description,omitempty"`
	Visibility      *uint32  `protobuf:"varint,5,opt,name=visibility" json:"visibility,omitempty"`
	Tags            []string `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
	Filename        *string  `protobuf:"bytes,7,opt,name=filename" json:"filename,omitempty"`
	PreviewFilename *string  `protobuf:"bytes,8,opt,name=preview_filename,json=previewFilename" json:"preview_filename,omitempty"`
	SpoilerTag      *bool    `protobuf:"varint,10,opt,name=spoiler_tag,json=spoilerTag" json:"spoiler_tag,omitempty"`
	ImageWidth      *uint32  `protobuf:"varint,15,opt,name=image_width,json=imageWidth" json:"image_width,omitempty"`
	ImageHeight     *uint32  `protobuf:"varint,16,opt,name=image_height,json=imageHeight" json:"image_height,omitempty"`
	Language        *int32   `protobuf:"varint,17,opt,name=language" json:"language,omitempty"`
}

func (x *CPublishedFile_Update_Request) Reset() {
	*x = CPublishedFile_Update_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Update_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Update_Request) ProtoMessage() {}

func (x *CPublishedFile_Update_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Update_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Update_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{22}
}

func (x *CPublishedFile_Update_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_Update_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_Update_Request) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CPublishedFile_Update_Request) GetFileDescription() string {
	if x != nil && x.FileDescription != nil {
		return *x.FileDescription
	}
	return ""
}

func (x *CPublishedFile_Update_Request) GetVisibility() uint32 {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return 0
}

func (x *CPublishedFile_Update_Request) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CPublishedFile_Update_Request) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CPublishedFile_Update_Request) GetPreviewFilename() string {
	if x != nil && x.PreviewFilename != nil {
		return *x.PreviewFilename
	}
	return ""
}

func (x *CPublishedFile_Update_Request) GetSpoilerTag() bool {
	if x != nil && x.SpoilerTag != nil {
		return *x.SpoilerTag
	}
	return false
}

func (x *CPublishedFile_Update_Request) GetImageWidth() uint32 {
	if x != nil && x.ImageWidth != nil {
		return *x.ImageWidth
	}
	return 0
}

func (x *CPublishedFile_Update_Request) GetImageHeight() uint32 {
	if x != nil && x.ImageHeight != nil {
		return *x.ImageHeight
	}
	return 0
}

func (x *CPublishedFile_Update_Request) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CPublishedFile_Update_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPublishedFile_Update_Response) Reset() {
	*x = CPublishedFile_Update_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Update_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Update_Response) ProtoMessage() {}

func (x *CPublishedFile_Update_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Update_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Update_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{23}
}

type CPublishedFile_Delete_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"fixed64,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Appid           *uint32 `protobuf:"varint,5,opt,name=appid" json:"appid,omitempty"`
}

func (x *CPublishedFile_Delete_Request) Reset() {
	*x = CPublishedFile_Delete_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Delete_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Delete_Request) ProtoMessage() {}

func (x *CPublishedFile_Delete_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Delete_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Delete_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{24}
}

func (x *CPublishedFile_Delete_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_Delete_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CPublishedFile_Delete_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPublishedFile_Delete_Response) Reset() {
	*x = CPublishedFile_Delete_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_Delete_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_Delete_Response) ProtoMessage() {}

func (x *CPublishedFile_Delete_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_Delete_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_Delete_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{25}
}

type CPublishedFile_GetChangeHistoryEntry_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"fixed64,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Timestamp       *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Language        *int32  `protobuf:"varint,3,opt,name=language" json:"language,omitempty"`
}

func (x *CPublishedFile_GetChangeHistoryEntry_Request) Reset() {
	*x = CPublishedFile_GetChangeHistoryEntry_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetChangeHistoryEntry_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetChangeHistoryEntry_Request) ProtoMessage() {}

func (x *CPublishedFile_GetChangeHistoryEntry_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetChangeHistoryEntry_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetChangeHistoryEntry_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{26}
}

func (x *CPublishedFile_GetChangeHistoryEntry_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_GetChangeHistoryEntry_Request) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CPublishedFile_GetChangeHistoryEntry_Request) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CPublishedFile_GetChangeHistoryEntry_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeDescription *string `protobuf:"bytes,1,opt,name=change_description,json=changeDescription" json:"change_description,omitempty"`
	Language          *int32  `protobuf:"varint,2,opt,name=language" json:"language,omitempty"`
}

func (x *CPublishedFile_GetChangeHistoryEntry_Response) Reset() {
	*x = CPublishedFile_GetChangeHistoryEntry_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetChangeHistoryEntry_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetChangeHistoryEntry_Response) ProtoMessage() {}

func (x *CPublishedFile_GetChangeHistoryEntry_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetChangeHistoryEntry_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetChangeHistoryEntry_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{27}
}

func (x *CPublishedFile_GetChangeHistoryEntry_Response) GetChangeDescription() string {
	if x != nil && x.ChangeDescription != nil {
		return *x.ChangeDescription
	}
	return ""
}

func (x *CPublishedFile_GetChangeHistoryEntry_Response) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CPublishedFile_GetChangeHistory_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"fixed64,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	TotalOnly       *bool   `protobuf:"varint,2,opt,name=total_only,json=totalOnly" json:"total_only,omitempty"`
	Startindex      *uint32 `protobuf:"varint,3,opt,name=startindex" json:"startindex,omitempty"`
	Count           *uint32 `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Language        *int32  `protobuf:"varint,5,opt,name=language,def=0" json:"language,omitempty"`
}

// Default values for CPublishedFile_GetChangeHistory_Request fields.
const (
	Default_CPublishedFile_GetChangeHistory_Request_Language = int32(0)
)

func (x *CPublishedFile_GetChangeHistory_Request) Reset() {
	*x = CPublishedFile_GetChangeHistory_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetChangeHistory_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetChangeHistory_Request) ProtoMessage() {}

func (x *CPublishedFile_GetChangeHistory_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetChangeHistory_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetChangeHistory_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{28}
}

func (x *CPublishedFile_GetChangeHistory_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_GetChangeHistory_Request) GetTotalOnly() bool {
	if x != nil && x.TotalOnly != nil {
		return *x.TotalOnly
	}
	return false
}

func (x *CPublishedFile_GetChangeHistory_Request) GetStartindex() uint32 {
	if x != nil && x.Startindex != nil {
		return *x.Startindex
	}
	return 0
}

func (x *CPublishedFile_GetChangeHistory_Request) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CPublishedFile_GetChangeHistory_Request) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return Default_CPublishedFile_GetChangeHistory_Request_Language
}

type CPublishedFile_GetChangeHistory_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []*CPublishedFile_GetChangeHistory_Response_ChangeLog `protobuf:"bytes,1,rep,name=changes" json:"changes,omitempty"`
	Total   *uint32                                               `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (x *CPublishedFile_GetChangeHistory_Response) Reset() {
	*x = CPublishedFile_GetChangeHistory_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetChangeHistory_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetChangeHistory_Response) ProtoMessage() {}

func (x *CPublishedFile_GetChangeHistory_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetChangeHistory_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetChangeHistory_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{29}
}

func (x *CPublishedFile_GetChangeHistory_Response) GetChanges() []*CPublishedFile_GetChangeHistory_Response_ChangeLog {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *CPublishedFile_GetChangeHistory_Response) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

type CPublishedFile_RefreshVotingQueue_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid            *uint32                 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	MatchingFileType *uint32                 `protobuf:"varint,2,opt,name=matching_file_type,json=matchingFileType" json:"matching_file_type,omitempty"`
	Tags             []string                `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	MatchAllTags     *bool                   `protobuf:"varint,4,opt,name=match_all_tags,json=matchAllTags,def=1" json:"match_all_tags,omitempty"`
	ExcludedTags     []string                `protobuf:"bytes,5,rep,name=excluded_tags,json=excludedTags" json:"excluded_tags,omitempty"`
	DesiredQueueSize *uint32                 `protobuf:"varint,6,opt,name=desired_queue_size,json=desiredQueueSize" json:"desired_queue_size,omitempty"`
	DesiredRevision  *EPublishedFileRevision `protobuf:"varint,8,opt,name=desired_revision,json=desiredRevision,enum=EPublishedFileRevision,def=0" json:"desired_revision,omitempty"`
}

// Default values for CPublishedFile_RefreshVotingQueue_Request fields.
const (
	Default_CPublishedFile_RefreshVotingQueue_Request_MatchAllTags    = bool(true)
	Default_CPublishedFile_RefreshVotingQueue_Request_DesiredRevision = EPublishedFileRevision_k_EPublishedFileRevision_Default
)

func (x *CPublishedFile_RefreshVotingQueue_Request) Reset() {
	*x = CPublishedFile_RefreshVotingQueue_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_RefreshVotingQueue_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_RefreshVotingQueue_Request) ProtoMessage() {}

func (x *CPublishedFile_RefreshVotingQueue_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_RefreshVotingQueue_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_RefreshVotingQueue_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{30}
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetMatchingFileType() uint32 {
	if x != nil && x.MatchingFileType != nil {
		return *x.MatchingFileType
	}
	return 0
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetMatchAllTags() bool {
	if x != nil && x.MatchAllTags != nil {
		return *x.MatchAllTags
	}
	return Default_CPublishedFile_RefreshVotingQueue_Request_MatchAllTags
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetExcludedTags() []string {
	if x != nil {
		return x.ExcludedTags
	}
	return nil
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetDesiredQueueSize() uint32 {
	if x != nil && x.DesiredQueueSize != nil {
		return *x.DesiredQueueSize
	}
	return 0
}

func (x *CPublishedFile_RefreshVotingQueue_Request) GetDesiredRevision() EPublishedFileRevision {
	if x != nil && x.DesiredRevision != nil {
		return *x.DesiredRevision
	}
	return Default_CPublishedFile_RefreshVotingQueue_Request_DesiredRevision
}

type CPublishedFile_RefreshVotingQueue_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPublishedFile_RefreshVotingQueue_Response) Reset() {
	*x = CPublishedFile_RefreshVotingQueue_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_RefreshVotingQueue_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_RefreshVotingQueue_Response) ProtoMessage() {}

func (x *CPublishedFile_RefreshVotingQueue_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_RefreshVotingQueue_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_RefreshVotingQueue_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{31}
}

type CPublishedFile_QueryFiles_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryType                  *uint32                                       `protobuf:"varint,1,opt,name=query_type,json=queryType" json:"query_type,omitempty"`
	Page                       *uint32                                       `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
	Cursor                     *string                                       `protobuf:"bytes,39,opt,name=cursor" json:"cursor,omitempty"`
	Numperpage                 *uint32                                       `protobuf:"varint,3,opt,name=numperpage,def=1" json:"numperpage,omitempty"`
	CreatorAppid               *uint32                                       `protobuf:"varint,4,opt,name=creator_appid,json=creatorAppid" json:"creator_appid,omitempty"`
	Appid                      *uint32                                       `protobuf:"varint,5,opt,name=appid" json:"appid,omitempty"`
	Requiredtags               []string                                      `protobuf:"bytes,6,rep,name=requiredtags" json:"requiredtags,omitempty"`
	Excludedtags               []string                                      `protobuf:"bytes,7,rep,name=excludedtags" json:"excludedtags,omitempty"`
	MatchAllTags               *bool                                         `protobuf:"varint,8,opt,name=match_all_tags,json=matchAllTags,def=1" json:"match_all_tags,omitempty"`
	RequiredFlags              []string                                      `protobuf:"bytes,9,rep,name=required_flags,json=requiredFlags" json:"required_flags,omitempty"`
	OmittedFlags               []string                                      `protobuf:"bytes,10,rep,name=omitted_flags,json=omittedFlags" json:"omitted_flags,omitempty"`
	SearchText                 *string                                       `protobuf:"bytes,11,opt,name=search_text,json=searchText" json:"search_text,omitempty"`
	Filetype                   *uint32                                       `protobuf:"varint,12,opt,name=filetype" json:"filetype,omitempty"`
	ChildPublishedfileid       *uint64                                       `protobuf:"fixed64,13,opt,name=child_publishedfileid,json=childPublishedfileid" json:"child_publishedfileid,omitempty"`
	Days                       *uint32                                       `protobuf:"varint,14,opt,name=days" json:"days,omitempty"`
	IncludeRecentVotesOnly     *bool                                         `protobuf:"varint,15,opt,name=include_recent_votes_only,json=includeRecentVotesOnly" json:"include_recent_votes_only,omitempty"`
	CacheMaxAgeSeconds         *uint32                                       `protobuf:"varint,31,opt,name=cache_max_age_seconds,json=cacheMaxAgeSeconds,def=0" json:"cache_max_age_seconds,omitempty"`
	Language                   *int32                                        `protobuf:"varint,33,opt,name=language,def=0" json:"language,omitempty"`
	RequiredKvTags             []*CPublishedFile_QueryFiles_Request_KVTag    `protobuf:"bytes,34,rep,name=required_kv_tags,json=requiredKvTags" json:"required_kv_tags,omitempty"`
	Taggroups                  []*CPublishedFile_QueryFiles_Request_TagGroup `protobuf:"bytes,42,rep,name=taggroups" json:"taggroups,omitempty"`
	DateRangeCreated           *CPublishedFile_QueryFiles_Request_DateRange  `protobuf:"bytes,44,opt,name=date_range_created,json=dateRangeCreated" json:"date_range_created,omitempty"`
	DateRangeUpdated           *CPublishedFile_QueryFiles_Request_DateRange  `protobuf:"bytes,45,opt,name=date_range_updated,json=dateRangeUpdated" json:"date_range_updated,omitempty"`
	ExcludedContentDescriptors []EContentDescriptorID                        `protobuf:"varint,46,rep,name=excluded_content_descriptors,json=excludedContentDescriptors,enum=EContentDescriptorID" json:"excluded_content_descriptors,omitempty"`
	Totalonly                  *bool                                         `protobuf:"varint,16,opt,name=totalonly" json:"totalonly,omitempty"`
	IdsOnly                    *bool                                         `protobuf:"varint,35,opt,name=ids_only,json=idsOnly" json:"ids_only,omitempty"`
	ReturnVoteData             *bool                                         `protobuf:"varint,17,opt,name=return_vote_data,json=returnVoteData" json:"return_vote_data,omitempty"`
	ReturnTags                 *bool                                         `protobuf:"varint,18,opt,name=return_tags,json=returnTags" json:"return_tags,omitempty"`
	ReturnKvTags               *bool                                         `protobuf:"varint,19,opt,name=return_kv_tags,json=returnKvTags" json:"return_kv_tags,omitempty"`
	ReturnPreviews             *bool                                         `protobuf:"varint,20,opt,name=return_previews,json=returnPreviews" json:"return_previews,omitempty"`
	ReturnChildren             *bool                                         `protobuf:"varint,21,opt,name=return_children,json=returnChildren" json:"return_children,omitempty"`
	ReturnShortDescription     *bool                                         `protobuf:"varint,22,opt,name=return_short_description,json=returnShortDescription" json:"return_short_description,omitempty"`
	ReturnForSaleData          *bool                                         `protobuf:"varint,30,opt,name=return_for_sale_data,json=returnForSaleData" json:"return_for_sale_data,omitempty"`
	ReturnMetadata             *bool                                         `protobuf:"varint,32,opt,name=return_metadata,json=returnMetadata,def=0" json:"return_metadata,omitempty"`
	ReturnPlaytimeStats        *uint32                                       `protobuf:"varint,36,opt,name=return_playtime_stats,json=returnPlaytimeStats" json:"return_playtime_stats,omitempty"`
	ReturnDetails              *bool                                         `protobuf:"varint,37,opt,name=return_details,json=returnDetails" json:"return_details,omitempty"`
	StripDescriptionBbcode     *bool                                         `protobuf:"varint,38,opt,name=strip_description_bbcode,json=stripDescriptionBbcode" json:"strip_description_bbcode,omitempty"`
	DesiredRevision            *EPublishedFileRevision                       `protobuf:"varint,40,opt,name=desired_revision,json=desiredRevision,enum=EPublishedFileRevision,def=0" json:"desired_revision,omitempty"`
	ReturnReactions            *bool                                         `protobuf:"varint,43,opt,name=return_reactions,json=returnReactions,def=0" json:"return_reactions,omitempty"`
}

// Default values for CPublishedFile_QueryFiles_Request fields.
const (
	Default_CPublishedFile_QueryFiles_Request_Numperpage         = uint32(1)
	Default_CPublishedFile_QueryFiles_Request_MatchAllTags       = bool(true)
	Default_CPublishedFile_QueryFiles_Request_CacheMaxAgeSeconds = uint32(0)
	Default_CPublishedFile_QueryFiles_Request_Language           = int32(0)
	Default_CPublishedFile_QueryFiles_Request_ReturnMetadata     = bool(false)
	Default_CPublishedFile_QueryFiles_Request_DesiredRevision    = EPublishedFileRevision_k_EPublishedFileRevision_Default
	Default_CPublishedFile_QueryFiles_Request_ReturnReactions    = bool(false)
)

func (x *CPublishedFile_QueryFiles_Request) Reset() {
	*x = CPublishedFile_QueryFiles_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_QueryFiles_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_QueryFiles_Request) ProtoMessage() {}

func (x *CPublishedFile_QueryFiles_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_QueryFiles_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_QueryFiles_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{32}
}

func (x *CPublishedFile_QueryFiles_Request) GetQueryType() uint32 {
	if x != nil && x.QueryType != nil {
		return *x.QueryType
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Request) GetPage() uint32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Request) GetCursor() string {
	if x != nil && x.Cursor != nil {
		return *x.Cursor
	}
	return ""
}

func (x *CPublishedFile_QueryFiles_Request) GetNumperpage() uint32 {
	if x != nil && x.Numperpage != nil {
		return *x.Numperpage
	}
	return Default_CPublishedFile_QueryFiles_Request_Numperpage
}

func (x *CPublishedFile_QueryFiles_Request) GetCreatorAppid() uint32 {
	if x != nil && x.CreatorAppid != nil {
		return *x.CreatorAppid
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Request) GetRequiredtags() []string {
	if x != nil {
		return x.Requiredtags
	}
	return nil
}

func (x *CPublishedFile_QueryFiles_Request) GetExcludedtags() []string {
	if x != nil {
		return x.Excludedtags
	}
	return nil
}

func (x *CPublishedFile_QueryFiles_Request) GetMatchAllTags() bool {
	if x != nil && x.MatchAllTags != nil {
		return *x.MatchAllTags
	}
	return Default_CPublishedFile_QueryFiles_Request_MatchAllTags
}

func (x *CPublishedFile_QueryFiles_Request) GetRequiredFlags() []string {
	if x != nil {
		return x.RequiredFlags
	}
	return nil
}

func (x *CPublishedFile_QueryFiles_Request) GetOmittedFlags() []string {
	if x != nil {
		return x.OmittedFlags
	}
	return nil
}

func (x *CPublishedFile_QueryFiles_Request) GetSearchText() string {
	if x != nil && x.SearchText != nil {
		return *x.SearchText
	}
	return ""
}

func (x *CPublishedFile_QueryFiles_Request) GetFiletype() uint32 {
	if x != nil && x.Filetype != nil {
		return *x.Filetype
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Request) GetChildPublishedfileid() uint64 {
	if x != nil && x.ChildPublishedfileid != nil {
		return *x.ChildPublishedfileid
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Request) GetDays() uint32 {
	if x != nil && x.Days != nil {
		return *x.Days
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Request) GetIncludeRecentVotesOnly() bool {
	if x != nil && x.IncludeRecentVotesOnly != nil {
		return *x.IncludeRecentVotesOnly
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetCacheMaxAgeSeconds() uint32 {
	if x != nil && x.CacheMaxAgeSeconds != nil {
		return *x.CacheMaxAgeSeconds
	}
	return Default_CPublishedFile_QueryFiles_Request_CacheMaxAgeSeconds
}

func (x *CPublishedFile_QueryFiles_Request) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return Default_CPublishedFile_QueryFiles_Request_Language
}

func (x *CPublishedFile_QueryFiles_Request) GetRequiredKvTags() []*CPublishedFile_QueryFiles_Request_KVTag {
	if x != nil {
		return x.RequiredKvTags
	}
	return nil
}

func (x *CPublishedFile_QueryFiles_Request) GetTaggroups() []*CPublishedFile_QueryFiles_Request_TagGroup {
	if x != nil {
		return x.Taggroups
	}
	return nil
}

func (x *CPublishedFile_QueryFiles_Request) GetDateRangeCreated() *CPublishedFile_QueryFiles_Request_DateRange {
	if x != nil {
		return x.DateRangeCreated
	}
	return nil
}

func (x *CPublishedFile_QueryFiles_Request) GetDateRangeUpdated() *CPublishedFile_QueryFiles_Request_DateRange {
	if x != nil {
		return x.DateRangeUpdated
	}
	return nil
}

func (x *CPublishedFile_QueryFiles_Request) GetExcludedContentDescriptors() []EContentDescriptorID {
	if x != nil {
		return x.ExcludedContentDescriptors
	}
	return nil
}

func (x *CPublishedFile_QueryFiles_Request) GetTotalonly() bool {
	if x != nil && x.Totalonly != nil {
		return *x.Totalonly
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetIdsOnly() bool {
	if x != nil && x.IdsOnly != nil {
		return *x.IdsOnly
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnVoteData() bool {
	if x != nil && x.ReturnVoteData != nil {
		return *x.ReturnVoteData
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnTags() bool {
	if x != nil && x.ReturnTags != nil {
		return *x.ReturnTags
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnKvTags() bool {
	if x != nil && x.ReturnKvTags != nil {
		return *x.ReturnKvTags
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnPreviews() bool {
	if x != nil && x.ReturnPreviews != nil {
		return *x.ReturnPreviews
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnChildren() bool {
	if x != nil && x.ReturnChildren != nil {
		return *x.ReturnChildren
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnShortDescription() bool {
	if x != nil && x.ReturnShortDescription != nil {
		return *x.ReturnShortDescription
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnForSaleData() bool {
	if x != nil && x.ReturnForSaleData != nil {
		return *x.ReturnForSaleData
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnMetadata() bool {
	if x != nil && x.ReturnMetadata != nil {
		return *x.ReturnMetadata
	}
	return Default_CPublishedFile_QueryFiles_Request_ReturnMetadata
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnPlaytimeStats() uint32 {
	if x != nil && x.ReturnPlaytimeStats != nil {
		return *x.ReturnPlaytimeStats
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnDetails() bool {
	if x != nil && x.ReturnDetails != nil {
		return *x.ReturnDetails
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetStripDescriptionBbcode() bool {
	if x != nil && x.StripDescriptionBbcode != nil {
		return *x.StripDescriptionBbcode
	}
	return false
}

func (x *CPublishedFile_QueryFiles_Request) GetDesiredRevision() EPublishedFileRevision {
	if x != nil && x.DesiredRevision != nil {
		return *x.DesiredRevision
	}
	return Default_CPublishedFile_QueryFiles_Request_DesiredRevision
}

func (x *CPublishedFile_QueryFiles_Request) GetReturnReactions() bool {
	if x != nil && x.ReturnReactions != nil {
		return *x.ReturnReactions
	}
	return Default_CPublishedFile_QueryFiles_Request_ReturnReactions
}

type CPublishedFile_QueryFiles_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total                *uint32                 `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Publishedfiledetails []*PublishedFileDetails `protobuf:"bytes,2,rep,name=publishedfiledetails" json:"publishedfiledetails,omitempty"`
	NextCursor           *string                 `protobuf:"bytes,3,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
}

func (x *CPublishedFile_QueryFiles_Response) Reset() {
	*x = CPublishedFile_QueryFiles_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_QueryFiles_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_QueryFiles_Response) ProtoMessage() {}

func (x *CPublishedFile_QueryFiles_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_QueryFiles_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_QueryFiles_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{33}
}

func (x *CPublishedFile_QueryFiles_Response) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Response) GetPublishedfiledetails() []*PublishedFileDetails {
	if x != nil {
		return x.Publishedfiledetails
	}
	return nil
}

func (x *CPublishedFile_QueryFiles_Response) GetNextCursor() string {
	if x != nil && x.NextCursor != nil {
		return *x.NextCursor
	}
	return ""
}

type CPublishedFile_AddAppRelationship_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Appid           *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Relationship    *uint32 `protobuf:"varint,3,opt,name=relationship" json:"relationship,omitempty"`
}

func (x *CPublishedFile_AddAppRelationship_Request) Reset() {
	*x = CPublishedFile_AddAppRelationship_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_AddAppRelationship_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_AddAppRelationship_Request) ProtoMessage() {}

func (x *CPublishedFile_AddAppRelationship_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_AddAppRelationship_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_AddAppRelationship_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{34}
}

func (x *CPublishedFile_AddAppRelationship_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_AddAppRelationship_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_AddAppRelationship_Request) GetRelationship() uint32 {
	if x != nil && x.Relationship != nil {
		return *x.Relationship
	}
	return 0
}

type CPublishedFile_AddAppRelationship_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPublishedFile_AddAppRelationship_Response) Reset() {
	*x = CPublishedFile_AddAppRelationship_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_AddAppRelationship_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_AddAppRelationship_Response) ProtoMessage() {}

func (x *CPublishedFile_AddAppRelationship_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_AddAppRelationship_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_AddAppRelationship_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{35}
}

type CPublishedFile_RemoveAppRelationship_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Appid           *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Relationship    *uint32 `protobuf:"varint,3,opt,name=relationship" json:"relationship,omitempty"`
}

func (x *CPublishedFile_RemoveAppRelationship_Request) Reset() {
	*x = CPublishedFile_RemoveAppRelationship_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_RemoveAppRelationship_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_RemoveAppRelationship_Request) ProtoMessage() {}

func (x *CPublishedFile_RemoveAppRelationship_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_RemoveAppRelationship_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_RemoveAppRelationship_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{36}
}

func (x *CPublishedFile_RemoveAppRelationship_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_RemoveAppRelationship_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_RemoveAppRelationship_Request) GetRelationship() uint32 {
	if x != nil && x.Relationship != nil {
		return *x.Relationship
	}
	return 0
}

type CPublishedFile_RemoveAppRelationship_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPublishedFile_RemoveAppRelationship_Response) Reset() {
	*x = CPublishedFile_RemoveAppRelationship_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_RemoveAppRelationship_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_RemoveAppRelationship_Response) ProtoMessage() {}

func (x *CPublishedFile_RemoveAppRelationship_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_RemoveAppRelationship_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_RemoveAppRelationship_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{37}
}

type CPublishedFile_GetAppRelationships_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
}

func (x *CPublishedFile_GetAppRelationships_Request) Reset() {
	*x = CPublishedFile_GetAppRelationships_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetAppRelationships_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetAppRelationships_Request) ProtoMessage() {}

func (x *CPublishedFile_GetAppRelationships_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetAppRelationships_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetAppRelationships_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{38}
}

func (x *CPublishedFile_GetAppRelationships_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

type CPublishedFile_GetAppRelationships_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppRelationships []*CPublishedFile_GetAppRelationships_Response_AppRelationship `protobuf:"bytes,3,rep,name=app_relationships,json=appRelationships" json:"app_relationships,omitempty"`
}

func (x *CPublishedFile_GetAppRelationships_Response) Reset() {
	*x = CPublishedFile_GetAppRelationships_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetAppRelationships_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetAppRelationships_Response) ProtoMessage() {}

func (x *CPublishedFile_GetAppRelationships_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetAppRelationships_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetAppRelationships_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{39}
}

func (x *CPublishedFile_GetAppRelationships_Response) GetAppRelationships() []*CPublishedFile_GetAppRelationships_Response_AppRelationship {
	if x != nil {
		return x.AppRelationships
	}
	return nil
}

type CPublishedFile_GetAppRelationshipsBatched_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileids   []uint64 `protobuf:"varint,1,rep,name=publishedfileids" json:"publishedfileids,omitempty"`
	FilterRelationship *uint32  `protobuf:"varint,2,opt,name=filter_relationship,json=filterRelationship" json:"filter_relationship,omitempty"`
}

func (x *CPublishedFile_GetAppRelationshipsBatched_Request) Reset() {
	*x = CPublishedFile_GetAppRelationshipsBatched_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetAppRelationshipsBatched_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetAppRelationshipsBatched_Request) ProtoMessage() {}

func (x *CPublishedFile_GetAppRelationshipsBatched_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetAppRelationshipsBatched_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetAppRelationshipsBatched_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{40}
}

func (x *CPublishedFile_GetAppRelationshipsBatched_Request) GetPublishedfileids() []uint64 {
	if x != nil {
		return x.Publishedfileids
	}
	return nil
}

func (x *CPublishedFile_GetAppRelationshipsBatched_Request) GetFilterRelationship() uint32 {
	if x != nil && x.FilterRelationship != nil {
		return *x.FilterRelationship
	}
	return 0
}

type CPublishedFile_GetAppRelationshipsBatched_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relationships []*CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship `protobuf:"bytes,1,rep,name=relationships" json:"relationships,omitempty"`
}

func (x *CPublishedFile_GetAppRelationshipsBatched_Response) Reset() {
	*x = CPublishedFile_GetAppRelationshipsBatched_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetAppRelationshipsBatched_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetAppRelationshipsBatched_Response) ProtoMessage() {}

func (x *CPublishedFile_GetAppRelationshipsBatched_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetAppRelationshipsBatched_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetAppRelationshipsBatched_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{41}
}

func (x *CPublishedFile_GetAppRelationshipsBatched_Response) GetRelationships() []*CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship {
	if x != nil {
		return x.Relationships
	}
	return nil
}

type CPublishedFile_StartPlaytimeTracking_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid            *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Publishedfileids []uint64 `protobuf:"varint,2,rep,name=publishedfileids" json:"publishedfileids,omitempty"`
}

func (x *CPublishedFile_StartPlaytimeTracking_Request) Reset() {
	*x = CPublishedFile_StartPlaytimeTracking_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_StartPlaytimeTracking_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_StartPlaytimeTracking_Request) ProtoMessage() {}

func (x *CPublishedFile_StartPlaytimeTracking_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_StartPlaytimeTracking_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_StartPlaytimeTracking_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{42}
}

func (x *CPublishedFile_StartPlaytimeTracking_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_StartPlaytimeTracking_Request) GetPublishedfileids() []uint64 {
	if x != nil {
		return x.Publishedfileids
	}
	return nil
}

type CPublishedFile_StartPlaytimeTracking_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPublishedFile_StartPlaytimeTracking_Response) Reset() {
	*x = CPublishedFile_StartPlaytimeTracking_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_StartPlaytimeTracking_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_StartPlaytimeTracking_Response) ProtoMessage() {}

func (x *CPublishedFile_StartPlaytimeTracking_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_StartPlaytimeTracking_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_StartPlaytimeTracking_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{43}
}

type CPublishedFile_StopPlaytimeTracking_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid            *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Publishedfileids []uint64 `protobuf:"varint,2,rep,name=publishedfileids" json:"publishedfileids,omitempty"`
}

func (x *CPublishedFile_StopPlaytimeTracking_Request) Reset() {
	*x = CPublishedFile_StopPlaytimeTracking_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_StopPlaytimeTracking_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_StopPlaytimeTracking_Request) ProtoMessage() {}

func (x *CPublishedFile_StopPlaytimeTracking_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_StopPlaytimeTracking_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_StopPlaytimeTracking_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{44}
}

func (x *CPublishedFile_StopPlaytimeTracking_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_StopPlaytimeTracking_Request) GetPublishedfileids() []uint64 {
	if x != nil {
		return x.Publishedfileids
	}
	return nil
}

type CPublishedFile_StopPlaytimeTracking_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPublishedFile_StopPlaytimeTracking_Response) Reset() {
	*x = CPublishedFile_StopPlaytimeTracking_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_StopPlaytimeTracking_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_StopPlaytimeTracking_Response) ProtoMessage() {}

func (x *CPublishedFile_StopPlaytimeTracking_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_StopPlaytimeTracking_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_StopPlaytimeTracking_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{45}
}

type CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request) Reset() {
	*x = CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request) ProtoMessage() {}

func (x *CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{46}
}

func (x *CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response) Reset() {
	*x = CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response) ProtoMessage() {}

func (x *CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{47}
}

type CPublishedFile_SetPlaytimeForControllerConfigs_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid                 *uint32                                                                         `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	ControllerConfigUsage []*CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage `protobuf:"bytes,2,rep,name=controller_config_usage,json=controllerConfigUsage" json:"controller_config_usage,omitempty"`
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request) Reset() {
	*x = CPublishedFile_SetPlaytimeForControllerConfigs_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_SetPlaytimeForControllerConfigs_Request) ProtoMessage() {}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_SetPlaytimeForControllerConfigs_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_SetPlaytimeForControllerConfigs_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{48}
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request) GetControllerConfigUsage() []*CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage {
	if x != nil {
		return x.ControllerConfigUsage
	}
	return nil
}

type CPublishedFile_SetPlaytimeForControllerConfigs_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Response) Reset() {
	*x = CPublishedFile_SetPlaytimeForControllerConfigs_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_SetPlaytimeForControllerConfigs_Response) ProtoMessage() {}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_SetPlaytimeForControllerConfigs_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_SetPlaytimeForControllerConfigs_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{49}
}

type CPublishedFile_AddChild_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid      *uint64 `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	ChildPublishedfileid *uint64 `protobuf:"varint,2,opt,name=child_publishedfileid,json=childPublishedfileid" json:"child_publishedfileid,omitempty"`
}

func (x *CPublishedFile_AddChild_Request) Reset() {
	*x = CPublishedFile_AddChild_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_AddChild_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_AddChild_Request) ProtoMessage() {}

func (x *CPublishedFile_AddChild_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_AddChild_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_AddChild_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{50}
}

func (x *CPublishedFile_AddChild_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_AddChild_Request) GetChildPublishedfileid() uint64 {
	if x != nil && x.ChildPublishedfileid != nil {
		return *x.ChildPublishedfileid
	}
	return 0
}

type CPublishedFile_AddChild_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPublishedFile_AddChild_Response) Reset() {
	*x = CPublishedFile_AddChild_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_AddChild_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_AddChild_Response) ProtoMessage() {}

func (x *CPublishedFile_AddChild_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_AddChild_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_AddChild_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{51}
}

type CPublishedFile_RemoveChild_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid      *uint64 `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	ChildPublishedfileid *uint64 `protobuf:"varint,2,opt,name=child_publishedfileid,json=childPublishedfileid" json:"child_publishedfileid,omitempty"`
}

func (x *CPublishedFile_RemoveChild_Request) Reset() {
	*x = CPublishedFile_RemoveChild_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_RemoveChild_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_RemoveChild_Request) ProtoMessage() {}

func (x *CPublishedFile_RemoveChild_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_RemoveChild_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_RemoveChild_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{52}
}

func (x *CPublishedFile_RemoveChild_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_RemoveChild_Request) GetChildPublishedfileid() uint64 {
	if x != nil && x.ChildPublishedfileid != nil {
		return *x.ChildPublishedfileid
	}
	return 0
}

type CPublishedFile_RemoveChild_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CPublishedFile_RemoveChild_Response) Reset() {
	*x = CPublishedFile_RemoveChild_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_RemoveChild_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_RemoveChild_Response) ProtoMessage() {}

func (x *CPublishedFile_RemoveChild_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_RemoveChild_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_RemoveChild_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{53}
}

type CPublishedFile_GetUserVoteSummary_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileids []uint64 `protobuf:"fixed64,1,rep,name=publishedfileids" json:"publishedfileids,omitempty"`
}

func (x *CPublishedFile_GetUserVoteSummary_Request) Reset() {
	*x = CPublishedFile_GetUserVoteSummary_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetUserVoteSummary_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserVoteSummary_Request) ProtoMessage() {}

func (x *CPublishedFile_GetUserVoteSummary_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserVoteSummary_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserVoteSummary_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{54}
}

func (x *CPublishedFile_GetUserVoteSummary_Request) GetPublishedfileids() []uint64 {
	if x != nil {
		return x.Publishedfileids
	}
	return nil
}

type CPublishedFile_GetUserVoteSummary_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summaries []*CPublishedFile_GetUserVoteSummary_Response_VoteSummary `protobuf:"bytes,1,rep,name=summaries" json:"summaries,omitempty"`
}

func (x *CPublishedFile_GetUserVoteSummary_Response) Reset() {
	*x = CPublishedFile_GetUserVoteSummary_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetUserVoteSummary_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserVoteSummary_Response) ProtoMessage() {}

func (x *CPublishedFile_GetUserVoteSummary_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserVoteSummary_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserVoteSummary_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{55}
}

func (x *CPublishedFile_GetUserVoteSummary_Response) GetSummaries() []*CPublishedFile_GetUserVoteSummary_Response_VoteSummary {
	if x != nil {
		return x.Summaries
	}
	return nil
}

type CPublishedFile_GetItemChanges_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid           *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	LastTimeUpdated *uint32 `protobuf:"varint,2,opt,name=last_time_updated,json=lastTimeUpdated" json:"last_time_updated,omitempty"`
	NumItemsMax     *uint32 `protobuf:"varint,3,opt,name=num_items_max,json=numItemsMax" json:"num_items_max,omitempty"`
}

func (x *CPublishedFile_GetItemChanges_Request) Reset() {
	*x = CPublishedFile_GetItemChanges_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetItemChanges_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetItemChanges_Request) ProtoMessage() {}

func (x *CPublishedFile_GetItemChanges_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetItemChanges_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetItemChanges_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{56}
}

func (x *CPublishedFile_GetItemChanges_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_GetItemChanges_Request) GetLastTimeUpdated() uint32 {
	if x != nil && x.LastTimeUpdated != nil {
		return *x.LastTimeUpdated
	}
	return 0
}

func (x *CPublishedFile_GetItemChanges_Request) GetNumItemsMax() uint32 {
	if x != nil && x.NumItemsMax != nil {
		return *x.NumItemsMax
	}
	return 0
}

type CPublishedFile_GetItemChanges_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateTime    *uint32                                                    `protobuf:"varint,1,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	WorkshopItems []*CPublishedFile_GetItemChanges_Response_WorkshopItemInfo `protobuf:"bytes,2,rep,name=workshop_items,json=workshopItems" json:"workshop_items,omitempty"`
}

func (x *CPublishedFile_GetItemChanges_Response) Reset() {
	*x = CPublishedFile_GetItemChanges_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetItemChanges_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetItemChanges_Response) ProtoMessage() {}

func (x *CPublishedFile_GetItemChanges_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetItemChanges_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetItemChanges_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{57}
}

func (x *CPublishedFile_GetItemChanges_Response) GetUpdateTime() uint32 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *CPublishedFile_GetItemChanges_Response) GetWorkshopItems() []*CPublishedFile_GetItemChanges_Response_WorkshopItemInfo {
	if x != nil {
		return x.WorkshopItems
	}
	return nil
}

type CPublishedFile_GetContentDescriptors_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"fixed64,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
}

func (x *CPublishedFile_GetContentDescriptors_Request) Reset() {
	*x = CPublishedFile_GetContentDescriptors_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetContentDescriptors_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetContentDescriptors_Request) ProtoMessage() {}

func (x *CPublishedFile_GetContentDescriptors_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetContentDescriptors_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetContentDescriptors_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{58}
}

func (x *CPublishedFile_GetContentDescriptors_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

type CPublishedFile_GetContentDescriptors_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentDescriptors []*CPublishedFile_GetContentDescriptors_Response_ContentDescriptor `protobuf:"bytes,1,rep,name=content_descriptors,json=contentDescriptors" json:"content_descriptors,omitempty"`
}

func (x *CPublishedFile_GetContentDescriptors_Response) Reset() {
	*x = CPublishedFile_GetContentDescriptors_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetContentDescriptors_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetContentDescriptors_Response) ProtoMessage() {}

func (x *CPublishedFile_GetContentDescriptors_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetContentDescriptors_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetContentDescriptors_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{59}
}

func (x *CPublishedFile_GetContentDescriptors_Response) GetContentDescriptors() []*CPublishedFile_GetContentDescriptors_Response_ContentDescriptor {
	if x != nil {
		return x.ContentDescriptors
	}
	return nil
}

type CPublishedFile_UpdateContentDescriptors_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid     *uint64                `protobuf:"fixed64,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	DescriptorsToAdd    []EContentDescriptorID `protobuf:"varint,2,rep,name=descriptors_to_add,json=descriptorsToAdd,enum=EContentDescriptorID" json:"descriptors_to_add,omitempty"`
	DescriptorsToRemove []EContentDescriptorID `protobuf:"varint,3,rep,name=descriptors_to_remove,json=descriptorsToRemove,enum=EContentDescriptorID" json:"descriptors_to_remove,omitempty"`
}

func (x *CPublishedFile_UpdateContentDescriptors_Request) Reset() {
	*x = CPublishedFile_UpdateContentDescriptors_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_UpdateContentDescriptors_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_UpdateContentDescriptors_Request) ProtoMessage() {}

func (x *CPublishedFile_UpdateContentDescriptors_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_UpdateContentDescriptors_Request.ProtoReflect.Descriptor instead.
func (*CPublishedFile_UpdateContentDescriptors_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{60}
}

func (x *CPublishedFile_UpdateContentDescriptors_Request) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_UpdateContentDescriptors_Request) GetDescriptorsToAdd() []EContentDescriptorID {
	if x != nil {
		return x.DescriptorsToAdd
	}
	return nil
}

func (x *CPublishedFile_UpdateContentDescriptors_Request) GetDescriptorsToRemove() []EContentDescriptorID {
	if x != nil {
		return x.DescriptorsToRemove
	}
	return nil
}

type CPublishedFile_UpdateContentDescriptors_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimestampUpdated *uint32 `protobuf:"varint,1,opt,name=timestamp_updated,json=timestampUpdated" json:"timestamp_updated,omitempty"`
}

func (x *CPublishedFile_UpdateContentDescriptors_Response) Reset() {
	*x = CPublishedFile_UpdateContentDescriptors_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_UpdateContentDescriptors_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_UpdateContentDescriptors_Response) ProtoMessage() {}

func (x *CPublishedFile_UpdateContentDescriptors_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_UpdateContentDescriptors_Response.ProtoReflect.Descriptor instead.
func (*CPublishedFile_UpdateContentDescriptors_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{61}
}

func (x *CPublishedFile_UpdateContentDescriptors_Response) GetTimestampUpdated() uint32 {
	if x != nil && x.TimestampUpdated != nil {
		return *x.TimestampUpdated
	}
	return 0
}

type CPublishedFile_FileSubscribed_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64                                                    `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	AppId           *uint32                                                    `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	FileHcontent    *uint64                                                    `protobuf:"fixed64,3,opt,name=file_hcontent,json=fileHcontent" json:"file_hcontent,omitempty"`
	FileSize        *uint32                                                    `protobuf:"varint,4,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
	RtimeSubscribed *uint32                                                    `protobuf:"varint,5,opt,name=rtime_subscribed,json=rtimeSubscribed" json:"rtime_subscribed,omitempty"`
	IsDepotContent  *bool                                                      `protobuf:"varint,6,opt,name=is_depot_content,json=isDepotContent" json:"is_depot_content,omitempty"`
	RtimeUpdated    *uint32                                                    `protobuf:"varint,7,opt,name=rtime_updated,json=rtimeUpdated" json:"rtime_updated,omitempty"`
	Revisions       []*CPublishedFile_FileSubscribed_Notification_RevisionData `protobuf:"bytes,8,rep,name=revisions" json:"revisions,omitempty"`
}

func (x *CPublishedFile_FileSubscribed_Notification) Reset() {
	*x = CPublishedFile_FileSubscribed_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_FileSubscribed_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_FileSubscribed_Notification) ProtoMessage() {}

func (x *CPublishedFile_FileSubscribed_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_FileSubscribed_Notification.ProtoReflect.Descriptor instead.
func (*CPublishedFile_FileSubscribed_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{62}
}

func (x *CPublishedFile_FileSubscribed_Notification) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CPublishedFile_FileSubscribed_Notification) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *CPublishedFile_FileSubscribed_Notification) GetFileHcontent() uint64 {
	if x != nil && x.FileHcontent != nil {
		return *x.FileHcontent
	}
	return 0
}

func (x *CPublishedFile_FileSubscribed_Notification) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

func (x *CPublishedFile_FileSubscribed_Notification) GetRtimeSubscribed() uint32 {
	if x != nil && x.RtimeSubscribed != nil {
		return *x.RtimeSubscribed
	}
	return 0
}

func (x *CPublishedFile_FileSubscribed_Notification) GetIsDepotContent() bool {
	if x != nil && x.IsDepotContent != nil {
		return *x.IsDepotContent
	}
	return false
}

func (x *CPublishedFile_FileSubscribed_Notification) GetRtimeUpdated() uint32 {
	if x != nil && x.RtimeUpdated != nil {
		return *x.RtimeUpdated
	}
	return 0
}

func (x *CPublishedFile_FileSubscribed_Notification) GetRevisions() []*CPublishedFile_FileSubscribed_Notification_RevisionData {
	if x != nil {
		return x.Revisions
	}
	return nil
}

type CPublishedFile_FileUnsubscribed_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	AppId           *uint32 `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *CPublishedFile_FileUnsubscribed_Notification) Reset() {
	*x = CPublishedFile_FileUnsubscribed_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_FileUnsubscribed_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_FileUnsubscribed_Notification) ProtoMessage() {}

func (x *CPublishedFile_FileUnsubscribed_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_FileUnsubscribed_Notification.ProtoReflect.Descriptor instead.
func (*CPublishedFile_FileUnsubscribed_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{63}
}

func (x *CPublishedFile_FileUnsubscribed_Notification) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CPublishedFile_FileUnsubscribed_Notification) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type CPublishedFile_FileDeleted_Client_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	AppId           *uint32 `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
}

func (x *CPublishedFile_FileDeleted_Client_Notification) Reset() {
	*x = CPublishedFile_FileDeleted_Client_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_FileDeleted_Client_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_FileDeleted_Client_Notification) ProtoMessage() {}

func (x *CPublishedFile_FileDeleted_Client_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_FileDeleted_Client_Notification.ProtoReflect.Descriptor instead.
func (*CPublishedFile_FileDeleted_Client_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{64}
}

func (x *CPublishedFile_FileDeleted_Client_Notification) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CPublishedFile_FileDeleted_Client_Notification) GetAppId() uint32 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

type PublishedFileDetails_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag         *string `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	Adminonly   *bool   `protobuf:"varint,2,opt,name=adminonly" json:"adminonly,omitempty"`
	DisplayName *string `protobuf:"bytes,3,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
}

func (x *PublishedFileDetails_Tag) Reset() {
	*x = PublishedFileDetails_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedFileDetails_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_Tag) ProtoMessage() {}

func (x *PublishedFileDetails_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_Tag.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_Tag) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{14, 0}
}

func (x *PublishedFileDetails_Tag) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *PublishedFileDetails_Tag) GetAdminonly() bool {
	if x != nil && x.Adminonly != nil {
		return *x.Adminonly
	}
	return false
}

func (x *PublishedFileDetails_Tag) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

type PublishedFileDetails_Preview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Previewid         *uint64 `protobuf:"varint,1,opt,name=previewid" json:"previewid,omitempty"`
	Sortorder         *uint32 `protobuf:"varint,2,opt,name=sortorder" json:"sortorder,omitempty"`
	Url               *string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Size              *uint32 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Filename          *string `protobuf:"bytes,5,opt,name=filename" json:"filename,omitempty"`
	Youtubevideoid    *string `protobuf:"bytes,6,opt,name=youtubevideoid" json:"youtubevideoid,omitempty"`
	PreviewType       *uint32 `protobuf:"varint,7,opt,name=preview_type,json=previewType" json:"preview_type,omitempty"`
	ExternalReference *string `protobuf:"bytes,8,opt,name=external_reference,json=externalReference" json:"external_reference,omitempty"`
}

func (x *PublishedFileDetails_Preview) Reset() {
	*x = PublishedFileDetails_Preview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedFileDetails_Preview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_Preview) ProtoMessage() {}

func (x *PublishedFileDetails_Preview) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_Preview.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_Preview) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{14, 1}
}

func (x *PublishedFileDetails_Preview) GetPreviewid() uint64 {
	if x != nil && x.Previewid != nil {
		return *x.Previewid
	}
	return 0
}

func (x *PublishedFileDetails_Preview) GetSortorder() uint32 {
	if x != nil && x.Sortorder != nil {
		return *x.Sortorder
	}
	return 0
}

func (x *PublishedFileDetails_Preview) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PublishedFileDetails_Preview) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *PublishedFileDetails_Preview) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *PublishedFileDetails_Preview) GetYoutubevideoid() string {
	if x != nil && x.Youtubevideoid != nil {
		return *x.Youtubevideoid
	}
	return ""
}

func (x *PublishedFileDetails_Preview) GetPreviewType() uint32 {
	if x != nil && x.PreviewType != nil {
		return *x.PreviewType
	}
	return 0
}

func (x *PublishedFileDetails_Preview) GetExternalReference() string {
	if x != nil && x.ExternalReference != nil {
		return *x.ExternalReference
	}
	return ""
}

type PublishedFileDetails_Child struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Sortorder       *uint32 `protobuf:"varint,2,opt,name=sortorder" json:"sortorder,omitempty"`
	FileType        *uint32 `protobuf:"varint,3,opt,name=file_type,json=fileType" json:"file_type,omitempty"`
}

func (x *PublishedFileDetails_Child) Reset() {
	*x = PublishedFileDetails_Child{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedFileDetails_Child) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_Child) ProtoMessage() {}

func (x *PublishedFileDetails_Child) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_Child.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_Child) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{14, 2}
}

func (x *PublishedFileDetails_Child) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *PublishedFileDetails_Child) GetSortorder() uint32 {
	if x != nil && x.Sortorder != nil {
		return *x.Sortorder
	}
	return 0
}

func (x *PublishedFileDetails_Child) GetFileType() uint32 {
	if x != nil && x.FileType != nil {
		return *x.FileType
	}
	return 0
}

type PublishedFileDetails_KVTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *PublishedFileDetails_KVTag) Reset() {
	*x = PublishedFileDetails_KVTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedFileDetails_KVTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_KVTag) ProtoMessage() {}

func (x *PublishedFileDetails_KVTag) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_KVTag.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_KVTag) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{14, 3}
}

func (x *PublishedFileDetails_KVTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *PublishedFileDetails_KVTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type PublishedFileDetails_VoteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score     *float32 `protobuf:"fixed32,1,opt,name=score" json:"score,omitempty"`
	VotesUp   *uint32  `protobuf:"varint,2,opt,name=votes_up,json=votesUp" json:"votes_up,omitempty"`
	VotesDown *uint32  `protobuf:"varint,3,opt,name=votes_down,json=votesDown" json:"votes_down,omitempty"`
}

func (x *PublishedFileDetails_VoteData) Reset() {
	*x = PublishedFileDetails_VoteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedFileDetails_VoteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_VoteData) ProtoMessage() {}

func (x *PublishedFileDetails_VoteData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_VoteData.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_VoteData) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{14, 4}
}

func (x *PublishedFileDetails_VoteData) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *PublishedFileDetails_VoteData) GetVotesUp() uint32 {
	if x != nil && x.VotesUp != nil {
		return *x.VotesUp
	}
	return 0
}

func (x *PublishedFileDetails_VoteData) GetVotesDown() uint32 {
	if x != nil && x.VotesDown != nil {
		return *x.VotesDown
	}
	return 0
}

type PublishedFileDetails_ForSaleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsForSale             *bool                        `protobuf:"varint,1,opt,name=is_for_sale,json=isForSale" json:"is_for_sale,omitempty"`
	PriceCategory         *uint32                      `protobuf:"varint,2,opt,name=price_category,json=priceCategory" json:"price_category,omitempty"`
	Estatus               *EPublishedFileForSaleStatus `protobuf:"varint,3,opt,name=estatus,enum=EPublishedFileForSaleStatus,def=0" json:"estatus,omitempty"`
	PriceCategoryFloor    *uint32                      `protobuf:"varint,4,opt,name=price_category_floor,json=priceCategoryFloor" json:"price_category_floor,omitempty"`
	PriceIsPayWhatYouWant *bool                        `protobuf:"varint,5,opt,name=price_is_pay_what_you_want,json=priceIsPayWhatYouWant" json:"price_is_pay_what_you_want,omitempty"`
	DiscountPercentage    *uint32                      `protobuf:"varint,6,opt,name=discount_percentage,json=discountPercentage" json:"discount_percentage,omitempty"`
}

// Default values for PublishedFileDetails_ForSaleData fields.
const (
	Default_PublishedFileDetails_ForSaleData_Estatus = EPublishedFileForSaleStatus_k_PFFSS_NotForSale
)

func (x *PublishedFileDetails_ForSaleData) Reset() {
	*x = PublishedFileDetails_ForSaleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedFileDetails_ForSaleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_ForSaleData) ProtoMessage() {}

func (x *PublishedFileDetails_ForSaleData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_ForSaleData.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_ForSaleData) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{14, 5}
}

func (x *PublishedFileDetails_ForSaleData) GetIsForSale() bool {
	if x != nil && x.IsForSale != nil {
		return *x.IsForSale
	}
	return false
}

func (x *PublishedFileDetails_ForSaleData) GetPriceCategory() uint32 {
	if x != nil && x.PriceCategory != nil {
		return *x.PriceCategory
	}
	return 0
}

func (x *PublishedFileDetails_ForSaleData) GetEstatus() EPublishedFileForSaleStatus {
	if x != nil && x.Estatus != nil {
		return *x.Estatus
	}
	return Default_PublishedFileDetails_ForSaleData_Estatus
}

func (x *PublishedFileDetails_ForSaleData) GetPriceCategoryFloor() uint32 {
	if x != nil && x.PriceCategoryFloor != nil {
		return *x.PriceCategoryFloor
	}
	return 0
}

func (x *PublishedFileDetails_ForSaleData) GetPriceIsPayWhatYouWant() bool {
	if x != nil && x.PriceIsPayWhatYouWant != nil {
		return *x.PriceIsPayWhatYouWant
	}
	return false
}

func (x *PublishedFileDetails_ForSaleData) GetDiscountPercentage() uint32 {
	if x != nil && x.DiscountPercentage != nil {
		return *x.DiscountPercentage
	}
	return 0
}

type PublishedFileDetails_PlaytimeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaytimeSeconds *uint64 `protobuf:"varint,1,opt,name=playtime_seconds,json=playtimeSeconds" json:"playtime_seconds,omitempty"`
	NumSessions     *uint64 `protobuf:"varint,2,opt,name=num_sessions,json=numSessions" json:"num_sessions,omitempty"`
}

func (x *PublishedFileDetails_PlaytimeStats) Reset() {
	*x = PublishedFileDetails_PlaytimeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedFileDetails_PlaytimeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_PlaytimeStats) ProtoMessage() {}

func (x *PublishedFileDetails_PlaytimeStats) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_PlaytimeStats.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_PlaytimeStats) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{14, 6}
}

func (x *PublishedFileDetails_PlaytimeStats) GetPlaytimeSeconds() uint64 {
	if x != nil && x.PlaytimeSeconds != nil {
		return *x.PlaytimeSeconds
	}
	return 0
}

func (x *PublishedFileDetails_PlaytimeStats) GetNumSessions() uint64 {
	if x != nil && x.NumSessions != nil {
		return *x.NumSessions
	}
	return 0
}

type PublishedFileDetails_Reaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reactionid *uint32 `protobuf:"varint,1,opt,name=reactionid" json:"reactionid,omitempty"`
	Count      *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *PublishedFileDetails_Reaction) Reset() {
	*x = PublishedFileDetails_Reaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishedFileDetails_Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishedFileDetails_Reaction) ProtoMessage() {}

func (x *PublishedFileDetails_Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishedFileDetails_Reaction.ProtoReflect.Descriptor instead.
func (*PublishedFileDetails_Reaction) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{14, 7}
}

func (x *PublishedFileDetails_Reaction) GetReactionid() uint32 {
	if x != nil && x.Reactionid != nil {
		return *x.Reactionid
	}
	return 0
}

func (x *PublishedFileDetails_Reaction) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CPublishedFile_GetItemInfo_Request_WorkshopItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64                 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	TimeUpdated     *uint32                 `protobuf:"varint,2,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	DesiredRevision *EPublishedFileRevision `protobuf:"varint,3,opt,name=desired_revision,json=desiredRevision,enum=EPublishedFileRevision,def=0" json:"desired_revision,omitempty"`
}

// Default values for CPublishedFile_GetItemInfo_Request_WorkshopItem fields.
const (
	Default_CPublishedFile_GetItemInfo_Request_WorkshopItem_DesiredRevision = EPublishedFileRevision_k_EPublishedFileRevision_Default
)

func (x *CPublishedFile_GetItemInfo_Request_WorkshopItem) Reset() {
	*x = CPublishedFile_GetItemInfo_Request_WorkshopItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetItemInfo_Request_WorkshopItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetItemInfo_Request_WorkshopItem) ProtoMessage() {}

func (x *CPublishedFile_GetItemInfo_Request_WorkshopItem) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetItemInfo_Request_WorkshopItem.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetItemInfo_Request_WorkshopItem) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{16, 0}
}

func (x *CPublishedFile_GetItemInfo_Request_WorkshopItem) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CPublishedFile_GetItemInfo_Request_WorkshopItem) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

func (x *CPublishedFile_GetItemInfo_Request_WorkshopItem) GetDesiredRevision() EPublishedFileRevision {
	if x != nil && x.DesiredRevision != nil {
		return *x.DesiredRevision
	}
	return Default_CPublishedFile_GetItemInfo_Request_WorkshopItem_DesiredRevision
}

type CPublishedFile_GetItemInfo_Response_WorkshopItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	TimeUpdated     *uint32 `protobuf:"varint,2,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	ManifestId      *uint64 `protobuf:"fixed64,3,opt,name=manifest_id,json=manifestId" json:"manifest_id,omitempty"`
	Flags           *uint32 `protobuf:"varint,4,opt,name=flags" json:"flags,omitempty"`
}

func (x *CPublishedFile_GetItemInfo_Response_WorkshopItemInfo) Reset() {
	*x = CPublishedFile_GetItemInfo_Response_WorkshopItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetItemInfo_Response_WorkshopItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetItemInfo_Response_WorkshopItemInfo) ProtoMessage() {}

func (x *CPublishedFile_GetItemInfo_Response_WorkshopItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetItemInfo_Response_WorkshopItemInfo.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetItemInfo_Response_WorkshopItemInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CPublishedFile_GetItemInfo_Response_WorkshopItemInfo) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CPublishedFile_GetItemInfo_Response_WorkshopItemInfo) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

func (x *CPublishedFile_GetItemInfo_Response_WorkshopItemInfo) GetManifestId() uint64 {
	if x != nil && x.ManifestId != nil {
		return *x.ManifestId
	}
	return 0
}

func (x *CPublishedFile_GetItemInfo_Response_WorkshopItemInfo) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type CPublishedFile_GetUserFiles_Request_KVTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CPublishedFile_GetUserFiles_Request_KVTag) Reset() {
	*x = CPublishedFile_GetUserFiles_Request_KVTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetUserFiles_Request_KVTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserFiles_Request_KVTag) ProtoMessage() {}

func (x *CPublishedFile_GetUserFiles_Request_KVTag) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserFiles_Request_KVTag.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserFiles_Request_KVTag) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{18, 0}
}

func (x *CPublishedFile_GetUserFiles_Request_KVTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CPublishedFile_GetUserFiles_Request_KVTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CPublishedFile_GetUserFiles_Request_TagGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []string `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
}

func (x *CPublishedFile_GetUserFiles_Request_TagGroup) Reset() {
	*x = CPublishedFile_GetUserFiles_Request_TagGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetUserFiles_Request_TagGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserFiles_Request_TagGroup) ProtoMessage() {}

func (x *CPublishedFile_GetUserFiles_Request_TagGroup) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserFiles_Request_TagGroup.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserFiles_Request_TagGroup) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{18, 1}
}

func (x *CPublishedFile_GetUserFiles_Request_TagGroup) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CPublishedFile_GetUserFiles_Response_App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Name       *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Shortcutid *uint32 `protobuf:"varint,3,opt,name=shortcutid" json:"shortcutid,omitempty"`
	Private    *bool   `protobuf:"varint,4,opt,name=private" json:"private,omitempty"`
}

func (x *CPublishedFile_GetUserFiles_Response_App) Reset() {
	*x = CPublishedFile_GetUserFiles_Response_App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetUserFiles_Response_App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserFiles_Response_App) ProtoMessage() {}

func (x *CPublishedFile_GetUserFiles_Response_App) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserFiles_Response_App.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserFiles_Response_App) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{19, 0}
}

func (x *CPublishedFile_GetUserFiles_Response_App) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Response_App) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CPublishedFile_GetUserFiles_Response_App) GetShortcutid() uint32 {
	if x != nil && x.Shortcutid != nil {
		return *x.Shortcutid
	}
	return 0
}

func (x *CPublishedFile_GetUserFiles_Response_App) GetPrivate() bool {
	if x != nil && x.Private != nil {
		return *x.Private
	}
	return false
}

type CPublishedFile_AreFilesInSubscriptionList_Response_InList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"fixed64,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Inlist          *bool   `protobuf:"varint,2,opt,name=inlist" json:"inlist,omitempty"`
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Response_InList) Reset() {
	*x = CPublishedFile_AreFilesInSubscriptionList_Response_InList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Response_InList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_AreFilesInSubscriptionList_Response_InList) ProtoMessage() {}

func (x *CPublishedFile_AreFilesInSubscriptionList_Response_InList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_AreFilesInSubscriptionList_Response_InList.ProtoReflect.Descriptor instead.
func (*CPublishedFile_AreFilesInSubscriptionList_Response_InList) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{21, 0}
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Response_InList) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_AreFilesInSubscriptionList_Response_InList) GetInlist() bool {
	if x != nil && x.Inlist != nil {
		return *x.Inlist
	}
	return false
}

type CPublishedFile_GetChangeHistory_Response_ChangeLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp         *uint32 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	ChangeDescription *string `protobuf:"bytes,2,opt,name=change_description,json=changeDescription" json:"change_description,omitempty"`
	Language          *int32  `protobuf:"varint,3,opt,name=language" json:"language,omitempty"`
}

func (x *CPublishedFile_GetChangeHistory_Response_ChangeLog) Reset() {
	*x = CPublishedFile_GetChangeHistory_Response_ChangeLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetChangeHistory_Response_ChangeLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetChangeHistory_Response_ChangeLog) ProtoMessage() {}

func (x *CPublishedFile_GetChangeHistory_Response_ChangeLog) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetChangeHistory_Response_ChangeLog.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetChangeHistory_Response_ChangeLog) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{29, 0}
}

func (x *CPublishedFile_GetChangeHistory_Response_ChangeLog) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CPublishedFile_GetChangeHistory_Response_ChangeLog) GetChangeDescription() string {
	if x != nil && x.ChangeDescription != nil {
		return *x.ChangeDescription
	}
	return ""
}

func (x *CPublishedFile_GetChangeHistory_Response_ChangeLog) GetLanguage() int32 {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return 0
}

type CPublishedFile_QueryFiles_Request_KVTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CPublishedFile_QueryFiles_Request_KVTag) Reset() {
	*x = CPublishedFile_QueryFiles_Request_KVTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_QueryFiles_Request_KVTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_QueryFiles_Request_KVTag) ProtoMessage() {}

func (x *CPublishedFile_QueryFiles_Request_KVTag) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_QueryFiles_Request_KVTag.ProtoReflect.Descriptor instead.
func (*CPublishedFile_QueryFiles_Request_KVTag) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{32, 0}
}

func (x *CPublishedFile_QueryFiles_Request_KVTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CPublishedFile_QueryFiles_Request_KVTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CPublishedFile_QueryFiles_Request_TagGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []string `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
}

func (x *CPublishedFile_QueryFiles_Request_TagGroup) Reset() {
	*x = CPublishedFile_QueryFiles_Request_TagGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_QueryFiles_Request_TagGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_QueryFiles_Request_TagGroup) ProtoMessage() {}

func (x *CPublishedFile_QueryFiles_Request_TagGroup) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_QueryFiles_Request_TagGroup.ProtoReflect.Descriptor instead.
func (*CPublishedFile_QueryFiles_Request_TagGroup) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{32, 1}
}

func (x *CPublishedFile_QueryFiles_Request_TagGroup) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CPublishedFile_QueryFiles_Request_DateRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimestampStart *uint32 `protobuf:"varint,1,opt,name=timestamp_start,json=timestampStart" json:"timestamp_start,omitempty"`
	TimestampEnd   *uint32 `protobuf:"varint,2,opt,name=timestamp_end,json=timestampEnd" json:"timestamp_end,omitempty"`
}

func (x *CPublishedFile_QueryFiles_Request_DateRange) Reset() {
	*x = CPublishedFile_QueryFiles_Request_DateRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_QueryFiles_Request_DateRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_QueryFiles_Request_DateRange) ProtoMessage() {}

func (x *CPublishedFile_QueryFiles_Request_DateRange) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_QueryFiles_Request_DateRange.ProtoReflect.Descriptor instead.
func (*CPublishedFile_QueryFiles_Request_DateRange) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{32, 2}
}

func (x *CPublishedFile_QueryFiles_Request_DateRange) GetTimestampStart() uint32 {
	if x != nil && x.TimestampStart != nil {
		return *x.TimestampStart
	}
	return 0
}

func (x *CPublishedFile_QueryFiles_Request_DateRange) GetTimestampEnd() uint32 {
	if x != nil && x.TimestampEnd != nil {
		return *x.TimestampEnd
	}
	return 0
}

type CPublishedFile_GetAppRelationships_Response_AppRelationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid        *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Relationship *uint32 `protobuf:"varint,2,opt,name=relationship" json:"relationship,omitempty"`
}

func (x *CPublishedFile_GetAppRelationships_Response_AppRelationship) Reset() {
	*x = CPublishedFile_GetAppRelationships_Response_AppRelationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetAppRelationships_Response_AppRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetAppRelationships_Response_AppRelationship) ProtoMessage() {}

func (x *CPublishedFile_GetAppRelationships_Response_AppRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetAppRelationships_Response_AppRelationship.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetAppRelationships_Response_AppRelationship) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{39, 0}
}

func (x *CPublishedFile_GetAppRelationships_Response_AppRelationship) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_GetAppRelationships_Response_AppRelationship) GetRelationship() uint32 {
	if x != nil && x.Relationship != nil {
		return *x.Relationship
	}
	return 0
}

type CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid        *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Relationship *uint32 `protobuf:"varint,2,opt,name=relationship" json:"relationship,omitempty"`
}

func (x *CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship) Reset() {
	*x = CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship) ProtoMessage() {}

func (x *CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{41, 0}
}

func (x *CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship) GetRelationship() uint32 {
	if x != nil && x.Relationship != nil {
		return *x.Relationship
	}
	return 0
}

type CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid  *uint64                                                               `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	Result           *uint32                                                               `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
	AppRelationships []*CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship `protobuf:"bytes,3,rep,name=app_relationships,json=appRelationships" json:"app_relationships,omitempty"`
}

func (x *CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship) Reset() {
	*x = CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship) ProtoMessage() {
}

func (x *CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{41, 1}
}

func (x *CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship) GetAppRelationships() []*CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship {
	if x != nil {
		return x.AppRelationships
	}
	return nil
}

type CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64  `protobuf:"varint,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	SecondsActive   *float32 `protobuf:"fixed32,2,opt,name=seconds_active,json=secondsActive" json:"seconds_active,omitempty"`
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage) Reset() {
	*x = CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage) ProtoMessage() {}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage.ProtoReflect.Descriptor instead.
func (*CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{48, 0}
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage) GetSecondsActive() float32 {
	if x != nil && x.SecondsActive != nil {
		return *x.SecondsActive
	}
	return 0
}

type CPublishedFile_GetUserVoteSummary_Response_VoteSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Publishedfileid *uint64 `protobuf:"fixed64,1,opt,name=publishedfileid" json:"publishedfileid,omitempty"`
	VoteFor         *bool   `protobuf:"varint,2,opt,name=vote_for,json=voteFor" json:"vote_for,omitempty"`
	VoteAgainst     *bool   `protobuf:"varint,3,opt,name=vote_against,json=voteAgainst" json:"vote_against,omitempty"`
	Reported        *bool   `protobuf:"varint,4,opt,name=reported" json:"reported,omitempty"`
}

func (x *CPublishedFile_GetUserVoteSummary_Response_VoteSummary) Reset() {
	*x = CPublishedFile_GetUserVoteSummary_Response_VoteSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetUserVoteSummary_Response_VoteSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetUserVoteSummary_Response_VoteSummary) ProtoMessage() {}

func (x *CPublishedFile_GetUserVoteSummary_Response_VoteSummary) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetUserVoteSummary_Response_VoteSummary.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetUserVoteSummary_Response_VoteSummary) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{55, 0}
}

func (x *CPublishedFile_GetUserVoteSummary_Response_VoteSummary) GetPublishedfileid() uint64 {
	if x != nil && x.Publishedfileid != nil {
		return *x.Publishedfileid
	}
	return 0
}

func (x *CPublishedFile_GetUserVoteSummary_Response_VoteSummary) GetVoteFor() bool {
	if x != nil && x.VoteFor != nil {
		return *x.VoteFor
	}
	return false
}

func (x *CPublishedFile_GetUserVoteSummary_Response_VoteSummary) GetVoteAgainst() bool {
	if x != nil && x.VoteAgainst != nil {
		return *x.VoteAgainst
	}
	return false
}

func (x *CPublishedFile_GetUserVoteSummary_Response_VoteSummary) GetReported() bool {
	if x != nil && x.Reported != nil {
		return *x.Reported
	}
	return false
}

type CPublishedFile_GetItemChanges_Response_WorkshopItemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedFileId *uint64 `protobuf:"fixed64,1,opt,name=published_file_id,json=publishedFileId" json:"published_file_id,omitempty"`
	TimeUpdated     *uint32 `protobuf:"varint,2,opt,name=time_updated,json=timeUpdated" json:"time_updated,omitempty"`
	ManifestId      *uint64 `protobuf:"fixed64,3,opt,name=manifest_id,json=manifestId" json:"manifest_id,omitempty"`
}

func (x *CPublishedFile_GetItemChanges_Response_WorkshopItemInfo) Reset() {
	*x = CPublishedFile_GetItemChanges_Response_WorkshopItemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetItemChanges_Response_WorkshopItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetItemChanges_Response_WorkshopItemInfo) ProtoMessage() {}

func (x *CPublishedFile_GetItemChanges_Response_WorkshopItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetItemChanges_Response_WorkshopItemInfo.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetItemChanges_Response_WorkshopItemInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{57, 0}
}

func (x *CPublishedFile_GetItemChanges_Response_WorkshopItemInfo) GetPublishedFileId() uint64 {
	if x != nil && x.PublishedFileId != nil {
		return *x.PublishedFileId
	}
	return 0
}

func (x *CPublishedFile_GetItemChanges_Response_WorkshopItemInfo) GetTimeUpdated() uint32 {
	if x != nil && x.TimeUpdated != nil {
		return *x.TimeUpdated
	}
	return 0
}

func (x *CPublishedFile_GetItemChanges_Response_WorkshopItemInfo) GetManifestId() uint64 {
	if x != nil && x.ManifestId != nil {
		return *x.ManifestId
	}
	return 0
}

type CPublishedFile_GetContentDescriptors_Response_ContentDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptorid *EContentDescriptorID `protobuf:"varint,1,opt,name=descriptorid,enum=EContentDescriptorID,def=1" json:"descriptorid,omitempty"`
	Accountid    *uint32               `protobuf:"varint,2,opt,name=accountid" json:"accountid,omitempty"`
	Timestamp    *uint32               `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	ModeratorSet *bool                 `protobuf:"varint,4,opt,name=moderator_set,json=moderatorSet" json:"moderator_set,omitempty"`
}

// Default values for CPublishedFile_GetContentDescriptors_Response_ContentDescriptor fields.
const (
	Default_CPublishedFile_GetContentDescriptors_Response_ContentDescriptor_Descriptorid = EContentDescriptorID_k_EContentDescriptor_NudityOrSexualContent
)

func (x *CPublishedFile_GetContentDescriptors_Response_ContentDescriptor) Reset() {
	*x = CPublishedFile_GetContentDescriptors_Response_ContentDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_GetContentDescriptors_Response_ContentDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_GetContentDescriptors_Response_ContentDescriptor) ProtoMessage() {}

func (x *CPublishedFile_GetContentDescriptors_Response_ContentDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_GetContentDescriptors_Response_ContentDescriptor.ProtoReflect.Descriptor instead.
func (*CPublishedFile_GetContentDescriptors_Response_ContentDescriptor) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{59, 0}
}

func (x *CPublishedFile_GetContentDescriptors_Response_ContentDescriptor) GetDescriptorid() EContentDescriptorID {
	if x != nil && x.Descriptorid != nil {
		return *x.Descriptorid
	}
	return Default_CPublishedFile_GetContentDescriptors_Response_ContentDescriptor_Descriptorid
}

func (x *CPublishedFile_GetContentDescriptors_Response_ContentDescriptor) GetAccountid() uint32 {
	if x != nil && x.Accountid != nil {
		return *x.Accountid
	}
	return 0
}

func (x *CPublishedFile_GetContentDescriptors_Response_ContentDescriptor) GetTimestamp() uint32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CPublishedFile_GetContentDescriptors_Response_ContentDescriptor) GetModeratorSet() bool {
	if x != nil && x.ModeratorSet != nil {
		return *x.ModeratorSet
	}
	return false
}

type CPublishedFile_FileSubscribed_Notification_RevisionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision     *EPublishedFileRevision `protobuf:"varint,1,opt,name=revision,enum=EPublishedFileRevision,def=0" json:"revision,omitempty"`
	FileHcontent *uint64                 `protobuf:"fixed64,2,opt,name=file_hcontent,json=fileHcontent" json:"file_hcontent,omitempty"`
	RtimeUpdated *uint32                 `protobuf:"varint,3,opt,name=rtime_updated,json=rtimeUpdated" json:"rtime_updated,omitempty"`
}

// Default values for CPublishedFile_FileSubscribed_Notification_RevisionData fields.
const (
	Default_CPublishedFile_FileSubscribed_Notification_RevisionData_Revision = EPublishedFileRevision_k_EPublishedFileRevision_Default
)

func (x *CPublishedFile_FileSubscribed_Notification_RevisionData) Reset() {
	*x = CPublishedFile_FileSubscribed_Notification_RevisionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPublishedFile_FileSubscribed_Notification_RevisionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPublishedFile_FileSubscribed_Notification_RevisionData) ProtoMessage() {}

func (x *CPublishedFile_FileSubscribed_Notification_RevisionData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_publishedfile_steamclient_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPublishedFile_FileSubscribed_Notification_RevisionData.ProtoReflect.Descriptor instead.
func (*CPublishedFile_FileSubscribed_Notification_RevisionData) Descriptor() ([]byte, []int) {
	return file_steammessages_publishedfile_steamclient_proto_rawDescGZIP(), []int{62, 0}
}

func (x *CPublishedFile_FileSubscribed_Notification_RevisionData) GetRevision() EPublishedFileRevision {
	if x != nil && x.Revision != nil {
		return *x.Revision
	}
	return Default_CPublishedFile_FileSubscribed_Notification_RevisionData_Revision
}

func (x *CPublishedFile_FileSubscribed_Notification_RevisionData) GetFileHcontent() uint64 {
	if x != nil && x.FileHcontent != nil {
		return *x.FileHcontent
	}
	return 0
}

func (x *CPublishedFile_FileSubscribed_Notification_RevisionData) GetRtimeUpdated() uint32 {
	if x != nil && x.RtimeUpdated != nil {
		return *x.RtimeUpdated
	}
	return 0
}

var File_steammessages_publishedfile_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_publishedfile_steamclient_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x60, 0x0a, 0x1b, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x5f, 0x56, 0x6f, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6f, 0x74,
	0x65, 0x5f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65,
	0x55, 0x70, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x56, 0x6f, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x20, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x23, 0x0a, 0x21, 0x43, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa6,
	0x01, 0x0a, 0x22, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x5f, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f,
	0x0a, 0x23, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x5f, 0x43, 0x61, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x22,
	0x4b, 0x0a, 0x24, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x5f, 0x43, 0x61, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x63, 0x61, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0xce, 0x02, 0x0a,
	0x28, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c,
	0x65, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x66, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x2f, 0x82, 0xb5, 0x18,
	0x2b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x20, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x0f, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01,
	0x0a, 0x17, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x75, 0x62, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6f,
	0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x68, 0x0a, 0x29, 0x43, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x9e, 0x0c, 0x0a, 0x1e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x41, 0x70, 0x70, 0x20, 0x49, 0x64, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69,
	0x6e, 0x67, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x46, 0x52, 0x4f,
	0x4d, 0x2e, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x2b, 0x82, 0xb5, 0x18, 0x27, 0x41, 0x70, 0x70, 0x20, 0x49, 0x64, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67,
	0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x54, 0x4f, 0x2e, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x5a, 0x0a,
	0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x82, 0xb5, 0x18, 0x30, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x27, 0x73, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x15, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x82, 0xb5, 0x18, 0x38, 0x4e, 0x61,
	0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x27, 0x73, 0x20, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x82, 0xb5, 0x18,
	0x22, 0x54, 0x65, 0x78, 0x74, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x82, 0xb5, 0x18, 0x28, 0x54, 0x65, 0x78, 0x74, 0x20, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x39, 0x82, 0xb5, 0x18, 0x35, 0x28, 0x45, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x29, 0x20,
	0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x2e, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x82, 0xb5, 0x18,
	0x25, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x10,
	0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x82, 0xb5, 0x18, 0x2b, 0x28, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x55, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x59, 0x6f,
	0x75, 0x54, 0x75, 0x62, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x0f, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x0f, 0x79, 0x6f, 0x75, 0x74,
	0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x43, 0x82, 0xb5, 0x18, 0x3f, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x29, 0x20, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20,
	0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x0e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x69, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x6d, 0x82, 0xb5, 0x18,
	0x69, 0x28, 0x45, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x29, 0x20, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x28, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x2c, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x2c, 0x20, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2c, 0x20, 0x65, 0x74, 0x63, 0x2e, 0x29, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x78, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x55, 0x82, 0xb5,
	0x18, 0x51, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x49, 0x66, 0x20,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x27, 0x73, 0x20, 0x49, 0x64, 0x20, 0x69, 0x73, 0x20, 0x61,
	0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x55,
	0x52, 0x49, 0x2e, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69,
	0x12, 0x4a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x42, 0x36,
	0x82, 0xb5, 0x18, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x65, 0x78,
	0x74, 0x20, 0x74, 0x61, 0x67, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x69, 0x0a, 0x0f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x82, 0xb5, 0x18, 0x3c, 0x28, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x82, 0xb5, 0x18, 0x36,
	0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x54, 0x79, 0x70, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x60, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4e, 0x82,
	0xb5, 0x18, 0x4a, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x49, 0x66,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73,
	0x20, 0x61, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x55, 0x52, 0x4c, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x67, 0x61, 0x6d, 0x65, 0x27, 0x73, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x22, 0x6e, 0x0a, 0x1f, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55,
	0x72, 0x69, 0x22, 0x8d, 0x0c, 0x0a, 0x21, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x06, 0x42, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x53, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x49, 0x64,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x2e, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x73, 0x12, 0x5e, 0x0a, 0x0b,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x3c, 0x82, 0xb5, 0x18, 0x38, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x61, 0x67, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52,
	0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x74, 0x61, 0x67, 0x73, 0x12, 0x7e, 0x0a, 0x19,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x40, 0x82, 0xb5, 0x18, 0x3c, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x52, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x5f, 0x0a, 0x0f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x35, 0x82, 0xb5, 0x18, 0x31, 0x49, 0x66, 0x20, 0x74, 0x72,
	0x75, 0x65, 0x2c, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x0f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x61, 0x0a,
	0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x6b, 0x76, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x3b, 0x82, 0xb5, 0x18, 0x37, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75,
	0x65, 0x2c, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x20, 0x74, 0x61, 0x67, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x6b, 0x76, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x5a, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x49, 0x66, 0x20, 0x74,
	0x72, 0x75, 0x65, 0x2c, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x6f, 0x74, 0x65,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x0c,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x11,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x48, 0x82, 0xb5, 0x18, 0x44, 0x49, 0x66, 0x20,
	0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x61, 0x20, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x66, 0x75, 0x6c, 0x6c, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x66, 0x6f,
	0x72, 0x73, 0x61, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x30, 0x82, 0xb5, 0x18, 0x2c, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x66, 0x6f, 0x72, 0x73, 0x61, 0x6c,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x29,
	0x82, 0xb5, 0x18, 0x25, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x70, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5f, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x42,
	0x40, 0x82, 0xb5, 0x18, 0x3c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x65, 0x78,
	0x74, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2e, 0x20, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68,
	0x2e, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x7c, 0x0a, 0x15, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x48, 0x82, 0xb5, 0x18, 0x44,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x64, 0x61, 0x79, 0x73, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x6f,
	0x64, 0x61, 0x79, 0x2e, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6c, 0x61, 0x79,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12,
	0x5e, 0x0a, 0x18, 0x73, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x24, 0x82, 0xb5, 0x18, 0x20, 0x53, 0x74, 0x72, 0x69, 0x70, 0x73, 0x20, 0x42, 0x42,
	0x43, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x16, 0x73, 0x74, 0x72, 0x69, 0x70, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x95, 0x01, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x2f, 0x82, 0xb5, 0x18, 0x2b, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x42, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x49, 0x66,
	0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x77,
	0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e,
	0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x8c, 0x24, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63,
	0x75, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x79,
	0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x68, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x68, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f,
	0x68, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x68, 0x6f, 0x70, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x61, 0x6c,
	0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6e, 0x75,
	0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6e,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x42, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x6c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x6c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x6c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x69, 0x64, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x35, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x6b, 0x76,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x2e, 0x4b, 0x56, 0x54, 0x61, 0x67, 0x52, 0x06, 0x6b, 0x76, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x3b, 0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x0e,
	0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x59, 0x82, 0xb5, 0x18, 0x55, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x20,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x6e, 0x0a,
	0x0d, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x53,
	0x61, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x27, 0x82, 0xb5, 0x18, 0x23, 0x50, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2c, 0x20, 0x69, 0x66, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x52, 0x0b, 0x66, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x25, 0x82, 0xb5, 0x18, 0x21, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x4d, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x01, 0x30, 0x42, 0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x54, 0x68, 0x65, 0x20, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x17, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x78, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72,
	0x69, 0x61, 0x74, 0x65, 0x53, 0x65, 0x78, 0x12, 0x40, 0x0a, 0x1c, 0x6d, 0x61, 0x79, 0x62, 0x65,
	0x5f, 0x69, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x76,
	0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x6d,
	0x61, 0x79, 0x62, 0x65, 0x49, 0x6e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x6f, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x69,
	0x64, 0x73, 0x18, 0x48, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52,
	0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x69, 0x64, 0x73, 0x12, 0x67, 0x0a, 0x16, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x43, 0x20, 0x01, 0x28, 0x04, 0x42, 0x31, 0x82, 0xb5, 0x18, 0x2d, 0x54, 0x68, 0x65, 0x20, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x14, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0xe6,
	0x01, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x8e, 0x01, 0x82,
	0xb5, 0x18, 0x89, 0x01, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x2c, 0x20, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x6b,
	0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x2c, 0x20,
	0x62, 0x75, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x20, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x45,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x82,
	0xb5, 0x18, 0x13, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x46, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x82,
	0xb5, 0x18, 0x16, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6f, 0x0a, 0x15, 0x62, 0x61, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x23, 0x6b, 0x5f,
	0x45, 0x42, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x52, 0x12, 0x62, 0x61, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x02, 0x42, 0x1c, 0x82, 0xb5, 0x18,
	0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2c, 0x20, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x58, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0x81, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f,
	0x72, 0x74, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x6f, 0x72, 0x74, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x79, 0x6f,
	0x75, 0x74, 0x75, 0x62, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x1a, 0x6c, 0x0a, 0x05, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x1a, 0x2f, 0x0a, 0x05, 0x4b, 0x56, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x5a, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x55, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x1a,
	0xbe, 0x02, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x07, 0x65, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x12, 0x6b, 0x5f, 0x50, 0x46, 0x46, 0x53, 0x53, 0x5f, 0x4e,
	0x6f, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x07, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x1a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x73,
	0x5f, 0x70, 0x61, 0x79, 0x5f, 0x77, 0x68, 0x61, 0x74, 0x5f, 0x79, 0x6f, 0x75, 0x5f, 0x77, 0x61,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49,
	0x73, 0x50, 0x61, 0x79, 0x57, 0x68, 0x61, 0x74, 0x59, 0x6f, 0x75, 0x57, 0x61, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x1a, 0x5d, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x6c, 0x61,
	0x79, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x40, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x6f, 0x0a, 0x22, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x14, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0xb7, 0x03, 0x0a, 0x22, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x0e, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f,
	0x70, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x1a, 0xf5, 0x01, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f,
	0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x2f, 0x82, 0xb5, 0x18, 0x2b,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x20, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x0f, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe4, 0x02, 0x0a,
	0x23, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f,
	0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f,
	0x70, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47,
	0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x98, 0x01, 0x0a, 0x10, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x22, 0xa7, 0x1c, 0x0a, 0x23, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x39, 0x82, 0xb5,
	0x18, 0x35, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x77, 0x68, 0x6f, 0x73, 0x65, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x2e, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x12, 0x4d, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x37, 0x82, 0xb5, 0x18, 0x33, 0x41, 0x70, 0x70, 0x20, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x2e, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12,
	0x5c, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x3c, 0x82, 0xb5, 0x18, 0x38, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x29, 0x20, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x20, 0x49, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	0x2e, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x42, 0x29,
	0x82, 0xb5, 0x18, 0x25, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x5c, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x42, 0x39, 0x82, 0xb5, 0x18, 0x35, 0x28, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2c, 0x20, 0x70, 0x65,
	0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x2e, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x70, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x07, 0x6d, 0x79, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x42, 0x2c, 0x82, 0xb5, 0x18, 0x28, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x29, 0x20, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x2e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x38, 0x82, 0xb5, 0x18, 0x34, 0x28,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20,
	0x6f, 0x6e, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x2e, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x44, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x2a, 0x82, 0xb5, 0x18, 0x26, 0x28, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29,
	0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x52, 0x07, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x76, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x52, 0x82, 0xb5, 0x18,
	0x4e, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x54, 0x61, 0x67, 0x73,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x61, 0x74,
	0x69, 0x73, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x74, 0x61, 0x67, 0x73, 0x12, 0x7a, 0x0a,
	0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x56, 0x82, 0xb5, 0x18, 0x52, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x29, 0x20, 0x54, 0x61, 0x67, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x75,
	0x73, 0x74, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x79,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x0c, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x74, 0x61, 0x67, 0x73, 0x12, 0x7e, 0x0a, 0x10, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x76, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x56, 0x54, 0x61, 0x67, 0x42,
	0x28, 0x82, 0xb5, 0x18, 0x24, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x6b, 0x65,
	0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x61, 0x67, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x6f, 0x6e, 0x2e, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x4b, 0x76, 0x54, 0x61, 0x67, 0x73, 0x12, 0x47, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0x82, 0xb5, 0x18,
	0x27, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x46, 0x69, 0x6c, 0x65,
	0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x2e, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x6f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4a, 0x82, 0xb5, 0x18, 0x46, 0x41,
	0x70, 0x70, 0x20, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2c, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x20, 0x69, 0x66, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x2e, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x14, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0x82, 0xb5, 0x18, 0x27, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x69, 0x66, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x52, 0x12,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x7e, 0x0a, 0x15, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x42, 0x48, 0x82, 0xb5, 0x18, 0x44, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x20,
	0x73, 0x74, 0x61, 0x6c, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x52, 0x12,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x5f, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x42, 0x40, 0x82, 0xb5, 0x18, 0x3c, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x45, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x2e, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0xae, 0x01, 0x0a, 0x09, 0x74, 0x61, 0x67, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x82, 0xb5, 0x18, 0x5d, 0x28, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x41, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20,
	0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x67, 0x73, 0x20,
	0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20,
	0x6f, 0x6e, 0x20, 0x61, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x79, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x09, 0x74, 0x61, 0x67, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x1c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x42, 0x44, 0x82, 0xb5, 0x18, 0x40, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x29, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x52, 0x1a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x74, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x42, 0x56, 0x82, 0xb5, 0x18, 0x52, 0x28, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c,
	0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x73, 0x61, 0x74, 0x69,
	0x73, 0x66, 0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x77, 0x0a, 0x08, 0x69, 0x64,
	0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x42, 0x5c, 0x82, 0xb5,
	0x18, 0x58, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x49, 0x66, 0x20,
	0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20,
	0x66, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x79, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x07, 0x69, 0x64, 0x73, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x76, 0x6f,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x42, 0x14, 0x82, 0xb5, 0x18, 0x10, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
	0x76, 0x6f, 0x74, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0b, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x42, 0x23,
	0x82, 0xb5, 0x18, 0x1f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x61, 0x67, 0x73, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x59, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6b, 0x76, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x42, 0x2d, 0x82,
	0xb5, 0x18, 0x29, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6b, 0x65, 0x79, 0x2d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x20, 0x74, 0x61, 0x67, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x66, 0x69, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x4b, 0x76, 0x54, 0x61, 0x67, 0x73, 0x12, 0x67, 0x0a, 0x0f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x3e, 0x82, 0xb5, 0x18, 0x3a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x12, 0x56, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2d, 0x82, 0xb5,
	0x18, 0x29, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x20, 0x69,
	0x74, 0x65, 0x6d, 0x20, 0x69, 0x64, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x18,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x42, 0x44, 0x82, 0xb5, 0x18, 0x40, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69,
	0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2c, 0x20, 0x69, 0x66, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x4f, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x42, 0x1f, 0x82, 0xb5, 0x18, 0x1b, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x7c, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x48, 0x82, 0xb5, 0x18, 0x44, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70,
	0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x61, 0x79, 0x73, 0x20, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x2e, 0x52, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x5e, 0x0a, 0x18, 0x73, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x24, 0x82, 0xb5, 0x18, 0x20, 0x53, 0x74, 0x72, 0x69, 0x70, 0x73, 0x20,
	0x42, 0x42, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x16, 0x73, 0x74, 0x72, 0x69, 0x70,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x62, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x68, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x42, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c,
	0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
	0x74, 0x6f, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65,
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x28, 0x82, 0xb5, 0x18, 0x24, 0x42, 0x61,
	0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x2f, 0x82, 0xb5,
	0x18, 0x2b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x20, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x0f, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x2b, 0x82, 0xb5, 0x18, 0x27, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x70, 0x70, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x74, 0x6f,
	0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x70, 0x70, 0x73, 0x1a, 0x2f, 0x0a, 0x05,
	0x4b, 0x56, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1e, 0x0a,
	0x08, 0x54, 0x61, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xd1, 0x02,
	0x0a, 0x24, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a, 0x14,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70,
	0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x1a, 0x69, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x63, 0x75, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x63, 0x75, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x22, 0xd9, 0x02, 0x0a, 0x31, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x41, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x06, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x6c, 0x69, 0x73,
	0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0x82, 0xb5, 0x18,
	0x10, 0x53, 0x65, 0x65, 0x20, 0x45, 0x55, 0x43, 0x4d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2a, 0x82,
	0xb5, 0x18, 0x26, 0x53, 0x65, 0x65, 0x20, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x66,
	0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3c, 0x82,
	0xb5, 0x18, 0x38, 0x53, 0x65, 0x65, 0x20, 0x45, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x20, 0x20, 0x49, 0x66, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x52, 0x10, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x68, 0x6f, 0x70, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd2, 0x01,
	0x0a, 0x32, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x5f, 0x41, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x41, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x4a, 0x0a, 0x06, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c,
	0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0xe2, 0x08, 0x0a, 0x1d, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x2a, 0x82, 0xb5, 0x18, 0x26, 0x41, 0x70, 0x70, 0x20, 0x49, 0x64, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x20, 0x74, 0x6f, 0x2e, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x42,
	0x36, 0x82, 0xb5, 0x18, 0x32, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69,
	0x6c, 0x65, 0x20, 0x77, 0x65, 0x27, 0x64, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x6f, 0x20,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x82, 0xb5, 0x18, 0x27, 0x28, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x82, 0xb5, 0x18, 0x2d, 0x28, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x30, 0x82,
	0xb5, 0x18, 0x2c, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52,
	0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x32, 0x82, 0xb5, 0x18, 0x2e, 0x28,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x53, 0x65, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x61, 0x67, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x82, 0xb5, 0x18, 0x2b, 0x28, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x62, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x82, 0xb5, 0x18, 0x33,
	0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x75, 0x0a, 0x0b, 0x73, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x54, 0x82, 0xb5, 0x18, 0x50, 0x28,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x68, 0x61, 0x76,
	0x65, 0x20, 0x61, 0x20, 0x73, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x61, 0x67, 0x20,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x74, 0x2e, 0x52,
	0x0a, 0x73, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x54, 0x61, 0x67, 0x12, 0x6a, 0x0a, 0x0b, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x49, 0x82, 0xb5, 0x18, 0x45, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29,
	0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x63,
	0x61, 0x6e, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x2e, 0x52, 0x0a, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x6d, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4a, 0x82,
	0xb5, 0x18, 0x46, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x49, 0x66,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x20, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x5f, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x42, 0x43, 0x82, 0xb5, 0x18, 0x3f, 0x28, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x49, 0x66, 0x20, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x26, 0x20, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x77, 0x68, 0x61, 0x74, 0x20, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x74, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x1d, 0x43, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x42, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x77, 0x65, 0x27, 0x64, 0x20, 0x6c, 0x69, 0x6b,
	0x65, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x52, 0x0f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x2c, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42,
	0x4a, 0x82, 0xb5, 0x18, 0x46, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69,
	0x6c, 0x65, 0x20, 0x77, 0x65, 0x27, 0x64, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x6f, 0x20,
	0x67, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x2e, 0x52, 0x0f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x7a, 0x0a, 0x2d, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x22, 0xd7, 0x02, 0x0a, 0x27, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x74,
	0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x4a, 0x82, 0xb5, 0x18, 0x46, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x77, 0x65, 0x27, 0x64, 0x20,
	0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x66,
	0x6f, 0x72, 0x2e, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69,
	0x6c, 0x65, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2c, 0x82, 0xb5, 0x18, 0x28, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x42, 0x14, 0x82, 0xb5,
	0x18, 0x10, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x85, 0x02, 0x0a,
	0x28, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x43, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x74,
	0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x22, 0xaf, 0x06, 0x0a, 0x29, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x56,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x82, 0xb5, 0x18, 0x22, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x72,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x5e, 0x82, 0xb5,
	0x18, 0x5a, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x74, 0x61, 0x67, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x67, 0x73, 0x20, 0x69, 0x66, 0x20, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x20, 0x69, 0x73, 0x20, 0x73,
	0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2e, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x6c, 0x6c,
	0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x42, 0x77, 0x82, 0xb5, 0x18, 0x73, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20,
	0x74, 0x68, 0x65, 0x6e, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20,
	0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x67,
	0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x20, 0x20, 0x49, 0x66,
	0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x6d, 0x75, 0x73,
	0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20,
	0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x67, 0x73, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x12, 0x57, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x32, 0x82, 0xb5, 0x18, 0x2e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x61, 0x6e, 0x79,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65,
	0x20, 0x61, 0x6e, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x20, 0x74, 0x61,
	0x67, 0x73, 0x2e, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x7c, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4e, 0x82,
	0xb5, 0x18, 0x4a, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x20,
	0x20, 0x4d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x20,
	0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x10, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0xa4, 0x01, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x3e, 0x82, 0xb5, 0x18, 0x3a, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
	0x68, 0x61, 0x76, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x72, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x2a, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x25, 0x0a, 0x21, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x38,
	0x82, 0xb5, 0x18, 0x34, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x68, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x70,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0xf0, 0x01, 0x0a, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x42, 0xd7, 0x01, 0x82, 0xb5, 0x18,
	0xd2, 0x01, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x28, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x27, 0x2a, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x29, 0x2e, 0x20, 0x20, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x75,
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x61, 0x73, 0x20, 0x69, 0x74, 0x20, 0x77,
	0x69, 0x6c, 0x6c, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x74, 0x6f,
	0x20, 0x64, 0x6f, 0x20, 0x64, 0x65, 0x65, 0x70, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x64, 0x2c,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x64, 0x2e, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x5c, 0x0a, 0x0a,
	0x6e, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x31, 0x42, 0x39, 0x82, 0xb5, 0x18, 0x35, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x29, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,
	0x66, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2c, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70,
	0x61, 0x67, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2e, 0x52, 0x0a,
	0x6e, 0x75, 0x6d, 0x70, 0x65, 0x72, 0x70, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x1e, 0x82, 0xb5, 0x18, 0x1a, 0x41, 0x70, 0x70, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12,
	0x35, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f,
	0x82, 0xb5, 0x18, 0x1b, 0x41, 0x70, 0x70, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x38, 0x82, 0xb5,
	0x18, 0x34, 0x54, 0x61, 0x67, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20,
	0x6f, 0x6e, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x6c,
	0x6c, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x7a, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x56, 0x82, 0xb5, 0x18, 0x52,
	0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x54, 0x61, 0x67, 0x73, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x62, 0x65,
	0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20,
	0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x98, 0x01, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x42,
	0x6c, 0x82, 0xb5, 0x18, 0x68, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x68,
	0x65, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61,
	0x76, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x67, 0x73, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x77, 0x69, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68,
	0x61, 0x76, 0x65, 0x20, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x52, 0x0c, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x12, 0x60, 0x0a, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x39, 0x82, 0xb5, 0x18, 0x35, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x75, 0x73,
	0x74, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x59, 0x0a,
	0x0d, 0x6f, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x34, 0x82, 0xb5, 0x18, 0x30, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65,
	0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x0c, 0x6f, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x55, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x82,
	0xb5, 0x18, 0x30, 0x54, 0x65, 0x78, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x27, 0x73, 0x20, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x42, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x26, 0x82, 0xb5, 0x18, 0x22, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x66, 0x0a, 0x15, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x06, 0x42, 0x31, 0x82, 0xb5, 0x18, 0x2d, 0x46, 0x69, 0x6e, 0x64, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20,
	0x69, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x14, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x88, 0x01, 0x0a, 0x04,
	0x64, 0x61, 0x79, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x74, 0x82, 0xb5, 0x18, 0x70,
	0x49, 0x66, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64,
	0x42, 0x79, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x64, 0x61, 0x79, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x5b, 0x31, 0x2c, 0x37, 0x5d, 0x2e,
	0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0xc8, 0x01, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x8c, 0x01, 0x82, 0xb5, 0x18,
	0x87, 0x01, 0x49, 0x66, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x20,
	0x69, 0x73, 0x20, 0x6b, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x42, 0x79, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x73, 0x65, 0x74,
	0x20, 0x6a, 0x75, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x79, 0x20, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x7e, 0x0a, 0x15, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x42, 0x48, 0x82, 0xb5, 0x18, 0x44, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x73,
	0x74, 0x61, 0x6c, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x52, 0x12, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x6a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x42, 0x4b, 0x82, 0xb5, 0x18, 0x47, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x69,
	0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x77, 0x68, 0x61, 0x74, 0x20,
	0x67, 0x65, 0x74, 0x73, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0x20, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x45, 0x6e, 0x67, 0x6c, 0x69,
	0x73, 0x68, 0x2e, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x7c, 0x0a,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x76, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x56, 0x54, 0x61,
	0x67, 0x42, 0x28, 0x82, 0xb5, 0x18, 0x24, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20,
	0x6b, 0x65, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x61, 0x67, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x6f, 0x6e, 0x2e, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x4b, 0x76, 0x54, 0x61, 0x67, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x09,
	0x74, 0x61, 0x67, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x82, 0xb5,
	0x18, 0x5d, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x41, 0x74, 0x20,
	0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x61, 0x67, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x61, 0x74,
	0x69, 0x73, 0x66, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52,
	0x09, 0x74, 0x61, 0x67, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x12, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x39, 0x82, 0xb5, 0x18, 0x35, 0x28, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e,
	0x52, 0x10, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x95, 0x01, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x39, 0x82,
	0xb5, 0x18, 0x35, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x52, 0x10, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x9d, 0x01, 0x0a, 0x1c, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x42, 0x44, 0x82, 0xb5, 0x18, 0x40, 0x28, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20,
	0x6f, 0x75, 0x74, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68,
	0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x52, 0x1a,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x74, 0x0a, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x42, 0x56, 0x82,
	0xb5, 0x18, 0x52, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x49, 0x66,
	0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x6f, 0x6e, 0x6c, 0x79,
	0x12, 0x77, 0x0a, 0x08, 0x69, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x5c, 0x82, 0xb5, 0x18, 0x58, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x29, 0x20, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x6f, 0x6e, 0x6c, 0x79,
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x64, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x73, 0x61, 0x74,
	0x69, 0x73, 0x66, 0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x52, 0x07, 0x69, 0x64, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x10, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x14, 0x82, 0xb5, 0x18, 0x10, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
	0x76, 0x6f, 0x74, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0b, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x42, 0x23,
	0x82, 0xb5, 0x18, 0x1f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x61, 0x67, 0x73, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x53, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6b, 0x76, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x20, 0x6b, 0x65, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x61,
	0x67, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4b, 0x76,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x67, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3e, 0x82,
	0xb5, 0x18, 0x3a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x56, 0x0a,
	0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x20, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x69, 0x64,
	0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x7e, 0x0a, 0x18, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x42, 0x44, 0x82, 0xb5, 0x18, 0x40, 0x50, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x14, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x42, 0x19, 0x82, 0xb5, 0x18, 0x15, 0x50, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x7c, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x48, 0x82, 0xb5, 0x18, 0x44, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6c, 0x61, 0x79,
	0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x61, 0x79, 0x73, 0x20, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x20, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x2e, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0xc6,
	0x01, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x42, 0x9e, 0x01, 0x82, 0xb5, 0x18, 0x99, 0x01, 0x42,
	0x79, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x6e, 0x6f,
	0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20,
	0x27, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x2a, 0x27, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20,
	0x73, 0x6f, 0x6d, 0x65, 0x20, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x2e, 0x20, 0x53, 0x65, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72,
	0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x18, 0x73, 0x74, 0x72, 0x69, 0x70,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x62, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x42, 0x24, 0x82, 0xb5, 0x18, 0x20, 0x53,
	0x74, 0x72, 0x69, 0x70, 0x73, 0x20, 0x42, 0x42, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52,
	0x16, 0x73, 0x74, 0x72, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x62, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x6b, 0x5f, 0x45,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x2f, 0x82,
	0xb5, 0x18, 0x2b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x20, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x0f,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x68, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x42, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74,
	0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2e, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2f, 0x0a, 0x05, 0x4b, 0x56, 0x54,
	0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1e, 0x0a, 0x08, 0x54, 0x61,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0xf4, 0x01, 0x0a, 0x09, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x74, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x4b, 0x82, 0xb5, 0x18, 0x47, 0x28, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x29, 0x20, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e,
	0x74, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x71,
	0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4c, 0x82, 0xb5, 0x18, 0x48, 0x28, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x6e, 0x74, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e,
	0x64, 0x22, 0xaf, 0x03, 0x0a, 0x22, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x45, 0x82, 0xb5, 0x18, 0x41, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x20, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73,
	0x61, 0x72, 0x69, 0x6c, 0x79, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0xa3, 0x01, 0x0a, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x58, 0x82, 0xb5, 0x18,
	0x54, 0x45, 0x61, 0x63, 0x68, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x70, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20,
	0x6f, 0x6e, 0x20, 0x77, 0x68, 0x61, 0x74, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x2e, 0x52, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x66, 0x69, 0x6c, 0x65, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0b,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x64, 0x82, 0xb5, 0x18, 0x60, 0x49, 0x66, 0x20, 0x61, 0x20, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x20, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x77, 0x61, 0x73, 0x20, 0x75, 0x73,
	0x65, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x77, 0x69,
	0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x20, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x29, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69,
	0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x22, 0x2c, 0x0a, 0x2a, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x2c, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x22, 0x2f, 0x0a, 0x2d, 0x43, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x2a, 0x43, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69,
	0x64, 0x22, 0xe5, 0x01, 0x0a, 0x2b, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x69, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x43,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x10, 0x61, 0x70, 0x70, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x1a, 0x4b, 0x0a, 0x0f,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x22, 0x90, 0x01, 0x0a, 0x31, 0x43, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x22, 0xce, 0x03, 0x0a,
	0x32, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x43, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x1a, 0x4b, 0x0a, 0x0f, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x1a, 0xd2, 0x01, 0x0a, 0x1c, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c,
	0x65, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x70, 0x0a, 0x11, 0x61,
	0x70, 0x70, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x10, 0x61, 0x70, 0x70,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x22, 0x70, 0x0a,
	0x2c, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x10, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x73, 0x22,
	0x2f, 0x0a, 0x2d, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x6f, 0x0a, 0x2b, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64,
	0x73, 0x22, 0x2e, 0x0a, 0x2c, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x51, 0x0a, 0x39, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x41, 0x70,
	0x70, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x3a, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x41, 0x6c,
	0x6c, 0x41, 0x70, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xc0, 0x02, 0x0a, 0x36, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d,
	0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x68, 0x0a, 0x15, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x39, 0x0a, 0x37, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x80, 0x01, 0x0a, 0x1f, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x33,
	0x0a, 0x15, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c,
	0x65, 0x69, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x22, 0x43, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x22, 0x25, 0x0a,
	0x23, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x0a, 0x29, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f,
	0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69,
	0x6c, 0x65, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x06, 0x52, 0x10, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x73, 0x22, 0x97, 0x02,
	0x0a, 0x2a, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x09,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x1a, 0x91, 0x01, 0x0a, 0x0b, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x76, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x65,
	0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x76, 0x6f, 0x74, 0x65, 0x41, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x25, 0x43, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x4d, 0x61, 0x78, 0x22, 0xaf, 0x02, 0x0a, 0x26, 0x43, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x43, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x1a, 0x82, 0x01, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f,
	0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x6d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x2c, 0x43, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c,
	0x65, 0x69, 0x64, 0x22, 0x80, 0x03, 0x0a, 0x2d, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0xdb, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x65,
	0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x3a, 0x2a, 0x6b, 0x5f, 0x45,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x5f, 0x4e, 0x75, 0x64, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x53, 0x65, 0x78, 0x75, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x2f, 0x43, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x66, 0x69,
	0x6c, 0x65, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x12, 0x49, 0x0a, 0x15, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52,
	0x13, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x54, 0x6f, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x22, 0x5f, 0x0a, 0x30, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xbf, 0x06, 0x0a, 0x2a, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42,
	0x25, 0x82, 0xb5, 0x18, 0x21, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x44, 0x5f, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x48,
	0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x06, 0x42, 0x23, 0x82, 0xb5, 0x18, 0x1f, 0x55, 0x47, 0x43, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x20, 0x47, 0x49, 0x44, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65,
	0x48, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
	0x12, 0x5e, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x34, 0x82, 0xb5, 0x18, 0x30,
	0x54, 0x72, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x20, 0x76, 0x69, 0x61, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x70, 0x69, 0x70, 0x65,
	0x52, 0x0e, 0x69, 0x73, 0x44, 0x65, 0x70, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x42, 0x0a, 0x0d, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0x82, 0xb5, 0x18, 0x19, 0x4c, 0x61, 0x73,
	0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0c, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x35, 0x82, 0xb5, 0x18, 0x31, 0x44, 0x61, 0x74, 0x61, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x68, 0x61, 0x73, 0x52, 0x09, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xe0, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x3a, 0x20, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0d,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x20, 0x47, 0x49, 0x44, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1d, 0x82, 0xb5, 0x18, 0x19,
	0x4c, 0x61, 0x73, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0c, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x2c, 0x43, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x55,
	0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x42, 0x25, 0x82, 0xb5, 0x18, 0x21, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x5f, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x42, 0x25, 0x82, 0xb5, 0x18, 0x21, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x44, 0x5f, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x2a,
	0xab, 0x02, 0x0a, 0x16, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f,
	0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00,
	0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x10, 0x02, 0x12, 0x33, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x43, 0x68, 0x69, 0x6e, 0x61, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x10, 0x04, 0x12, 0x33, 0x0a, 0x2f, 0x6b, 0x5f, 0x45, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x43, 0x68, 0x69, 0x6e, 0x61, 0x10, 0x05, 0x2a, 0xc8, 0x01,
	0x0a, 0x1b, 0x45, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x6b, 0x5f, 0x50, 0x46, 0x46, 0x53, 0x53, 0x5f, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x72, 0x53,
	0x61, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x50, 0x46, 0x46, 0x53, 0x53,
	0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x50, 0x46, 0x46, 0x53, 0x53, 0x5f, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x50, 0x46, 0x46, 0x53, 0x53, 0x5f, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x6b, 0x5f, 0x50, 0x46, 0x46, 0x53, 0x53, 0x5f, 0x4e, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x50,
	0x46, 0x46, 0x53, 0x53, 0x5f, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x10, 0x05, 0x32, 0xaf, 0x29, 0x0a, 0x0d, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x04, 0x56, 0x6f,
	0x74, 0x65, 0x12, 0x1c, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x5f, 0x56, 0x6f, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x5f, 0x56, 0x6f, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x22, 0x82, 0xb5, 0x18, 0x1e, 0x55, 0x73, 0x65, 0x72, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x20,
	0x74, 0x6f, 0x20, 0x76, 0x6f, 0x74, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69,
	0x74, 0x65, 0x6d, 0x12, 0x81, 0x01, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x21, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x5f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x23, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x55, 0x6e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x31, 0x82, 0xb5, 0x18, 0x2d, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x24, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x43, 0x61, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x43,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x43, 0x61,
	0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xb5, 0x18, 0x35, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x69,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x12, 0xb8,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x5f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82, 0xb5, 0x18,
	0x48, 0x47, 0x65, 0x74, 0x20, 0x73, 0x75, 0x62, 0x20, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x28, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2c, 0x20, 0x61, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2c, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x29, 0x12, 0x80, 0x01, 0x0a, 0x07, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x1f, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xb5, 0x18, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x73, 0x20, 0x61, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65,
	0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x68, 0x6f, 0x70, 0x2e, 0x12, 0x90, 0x01, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x2e, 0x43, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x5f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xb5, 0x18, 0x35, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x12,
	0x93, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x23, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x5f, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xb5, 0x18, 0x35,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x20, 0x73, 0x65,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x12, 0x85, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x43,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xb5, 0x18, 0x24, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x12, 0xd7, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x76, 0x82, 0xb5, 0x18, 0x72, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x61,
	0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61,
	0x6d, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x61, 0x73, 0x20, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x62, 0x75, 0x74, 0x20,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62,
	0x65, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2e, 0x12, 0xd5, 0x01, 0x0a, 0x1a, 0x41, 0x72, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x41, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x49, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x43, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x41, 0x72, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4e, 0x82, 0xb5, 0x18, 0x4a, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x73, 0x20,
	0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x72,
	0x65, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x7a, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x43, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x43, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xb5, 0x18, 0x2b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x20, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x12, 0x68, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xb5, 0x18, 0x19, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x12, 0xc0, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x2d, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48,
	0x82, 0xb5, 0x18, 0x44, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x2e,
	0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3b, 0x82, 0xb5, 0x18, 0x37, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61,
	0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x98, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x56, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2a, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x56,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x56, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x29, 0x82, 0xb5, 0x18, 0x25, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x71, 0x75, 0x65, 0x75, 0x65, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x0a, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x43, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2f, 0x82, 0xb5, 0x18, 0x2b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x20, 0x61, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2a, 0x2e, 0x43, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x41, 0x64, 0x64, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x41, 0x64, 0x64, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xb5, 0x18, 0x40, 0x41, 0x64, 0x64, 0x73, 0x20, 0x61, 0x20,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x20, 0x62, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x70, 0x70, 0x12, 0xbe, 0x01, 0x0a, 0x15, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x2d, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x46, 0x82, 0xb5, 0x18, 0x42, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x61,
	0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x20, 0x62, 0x65,
	0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x70, 0x70, 0x12, 0xb3, 0x01, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x73, 0x12, 0x2b, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82,
	0xb5, 0x18, 0x3d, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x70, 0x70, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0xcb, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x32, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xb5, 0x18, 0x40, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x61, 0x70, 0x70, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0xb3,
	0x01, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xb5, 0x18, 0x37, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x73, 0x65,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x61,
	0x79, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x2e,
	0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x53,
	0x74, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x43, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x53, 0x74, 0x6f,
	0x70, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xb5, 0x18, 0x37,
	0x53, 0x74, 0x6f, 0x70, 0x73, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x20, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0xed, 0x01, 0x0a, 0x22, 0x53, 0x74, 0x6f, 0x70,
	0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x41, 0x70, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3a,
	0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f,
	0x53, 0x74, 0x6f, 0x70, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x41, 0x70, 0x70, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x43, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x53, 0x74, 0x6f, 0x70,
	0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x41, 0x70, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xb5, 0x18, 0x4a, 0x53, 0x74, 0x6f,
	0x70, 0x73, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x20, 0x61, 0x70, 0x70, 0x12, 0x98, 0x02, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x37, 0x2e, 0x43, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x53, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d,
	0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81,
	0x01, 0x82, 0xb5, 0x18, 0x7d, 0x53, 0x74, 0x6f, 0x70, 0x73, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61,
	0x70, 0x70, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12,
	0x20, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x5f, 0x41, 0x64, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xb5, 0x18, 0x3a, 0x41, 0x64, 0x64, 0x73, 0x20, 0x61,
	0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x3e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x20, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x20, 0x62, 0x65, 0x74, 0x77,
	0x65, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x2e, 0x12, 0x99, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x12, 0x23, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3f, 0x82, 0xb5, 0x18, 0x3b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x73, 0x20, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x2d, 0x3e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2e,
	0x12, 0x88, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x56, 0x6f, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x19, 0x82, 0xb5, 0x18, 0x15, 0x47, 0x65, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x76,
	0x6f, 0x74, 0x65, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x91, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x26,
	0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f,
	0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x73,
	0x69, 0x6e, 0x63, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x65, 0x12,
	0xd2, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2d, 0x2e, 0x43, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x82, 0xb5, 0x18, 0x56, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0xb6, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x30, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xb5, 0x18, 0x31, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x2b, 0x82,
	0xb5, 0x18, 0x27, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x32, 0x8d, 0x04, 0x0a, 0x13, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x93, 0x01, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x2b, 0x2e, 0x43, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xb5, 0x18, 0x3d, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x20, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x61, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x16, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x64, 0x12, 0x2d, 0x2e, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x45, 0x82, 0xb5, 0x18, 0x41, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x75, 0x6e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x61, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x2e, 0x43,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e,
	0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xb5, 0x18, 0x3d,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x61, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69,
	0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x1a, 0x2b, 0x82,
	0xb5, 0x18, 0x23, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0xc0, 0xb5, 0x18, 0x02, 0x42, 0x46, 0x42, 0x2a, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x13, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x80,
	0x01, 0x01,
}

var (
	file_steammessages_publishedfile_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_publishedfile_steamclient_proto_rawDescData = file_steammessages_publishedfile_steamclient_proto_rawDesc
)

func file_steammessages_publishedfile_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_publishedfile_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_publishedfile_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_publishedfile_steamclient_proto_rawDescData)
	})
	return file_steammessages_publishedfile_steamclient_proto_rawDescData
}

var file_steammessages_publishedfile_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_steammessages_publishedfile_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 91)
var file_steammessages_publishedfile_steamclient_proto_goTypes = []interface{}{
	(EPublishedFileRevision)(0),                                                             // 0: EPublishedFileRevision
	(EPublishedFileForSaleStatus)(0),                                                        // 1: EPublishedFileForSaleStatus
	(*CPublishedFile_Vote_Request)(nil),                                                     // 2: CPublishedFile_Vote_Request
	(*CPublishedFile_Vote_Response)(nil),                                                    // 3: CPublishedFile_Vote_Response
	(*CPublishedFile_Subscribe_Request)(nil),                                                // 4: CPublishedFile_Subscribe_Request
	(*CPublishedFile_Subscribe_Response)(nil),                                               // 5: CPublishedFile_Subscribe_Response
	(*CPublishedFile_Unsubscribe_Request)(nil),                                              // 6: CPublishedFile_Unsubscribe_Request
	(*CPublishedFile_Unsubscribe_Response)(nil),                                             // 7: CPublishedFile_Unsubscribe_Response
	(*CPublishedFile_CanSubscribe_Request)(nil),                                             // 8: CPublishedFile_CanSubscribe_Request
	(*CPublishedFile_CanSubscribe_Response)(nil),                                            // 9: CPublishedFile_CanSubscribe_Response
	(*CPublishedFile_GetSubSectionData_Request)(nil),                                        // 10: CPublishedFile_GetSubSectionData_Request
	(*PublishedFileSubSection)(nil),                                                         // 11: PublishedFileSubSection
	(*CPublishedFile_GetSubSectionData_Response)(nil),                                       // 12: CPublishedFile_GetSubSectionData_Response
	(*CPublishedFile_Publish_Request)(nil),                                                  // 13: CPublishedFile_Publish_Request
	(*CPublishedFile_Publish_Response)(nil),                                                 // 14: CPublishedFile_Publish_Response
	(*CPublishedFile_GetDetails_Request)(nil),                                               // 15: CPublishedFile_GetDetails_Request
	(*PublishedFileDetails)(nil),                                                            // 16: PublishedFileDetails
	(*CPublishedFile_GetDetails_Response)(nil),                                              // 17: CPublishedFile_GetDetails_Response
	(*CPublishedFile_GetItemInfo_Request)(nil),                                              // 18: CPublishedFile_GetItemInfo_Request
	(*CPublishedFile_GetItemInfo_Response)(nil),                                             // 19: CPublishedFile_GetItemInfo_Response
	(*CPublishedFile_GetUserFiles_Request)(nil),                                             // 20: CPublishedFile_GetUserFiles_Request
	(*CPublishedFile_GetUserFiles_Response)(nil),                                            // 21: CPublishedFile_GetUserFiles_Response
	(*CPublishedFile_AreFilesInSubscriptionList_Request)(nil),                               // 22: CPublishedFile_AreFilesInSubscriptionList_Request
	(*CPublishedFile_AreFilesInSubscriptionList_Response)(nil),                              // 23: CPublishedFile_AreFilesInSubscriptionList_Response
	(*CPublishedFile_Update_Request)(nil),                                                   // 24: CPublishedFile_Update_Request
	(*CPublishedFile_Update_Response)(nil),                                                  // 25: CPublishedFile_Update_Response
	(*CPublishedFile_Delete_Request)(nil),                                                   // 26: CPublishedFile_Delete_Request
	(*CPublishedFile_Delete_Response)(nil),                                                  // 27: CPublishedFile_Delete_Response
	(*CPublishedFile_GetChangeHistoryEntry_Request)(nil),                                    // 28: CPublishedFile_GetChangeHistoryEntry_Request
	(*CPublishedFile_GetChangeHistoryEntry_Response)(nil),                                   // 29: CPublishedFile_GetChangeHistoryEntry_Response
	(*CPublishedFile_GetChangeHistory_Request)(nil),                                         // 30: CPublishedFile_GetChangeHistory_Request
	(*CPublishedFile_GetChangeHistory_Response)(nil),                                        // 31: CPublishedFile_GetChangeHistory_Response
	(*CPublishedFile_RefreshVotingQueue_Request)(nil),                                       // 32: CPublishedFile_RefreshVotingQueue_Request
	(*CPublishedFile_RefreshVotingQueue_Response)(nil),                                      // 33: CPublishedFile_RefreshVotingQueue_Response
	(*CPublishedFile_QueryFiles_Request)(nil),                                               // 34: CPublishedFile_QueryFiles_Request
	(*CPublishedFile_QueryFiles_Response)(nil),                                              // 35: CPublishedFile_QueryFiles_Response
	(*CPublishedFile_AddAppRelationship_Request)(nil),                                       // 36: CPublishedFile_AddAppRelationship_Request
	(*CPublishedFile_AddAppRelationship_Response)(nil),                                      // 37: CPublishedFile_AddAppRelationship_Response
	(*CPublishedFile_RemoveAppRelationship_Request)(nil),                                    // 38: CPublishedFile_RemoveAppRelationship_Request
	(*CPublishedFile_RemoveAppRelationship_Response)(nil),                                   // 39: CPublishedFile_RemoveAppRelationship_Response
	(*CPublishedFile_GetAppRelationships_Request)(nil),                                      // 40: CPublishedFile_GetAppRelationships_Request
	(*CPublishedFile_GetAppRelationships_Response)(nil),                                     // 41: CPublishedFile_GetAppRelationships_Response
	(*CPublishedFile_GetAppRelationshipsBatched_Request)(nil),                               // 42: CPublishedFile_GetAppRelationshipsBatched_Request
	(*CPublishedFile_GetAppRelationshipsBatched_Response)(nil),                              // 43: CPublishedFile_GetAppRelationshipsBatched_Response
	(*CPublishedFile_StartPlaytimeTracking_Request)(nil),                                    // 44: CPublishedFile_StartPlaytimeTracking_Request
	(*CPublishedFile_StartPlaytimeTracking_Response)(nil),                                   // 45: CPublishedFile_StartPlaytimeTracking_Response
	(*CPublishedFile_StopPlaytimeTracking_Request)(nil),                                     // 46: CPublishedFile_StopPlaytimeTracking_Request
	(*CPublishedFile_StopPlaytimeTracking_Response)(nil),                                    // 47: CPublishedFile_StopPlaytimeTracking_Response
	(*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)(nil),                       // 48: CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request
	(*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)(nil),                      // 49: CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response
	(*CPublishedFile_SetPlaytimeForControllerConfigs_Request)(nil),                          // 50: CPublishedFile_SetPlaytimeForControllerConfigs_Request
	(*CPublishedFile_SetPlaytimeForControllerConfigs_Response)(nil),                         // 51: CPublishedFile_SetPlaytimeForControllerConfigs_Response
	(*CPublishedFile_AddChild_Request)(nil),                                                 // 52: CPublishedFile_AddChild_Request
	(*CPublishedFile_AddChild_Response)(nil),                                                // 53: CPublishedFile_AddChild_Response
	(*CPublishedFile_RemoveChild_Request)(nil),                                              // 54: CPublishedFile_RemoveChild_Request
	(*CPublishedFile_RemoveChild_Response)(nil),                                             // 55: CPublishedFile_RemoveChild_Response
	(*CPublishedFile_GetUserVoteSummary_Request)(nil),                                       // 56: CPublishedFile_GetUserVoteSummary_Request
	(*CPublishedFile_GetUserVoteSummary_Response)(nil),                                      // 57: CPublishedFile_GetUserVoteSummary_Response
	(*CPublishedFile_GetItemChanges_Request)(nil),                                           // 58: CPublishedFile_GetItemChanges_Request
	(*CPublishedFile_GetItemChanges_Response)(nil),                                          // 59: CPublishedFile_GetItemChanges_Response
	(*CPublishedFile_GetContentDescriptors_Request)(nil),                                    // 60: CPublishedFile_GetContentDescriptors_Request
	(*CPublishedFile_GetContentDescriptors_Response)(nil),                                   // 61: CPublishedFile_GetContentDescriptors_Response
	(*CPublishedFile_UpdateContentDescriptors_Request)(nil),                                 // 62: CPublishedFile_UpdateContentDescriptors_Request
	(*CPublishedFile_UpdateContentDescriptors_Response)(nil),                                // 63: CPublishedFile_UpdateContentDescriptors_Response
	(*CPublishedFile_FileSubscribed_Notification)(nil),                                      // 64: CPublishedFile_FileSubscribed_Notification
	(*CPublishedFile_FileUnsubscribed_Notification)(nil),                                    // 65: CPublishedFile_FileUnsubscribed_Notification
	(*CPublishedFile_FileDeleted_Client_Notification)(nil),                                  // 66: CPublishedFile_FileDeleted_Client_Notification
	(*PublishedFileDetails_Tag)(nil),                                                        // 67: PublishedFileDetails.Tag
	(*PublishedFileDetails_Preview)(nil),                                                    // 68: PublishedFileDetails.Preview
	(*PublishedFileDetails_Child)(nil),                                                      // 69: PublishedFileDetails.Child
	(*PublishedFileDetails_KVTag)(nil),                                                      // 70: PublishedFileDetails.KVTag
	(*PublishedFileDetails_VoteData)(nil),                                                   // 71: PublishedFileDetails.VoteData
	(*PublishedFileDetails_ForSaleData)(nil),                                                // 72: PublishedFileDetails.ForSaleData
	(*PublishedFileDetails_PlaytimeStats)(nil),                                              // 73: PublishedFileDetails.PlaytimeStats
	(*PublishedFileDetails_Reaction)(nil),                                                   // 74: PublishedFileDetails.Reaction
	(*CPublishedFile_GetItemInfo_Request_WorkshopItem)(nil),                                 // 75: CPublishedFile_GetItemInfo_Request.WorkshopItem
	(*CPublishedFile_GetItemInfo_Response_WorkshopItemInfo)(nil),                            // 76: CPublishedFile_GetItemInfo_Response.WorkshopItemInfo
	(*CPublishedFile_GetUserFiles_Request_KVTag)(nil),                                       // 77: CPublishedFile_GetUserFiles_Request.KVTag
	(*CPublishedFile_GetUserFiles_Request_TagGroup)(nil),                                    // 78: CPublishedFile_GetUserFiles_Request.TagGroup
	(*CPublishedFile_GetUserFiles_Response_App)(nil),                                        // 79: CPublishedFile_GetUserFiles_Response.App
	(*CPublishedFile_AreFilesInSubscriptionList_Response_InList)(nil),                       // 80: CPublishedFile_AreFilesInSubscriptionList_Response.InList
	(*CPublishedFile_GetChangeHistory_Response_ChangeLog)(nil),                              // 81: CPublishedFile_GetChangeHistory_Response.ChangeLog
	(*CPublishedFile_QueryFiles_Request_KVTag)(nil),                                         // 82: CPublishedFile_QueryFiles_Request.KVTag
	(*CPublishedFile_QueryFiles_Request_TagGroup)(nil),                                      // 83: CPublishedFile_QueryFiles_Request.TagGroup
	(*CPublishedFile_QueryFiles_Request_DateRange)(nil),                                     // 84: CPublishedFile_QueryFiles_Request.DateRange
	(*CPublishedFile_GetAppRelationships_Response_AppRelationship)(nil),                     // 85: CPublishedFile_GetAppRelationships_Response.AppRelationship
	(*CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship)(nil),              // 86: CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship
	(*CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship)(nil), // 87: CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship
	(*CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage)(nil),    // 88: CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage
	(*CPublishedFile_GetUserVoteSummary_Response_VoteSummary)(nil),                          // 89: CPublishedFile_GetUserVoteSummary_Response.VoteSummary
	(*CPublishedFile_GetItemChanges_Response_WorkshopItemInfo)(nil),                         // 90: CPublishedFile_GetItemChanges_Response.WorkshopItemInfo
	(*CPublishedFile_GetContentDescriptors_Response_ContentDescriptor)(nil),                 // 91: CPublishedFile_GetContentDescriptors_Response.ContentDescriptor
	(*CPublishedFile_FileSubscribed_Notification_RevisionData)(nil),                         // 92: CPublishedFile_FileSubscribed_Notification.RevisionData
	(EContentDescriptorID)(0),                                                               // 93: EContentDescriptorID
	(EBanContentCheckResult)(0),                                                             // 94: EBanContentCheckResult
	(*NoResponse)(nil),                                                                      // 95: NoResponse
}
var file_steammessages_publishedfile_steamclient_proto_depIdxs = []int32{
	0,  // 0: CPublishedFile_GetSubSectionData_Request.desired_revision:type_name -> EPublishedFileRevision
	11, // 1: CPublishedFile_GetSubSectionData_Response.sub_sections:type_name -> PublishedFileSubSection
	0,  // 2: CPublishedFile_GetDetails_Request.desired_revision:type_name -> EPublishedFileRevision
	68, // 3: PublishedFileDetails.previews:type_name -> PublishedFileDetails.Preview
	67, // 4: PublishedFileDetails.tags:type_name -> PublishedFileDetails.Tag
	69, // 5: PublishedFileDetails.children:type_name -> PublishedFileDetails.Child
	70, // 6: PublishedFileDetails.kvtags:type_name -> PublishedFileDetails.KVTag
	71, // 7: PublishedFileDetails.vote_data:type_name -> PublishedFileDetails.VoteData
	73, // 8: PublishedFileDetails.playtime_stats:type_name -> PublishedFileDetails.PlaytimeStats
	72, // 9: PublishedFileDetails.for_sale_data:type_name -> PublishedFileDetails.ForSaleData
	93, // 10: PublishedFileDetails.content_descriptorids:type_name -> EContentDescriptorID
	0,  // 11: PublishedFileDetails.revision:type_name -> EPublishedFileRevision
	0,  // 12: PublishedFileDetails.available_revisions:type_name -> EPublishedFileRevision
	74, // 13: PublishedFileDetails.reactions:type_name -> PublishedFileDetails.Reaction
	94, // 14: PublishedFileDetails.ban_text_check_result:type_name -> EBanContentCheckResult
	16, // 15: CPublishedFile_GetDetails_Response.publishedfiledetails:type_name -> PublishedFileDetails
	75, // 16: CPublishedFile_GetItemInfo_Request.workshop_items:type_name -> CPublishedFile_GetItemInfo_Request.WorkshopItem
	76, // 17: CPublishedFile_GetItemInfo_Response.workshop_items:type_name -> CPublishedFile_GetItemInfo_Response.WorkshopItemInfo
	77, // 18: CPublishedFile_GetUserFiles_Request.required_kv_tags:type_name -> CPublishedFile_GetUserFiles_Request.KVTag
	78, // 19: CPublishedFile_GetUserFiles_Request.taggroups:type_name -> CPublishedFile_GetUserFiles_Request.TagGroup
	93, // 20: CPublishedFile_GetUserFiles_Request.excluded_content_descriptors:type_name -> EContentDescriptorID
	0,  // 21: CPublishedFile_GetUserFiles_Request.desired_revision:type_name -> EPublishedFileRevision
	16, // 22: CPublishedFile_GetUserFiles_Response.publishedfiledetails:type_name -> PublishedFileDetails
	79, // 23: CPublishedFile_GetUserFiles_Response.apps:type_name -> CPublishedFile_GetUserFiles_Response.App
	80, // 24: CPublishedFile_AreFilesInSubscriptionList_Response.files:type_name -> CPublishedFile_AreFilesInSubscriptionList_Response.InList
	81, // 25: CPublishedFile_GetChangeHistory_Response.changes:type_name -> CPublishedFile_GetChangeHistory_Response.ChangeLog
	0,  // 26: CPublishedFile_RefreshVotingQueue_Request.desired_revision:type_name -> EPublishedFileRevision
	82, // 27: CPublishedFile_QueryFiles_Request.required_kv_tags:type_name -> CPublishedFile_QueryFiles_Request.KVTag
	83, // 28: CPublishedFile_QueryFiles_Request.taggroups:type_name -> CPublishedFile_QueryFiles_Request.TagGroup
	84, // 29: CPublishedFile_QueryFiles_Request.date_range_created:type_name -> CPublishedFile_QueryFiles_Request.DateRange
	84, // 30: CPublishedFile_QueryFiles_Request.date_range_updated:type_name -> CPublishedFile_QueryFiles_Request.DateRange
	93, // 31: CPublishedFile_QueryFiles_Request.excluded_content_descriptors:type_name -> EContentDescriptorID
	0,  // 32: CPublishedFile_QueryFiles_Request.desired_revision:type_name -> EPublishedFileRevision
	16, // 33: CPublishedFile_QueryFiles_Response.publishedfiledetails:type_name -> PublishedFileDetails
	85, // 34: CPublishedFile_GetAppRelationships_Response.app_relationships:type_name -> CPublishedFile_GetAppRelationships_Response.AppRelationship
	87, // 35: CPublishedFile_GetAppRelationshipsBatched_Response.relationships:type_name -> CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship
	88, // 36: CPublishedFile_SetPlaytimeForControllerConfigs_Request.controller_config_usage:type_name -> CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage
	89, // 37: CPublishedFile_GetUserVoteSummary_Response.summaries:type_name -> CPublishedFile_GetUserVoteSummary_Response.VoteSummary
	90, // 38: CPublishedFile_GetItemChanges_Response.workshop_items:type_name -> CPublishedFile_GetItemChanges_Response.WorkshopItemInfo
	91, // 39: CPublishedFile_GetContentDescriptors_Response.content_descriptors:type_name -> CPublishedFile_GetContentDescriptors_Response.ContentDescriptor
	93, // 40: CPublishedFile_UpdateContentDescriptors_Request.descriptors_to_add:type_name -> EContentDescriptorID
	93, // 41: CPublishedFile_UpdateContentDescriptors_Request.descriptors_to_remove:type_name -> EContentDescriptorID
	92, // 42: CPublishedFile_FileSubscribed_Notification.revisions:type_name -> CPublishedFile_FileSubscribed_Notification.RevisionData
	1,  // 43: PublishedFileDetails.ForSaleData.estatus:type_name -> EPublishedFileForSaleStatus
	0,  // 44: CPublishedFile_GetItemInfo_Request.WorkshopItem.desired_revision:type_name -> EPublishedFileRevision
	86, // 45: CPublishedFile_GetAppRelationshipsBatched_Response.PublishedFileAppRelationship.app_relationships:type_name -> CPublishedFile_GetAppRelationshipsBatched_Response.AppRelationship
	93, // 46: CPublishedFile_GetContentDescriptors_Response.ContentDescriptor.descriptorid:type_name -> EContentDescriptorID
	0,  // 47: CPublishedFile_FileSubscribed_Notification.RevisionData.revision:type_name -> EPublishedFileRevision
	2,  // 48: PublishedFile.Vote:input_type -> CPublishedFile_Vote_Request
	4,  // 49: PublishedFile.Subscribe:input_type -> CPublishedFile_Subscribe_Request
	6,  // 50: PublishedFile.Unsubscribe:input_type -> CPublishedFile_Unsubscribe_Request
	8,  // 51: PublishedFile.CanSubscribe:input_type -> CPublishedFile_CanSubscribe_Request
	10, // 52: PublishedFile.GetSubSectionData:input_type -> CPublishedFile_GetSubSectionData_Request
	13, // 53: PublishedFile.Publish:input_type -> CPublishedFile_Publish_Request
	15, // 54: PublishedFile.GetDetails:input_type -> CPublishedFile_GetDetails_Request
	18, // 55: PublishedFile.GetItemInfo:input_type -> CPublishedFile_GetItemInfo_Request
	20, // 56: PublishedFile.GetUserFiles:input_type -> CPublishedFile_GetUserFiles_Request
	20, // 57: PublishedFile.GetUserFileCount:input_type -> CPublishedFile_GetUserFiles_Request
	22, // 58: PublishedFile.AreFilesInSubscriptionList:input_type -> CPublishedFile_AreFilesInSubscriptionList_Request
	24, // 59: PublishedFile.Update:input_type -> CPublishedFile_Update_Request
	26, // 60: PublishedFile.Delete:input_type -> CPublishedFile_Delete_Request
	28, // 61: PublishedFile.GetChangeHistoryEntry:input_type -> CPublishedFile_GetChangeHistoryEntry_Request
	30, // 62: PublishedFile.GetChangeHistory:input_type -> CPublishedFile_GetChangeHistory_Request
	32, // 63: PublishedFile.RefreshVotingQueue:input_type -> CPublishedFile_RefreshVotingQueue_Request
	34, // 64: PublishedFile.QueryFiles:input_type -> CPublishedFile_QueryFiles_Request
	36, // 65: PublishedFile.AddAppRelationship:input_type -> CPublishedFile_AddAppRelationship_Request
	38, // 66: PublishedFile.RemoveAppRelationship:input_type -> CPublishedFile_RemoveAppRelationship_Request
	40, // 67: PublishedFile.GetAppRelationships:input_type -> CPublishedFile_GetAppRelationships_Request
	42, // 68: PublishedFile.GetAppRelationshipsBatched:input_type -> CPublishedFile_GetAppRelationshipsBatched_Request
	44, // 69: PublishedFile.StartPlaytimeTracking:input_type -> CPublishedFile_StartPlaytimeTracking_Request
	46, // 70: PublishedFile.StopPlaytimeTracking:input_type -> CPublishedFile_StopPlaytimeTracking_Request
	48, // 71: PublishedFile.StopPlaytimeTrackingForAllAppItems:input_type -> CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request
	50, // 72: PublishedFile.SetPlaytimeForControllerConfigs:input_type -> CPublishedFile_SetPlaytimeForControllerConfigs_Request
	52, // 73: PublishedFile.AddChild:input_type -> CPublishedFile_AddChild_Request
	54, // 74: PublishedFile.RemoveChild:input_type -> CPublishedFile_RemoveChild_Request
	56, // 75: PublishedFile.GetUserVoteSummary:input_type -> CPublishedFile_GetUserVoteSummary_Request
	58, // 76: PublishedFile.GetItemChanges:input_type -> CPublishedFile_GetItemChanges_Request
	60, // 77: PublishedFile.GetContentDescriptors:input_type -> CPublishedFile_GetContentDescriptors_Request
	62, // 78: PublishedFile.UpdateContentDescriptors:input_type -> CPublishedFile_UpdateContentDescriptors_Request
	64, // 79: PublishedFileClient.NotifyFileSubscribed:input_type -> CPublishedFile_FileSubscribed_Notification
	65, // 80: PublishedFileClient.NotifyFileUnsubscribed:input_type -> CPublishedFile_FileUnsubscribed_Notification
	66, // 81: PublishedFileClient.NotifyFileDeleted:input_type -> CPublishedFile_FileDeleted_Client_Notification
	3,  // 82: PublishedFile.Vote:output_type -> CPublishedFile_Vote_Response
	5,  // 83: PublishedFile.Subscribe:output_type -> CPublishedFile_Subscribe_Response
	7,  // 84: PublishedFile.Unsubscribe:output_type -> CPublishedFile_Unsubscribe_Response
	9,  // 85: PublishedFile.CanSubscribe:output_type -> CPublishedFile_CanSubscribe_Response
	12, // 86: PublishedFile.GetSubSectionData:output_type -> CPublishedFile_GetSubSectionData_Response
	14, // 87: PublishedFile.Publish:output_type -> CPublishedFile_Publish_Response
	17, // 88: PublishedFile.GetDetails:output_type -> CPublishedFile_GetDetails_Response
	19, // 89: PublishedFile.GetItemInfo:output_type -> CPublishedFile_GetItemInfo_Response
	21, // 90: PublishedFile.GetUserFiles:output_type -> CPublishedFile_GetUserFiles_Response
	21, // 91: PublishedFile.GetUserFileCount:output_type -> CPublishedFile_GetUserFiles_Response
	23, // 92: PublishedFile.AreFilesInSubscriptionList:output_type -> CPublishedFile_AreFilesInSubscriptionList_Response
	25, // 93: PublishedFile.Update:output_type -> CPublishedFile_Update_Response
	27, // 94: PublishedFile.Delete:output_type -> CPublishedFile_Delete_Response
	29, // 95: PublishedFile.GetChangeHistoryEntry:output_type -> CPublishedFile_GetChangeHistoryEntry_Response
	31, // 96: PublishedFile.GetChangeHistory:output_type -> CPublishedFile_GetChangeHistory_Response
	33, // 97: PublishedFile.RefreshVotingQueue:output_type -> CPublishedFile_RefreshVotingQueue_Response
	35, // 98: PublishedFile.QueryFiles:output_type -> CPublishedFile_QueryFiles_Response
	37, // 99: PublishedFile.AddAppRelationship:output_type -> CPublishedFile_AddAppRelationship_Response
	39, // 100: PublishedFile.RemoveAppRelationship:output_type -> CPublishedFile_RemoveAppRelationship_Response
	41, // 101: PublishedFile.GetAppRelationships:output_type -> CPublishedFile_GetAppRelationships_Response
	43, // 102: PublishedFile.GetAppRelationshipsBatched:output_type -> CPublishedFile_GetAppRelationshipsBatched_Response
	45, // 103: PublishedFile.StartPlaytimeTracking:output_type -> CPublishedFile_StartPlaytimeTracking_Response
	47, // 104: PublishedFile.StopPlaytimeTracking:output_type -> CPublishedFile_StopPlaytimeTracking_Response
	49, // 105: PublishedFile.StopPlaytimeTrackingForAllAppItems:output_type -> CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response
	51, // 106: PublishedFile.SetPlaytimeForControllerConfigs:output_type -> CPublishedFile_SetPlaytimeForControllerConfigs_Response
	53, // 107: PublishedFile.AddChild:output_type -> CPublishedFile_AddChild_Response
	55, // 108: PublishedFile.RemoveChild:output_type -> CPublishedFile_RemoveChild_Response
	57, // 109: PublishedFile.GetUserVoteSummary:output_type -> CPublishedFile_GetUserVoteSummary_Response
	59, // 110: PublishedFile.GetItemChanges:output_type -> CPublishedFile_GetItemChanges_Response
	61, // 111: PublishedFile.GetContentDescriptors:output_type -> CPublishedFile_GetContentDescriptors_Response
	63, // 112: PublishedFile.UpdateContentDescriptors:output_type -> CPublishedFile_UpdateContentDescriptors_Response
	95, // 113: PublishedFileClient.NotifyFileSubscribed:output_type -> NoResponse
	95, // 114: PublishedFileClient.NotifyFileUnsubscribed:output_type -> NoResponse
	95, // 115: PublishedFileClient.NotifyFileDeleted:output_type -> NoResponse
	82, // [82:116] is the sub-list for method output_type
	48, // [48:82] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_steammessages_publishedfile_steamclient_proto_init() }
func file_steammessages_publishedfile_steamclient_proto_init() {
	if File_steammessages_publishedfile_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	file_enums_productinfo_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_publishedfile_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Vote_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Vote_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Subscribe_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Subscribe_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Unsubscribe_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Unsubscribe_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_CanSubscribe_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_CanSubscribe_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetSubSectionData_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedFileSubSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetSubSectionData_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Publish_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Publish_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetDetails_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedFileDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetDetails_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetItemInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetItemInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetUserFiles_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetUserFiles_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_AreFilesInSubscriptionList_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_AreFilesInSubscriptionList_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Update_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Update_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Delete_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_Delete_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetChangeHistoryEntry_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetChangeHistoryEntry_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetChangeHistory_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetChangeHistory_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_RefreshVotingQueue_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_RefreshVotingQueue_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_QueryFiles_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_QueryFiles_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_AddAppRelationship_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_AddAppRelationship_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_RemoveAppRelationship_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_RemoveAppRelationship_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetAppRelationships_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetAppRelationships_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetAppRelationshipsBatched_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetAppRelationshipsBatched_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_StartPlaytimeTracking_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_StartPlaytimeTracking_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_StopPlaytimeTracking_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_StopPlaytimeTracking_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_SetPlaytimeForControllerConfigs_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_SetPlaytimeForControllerConfigs_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_AddChild_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_AddChild_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_RemoveChild_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_RemoveChild_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetUserVoteSummary_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetUserVoteSummary_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetItemChanges_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetItemChanges_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetContentDescriptors_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetContentDescriptors_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_UpdateContentDescriptors_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_UpdateContentDescriptors_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_FileSubscribed_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_FileUnsubscribed_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_FileDeleted_Client_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedFileDetails_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedFileDetails_Preview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedFileDetails_Child); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedFileDetails_KVTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedFileDetails_VoteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedFileDetails_ForSaleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedFileDetails_PlaytimeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishedFileDetails_Reaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetItemInfo_Request_WorkshopItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetItemInfo_Response_WorkshopItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetUserFiles_Request_KVTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetUserFiles_Request_TagGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetUserFiles_Response_App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_AreFilesInSubscriptionList_Response_InList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetChangeHistory_Response_ChangeLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_QueryFiles_Request_KVTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_QueryFiles_Request_TagGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_QueryFiles_Request_DateRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetAppRelationships_Response_AppRelationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetAppRelationshipsBatched_Response_AppRelationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetAppRelationshipsBatched_Response_PublishedFileAppRelationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetUserVoteSummary_Response_VoteSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetItemChanges_Response_WorkshopItemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_GetContentDescriptors_Response_ContentDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_publishedfile_steamclient_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPublishedFile_FileSubscribed_Notification_RevisionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_publishedfile_steamclient_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   91,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_steammessages_publishedfile_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_publishedfile_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_publishedfile_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_publishedfile_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_publishedfile_steamclient_proto = out.File
	file_steammessages_publishedfile_steamclient_proto_rawDesc = nil
	file_steammessages_publishedfile_steamclient_proto_goTypes = nil
	file_steammessages_publishedfile_steamclient_proto_depIdxs = nil
}
