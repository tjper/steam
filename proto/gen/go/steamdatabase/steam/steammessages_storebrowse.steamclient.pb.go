// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: steammessages_storebrowse.steamclient.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EStoreItemType int32

const (
	EStoreItemType_k_EStoreItemType_Invalid     EStoreItemType = -1
	EStoreItemType_k_EStoreItemType_App         EStoreItemType = 0
	EStoreItemType_k_EStoreItemType_Package     EStoreItemType = 1
	EStoreItemType_k_EStoreItemType_Bundle      EStoreItemType = 2
	EStoreItemType_k_EStoreItemType_Mtx         EStoreItemType = 3
	EStoreItemType_k_EStoreItemType_Tag         EStoreItemType = 4
	EStoreItemType_k_EStoreItemType_Creator     EStoreItemType = 5
	EStoreItemType_k_EStoreItemType_HubCategory EStoreItemType = 6
)

// Enum value maps for EStoreItemType.
var (
	EStoreItemType_name = map[int32]string{
		-1: "k_EStoreItemType_Invalid",
		0:  "k_EStoreItemType_App",
		1:  "k_EStoreItemType_Package",
		2:  "k_EStoreItemType_Bundle",
		3:  "k_EStoreItemType_Mtx",
		4:  "k_EStoreItemType_Tag",
		5:  "k_EStoreItemType_Creator",
		6:  "k_EStoreItemType_HubCategory",
	}
	EStoreItemType_value = map[string]int32{
		"k_EStoreItemType_Invalid":     -1,
		"k_EStoreItemType_App":         0,
		"k_EStoreItemType_Package":     1,
		"k_EStoreItemType_Bundle":      2,
		"k_EStoreItemType_Mtx":         3,
		"k_EStoreItemType_Tag":         4,
		"k_EStoreItemType_Creator":     5,
		"k_EStoreItemType_HubCategory": 6,
	}
)

func (x EStoreItemType) Enum() *EStoreItemType {
	p := new(EStoreItemType)
	*p = x
	return p
}

func (x EStoreItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStoreItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_storebrowse_steamclient_proto_enumTypes[0].Descriptor()
}

func (EStoreItemType) Type() protoreflect.EnumType {
	return &file_steammessages_storebrowse_steamclient_proto_enumTypes[0]
}

func (x EStoreItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStoreItemType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStoreItemType(num)
	return nil
}

// Deprecated: Use EStoreItemType.Descriptor instead.
func (EStoreItemType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{0}
}

type EStoreAppType int32

const (
	EStoreAppType_k_EStoreAppType_Game        EStoreAppType = 0
	EStoreAppType_k_EStoreAppType_Demo        EStoreAppType = 1
	EStoreAppType_k_EStoreAppType_Mod         EStoreAppType = 2
	EStoreAppType_k_EStoreAppType_Movie       EStoreAppType = 3
	EStoreAppType_k_EStoreAppType_DLC         EStoreAppType = 4
	EStoreAppType_k_EStoreAppType_Guide       EStoreAppType = 5
	EStoreAppType_k_EStoreAppType_Software    EStoreAppType = 6
	EStoreAppType_k_EStoreAppType_Video       EStoreAppType = 7
	EStoreAppType_k_EStoreAppType_Series      EStoreAppType = 8
	EStoreAppType_k_EStoreAppType_Episode     EStoreAppType = 9
	EStoreAppType_k_EStoreAppType_Hardware    EStoreAppType = 10
	EStoreAppType_k_EStoreAppType_Music       EStoreAppType = 11
	EStoreAppType_k_EStoreAppType_Beta        EStoreAppType = 12
	EStoreAppType_k_EStoreAppType_Tool        EStoreAppType = 13
	EStoreAppType_k_EStoreAppType_Advertising EStoreAppType = 14
)

// Enum value maps for EStoreAppType.
var (
	EStoreAppType_name = map[int32]string{
		0:  "k_EStoreAppType_Game",
		1:  "k_EStoreAppType_Demo",
		2:  "k_EStoreAppType_Mod",
		3:  "k_EStoreAppType_Movie",
		4:  "k_EStoreAppType_DLC",
		5:  "k_EStoreAppType_Guide",
		6:  "k_EStoreAppType_Software",
		7:  "k_EStoreAppType_Video",
		8:  "k_EStoreAppType_Series",
		9:  "k_EStoreAppType_Episode",
		10: "k_EStoreAppType_Hardware",
		11: "k_EStoreAppType_Music",
		12: "k_EStoreAppType_Beta",
		13: "k_EStoreAppType_Tool",
		14: "k_EStoreAppType_Advertising",
	}
	EStoreAppType_value = map[string]int32{
		"k_EStoreAppType_Game":        0,
		"k_EStoreAppType_Demo":        1,
		"k_EStoreAppType_Mod":         2,
		"k_EStoreAppType_Movie":       3,
		"k_EStoreAppType_DLC":         4,
		"k_EStoreAppType_Guide":       5,
		"k_EStoreAppType_Software":    6,
		"k_EStoreAppType_Video":       7,
		"k_EStoreAppType_Series":      8,
		"k_EStoreAppType_Episode":     9,
		"k_EStoreAppType_Hardware":    10,
		"k_EStoreAppType_Music":       11,
		"k_EStoreAppType_Beta":        12,
		"k_EStoreAppType_Tool":        13,
		"k_EStoreAppType_Advertising": 14,
	}
)

func (x EStoreAppType) Enum() *EStoreAppType {
	p := new(EStoreAppType)
	*p = x
	return p
}

func (x EStoreAppType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStoreAppType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_storebrowse_steamclient_proto_enumTypes[1].Descriptor()
}

func (EStoreAppType) Type() protoreflect.EnumType {
	return &file_steammessages_storebrowse_steamclient_proto_enumTypes[1]
}

func (x EStoreAppType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStoreAppType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStoreAppType(num)
	return nil
}

// Deprecated: Use EStoreAppType.Descriptor instead.
func (EStoreAppType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{1}
}

type EUserReviewScore int32

const (
	EUserReviewScore_k_EUserReviewScore_None                   EUserReviewScore = 0
	EUserReviewScore_k_EUserReviewScore_OverwhelminglyNegative EUserReviewScore = 1
	EUserReviewScore_k_EUserReviewScore_VeryNegative           EUserReviewScore = 2
	EUserReviewScore_k_EUserReviewScore_Negative               EUserReviewScore = 3
	EUserReviewScore_k_EUserReviewScore_MostlyNegative         EUserReviewScore = 4
	EUserReviewScore_k_EUserReviewScore_Mixed                  EUserReviewScore = 5
	EUserReviewScore_k_EUserReviewScore_MostlyPositive         EUserReviewScore = 6
	EUserReviewScore_k_EUserReviewScore_Positive               EUserReviewScore = 7
	EUserReviewScore_k_EUserReviewScore_VeryPositive           EUserReviewScore = 8
	EUserReviewScore_k_EUserReviewScore_OverwhelminglyPositive EUserReviewScore = 9
)

// Enum value maps for EUserReviewScore.
var (
	EUserReviewScore_name = map[int32]string{
		0: "k_EUserReviewScore_None",
		1: "k_EUserReviewScore_OverwhelminglyNegative",
		2: "k_EUserReviewScore_VeryNegative",
		3: "k_EUserReviewScore_Negative",
		4: "k_EUserReviewScore_MostlyNegative",
		5: "k_EUserReviewScore_Mixed",
		6: "k_EUserReviewScore_MostlyPositive",
		7: "k_EUserReviewScore_Positive",
		8: "k_EUserReviewScore_VeryPositive",
		9: "k_EUserReviewScore_OverwhelminglyPositive",
	}
	EUserReviewScore_value = map[string]int32{
		"k_EUserReviewScore_None":                   0,
		"k_EUserReviewScore_OverwhelminglyNegative": 1,
		"k_EUserReviewScore_VeryNegative":           2,
		"k_EUserReviewScore_Negative":               3,
		"k_EUserReviewScore_MostlyNegative":         4,
		"k_EUserReviewScore_Mixed":                  5,
		"k_EUserReviewScore_MostlyPositive":         6,
		"k_EUserReviewScore_Positive":               7,
		"k_EUserReviewScore_VeryPositive":           8,
		"k_EUserReviewScore_OverwhelminglyPositive": 9,
	}
)

func (x EUserReviewScore) Enum() *EUserReviewScore {
	p := new(EUserReviewScore)
	*p = x
	return p
}

func (x EUserReviewScore) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUserReviewScore) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_storebrowse_steamclient_proto_enumTypes[2].Descriptor()
}

func (EUserReviewScore) Type() protoreflect.EnumType {
	return &file_steammessages_storebrowse_steamclient_proto_enumTypes[2]
}

func (x EUserReviewScore) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EUserReviewScore) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EUserReviewScore(num)
	return nil
}

// Deprecated: Use EUserReviewScore.Descriptor instead.
func (EUserReviewScore) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{2}
}

type EStoreCategoryType int32

const (
	EStoreCategoryType_k_EStoreCategoryType_Category          EStoreCategoryType = 0
	EStoreCategoryType_k_EStoreCategoryType_SupportedPlayers  EStoreCategoryType = 1
	EStoreCategoryType_k_EStoreCategoryType_Feature           EStoreCategoryType = 2
	EStoreCategoryType_k_EStoreCategoryType_ControllerSupport EStoreCategoryType = 3
	EStoreCategoryType_k_EStoreCategoryType_CloudGaming       EStoreCategoryType = 4
	EStoreCategoryType_k_EStoreCategoryType_MAX               EStoreCategoryType = 5
)

// Enum value maps for EStoreCategoryType.
var (
	EStoreCategoryType_name = map[int32]string{
		0: "k_EStoreCategoryType_Category",
		1: "k_EStoreCategoryType_SupportedPlayers",
		2: "k_EStoreCategoryType_Feature",
		3: "k_EStoreCategoryType_ControllerSupport",
		4: "k_EStoreCategoryType_CloudGaming",
		5: "k_EStoreCategoryType_MAX",
	}
	EStoreCategoryType_value = map[string]int32{
		"k_EStoreCategoryType_Category":          0,
		"k_EStoreCategoryType_SupportedPlayers":  1,
		"k_EStoreCategoryType_Feature":           2,
		"k_EStoreCategoryType_ControllerSupport": 3,
		"k_EStoreCategoryType_CloudGaming":       4,
		"k_EStoreCategoryType_MAX":               5,
	}
)

func (x EStoreCategoryType) Enum() *EStoreCategoryType {
	p := new(EStoreCategoryType)
	*p = x
	return p
}

func (x EStoreCategoryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStoreCategoryType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_storebrowse_steamclient_proto_enumTypes[3].Descriptor()
}

func (EStoreCategoryType) Type() protoreflect.EnumType {
	return &file_steammessages_storebrowse_steamclient_proto_enumTypes[3]
}

func (x EStoreCategoryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EStoreCategoryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EStoreCategoryType(num)
	return nil
}

// Deprecated: Use EStoreCategoryType.Descriptor instead.
func (EStoreCategoryType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{3}
}

type StoreItemID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid         *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Packageid     *uint32 `protobuf:"varint,2,opt,name=packageid" json:"packageid,omitempty"`
	Bundleid      *uint32 `protobuf:"varint,3,opt,name=bundleid" json:"bundleid,omitempty"`
	Tagid         *uint32 `protobuf:"varint,4,opt,name=tagid" json:"tagid,omitempty"`
	Creatorid     *uint32 `protobuf:"varint,5,opt,name=creatorid" json:"creatorid,omitempty"`
	Hubcategoryid *uint32 `protobuf:"varint,6,opt,name=hubcategoryid" json:"hubcategoryid,omitempty"`
}

func (x *StoreItemID) Reset() {
	*x = StoreItemID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItemID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItemID) ProtoMessage() {}

func (x *StoreItemID) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItemID.ProtoReflect.Descriptor instead.
func (*StoreItemID) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *StoreItemID) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *StoreItemID) GetPackageid() uint32 {
	if x != nil && x.Packageid != nil {
		return *x.Packageid
	}
	return 0
}

func (x *StoreItemID) GetBundleid() uint32 {
	if x != nil && x.Bundleid != nil {
		return *x.Bundleid
	}
	return 0
}

func (x *StoreItemID) GetTagid() uint32 {
	if x != nil && x.Tagid != nil {
		return *x.Tagid
	}
	return 0
}

func (x *StoreItemID) GetCreatorid() uint32 {
	if x != nil && x.Creatorid != nil {
		return *x.Creatorid
	}
	return 0
}

func (x *StoreItemID) GetHubcategoryid() uint32 {
	if x != nil && x.Hubcategoryid != nil {
		return *x.Hubcategoryid
	}
	return 0
}

type StoreBrowseContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language    *string `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Elanguage   *int32  `protobuf:"varint,2,opt,name=elanguage" json:"elanguage,omitempty"`
	CountryCode *string `protobuf:"bytes,3,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	SteamRealm  *int32  `protobuf:"varint,4,opt,name=steam_realm,json=steamRealm" json:"steam_realm,omitempty"`
}

func (x *StoreBrowseContext) Reset() {
	*x = StoreBrowseContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreBrowseContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreBrowseContext) ProtoMessage() {}

func (x *StoreBrowseContext) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreBrowseContext.ProtoReflect.Descriptor instead.
func (*StoreBrowseContext) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *StoreBrowseContext) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *StoreBrowseContext) GetElanguage() int32 {
	if x != nil && x.Elanguage != nil {
		return *x.Elanguage
	}
	return 0
}

func (x *StoreBrowseContext) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *StoreBrowseContext) GetSteamRealm() int32 {
	if x != nil && x.SteamRealm != nil {
		return *x.SteamRealm
	}
	return 0
}

type StoreBrowseItemDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeAssets             *bool                       `protobuf:"varint,1,opt,name=include_assets,json=includeAssets" json:"include_assets,omitempty"`
	IncludeRelease            *bool                       `protobuf:"varint,2,opt,name=include_release,json=includeRelease" json:"include_release,omitempty"`
	IncludePlatforms          *bool                       `protobuf:"varint,3,opt,name=include_platforms,json=includePlatforms" json:"include_platforms,omitempty"`
	IncludeAllPurchaseOptions *bool                       `protobuf:"varint,4,opt,name=include_all_purchase_options,json=includeAllPurchaseOptions" json:"include_all_purchase_options,omitempty"`
	IncludeScreenshots        *bool                       `protobuf:"varint,5,opt,name=include_screenshots,json=includeScreenshots" json:"include_screenshots,omitempty"`
	IncludeTrailers           *bool                       `protobuf:"varint,6,opt,name=include_trailers,json=includeTrailers" json:"include_trailers,omitempty"`
	IncludeRatings            *bool                       `protobuf:"varint,7,opt,name=include_ratings,json=includeRatings" json:"include_ratings,omitempty"`
	IncludeTagCount           *int32                      `protobuf:"varint,8,opt,name=include_tag_count,json=includeTagCount" json:"include_tag_count,omitempty"`
	IncludeReviews            *bool                       `protobuf:"varint,9,opt,name=include_reviews,json=includeReviews" json:"include_reviews,omitempty"`
	IncludeBasicInfo          *bool                       `protobuf:"varint,10,opt,name=include_basic_info,json=includeBasicInfo" json:"include_basic_info,omitempty"`
	IncludeSupportedLanguages *bool                       `protobuf:"varint,11,opt,name=include_supported_languages,json=includeSupportedLanguages" json:"include_supported_languages,omitempty"`
	IncludeFullDescription    *bool                       `protobuf:"varint,12,opt,name=include_full_description,json=includeFullDescription" json:"include_full_description,omitempty"`
	IncludeIncludedItems      *bool                       `protobuf:"varint,13,opt,name=include_included_items,json=includeIncludedItems" json:"include_included_items,omitempty"`
	IncludedItemDataRequest   *StoreBrowseItemDataRequest `protobuf:"bytes,14,opt,name=included_item_data_request,json=includedItemDataRequest" json:"included_item_data_request,omitempty"`
}

func (x *StoreBrowseItemDataRequest) Reset() {
	*x = StoreBrowseItemDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreBrowseItemDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreBrowseItemDataRequest) ProtoMessage() {}

func (x *StoreBrowseItemDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreBrowseItemDataRequest.ProtoReflect.Descriptor instead.
func (*StoreBrowseItemDataRequest) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *StoreBrowseItemDataRequest) GetIncludeAssets() bool {
	if x != nil && x.IncludeAssets != nil {
		return *x.IncludeAssets
	}
	return false
}

func (x *StoreBrowseItemDataRequest) GetIncludeRelease() bool {
	if x != nil && x.IncludeRelease != nil {
		return *x.IncludeRelease
	}
	return false
}

func (x *StoreBrowseItemDataRequest) GetIncludePlatforms() bool {
	if x != nil && x.IncludePlatforms != nil {
		return *x.IncludePlatforms
	}
	return false
}

func (x *StoreBrowseItemDataRequest) GetIncludeAllPurchaseOptions() bool {
	if x != nil && x.IncludeAllPurchaseOptions != nil {
		return *x.IncludeAllPurchaseOptions
	}
	return false
}

func (x *StoreBrowseItemDataRequest) GetIncludeScreenshots() bool {
	if x != nil && x.IncludeScreenshots != nil {
		return *x.IncludeScreenshots
	}
	return false
}

func (x *StoreBrowseItemDataRequest) GetIncludeTrailers() bool {
	if x != nil && x.IncludeTrailers != nil {
		return *x.IncludeTrailers
	}
	return false
}

func (x *StoreBrowseItemDataRequest) GetIncludeRatings() bool {
	if x != nil && x.IncludeRatings != nil {
		return *x.IncludeRatings
	}
	return false
}

func (x *StoreBrowseItemDataRequest) GetIncludeTagCount() int32 {
	if x != nil && x.IncludeTagCount != nil {
		return *x.IncludeTagCount
	}
	return 0
}

func (x *StoreBrowseItemDataRequest) GetIncludeReviews() bool {
	if x != nil && x.IncludeReviews != nil {
		return *x.IncludeReviews
	}
	return false
}

func (x *StoreBrowseItemDataRequest) GetIncludeBasicInfo() bool {
	if x != nil && x.IncludeBasicInfo != nil {
		return *x.IncludeBasicInfo
	}
	return false
}

func (x *StoreBrowseItemDataRequest) GetIncludeSupportedLanguages() bool {
	if x != nil && x.IncludeSupportedLanguages != nil {
		return *x.IncludeSupportedLanguages
	}
	return false
}

func (x *StoreBrowseItemDataRequest) GetIncludeFullDescription() bool {
	if x != nil && x.IncludeFullDescription != nil {
		return *x.IncludeFullDescription
	}
	return false
}

func (x *StoreBrowseItemDataRequest) GetIncludeIncludedItems() bool {
	if x != nil && x.IncludeIncludedItems != nil {
		return *x.IncludeIncludedItems
	}
	return false
}

func (x *StoreBrowseItemDataRequest) GetIncludedItemDataRequest() *StoreBrowseItemDataRequest {
	if x != nil {
		return x.IncludedItemDataRequest
	}
	return nil
}

type CStoreBrowse_GetItems_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids         []*StoreItemID              `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	Context     *StoreBrowseContext         `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
	DataRequest *StoreBrowseItemDataRequest `protobuf:"bytes,3,opt,name=data_request,json=dataRequest" json:"data_request,omitempty"`
}

func (x *CStoreBrowse_GetItems_Request) Reset() {
	*x = CStoreBrowse_GetItems_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetItems_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetItems_Request) ProtoMessage() {}

func (x *CStoreBrowse_GetItems_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetItems_Request.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetItems_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CStoreBrowse_GetItems_Request) GetIds() []*StoreItemID {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *CStoreBrowse_GetItems_Request) GetContext() *StoreBrowseContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CStoreBrowse_GetItems_Request) GetDataRequest() *StoreBrowseItemDataRequest {
	if x != nil {
		return x.DataRequest
	}
	return nil
}

type StoreItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType                        *EStoreItemType                `protobuf:"varint,1,opt,name=item_type,json=itemType,enum=EStoreItemType,def=-1" json:"item_type,omitempty"`
	Id                              *uint32                        `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Success                         *uint32                        `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
	Visible                         *bool                          `protobuf:"varint,4,opt,name=visible" json:"visible,omitempty"`
	UnvailableForCountryRestriction *bool                          `protobuf:"varint,5,opt,name=unvailable_for_country_restriction,json=unvailableForCountryRestriction" json:"unvailable_for_country_restriction,omitempty"`
	Name                            *string                        `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	StoreUrlPath                    *string                        `protobuf:"bytes,7,opt,name=store_url_path,json=storeUrlPath" json:"store_url_path,omitempty"`
	Appid                           *uint32                        `protobuf:"varint,9,opt,name=appid" json:"appid,omitempty"`
	Type                            *EStoreAppType                 `protobuf:"varint,10,opt,name=type,enum=EStoreAppType,def=0" json:"type,omitempty"`
	IncludedTypes                   []EStoreAppType                `protobuf:"varint,11,rep,name=included_types,json=includedTypes,enum=EStoreAppType" json:"included_types,omitempty"`
	IncludedAppids                  []uint32                       `protobuf:"varint,12,rep,name=included_appids,json=includedAppids" json:"included_appids,omitempty"`
	IsFree                          *bool                          `protobuf:"varint,13,opt,name=is_free,json=isFree" json:"is_free,omitempty"`
	IsEarlyAccess                   *bool                          `protobuf:"varint,14,opt,name=is_early_access,json=isEarlyAccess" json:"is_early_access,omitempty"`
	RelatedItems                    *StoreItem_RelatedItems        `protobuf:"bytes,15,opt,name=related_items,json=relatedItems" json:"related_items,omitempty"`
	IncludedItems                   *StoreItem_IncludedItems       `protobuf:"bytes,16,opt,name=included_items,json=includedItems" json:"included_items,omitempty"`
	ContentDescriptorids            []EContentDescriptorID         `protobuf:"varint,20,rep,name=content_descriptorids,json=contentDescriptorids,enum=EContentDescriptorID" json:"content_descriptorids,omitempty"`
	Tagids                          []uint32                       `protobuf:"varint,21,rep,name=tagids" json:"tagids,omitempty"`
	Categories                      *StoreItem_Categories          `protobuf:"bytes,22,opt,name=categories" json:"categories,omitempty"`
	Reviews                         *StoreItem_Reviews             `protobuf:"bytes,23,opt,name=reviews" json:"reviews,omitempty"`
	BasicInfo                       *StoreItem_BasicInfo           `protobuf:"bytes,24,opt,name=basic_info,json=basicInfo" json:"basic_info,omitempty"`
	Tags                            []*StoreItem_Tag               `protobuf:"bytes,25,rep,name=tags" json:"tags,omitempty"`
	Assets                          *StoreItem_Assets              `protobuf:"bytes,30,opt,name=assets" json:"assets,omitempty"`
	Release                         *StoreItem_ReleaseInfo         `protobuf:"bytes,31,opt,name=release" json:"release,omitempty"`
	Platforms                       *StoreItem_Platforms           `protobuf:"bytes,32,opt,name=platforms" json:"platforms,omitempty"`
	GameRating                      *StoreGameRating               `protobuf:"bytes,33,opt,name=game_rating,json=gameRating" json:"game_rating,omitempty"`
	BestPurchaseOption              *StoreItem_PurchaseOption      `protobuf:"bytes,40,opt,name=best_purchase_option,json=bestPurchaseOption" json:"best_purchase_option,omitempty"`
	PurchaseOptions                 []*StoreItem_PurchaseOption    `protobuf:"bytes,41,rep,name=purchase_options,json=purchaseOptions" json:"purchase_options,omitempty"`
	Accessories                     []*StoreItem_PurchaseOption    `protobuf:"bytes,42,rep,name=accessories" json:"accessories,omitempty"`
	Screenshots                     *StoreItem_Screenshots         `protobuf:"bytes,50,opt,name=screenshots" json:"screenshots,omitempty"`
	Trailers                        *StoreItem_Trailers            `protobuf:"bytes,51,opt,name=trailers" json:"trailers,omitempty"`
	SupportedLanguages              []*StoreItem_SupportedLanguage `protobuf:"bytes,52,rep,name=supported_languages,json=supportedLanguages" json:"supported_languages,omitempty"`
	StoreUrlPathOverride            *string                        `protobuf:"bytes,53,opt,name=store_url_path_override,json=storeUrlPathOverride" json:"store_url_path_override,omitempty"`
	FreeWeekend                     *StoreItem_FreeWeekend         `protobuf:"bytes,54,opt,name=free_weekend,json=freeWeekend" json:"free_weekend,omitempty"`
	Unlisted                        *bool                          `protobuf:"varint,55,opt,name=unlisted" json:"unlisted,omitempty"`
	GameCount                       *uint32                        `protobuf:"varint,56,opt,name=game_count,json=gameCount" json:"game_count,omitempty"`
	InternalName                    *string                        `protobuf:"bytes,57,opt,name=internal_name,json=internalName" json:"internal_name,omitempty"`
	FullDescription                 *string                        `protobuf:"bytes,58,opt,name=full_description,json=fullDescription" json:"full_description,omitempty"`
	IsFreeTemporarily               *bool                          `protobuf:"varint,59,opt,name=is_free_temporarily,json=isFreeTemporarily" json:"is_free_temporarily,omitempty"`
}

// Default values for StoreItem fields.
const (
	Default_StoreItem_ItemType = EStoreItemType_k_EStoreItemType_Invalid
	Default_StoreItem_Type     = EStoreAppType_k_EStoreAppType_Game
)

func (x *StoreItem) Reset() {
	*x = StoreItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem) ProtoMessage() {}

func (x *StoreItem) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem.ProtoReflect.Descriptor instead.
func (*StoreItem) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *StoreItem) GetItemType() EStoreItemType {
	if x != nil && x.ItemType != nil {
		return *x.ItemType
	}
	return Default_StoreItem_ItemType
}

func (x *StoreItem) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *StoreItem) GetSuccess() uint32 {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return 0
}

func (x *StoreItem) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *StoreItem) GetUnvailableForCountryRestriction() bool {
	if x != nil && x.UnvailableForCountryRestriction != nil {
		return *x.UnvailableForCountryRestriction
	}
	return false
}

func (x *StoreItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *StoreItem) GetStoreUrlPath() string {
	if x != nil && x.StoreUrlPath != nil {
		return *x.StoreUrlPath
	}
	return ""
}

func (x *StoreItem) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *StoreItem) GetType() EStoreAppType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_StoreItem_Type
}

func (x *StoreItem) GetIncludedTypes() []EStoreAppType {
	if x != nil {
		return x.IncludedTypes
	}
	return nil
}

func (x *StoreItem) GetIncludedAppids() []uint32 {
	if x != nil {
		return x.IncludedAppids
	}
	return nil
}

func (x *StoreItem) GetIsFree() bool {
	if x != nil && x.IsFree != nil {
		return *x.IsFree
	}
	return false
}

func (x *StoreItem) GetIsEarlyAccess() bool {
	if x != nil && x.IsEarlyAccess != nil {
		return *x.IsEarlyAccess
	}
	return false
}

func (x *StoreItem) GetRelatedItems() *StoreItem_RelatedItems {
	if x != nil {
		return x.RelatedItems
	}
	return nil
}

func (x *StoreItem) GetIncludedItems() *StoreItem_IncludedItems {
	if x != nil {
		return x.IncludedItems
	}
	return nil
}

func (x *StoreItem) GetContentDescriptorids() []EContentDescriptorID {
	if x != nil {
		return x.ContentDescriptorids
	}
	return nil
}

func (x *StoreItem) GetTagids() []uint32 {
	if x != nil {
		return x.Tagids
	}
	return nil
}

func (x *StoreItem) GetCategories() *StoreItem_Categories {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *StoreItem) GetReviews() *StoreItem_Reviews {
	if x != nil {
		return x.Reviews
	}
	return nil
}

func (x *StoreItem) GetBasicInfo() *StoreItem_BasicInfo {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *StoreItem) GetTags() []*StoreItem_Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *StoreItem) GetAssets() *StoreItem_Assets {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *StoreItem) GetRelease() *StoreItem_ReleaseInfo {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *StoreItem) GetPlatforms() *StoreItem_Platforms {
	if x != nil {
		return x.Platforms
	}
	return nil
}

func (x *StoreItem) GetGameRating() *StoreGameRating {
	if x != nil {
		return x.GameRating
	}
	return nil
}

func (x *StoreItem) GetBestPurchaseOption() *StoreItem_PurchaseOption {
	if x != nil {
		return x.BestPurchaseOption
	}
	return nil
}

func (x *StoreItem) GetPurchaseOptions() []*StoreItem_PurchaseOption {
	if x != nil {
		return x.PurchaseOptions
	}
	return nil
}

func (x *StoreItem) GetAccessories() []*StoreItem_PurchaseOption {
	if x != nil {
		return x.Accessories
	}
	return nil
}

func (x *StoreItem) GetScreenshots() *StoreItem_Screenshots {
	if x != nil {
		return x.Screenshots
	}
	return nil
}

func (x *StoreItem) GetTrailers() *StoreItem_Trailers {
	if x != nil {
		return x.Trailers
	}
	return nil
}

func (x *StoreItem) GetSupportedLanguages() []*StoreItem_SupportedLanguage {
	if x != nil {
		return x.SupportedLanguages
	}
	return nil
}

func (x *StoreItem) GetStoreUrlPathOverride() string {
	if x != nil && x.StoreUrlPathOverride != nil {
		return *x.StoreUrlPathOverride
	}
	return ""
}

func (x *StoreItem) GetFreeWeekend() *StoreItem_FreeWeekend {
	if x != nil {
		return x.FreeWeekend
	}
	return nil
}

func (x *StoreItem) GetUnlisted() bool {
	if x != nil && x.Unlisted != nil {
		return *x.Unlisted
	}
	return false
}

func (x *StoreItem) GetGameCount() uint32 {
	if x != nil && x.GameCount != nil {
		return *x.GameCount
	}
	return 0
}

func (x *StoreItem) GetInternalName() string {
	if x != nil && x.InternalName != nil {
		return *x.InternalName
	}
	return ""
}

func (x *StoreItem) GetFullDescription() string {
	if x != nil && x.FullDescription != nil {
		return *x.FullDescription
	}
	return ""
}

func (x *StoreItem) GetIsFreeTemporarily() bool {
	if x != nil && x.IsFreeTemporarily != nil {
		return *x.IsFreeTemporarily
	}
	return false
}

type StoreGameRating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                *string  `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Rating              *string  `protobuf:"bytes,2,opt,name=rating" json:"rating,omitempty"`
	Descriptors         []string `protobuf:"bytes,3,rep,name=descriptors" json:"descriptors,omitempty"`
	InteractiveElements *string  `protobuf:"bytes,4,opt,name=interactive_elements,json=interactiveElements" json:"interactive_elements,omitempty"`
	RequiredAge         *int32   `protobuf:"varint,10,opt,name=required_age,json=requiredAge" json:"required_age,omitempty"`
	UseAgeGate          *bool    `protobuf:"varint,11,opt,name=use_age_gate,json=useAgeGate" json:"use_age_gate,omitempty"`
	ImageUrl            *string  `protobuf:"bytes,20,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	ImageTarget         *string  `protobuf:"bytes,21,opt,name=image_target,json=imageTarget" json:"image_target,omitempty"`
}

func (x *StoreGameRating) Reset() {
	*x = StoreGameRating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreGameRating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreGameRating) ProtoMessage() {}

func (x *StoreGameRating) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreGameRating.ProtoReflect.Descriptor instead.
func (*StoreGameRating) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *StoreGameRating) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *StoreGameRating) GetRating() string {
	if x != nil && x.Rating != nil {
		return *x.Rating
	}
	return ""
}

func (x *StoreGameRating) GetDescriptors() []string {
	if x != nil {
		return x.Descriptors
	}
	return nil
}

func (x *StoreGameRating) GetInteractiveElements() string {
	if x != nil && x.InteractiveElements != nil {
		return *x.InteractiveElements
	}
	return ""
}

func (x *StoreGameRating) GetRequiredAge() int32 {
	if x != nil && x.RequiredAge != nil {
		return *x.RequiredAge
	}
	return 0
}

func (x *StoreGameRating) GetUseAgeGate() bool {
	if x != nil && x.UseAgeGate != nil {
		return *x.UseAgeGate
	}
	return false
}

func (x *StoreGameRating) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *StoreGameRating) GetImageTarget() string {
	if x != nil && x.ImageTarget != nil {
		return *x.ImageTarget
	}
	return ""
}

type CStoreBrowse_GetItems_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreItems []*StoreItem `protobuf:"bytes,1,rep,name=store_items,json=storeItems" json:"store_items,omitempty"`
}

func (x *CStoreBrowse_GetItems_Response) Reset() {
	*x = CStoreBrowse_GetItems_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetItems_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetItems_Response) ProtoMessage() {}

func (x *CStoreBrowse_GetItems_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetItems_Response.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetItems_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CStoreBrowse_GetItems_Response) GetStoreItems() []*StoreItem {
	if x != nil {
		return x.StoreItems
	}
	return nil
}

type CStoreBrowse_GetStoreCategories_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language  *string `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Elanguage *int32  `protobuf:"varint,2,opt,name=elanguage,def=-1" json:"elanguage,omitempty"`
}

// Default values for CStoreBrowse_GetStoreCategories_Request fields.
const (
	Default_CStoreBrowse_GetStoreCategories_Request_Elanguage = int32(-1)
)

func (x *CStoreBrowse_GetStoreCategories_Request) Reset() {
	*x = CStoreBrowse_GetStoreCategories_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetStoreCategories_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetStoreCategories_Request) ProtoMessage() {}

func (x *CStoreBrowse_GetStoreCategories_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetStoreCategories_Request.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetStoreCategories_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CStoreBrowse_GetStoreCategories_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CStoreBrowse_GetStoreCategories_Request) GetElanguage() int32 {
	if x != nil && x.Elanguage != nil {
		return *x.Elanguage
	}
	return Default_CStoreBrowse_GetStoreCategories_Request_Elanguage
}

type CStoreBrowse_GetStoreCategories_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*CStoreBrowse_GetStoreCategories_Response_Category `protobuf:"bytes,1,rep,name=categories" json:"categories,omitempty"`
}

func (x *CStoreBrowse_GetStoreCategories_Response) Reset() {
	*x = CStoreBrowse_GetStoreCategories_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetStoreCategories_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetStoreCategories_Response) ProtoMessage() {}

func (x *CStoreBrowse_GetStoreCategories_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetStoreCategories_Response.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetStoreCategories_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CStoreBrowse_GetStoreCategories_Response) GetCategories() []*CStoreBrowse_GetStoreCategories_Response_Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

type CStoreBrowse_GetDLCForApps_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context         *StoreBrowseContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	StorePageFilter *CStorePageFilter   `protobuf:"bytes,2,opt,name=store_page_filter,json=storePageFilter" json:"store_page_filter,omitempty"`
	Appids          []*StoreItemID      `protobuf:"bytes,3,rep,name=appids" json:"appids,omitempty"`
	Steamid         *uint64             `protobuf:"varint,4,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CStoreBrowse_GetDLCForApps_Request) Reset() {
	*x = CStoreBrowse_GetDLCForApps_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetDLCForApps_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetDLCForApps_Request) ProtoMessage() {}

func (x *CStoreBrowse_GetDLCForApps_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetDLCForApps_Request.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetDLCForApps_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CStoreBrowse_GetDLCForApps_Request) GetContext() *StoreBrowseContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CStoreBrowse_GetDLCForApps_Request) GetStorePageFilter() *CStorePageFilter {
	if x != nil {
		return x.StorePageFilter
	}
	return nil
}

func (x *CStoreBrowse_GetDLCForApps_Request) GetAppids() []*StoreItemID {
	if x != nil {
		return x.Appids
	}
	return nil
}

func (x *CStoreBrowse_GetDLCForApps_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CStoreBrowse_GetDLCForApps_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DlcData  []*CStoreBrowse_GetDLCForApps_Response_DLCData        `protobuf:"bytes,1,rep,name=dlc_data,json=dlcData" json:"dlc_data,omitempty"`
	Playtime []*CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp `protobuf:"bytes,2,rep,name=playtime" json:"playtime,omitempty"`
}

func (x *CStoreBrowse_GetDLCForApps_Response) Reset() {
	*x = CStoreBrowse_GetDLCForApps_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetDLCForApps_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetDLCForApps_Response) ProtoMessage() {}

func (x *CStoreBrowse_GetDLCForApps_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetDLCForApps_Response.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetDLCForApps_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CStoreBrowse_GetDLCForApps_Response) GetDlcData() []*CStoreBrowse_GetDLCForApps_Response_DLCData {
	if x != nil {
		return x.DlcData
	}
	return nil
}

func (x *CStoreBrowse_GetDLCForApps_Response) GetPlaytime() []*CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp {
	if x != nil {
		return x.Playtime
	}
	return nil
}

type CStoreBrowse_GetDLCForAppsSolr_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context         *StoreBrowseContext `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	Appids          []uint32            `protobuf:"varint,2,rep,name=appids" json:"appids,omitempty"`
	Flavor          *string             `protobuf:"bytes,3,opt,name=flavor" json:"flavor,omitempty"`
	Count           *uint32             `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	StorePageFilter *CStorePageFilter   `protobuf:"bytes,5,opt,name=store_page_filter,json=storePageFilter" json:"store_page_filter,omitempty"`
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Request) Reset() {
	*x = CStoreBrowse_GetDLCForAppsSolr_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetDLCForAppsSolr_Request) ProtoMessage() {}

func (x *CStoreBrowse_GetDLCForAppsSolr_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetDLCForAppsSolr_Request.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetDLCForAppsSolr_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Request) GetContext() *StoreBrowseContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Request) GetAppids() []uint32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Request) GetFlavor() string {
	if x != nil && x.Flavor != nil {
		return *x.Flavor
	}
	return ""
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Request) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Request) GetStorePageFilter() *CStorePageFilter {
	if x != nil {
		return x.StorePageFilter
	}
	return nil
}

type CStoreBrowse_GetDLCForAppsSolr_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DlcLists []*CStoreBrowse_GetDLCForAppsSolr_Response_DLCList `protobuf:"bytes,1,rep,name=dlc_lists,json=dlcLists" json:"dlc_lists,omitempty"`
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Response) Reset() {
	*x = CStoreBrowse_GetDLCForAppsSolr_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetDLCForAppsSolr_Response) ProtoMessage() {}

func (x *CStoreBrowse_GetDLCForAppsSolr_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetDLCForAppsSolr_Response.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetDLCForAppsSolr_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Response) GetDlcLists() []*CStoreBrowse_GetDLCForAppsSolr_Response_DLCList {
	if x != nil {
		return x.DlcLists
	}
	return nil
}

type CStoreBrowse_GetHardwareItems_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packageid []uint32            `protobuf:"varint,1,rep,name=packageid" json:"packageid,omitempty"`
	Context   *StoreBrowseContext `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
}

func (x *CStoreBrowse_GetHardwareItems_Request) Reset() {
	*x = CStoreBrowse_GetHardwareItems_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetHardwareItems_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetHardwareItems_Request) ProtoMessage() {}

func (x *CStoreBrowse_GetHardwareItems_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetHardwareItems_Request.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetHardwareItems_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CStoreBrowse_GetHardwareItems_Request) GetPackageid() []uint32 {
	if x != nil {
		return x.Packageid
	}
	return nil
}

func (x *CStoreBrowse_GetHardwareItems_Request) GetContext() *StoreBrowseContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type CHardwarePackageDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packageid                       *uint32 `protobuf:"varint,1,opt,name=packageid" json:"packageid,omitempty"`
	InventoryAvailable              *bool   `protobuf:"varint,3,opt,name=inventory_available,json=inventoryAvailable" json:"inventory_available,omitempty"`
	HighPendingOrders               *bool   `protobuf:"varint,4,opt,name=high_pending_orders,json=highPendingOrders" json:"high_pending_orders,omitempty"`
	AccountRestrictedFromPurchasing *bool   `protobuf:"varint,5,opt,name=account_restricted_from_purchasing,json=accountRestrictedFromPurchasing" json:"account_restricted_from_purchasing,omitempty"`
	RequiresReservation             *bool   `protobuf:"varint,6,opt,name=requires_reservation,json=requiresReservation" json:"requires_reservation,omitempty"`
	RtimeEstimatedNotification      *uint32 `protobuf:"varint,7,opt,name=rtime_estimated_notification,json=rtimeEstimatedNotification" json:"rtime_estimated_notification,omitempty"`
	NotificatonToken                *string `protobuf:"bytes,8,opt,name=notificaton_token,json=notificatonToken" json:"notificaton_token,omitempty"`
	ReservationState                *int32  `protobuf:"varint,9,opt,name=reservation_state,json=reservationState" json:"reservation_state,omitempty"`
	Expired                         *bool   `protobuf:"varint,10,opt,name=expired" json:"expired,omitempty"`
	TimeExpires                     *uint32 `protobuf:"varint,11,opt,name=time_expires,json=timeExpires" json:"time_expires,omitempty"`
	TimeReserved                    *uint32 `protobuf:"varint,12,opt,name=time_reserved,json=timeReserved" json:"time_reserved,omitempty"`
	AllowQuantityPurchase           *bool   `protobuf:"varint,13,opt,name=allow_quantity_purchase,json=allowQuantityPurchase" json:"allow_quantity_purchase,omitempty"`
	MaxQuantityPerPurchase          *int32  `protobuf:"varint,14,opt,name=max_quantity_per_purchase,json=maxQuantityPerPurchase" json:"max_quantity_per_purchase,omitempty"`
}

func (x *CHardwarePackageDetails) Reset() {
	*x = CHardwarePackageDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHardwarePackageDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHardwarePackageDetails) ProtoMessage() {}

func (x *CHardwarePackageDetails) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHardwarePackageDetails.ProtoReflect.Descriptor instead.
func (*CHardwarePackageDetails) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CHardwarePackageDetails) GetPackageid() uint32 {
	if x != nil && x.Packageid != nil {
		return *x.Packageid
	}
	return 0
}

func (x *CHardwarePackageDetails) GetInventoryAvailable() bool {
	if x != nil && x.InventoryAvailable != nil {
		return *x.InventoryAvailable
	}
	return false
}

func (x *CHardwarePackageDetails) GetHighPendingOrders() bool {
	if x != nil && x.HighPendingOrders != nil {
		return *x.HighPendingOrders
	}
	return false
}

func (x *CHardwarePackageDetails) GetAccountRestrictedFromPurchasing() bool {
	if x != nil && x.AccountRestrictedFromPurchasing != nil {
		return *x.AccountRestrictedFromPurchasing
	}
	return false
}

func (x *CHardwarePackageDetails) GetRequiresReservation() bool {
	if x != nil && x.RequiresReservation != nil {
		return *x.RequiresReservation
	}
	return false
}

func (x *CHardwarePackageDetails) GetRtimeEstimatedNotification() uint32 {
	if x != nil && x.RtimeEstimatedNotification != nil {
		return *x.RtimeEstimatedNotification
	}
	return 0
}

func (x *CHardwarePackageDetails) GetNotificatonToken() string {
	if x != nil && x.NotificatonToken != nil {
		return *x.NotificatonToken
	}
	return ""
}

func (x *CHardwarePackageDetails) GetReservationState() int32 {
	if x != nil && x.ReservationState != nil {
		return *x.ReservationState
	}
	return 0
}

func (x *CHardwarePackageDetails) GetExpired() bool {
	if x != nil && x.Expired != nil {
		return *x.Expired
	}
	return false
}

func (x *CHardwarePackageDetails) GetTimeExpires() uint32 {
	if x != nil && x.TimeExpires != nil {
		return *x.TimeExpires
	}
	return 0
}

func (x *CHardwarePackageDetails) GetTimeReserved() uint32 {
	if x != nil && x.TimeReserved != nil {
		return *x.TimeReserved
	}
	return 0
}

func (x *CHardwarePackageDetails) GetAllowQuantityPurchase() bool {
	if x != nil && x.AllowQuantityPurchase != nil {
		return *x.AllowQuantityPurchase
	}
	return false
}

func (x *CHardwarePackageDetails) GetMaxQuantityPerPurchase() int32 {
	if x != nil && x.MaxQuantityPerPurchase != nil {
		return *x.MaxQuantityPerPurchase
	}
	return 0
}

type CStoreBrowse_GetHardwareItems_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*CHardwarePackageDetails `protobuf:"bytes,1,rep,name=details" json:"details,omitempty"`
}

func (x *CStoreBrowse_GetHardwareItems_Response) Reset() {
	*x = CStoreBrowse_GetHardwareItems_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetHardwareItems_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetHardwareItems_Response) ProtoMessage() {}

func (x *CStoreBrowse_GetHardwareItems_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetHardwareItems_Response.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetHardwareItems_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CStoreBrowse_GetHardwareItems_Response) GetDetails() []*CHardwarePackageDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type StoreItem_RelatedItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentAppid *uint32 `protobuf:"varint,1,opt,name=parent_appid,json=parentAppid" json:"parent_appid,omitempty"`
}

func (x *StoreItem_RelatedItems) Reset() {
	*x = StoreItem_RelatedItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_RelatedItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_RelatedItems) ProtoMessage() {}

func (x *StoreItem_RelatedItems) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_RelatedItems.ProtoReflect.Descriptor instead.
func (*StoreItem_RelatedItems) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 0}
}

func (x *StoreItem_RelatedItems) GetParentAppid() uint32 {
	if x != nil && x.ParentAppid != nil {
		return *x.ParentAppid
	}
	return 0
}

type StoreItem_IncludedItems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludedApps     []*StoreItem `protobuf:"bytes,1,rep,name=included_apps,json=includedApps" json:"included_apps,omitempty"`
	IncludedPackages []*StoreItem `protobuf:"bytes,2,rep,name=included_packages,json=includedPackages" json:"included_packages,omitempty"`
}

func (x *StoreItem_IncludedItems) Reset() {
	*x = StoreItem_IncludedItems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_IncludedItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_IncludedItems) ProtoMessage() {}

func (x *StoreItem_IncludedItems) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_IncludedItems.ProtoReflect.Descriptor instead.
func (*StoreItem_IncludedItems) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 1}
}

func (x *StoreItem_IncludedItems) GetIncludedApps() []*StoreItem {
	if x != nil {
		return x.IncludedApps
	}
	return nil
}

func (x *StoreItem_IncludedItems) GetIncludedPackages() []*StoreItem {
	if x != nil {
		return x.IncludedPackages
	}
	return nil
}

type StoreItem_Categories struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportedPlayerCategoryids []uint32 `protobuf:"varint,2,rep,name=supported_player_categoryids,json=supportedPlayerCategoryids" json:"supported_player_categoryids,omitempty"`
	FeatureCategoryids         []uint32 `protobuf:"varint,3,rep,name=feature_categoryids,json=featureCategoryids" json:"feature_categoryids,omitempty"`
	ControllerCategoryids      []uint32 `protobuf:"varint,4,rep,name=controller_categoryids,json=controllerCategoryids" json:"controller_categoryids,omitempty"`
}

func (x *StoreItem_Categories) Reset() {
	*x = StoreItem_Categories{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_Categories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_Categories) ProtoMessage() {}

func (x *StoreItem_Categories) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_Categories.ProtoReflect.Descriptor instead.
func (*StoreItem_Categories) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 2}
}

func (x *StoreItem_Categories) GetSupportedPlayerCategoryids() []uint32 {
	if x != nil {
		return x.SupportedPlayerCategoryids
	}
	return nil
}

func (x *StoreItem_Categories) GetFeatureCategoryids() []uint32 {
	if x != nil {
		return x.FeatureCategoryids
	}
	return nil
}

func (x *StoreItem_Categories) GetControllerCategoryids() []uint32 {
	if x != nil {
		return x.ControllerCategoryids
	}
	return nil
}

type StoreItem_Reviews struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SummaryFiltered   *StoreItem_Reviews_StoreReviewSummary `protobuf:"bytes,1,opt,name=summary_filtered,json=summaryFiltered" json:"summary_filtered,omitempty"`
	SummaryUnfiltered *StoreItem_Reviews_StoreReviewSummary `protobuf:"bytes,2,opt,name=summary_unfiltered,json=summaryUnfiltered" json:"summary_unfiltered,omitempty"`
}

func (x *StoreItem_Reviews) Reset() {
	*x = StoreItem_Reviews{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_Reviews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_Reviews) ProtoMessage() {}

func (x *StoreItem_Reviews) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_Reviews.ProtoReflect.Descriptor instead.
func (*StoreItem_Reviews) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 3}
}

func (x *StoreItem_Reviews) GetSummaryFiltered() *StoreItem_Reviews_StoreReviewSummary {
	if x != nil {
		return x.SummaryFiltered
	}
	return nil
}

func (x *StoreItem_Reviews) GetSummaryUnfiltered() *StoreItem_Reviews_StoreReviewSummary {
	if x != nil {
		return x.SummaryUnfiltered
	}
	return nil
}

type StoreItem_BasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortDescription *string                                `protobuf:"bytes,1,opt,name=short_description,json=shortDescription" json:"short_description,omitempty"`
	Publishers       []*StoreItem_BasicInfo_CreatorHomeLink `protobuf:"bytes,2,rep,name=publishers" json:"publishers,omitempty"`
	Developers       []*StoreItem_BasicInfo_CreatorHomeLink `protobuf:"bytes,3,rep,name=developers" json:"developers,omitempty"`
	Franchises       []*StoreItem_BasicInfo_CreatorHomeLink `protobuf:"bytes,4,rep,name=franchises" json:"franchises,omitempty"`
	CapsuleHeadline  *string                                `protobuf:"bytes,5,opt,name=capsule_headline,json=capsuleHeadline" json:"capsule_headline,omitempty"`
}

func (x *StoreItem_BasicInfo) Reset() {
	*x = StoreItem_BasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_BasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_BasicInfo) ProtoMessage() {}

func (x *StoreItem_BasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_BasicInfo.ProtoReflect.Descriptor instead.
func (*StoreItem_BasicInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 4}
}

func (x *StoreItem_BasicInfo) GetShortDescription() string {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return ""
}

func (x *StoreItem_BasicInfo) GetPublishers() []*StoreItem_BasicInfo_CreatorHomeLink {
	if x != nil {
		return x.Publishers
	}
	return nil
}

func (x *StoreItem_BasicInfo) GetDevelopers() []*StoreItem_BasicInfo_CreatorHomeLink {
	if x != nil {
		return x.Developers
	}
	return nil
}

func (x *StoreItem_BasicInfo) GetFranchises() []*StoreItem_BasicInfo_CreatorHomeLink {
	if x != nil {
		return x.Franchises
	}
	return nil
}

func (x *StoreItem_BasicInfo) GetCapsuleHeadline() string {
	if x != nil && x.CapsuleHeadline != nil {
		return *x.CapsuleHeadline
	}
	return ""
}

type StoreItem_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tagid  *uint32 `protobuf:"varint,1,opt,name=tagid" json:"tagid,omitempty"`
	Weight *uint32 `protobuf:"varint,2,opt,name=weight" json:"weight,omitempty"`
}

func (x *StoreItem_Tag) Reset() {
	*x = StoreItem_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_Tag) ProtoMessage() {}

func (x *StoreItem_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_Tag.ProtoReflect.Descriptor instead.
func (*StoreItem_Tag) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 5}
}

func (x *StoreItem_Tag) GetTagid() uint32 {
	if x != nil && x.Tagid != nil {
		return *x.Tagid
	}
	return 0
}

func (x *StoreItem_Tag) GetWeight() uint32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

type StoreItem_Assets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetUrlFormat    *string `protobuf:"bytes,1,opt,name=asset_url_format,json=assetUrlFormat" json:"asset_url_format,omitempty"`
	MainCapsule       *string `protobuf:"bytes,2,opt,name=main_capsule,json=mainCapsule" json:"main_capsule,omitempty"`
	SmallCapsule      *string `protobuf:"bytes,3,opt,name=small_capsule,json=smallCapsule" json:"small_capsule,omitempty"`
	Header            *string `protobuf:"bytes,4,opt,name=header" json:"header,omitempty"`
	PackageHeader     *string `protobuf:"bytes,5,opt,name=package_header,json=packageHeader" json:"package_header,omitempty"`
	PageBackground    *string `protobuf:"bytes,6,opt,name=page_background,json=pageBackground" json:"page_background,omitempty"`
	HeroCapsule       *string `protobuf:"bytes,7,opt,name=hero_capsule,json=heroCapsule" json:"hero_capsule,omitempty"`
	HeroCapsule_2X    *string `protobuf:"bytes,8,opt,name=hero_capsule_2x,json=heroCapsule2x" json:"hero_capsule_2x,omitempty"`
	LibraryCapsule    *string `protobuf:"bytes,9,opt,name=library_capsule,json=libraryCapsule" json:"library_capsule,omitempty"`
	LibraryCapsule_2X *string `protobuf:"bytes,10,opt,name=library_capsule_2x,json=libraryCapsule2x" json:"library_capsule_2x,omitempty"`
	LibraryHero       *string `protobuf:"bytes,11,opt,name=library_hero,json=libraryHero" json:"library_hero,omitempty"`
	LibraryHero_2X    *string `protobuf:"bytes,12,opt,name=library_hero_2x,json=libraryHero2x" json:"library_hero_2x,omitempty"`
	CommunityIcon     *string `protobuf:"bytes,13,opt,name=community_icon,json=communityIcon" json:"community_icon,omitempty"`
	ClanAvatar        *string `protobuf:"bytes,14,opt,name=clan_avatar,json=clanAvatar" json:"clan_avatar,omitempty"`
}

func (x *StoreItem_Assets) Reset() {
	*x = StoreItem_Assets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_Assets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_Assets) ProtoMessage() {}

func (x *StoreItem_Assets) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_Assets.ProtoReflect.Descriptor instead.
func (*StoreItem_Assets) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 6}
}

func (x *StoreItem_Assets) GetAssetUrlFormat() string {
	if x != nil && x.AssetUrlFormat != nil {
		return *x.AssetUrlFormat
	}
	return ""
}

func (x *StoreItem_Assets) GetMainCapsule() string {
	if x != nil && x.MainCapsule != nil {
		return *x.MainCapsule
	}
	return ""
}

func (x *StoreItem_Assets) GetSmallCapsule() string {
	if x != nil && x.SmallCapsule != nil {
		return *x.SmallCapsule
	}
	return ""
}

func (x *StoreItem_Assets) GetHeader() string {
	if x != nil && x.Header != nil {
		return *x.Header
	}
	return ""
}

func (x *StoreItem_Assets) GetPackageHeader() string {
	if x != nil && x.PackageHeader != nil {
		return *x.PackageHeader
	}
	return ""
}

func (x *StoreItem_Assets) GetPageBackground() string {
	if x != nil && x.PageBackground != nil {
		return *x.PageBackground
	}
	return ""
}

func (x *StoreItem_Assets) GetHeroCapsule() string {
	if x != nil && x.HeroCapsule != nil {
		return *x.HeroCapsule
	}
	return ""
}

func (x *StoreItem_Assets) GetHeroCapsule_2X() string {
	if x != nil && x.HeroCapsule_2X != nil {
		return *x.HeroCapsule_2X
	}
	return ""
}

func (x *StoreItem_Assets) GetLibraryCapsule() string {
	if x != nil && x.LibraryCapsule != nil {
		return *x.LibraryCapsule
	}
	return ""
}

func (x *StoreItem_Assets) GetLibraryCapsule_2X() string {
	if x != nil && x.LibraryCapsule_2X != nil {
		return *x.LibraryCapsule_2X
	}
	return ""
}

func (x *StoreItem_Assets) GetLibraryHero() string {
	if x != nil && x.LibraryHero != nil {
		return *x.LibraryHero
	}
	return ""
}

func (x *StoreItem_Assets) GetLibraryHero_2X() string {
	if x != nil && x.LibraryHero_2X != nil {
		return *x.LibraryHero_2X
	}
	return ""
}

func (x *StoreItem_Assets) GetCommunityIcon() string {
	if x != nil && x.CommunityIcon != nil {
		return *x.CommunityIcon
	}
	return ""
}

func (x *StoreItem_Assets) GetClanAvatar() string {
	if x != nil && x.ClanAvatar != nil {
		return *x.ClanAvatar
	}
	return ""
}

type StoreItem_ReleaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SteamReleaseDate         *uint32 `protobuf:"varint,1,opt,name=steam_release_date,json=steamReleaseDate" json:"steam_release_date,omitempty"`
	OriginalReleaseDate      *uint32 `protobuf:"varint,2,opt,name=original_release_date,json=originalReleaseDate" json:"original_release_date,omitempty"`
	OriginalSteamReleaseDate *uint32 `protobuf:"varint,3,opt,name=original_steam_release_date,json=originalSteamReleaseDate" json:"original_steam_release_date,omitempty"`
	IsComingSoon             *bool   `protobuf:"varint,4,opt,name=is_coming_soon,json=isComingSoon" json:"is_coming_soon,omitempty"`
	IsPreload                *bool   `protobuf:"varint,5,opt,name=is_preload,json=isPreload" json:"is_preload,omitempty"`
	CustomReleaseDateMessage *string `protobuf:"bytes,6,opt,name=custom_release_date_message,json=customReleaseDateMessage" json:"custom_release_date_message,omitempty"`
	IsAbridgedReleaseDate    *bool   `protobuf:"varint,7,opt,name=is_abridged_release_date,json=isAbridgedReleaseDate" json:"is_abridged_release_date,omitempty"`
	ComingSoonDisplay        *string `protobuf:"bytes,8,opt,name=coming_soon_display,json=comingSoonDisplay" json:"coming_soon_display,omitempty"`
	IsEarlyAccess            *bool   `protobuf:"varint,10,opt,name=is_early_access,json=isEarlyAccess" json:"is_early_access,omitempty"`
	MacReleaseDate           *uint32 `protobuf:"varint,20,opt,name=mac_release_date,json=macReleaseDate" json:"mac_release_date,omitempty"`
	LinuxReleaseDate         *uint32 `protobuf:"varint,21,opt,name=linux_release_date,json=linuxReleaseDate" json:"linux_release_date,omitempty"`
}

func (x *StoreItem_ReleaseInfo) Reset() {
	*x = StoreItem_ReleaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_ReleaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_ReleaseInfo) ProtoMessage() {}

func (x *StoreItem_ReleaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_ReleaseInfo.ProtoReflect.Descriptor instead.
func (*StoreItem_ReleaseInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 7}
}

func (x *StoreItem_ReleaseInfo) GetSteamReleaseDate() uint32 {
	if x != nil && x.SteamReleaseDate != nil {
		return *x.SteamReleaseDate
	}
	return 0
}

func (x *StoreItem_ReleaseInfo) GetOriginalReleaseDate() uint32 {
	if x != nil && x.OriginalReleaseDate != nil {
		return *x.OriginalReleaseDate
	}
	return 0
}

func (x *StoreItem_ReleaseInfo) GetOriginalSteamReleaseDate() uint32 {
	if x != nil && x.OriginalSteamReleaseDate != nil {
		return *x.OriginalSteamReleaseDate
	}
	return 0
}

func (x *StoreItem_ReleaseInfo) GetIsComingSoon() bool {
	if x != nil && x.IsComingSoon != nil {
		return *x.IsComingSoon
	}
	return false
}

func (x *StoreItem_ReleaseInfo) GetIsPreload() bool {
	if x != nil && x.IsPreload != nil {
		return *x.IsPreload
	}
	return false
}

func (x *StoreItem_ReleaseInfo) GetCustomReleaseDateMessage() string {
	if x != nil && x.CustomReleaseDateMessage != nil {
		return *x.CustomReleaseDateMessage
	}
	return ""
}

func (x *StoreItem_ReleaseInfo) GetIsAbridgedReleaseDate() bool {
	if x != nil && x.IsAbridgedReleaseDate != nil {
		return *x.IsAbridgedReleaseDate
	}
	return false
}

func (x *StoreItem_ReleaseInfo) GetComingSoonDisplay() string {
	if x != nil && x.ComingSoonDisplay != nil {
		return *x.ComingSoonDisplay
	}
	return ""
}

func (x *StoreItem_ReleaseInfo) GetIsEarlyAccess() bool {
	if x != nil && x.IsEarlyAccess != nil {
		return *x.IsEarlyAccess
	}
	return false
}

func (x *StoreItem_ReleaseInfo) GetMacReleaseDate() uint32 {
	if x != nil && x.MacReleaseDate != nil {
		return *x.MacReleaseDate
	}
	return 0
}

func (x *StoreItem_ReleaseInfo) GetLinuxReleaseDate() uint32 {
	if x != nil && x.LinuxReleaseDate != nil {
		return *x.LinuxReleaseDate
	}
	return 0
}

type StoreItem_Platforms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Windows                 *bool                            `protobuf:"varint,1,opt,name=windows" json:"windows,omitempty"`
	Mac                     *bool                            `protobuf:"varint,2,opt,name=mac" json:"mac,omitempty"`
	SteamosLinux            *bool                            `protobuf:"varint,3,opt,name=steamos_linux,json=steamosLinux" json:"steamos_linux,omitempty"`
	VrSupport               *StoreItem_Platforms_VRSupport   `protobuf:"bytes,10,opt,name=vr_support,json=vrSupport" json:"vr_support,omitempty"`
	SteamDeckCompatCategory *ESteamDeckCompatibilityCategory `protobuf:"varint,11,opt,name=steam_deck_compat_category,json=steamDeckCompatCategory,enum=ESteamDeckCompatibilityCategory,def=0" json:"steam_deck_compat_category,omitempty"`
}

// Default values for StoreItem_Platforms fields.
const (
	Default_StoreItem_Platforms_SteamDeckCompatCategory = ESteamDeckCompatibilityCategory_k_ESteamDeckCompatibilityCategory_Unknown
)

func (x *StoreItem_Platforms) Reset() {
	*x = StoreItem_Platforms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_Platforms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_Platforms) ProtoMessage() {}

func (x *StoreItem_Platforms) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_Platforms.ProtoReflect.Descriptor instead.
func (*StoreItem_Platforms) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 8}
}

func (x *StoreItem_Platforms) GetWindows() bool {
	if x != nil && x.Windows != nil {
		return *x.Windows
	}
	return false
}

func (x *StoreItem_Platforms) GetMac() bool {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return false
}

func (x *StoreItem_Platforms) GetSteamosLinux() bool {
	if x != nil && x.SteamosLinux != nil {
		return *x.SteamosLinux
	}
	return false
}

func (x *StoreItem_Platforms) GetVrSupport() *StoreItem_Platforms_VRSupport {
	if x != nil {
		return x.VrSupport
	}
	return nil
}

func (x *StoreItem_Platforms) GetSteamDeckCompatCategory() ESteamDeckCompatibilityCategory {
	if x != nil && x.SteamDeckCompatCategory != nil {
		return *x.SteamDeckCompatCategory
	}
	return Default_StoreItem_Platforms_SteamDeckCompatCategory
}

type StoreItem_PurchaseOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packageid                    *int32                               `protobuf:"varint,1,opt,name=packageid" json:"packageid,omitempty"`
	Bundleid                     *int32                               `protobuf:"varint,2,opt,name=bundleid" json:"bundleid,omitempty"`
	PurchaseOptionName           *string                              `protobuf:"bytes,3,opt,name=purchase_option_name,json=purchaseOptionName" json:"purchase_option_name,omitempty"`
	FinalPriceInCents            *int64                               `protobuf:"varint,5,opt,name=final_price_in_cents,json=finalPriceInCents" json:"final_price_in_cents,omitempty"`
	OriginalPriceInCents         *int64                               `protobuf:"varint,6,opt,name=original_price_in_cents,json=originalPriceInCents" json:"original_price_in_cents,omitempty"`
	UserFinalPriceInCents        *int64                               `protobuf:"varint,7,opt,name=user_final_price_in_cents,json=userFinalPriceInCents" json:"user_final_price_in_cents,omitempty"`
	FormattedFinalPrice          *string                              `protobuf:"bytes,8,opt,name=formatted_final_price,json=formattedFinalPrice" json:"formatted_final_price,omitempty"`
	FormattedOriginalPrice       *string                              `protobuf:"bytes,9,opt,name=formatted_original_price,json=formattedOriginalPrice" json:"formatted_original_price,omitempty"`
	DiscountPct                  *int32                               `protobuf:"varint,10,opt,name=discount_pct,json=discountPct" json:"discount_pct,omitempty"`
	UserDiscountPct              *int32                               `protobuf:"varint,11,opt,name=user_discount_pct,json=userDiscountPct" json:"user_discount_pct,omitempty"`
	BundleDiscountPct            *int32                               `protobuf:"varint,12,opt,name=bundle_discount_pct,json=bundleDiscountPct" json:"bundle_discount_pct,omitempty"`
	ActiveDiscounts              []*StoreItem_PurchaseOption_Discount `protobuf:"bytes,20,rep,name=active_discounts,json=activeDiscounts" json:"active_discounts,omitempty"`
	UserActiveDiscounts          []*StoreItem_PurchaseOption_Discount `protobuf:"bytes,21,rep,name=user_active_discounts,json=userActiveDiscounts" json:"user_active_discounts,omitempty"`
	InactiveDiscounts            []*StoreItem_PurchaseOption_Discount `protobuf:"bytes,22,rep,name=inactive_discounts,json=inactiveDiscounts" json:"inactive_discounts,omitempty"`
	UserCanPurchase              *bool                                `protobuf:"varint,30,opt,name=user_can_purchase,json=userCanPurchase" json:"user_can_purchase,omitempty"`
	UserCanPurchaseAsGift        *bool                                `protobuf:"varint,31,opt,name=user_can_purchase_as_gift,json=userCanPurchaseAsGift" json:"user_can_purchase_as_gift,omitempty"`
	IsCommercialLicense          *bool                                `protobuf:"varint,40,opt,name=is_commercial_license,json=isCommercialLicense" json:"is_commercial_license,omitempty"`
	ShouldSuppressDiscountPct    *bool                                `protobuf:"varint,41,opt,name=should_suppress_discount_pct,json=shouldSuppressDiscountPct" json:"should_suppress_discount_pct,omitempty"`
	HideDiscountPctForCompliance *bool                                `protobuf:"varint,42,opt,name=hide_discount_pct_for_compliance,json=hideDiscountPctForCompliance,def=0" json:"hide_discount_pct_for_compliance,omitempty"`
	IncludedGameCount            *int32                               `protobuf:"varint,43,opt,name=included_game_count,json=includedGameCount" json:"included_game_count,omitempty"`
	LowestRecentPriceInCents     *int64                               `protobuf:"varint,44,opt,name=lowest_recent_price_in_cents,json=lowestRecentPriceInCents" json:"lowest_recent_price_in_cents,omitempty"`
}

// Default values for StoreItem_PurchaseOption fields.
const (
	Default_StoreItem_PurchaseOption_HideDiscountPctForCompliance = bool(false)
)

func (x *StoreItem_PurchaseOption) Reset() {
	*x = StoreItem_PurchaseOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_PurchaseOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_PurchaseOption) ProtoMessage() {}

func (x *StoreItem_PurchaseOption) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_PurchaseOption.ProtoReflect.Descriptor instead.
func (*StoreItem_PurchaseOption) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 9}
}

func (x *StoreItem_PurchaseOption) GetPackageid() int32 {
	if x != nil && x.Packageid != nil {
		return *x.Packageid
	}
	return 0
}

func (x *StoreItem_PurchaseOption) GetBundleid() int32 {
	if x != nil && x.Bundleid != nil {
		return *x.Bundleid
	}
	return 0
}

func (x *StoreItem_PurchaseOption) GetPurchaseOptionName() string {
	if x != nil && x.PurchaseOptionName != nil {
		return *x.PurchaseOptionName
	}
	return ""
}

func (x *StoreItem_PurchaseOption) GetFinalPriceInCents() int64 {
	if x != nil && x.FinalPriceInCents != nil {
		return *x.FinalPriceInCents
	}
	return 0
}

func (x *StoreItem_PurchaseOption) GetOriginalPriceInCents() int64 {
	if x != nil && x.OriginalPriceInCents != nil {
		return *x.OriginalPriceInCents
	}
	return 0
}

func (x *StoreItem_PurchaseOption) GetUserFinalPriceInCents() int64 {
	if x != nil && x.UserFinalPriceInCents != nil {
		return *x.UserFinalPriceInCents
	}
	return 0
}

func (x *StoreItem_PurchaseOption) GetFormattedFinalPrice() string {
	if x != nil && x.FormattedFinalPrice != nil {
		return *x.FormattedFinalPrice
	}
	return ""
}

func (x *StoreItem_PurchaseOption) GetFormattedOriginalPrice() string {
	if x != nil && x.FormattedOriginalPrice != nil {
		return *x.FormattedOriginalPrice
	}
	return ""
}

func (x *StoreItem_PurchaseOption) GetDiscountPct() int32 {
	if x != nil && x.DiscountPct != nil {
		return *x.DiscountPct
	}
	return 0
}

func (x *StoreItem_PurchaseOption) GetUserDiscountPct() int32 {
	if x != nil && x.UserDiscountPct != nil {
		return *x.UserDiscountPct
	}
	return 0
}

func (x *StoreItem_PurchaseOption) GetBundleDiscountPct() int32 {
	if x != nil && x.BundleDiscountPct != nil {
		return *x.BundleDiscountPct
	}
	return 0
}

func (x *StoreItem_PurchaseOption) GetActiveDiscounts() []*StoreItem_PurchaseOption_Discount {
	if x != nil {
		return x.ActiveDiscounts
	}
	return nil
}

func (x *StoreItem_PurchaseOption) GetUserActiveDiscounts() []*StoreItem_PurchaseOption_Discount {
	if x != nil {
		return x.UserActiveDiscounts
	}
	return nil
}

func (x *StoreItem_PurchaseOption) GetInactiveDiscounts() []*StoreItem_PurchaseOption_Discount {
	if x != nil {
		return x.InactiveDiscounts
	}
	return nil
}

func (x *StoreItem_PurchaseOption) GetUserCanPurchase() bool {
	if x != nil && x.UserCanPurchase != nil {
		return *x.UserCanPurchase
	}
	return false
}

func (x *StoreItem_PurchaseOption) GetUserCanPurchaseAsGift() bool {
	if x != nil && x.UserCanPurchaseAsGift != nil {
		return *x.UserCanPurchaseAsGift
	}
	return false
}

func (x *StoreItem_PurchaseOption) GetIsCommercialLicense() bool {
	if x != nil && x.IsCommercialLicense != nil {
		return *x.IsCommercialLicense
	}
	return false
}

func (x *StoreItem_PurchaseOption) GetShouldSuppressDiscountPct() bool {
	if x != nil && x.ShouldSuppressDiscountPct != nil {
		return *x.ShouldSuppressDiscountPct
	}
	return false
}

func (x *StoreItem_PurchaseOption) GetHideDiscountPctForCompliance() bool {
	if x != nil && x.HideDiscountPctForCompliance != nil {
		return *x.HideDiscountPctForCompliance
	}
	return Default_StoreItem_PurchaseOption_HideDiscountPctForCompliance
}

func (x *StoreItem_PurchaseOption) GetIncludedGameCount() int32 {
	if x != nil && x.IncludedGameCount != nil {
		return *x.IncludedGameCount
	}
	return 0
}

func (x *StoreItem_PurchaseOption) GetLowestRecentPriceInCents() int64 {
	if x != nil && x.LowestRecentPriceInCents != nil {
		return *x.LowestRecentPriceInCents
	}
	return 0
}

type StoreItem_Screenshots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllAgesScreenshots       []*StoreItem_Screenshots_Screenshot `protobuf:"bytes,2,rep,name=all_ages_screenshots,json=allAgesScreenshots" json:"all_ages_screenshots,omitempty"`
	MatureContentScreenshots []*StoreItem_Screenshots_Screenshot `protobuf:"bytes,3,rep,name=mature_content_screenshots,json=matureContentScreenshots" json:"mature_content_screenshots,omitempty"`
}

func (x *StoreItem_Screenshots) Reset() {
	*x = StoreItem_Screenshots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_Screenshots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_Screenshots) ProtoMessage() {}

func (x *StoreItem_Screenshots) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_Screenshots.ProtoReflect.Descriptor instead.
func (*StoreItem_Screenshots) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 10}
}

func (x *StoreItem_Screenshots) GetAllAgesScreenshots() []*StoreItem_Screenshots_Screenshot {
	if x != nil {
		return x.AllAgesScreenshots
	}
	return nil
}

func (x *StoreItem_Screenshots) GetMatureContentScreenshots() []*StoreItem_Screenshots_Screenshot {
	if x != nil {
		return x.MatureContentScreenshots
	}
	return nil
}

type StoreItem_Trailers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Highlights    []*StoreItem_Trailers_Trailer `protobuf:"bytes,1,rep,name=highlights" json:"highlights,omitempty"`
	OtherTrailers []*StoreItem_Trailers_Trailer `protobuf:"bytes,2,rep,name=other_trailers,json=otherTrailers" json:"other_trailers,omitempty"`
}

func (x *StoreItem_Trailers) Reset() {
	*x = StoreItem_Trailers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_Trailers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_Trailers) ProtoMessage() {}

func (x *StoreItem_Trailers) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_Trailers.ProtoReflect.Descriptor instead.
func (*StoreItem_Trailers) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 11}
}

func (x *StoreItem_Trailers) GetHighlights() []*StoreItem_Trailers_Trailer {
	if x != nil {
		return x.Highlights
	}
	return nil
}

func (x *StoreItem_Trailers) GetOtherTrailers() []*StoreItem_Trailers_Trailer {
	if x != nil {
		return x.OtherTrailers
	}
	return nil
}

type StoreItem_SupportedLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elanguage *int32 `protobuf:"varint,1,opt,name=elanguage" json:"elanguage,omitempty"`
	Supported *bool  `protobuf:"varint,2,opt,name=supported" json:"supported,omitempty"`
	FullAudio *bool  `protobuf:"varint,3,opt,name=full_audio,json=fullAudio" json:"full_audio,omitempty"`
	Subtitles *bool  `protobuf:"varint,4,opt,name=subtitles" json:"subtitles,omitempty"`
}

func (x *StoreItem_SupportedLanguage) Reset() {
	*x = StoreItem_SupportedLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_SupportedLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_SupportedLanguage) ProtoMessage() {}

func (x *StoreItem_SupportedLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_SupportedLanguage.ProtoReflect.Descriptor instead.
func (*StoreItem_SupportedLanguage) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 12}
}

func (x *StoreItem_SupportedLanguage) GetElanguage() int32 {
	if x != nil && x.Elanguage != nil {
		return *x.Elanguage
	}
	return 0
}

func (x *StoreItem_SupportedLanguage) GetSupported() bool {
	if x != nil && x.Supported != nil {
		return *x.Supported
	}
	return false
}

func (x *StoreItem_SupportedLanguage) GetFullAudio() bool {
	if x != nil && x.FullAudio != nil {
		return *x.FullAudio
	}
	return false
}

func (x *StoreItem_SupportedLanguage) GetSubtitles() bool {
	if x != nil && x.Subtitles != nil {
		return *x.Subtitles
	}
	return false
}

type StoreItem_FreeWeekend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *uint32 `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime   *uint32 `protobuf:"varint,2,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	Text      *string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
}

func (x *StoreItem_FreeWeekend) Reset() {
	*x = StoreItem_FreeWeekend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_FreeWeekend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_FreeWeekend) ProtoMessage() {}

func (x *StoreItem_FreeWeekend) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_FreeWeekend.ProtoReflect.Descriptor instead.
func (*StoreItem_FreeWeekend) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 13}
}

func (x *StoreItem_FreeWeekend) GetStartTime() uint32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *StoreItem_FreeWeekend) GetEndTime() uint32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *StoreItem_FreeWeekend) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type StoreItem_Reviews_StoreReviewSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReviewCount      *uint32           `protobuf:"varint,1,opt,name=review_count,json=reviewCount" json:"review_count,omitempty"`
	PercentPositive  *int32            `protobuf:"varint,2,opt,name=percent_positive,json=percentPositive" json:"percent_positive,omitempty"`
	ReviewScore      *EUserReviewScore `protobuf:"varint,3,opt,name=review_score,json=reviewScore,enum=EUserReviewScore,def=0" json:"review_score,omitempty"`
	ReviewScoreLabel *string           `protobuf:"bytes,4,opt,name=review_score_label,json=reviewScoreLabel" json:"review_score_label,omitempty"`
}

// Default values for StoreItem_Reviews_StoreReviewSummary fields.
const (
	Default_StoreItem_Reviews_StoreReviewSummary_ReviewScore = EUserReviewScore_k_EUserReviewScore_None
)

func (x *StoreItem_Reviews_StoreReviewSummary) Reset() {
	*x = StoreItem_Reviews_StoreReviewSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_Reviews_StoreReviewSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_Reviews_StoreReviewSummary) ProtoMessage() {}

func (x *StoreItem_Reviews_StoreReviewSummary) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_Reviews_StoreReviewSummary.ProtoReflect.Descriptor instead.
func (*StoreItem_Reviews_StoreReviewSummary) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 3, 0}
}

func (x *StoreItem_Reviews_StoreReviewSummary) GetReviewCount() uint32 {
	if x != nil && x.ReviewCount != nil {
		return *x.ReviewCount
	}
	return 0
}

func (x *StoreItem_Reviews_StoreReviewSummary) GetPercentPositive() int32 {
	if x != nil && x.PercentPositive != nil {
		return *x.PercentPositive
	}
	return 0
}

func (x *StoreItem_Reviews_StoreReviewSummary) GetReviewScore() EUserReviewScore {
	if x != nil && x.ReviewScore != nil {
		return *x.ReviewScore
	}
	return Default_StoreItem_Reviews_StoreReviewSummary_ReviewScore
}

func (x *StoreItem_Reviews_StoreReviewSummary) GetReviewScoreLabel() string {
	if x != nil && x.ReviewScoreLabel != nil {
		return *x.ReviewScoreLabel
	}
	return ""
}

type StoreItem_BasicInfo_CreatorHomeLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CreatorClanAccountId *uint32 `protobuf:"varint,2,opt,name=creator_clan_account_id,json=creatorClanAccountId" json:"creator_clan_account_id,omitempty"`
}

func (x *StoreItem_BasicInfo_CreatorHomeLink) Reset() {
	*x = StoreItem_BasicInfo_CreatorHomeLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_BasicInfo_CreatorHomeLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_BasicInfo_CreatorHomeLink) ProtoMessage() {}

func (x *StoreItem_BasicInfo_CreatorHomeLink) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_BasicInfo_CreatorHomeLink.ProtoReflect.Descriptor instead.
func (*StoreItem_BasicInfo_CreatorHomeLink) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 4, 0}
}

func (x *StoreItem_BasicInfo_CreatorHomeLink) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *StoreItem_BasicInfo_CreatorHomeLink) GetCreatorClanAccountId() uint32 {
	if x != nil && x.CreatorClanAccountId != nil {
		return *x.CreatorClanAccountId
	}
	return 0
}

type StoreItem_Platforms_VRSupport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vrhmd      *bool `protobuf:"varint,1,opt,name=vrhmd" json:"vrhmd,omitempty"`
	VrhmdOnly  *bool `protobuf:"varint,2,opt,name=vrhmd_only,json=vrhmdOnly" json:"vrhmd_only,omitempty"`
	HtcVive    *bool `protobuf:"varint,40,opt,name=htc_vive,json=htcVive" json:"htc_vive,omitempty"`
	OculusRift *bool `protobuf:"varint,41,opt,name=oculus_rift,json=oculusRift" json:"oculus_rift,omitempty"`
	WindowsMr  *bool `protobuf:"varint,42,opt,name=windows_mr,json=windowsMr" json:"windows_mr,omitempty"`
	ValveIndex *bool `protobuf:"varint,43,opt,name=valve_index,json=valveIndex" json:"valve_index,omitempty"`
}

func (x *StoreItem_Platforms_VRSupport) Reset() {
	*x = StoreItem_Platforms_VRSupport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_Platforms_VRSupport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_Platforms_VRSupport) ProtoMessage() {}

func (x *StoreItem_Platforms_VRSupport) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_Platforms_VRSupport.ProtoReflect.Descriptor instead.
func (*StoreItem_Platforms_VRSupport) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 8, 0}
}

func (x *StoreItem_Platforms_VRSupport) GetVrhmd() bool {
	if x != nil && x.Vrhmd != nil {
		return *x.Vrhmd
	}
	return false
}

func (x *StoreItem_Platforms_VRSupport) GetVrhmdOnly() bool {
	if x != nil && x.VrhmdOnly != nil {
		return *x.VrhmdOnly
	}
	return false
}

func (x *StoreItem_Platforms_VRSupport) GetHtcVive() bool {
	if x != nil && x.HtcVive != nil {
		return *x.HtcVive
	}
	return false
}

func (x *StoreItem_Platforms_VRSupport) GetOculusRift() bool {
	if x != nil && x.OculusRift != nil {
		return *x.OculusRift
	}
	return false
}

func (x *StoreItem_Platforms_VRSupport) GetWindowsMr() bool {
	if x != nil && x.WindowsMr != nil {
		return *x.WindowsMr
	}
	return false
}

func (x *StoreItem_Platforms_VRSupport) GetValveIndex() bool {
	if x != nil && x.ValveIndex != nil {
		return *x.ValveIndex
	}
	return false
}

type StoreItem_PurchaseOption_Discount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscountAmount      *int64  `protobuf:"varint,1,opt,name=discount_amount,json=discountAmount" json:"discount_amount,omitempty"`
	DiscountDescription *string `protobuf:"bytes,2,opt,name=discount_description,json=discountDescription" json:"discount_description,omitempty"`
	DiscountEndDate     *uint32 `protobuf:"varint,3,opt,name=discount_end_date,json=discountEndDate" json:"discount_end_date,omitempty"`
}

func (x *StoreItem_PurchaseOption_Discount) Reset() {
	*x = StoreItem_PurchaseOption_Discount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_PurchaseOption_Discount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_PurchaseOption_Discount) ProtoMessage() {}

func (x *StoreItem_PurchaseOption_Discount) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_PurchaseOption_Discount.ProtoReflect.Descriptor instead.
func (*StoreItem_PurchaseOption_Discount) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 9, 0}
}

func (x *StoreItem_PurchaseOption_Discount) GetDiscountAmount() int64 {
	if x != nil && x.DiscountAmount != nil {
		return *x.DiscountAmount
	}
	return 0
}

func (x *StoreItem_PurchaseOption_Discount) GetDiscountDescription() string {
	if x != nil && x.DiscountDescription != nil {
		return *x.DiscountDescription
	}
	return ""
}

func (x *StoreItem_PurchaseOption_Discount) GetDiscountEndDate() uint32 {
	if x != nil && x.DiscountEndDate != nil {
		return *x.DiscountEndDate
	}
	return 0
}

type StoreItem_Screenshots_Screenshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Ordinal  *int32  `protobuf:"varint,2,opt,name=ordinal" json:"ordinal,omitempty"`
}

func (x *StoreItem_Screenshots_Screenshot) Reset() {
	*x = StoreItem_Screenshots_Screenshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_Screenshots_Screenshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_Screenshots_Screenshot) ProtoMessage() {}

func (x *StoreItem_Screenshots_Screenshot) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_Screenshots_Screenshot.ProtoReflect.Descriptor instead.
func (*StoreItem_Screenshots_Screenshot) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 10, 0}
}

func (x *StoreItem_Screenshots_Screenshot) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *StoreItem_Screenshots_Screenshot) GetOrdinal() int32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

type StoreItem_Trailers_VideoSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Type     *string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (x *StoreItem_Trailers_VideoSource) Reset() {
	*x = StoreItem_Trailers_VideoSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_Trailers_VideoSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_Trailers_VideoSource) ProtoMessage() {}

func (x *StoreItem_Trailers_VideoSource) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_Trailers_VideoSource.ProtoReflect.Descriptor instead.
func (*StoreItem_Trailers_VideoSource) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 11, 0}
}

func (x *StoreItem_Trailers_VideoSource) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *StoreItem_Trailers_VideoSource) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type StoreItem_Trailers_Trailer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrailerName      *string                           `protobuf:"bytes,1,opt,name=trailer_name,json=trailerName" json:"trailer_name,omitempty"`
	TrailerUrlFormat *string                           `protobuf:"bytes,2,opt,name=trailer_url_format,json=trailerUrlFormat" json:"trailer_url_format,omitempty"`
	Trailer_480P     []*StoreItem_Trailers_VideoSource `protobuf:"bytes,3,rep,name=trailer_480p,json=trailer480p" json:"trailer_480p,omitempty"`
	TrailerMax       []*StoreItem_Trailers_VideoSource `protobuf:"bytes,4,rep,name=trailer_max,json=trailerMax" json:"trailer_max,omitempty"`
	Microtrailer     []*StoreItem_Trailers_VideoSource `protobuf:"bytes,5,rep,name=microtrailer" json:"microtrailer,omitempty"`
	ScreenshotMedium *string                           `protobuf:"bytes,10,opt,name=screenshot_medium,json=screenshotMedium" json:"screenshot_medium,omitempty"`
	ScreenshotFull   *string                           `protobuf:"bytes,11,opt,name=screenshot_full,json=screenshotFull" json:"screenshot_full,omitempty"`
	TrailerBaseId    *int32                            `protobuf:"varint,12,opt,name=trailer_base_id,json=trailerBaseId" json:"trailer_base_id,omitempty"`
}

func (x *StoreItem_Trailers_Trailer) Reset() {
	*x = StoreItem_Trailers_Trailer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreItem_Trailers_Trailer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreItem_Trailers_Trailer) ProtoMessage() {}

func (x *StoreItem_Trailers_Trailer) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreItem_Trailers_Trailer.ProtoReflect.Descriptor instead.
func (*StoreItem_Trailers_Trailer) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{4, 11, 1}
}

func (x *StoreItem_Trailers_Trailer) GetTrailerName() string {
	if x != nil && x.TrailerName != nil {
		return *x.TrailerName
	}
	return ""
}

func (x *StoreItem_Trailers_Trailer) GetTrailerUrlFormat() string {
	if x != nil && x.TrailerUrlFormat != nil {
		return *x.TrailerUrlFormat
	}
	return ""
}

func (x *StoreItem_Trailers_Trailer) GetTrailer_480P() []*StoreItem_Trailers_VideoSource {
	if x != nil {
		return x.Trailer_480P
	}
	return nil
}

func (x *StoreItem_Trailers_Trailer) GetTrailerMax() []*StoreItem_Trailers_VideoSource {
	if x != nil {
		return x.TrailerMax
	}
	return nil
}

func (x *StoreItem_Trailers_Trailer) GetMicrotrailer() []*StoreItem_Trailers_VideoSource {
	if x != nil {
		return x.Microtrailer
	}
	return nil
}

func (x *StoreItem_Trailers_Trailer) GetScreenshotMedium() string {
	if x != nil && x.ScreenshotMedium != nil {
		return *x.ScreenshotMedium
	}
	return ""
}

func (x *StoreItem_Trailers_Trailer) GetScreenshotFull() string {
	if x != nil && x.ScreenshotFull != nil {
		return *x.ScreenshotFull
	}
	return ""
}

func (x *StoreItem_Trailers_Trailer) GetTrailerBaseId() int32 {
	if x != nil && x.TrailerBaseId != nil {
		return *x.TrailerBaseId
	}
	return 0
}

type CStoreBrowse_GetStoreCategories_Response_Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categoryid   *uint32             `protobuf:"varint,1,opt,name=categoryid" json:"categoryid,omitempty"`
	Type         *EStoreCategoryType `protobuf:"varint,2,opt,name=type,enum=EStoreCategoryType,def=0" json:"type,omitempty"`
	InternalName *string             `protobuf:"bytes,3,opt,name=internal_name,json=internalName" json:"internal_name,omitempty"`
	DisplayName  *string             `protobuf:"bytes,4,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	ImageUrl     *string             `protobuf:"bytes,5,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
	ShowInSearch *bool               `protobuf:"varint,6,opt,name=show_in_search,json=showInSearch" json:"show_in_search,omitempty"`
}

// Default values for CStoreBrowse_GetStoreCategories_Response_Category fields.
const (
	Default_CStoreBrowse_GetStoreCategories_Response_Category_Type = EStoreCategoryType_k_EStoreCategoryType_Category
)

func (x *CStoreBrowse_GetStoreCategories_Response_Category) Reset() {
	*x = CStoreBrowse_GetStoreCategories_Response_Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetStoreCategories_Response_Category) ProtoMessage() {}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetStoreCategories_Response_Category.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetStoreCategories_Response_Category) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) GetCategoryid() uint32 {
	if x != nil && x.Categoryid != nil {
		return *x.Categoryid
	}
	return 0
}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) GetType() EStoreCategoryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CStoreBrowse_GetStoreCategories_Response_Category_Type
}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) GetInternalName() string {
	if x != nil && x.InternalName != nil {
		return *x.InternalName
	}
	return ""
}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *CStoreBrowse_GetStoreCategories_Response_Category) GetShowInSearch() bool {
	if x != nil && x.ShowInSearch != nil {
		return *x.ShowInSearch
	}
	return false
}

type CStoreBrowse_GetDLCForApps_Response_DLCData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid       *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Parentappid *uint32 `protobuf:"varint,2,opt,name=parentappid" json:"parentappid,omitempty"`
	ReleaseDate *uint32 `protobuf:"varint,3,opt,name=release_date,json=releaseDate" json:"release_date,omitempty"`
	ComingSoon  *bool   `protobuf:"varint,4,opt,name=coming_soon,json=comingSoon" json:"coming_soon,omitempty"`
	Price       *int64  `protobuf:"varint,5,opt,name=price" json:"price,omitempty"`
	Discount    *uint32 `protobuf:"varint,6,opt,name=discount" json:"discount,omitempty"`
	Free        *bool   `protobuf:"varint,7,opt,name=free" json:"free,omitempty"`
}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) Reset() {
	*x = CStoreBrowse_GetDLCForApps_Response_DLCData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetDLCForApps_Response_DLCData) ProtoMessage() {}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetDLCForApps_Response_DLCData.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetDLCForApps_Response_DLCData) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) GetParentappid() uint32 {
	if x != nil && x.Parentappid != nil {
		return *x.Parentappid
	}
	return 0
}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) GetReleaseDate() uint32 {
	if x != nil && x.ReleaseDate != nil {
		return *x.ReleaseDate
	}
	return 0
}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) GetComingSoon() bool {
	if x != nil && x.ComingSoon != nil {
		return *x.ComingSoon
	}
	return false
}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) GetPrice() int64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) GetDiscount() uint32 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *CStoreBrowse_GetDLCForApps_Response_DLCData) GetFree() bool {
	if x != nil && x.Free != nil {
		return *x.Free
	}
	return false
}

type CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Playtime   *uint32 `protobuf:"varint,2,opt,name=playtime" json:"playtime,omitempty"`
	LastPlayed *uint32 `protobuf:"varint,3,opt,name=last_played,json=lastPlayed" json:"last_played,omitempty"`
}

func (x *CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp) Reset() {
	*x = CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp) ProtoMessage() {}

func (x *CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{10, 1}
}

func (x *CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp) GetPlaytime() uint32 {
	if x != nil && x.Playtime != nil {
		return *x.Playtime
	}
	return 0
}

func (x *CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp) GetLastPlayed() uint32 {
	if x != nil && x.LastPlayed != nil {
		return *x.LastPlayed
	}
	return 0
}

type CStoreBrowse_GetDLCForAppsSolr_Response_DLCList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentAppid *uint32  `protobuf:"varint,1,opt,name=parent_appid,json=parentAppid" json:"parent_appid,omitempty"`
	DlcAppids   []uint32 `protobuf:"varint,2,rep,name=dlc_appids,json=dlcAppids" json:"dlc_appids,omitempty"`
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Response_DLCList) Reset() {
	*x = CStoreBrowse_GetDLCForAppsSolr_Response_DLCList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Response_DLCList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CStoreBrowse_GetDLCForAppsSolr_Response_DLCList) ProtoMessage() {}

func (x *CStoreBrowse_GetDLCForAppsSolr_Response_DLCList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_storebrowse_steamclient_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CStoreBrowse_GetDLCForAppsSolr_Response_DLCList.ProtoReflect.Descriptor instead.
func (*CStoreBrowse_GetDLCForAppsSolr_Response_DLCList) Descriptor() ([]byte, []int) {
	return file_steammessages_storebrowse_steamclient_proto_rawDescGZIP(), []int{12, 0}
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Response_DLCList) GetParentAppid() uint32 {
	if x != nil && x.ParentAppid != nil {
		return *x.ParentAppid
	}
	return 0
}

func (x *CStoreBrowse_GetDLCForAppsSolr_Response_DLCList) GetDlcAppids() []uint32 {
	if x != nil {
		return x.DlcAppids
	}
	return nil
}

var File_steammessages_storebrowse_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_storebrowse_steamclient_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x68, 0x75, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7,
	0x01, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x61, 0x67, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74,
	0x61, 0x67, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x75, 0x62, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x75, 0x62, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x69, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x65,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d,
	0x82, 0xb5, 0x18, 0x09, 0x45, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x09, 0x65,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26,
	0x82, 0xb5, 0x18, 0x22, 0x32, 0x2d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x20,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x3b, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0x82, 0xb5, 0x18, 0x0b, 0x45, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x52, 0x0a, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x61, 0x6c, 0x6d, 0x22, 0xf0, 0x08, 0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6c, 0x6c,
	0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x41, 0x6c, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x60, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x34, 0x82, 0xb5, 0x18, 0x30, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x61, 0x67, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2c,
	0x20, 0x61, 0x73, 0x20, 0x74, 0x61, 0x67, 0x69, 0x64, 0x73, 0x2e, 0x20, 0x20, 0x4d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x20, 0x32, 0x30, 0x2e, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x12, 0x62, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x34,
	0x82, 0xb5, 0x18, 0x30, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x2c, 0x20, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x8e, 0x01, 0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x4e, 0x82, 0xb5,
	0x18, 0x4a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x20, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x2c, 0x20, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x52, 0x19, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0xcd, 0x01, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x96, 0x01, 0x82, 0xb5, 0x18, 0x91, 0x01, 0x46, 0x6f, 0x72, 0x20, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x2c, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
	0x70, 0x70, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x77, 0x65, 0x6c,
	0x6c, 0x2e, 0x20, 0x20, 0x50, 0x61, 0x73, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x52, 0x14, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x84, 0x01, 0x0a, 0x1a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x2a, 0x82, 0xb5, 0x18, 0x26, 0x54, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x52,
	0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x1d, 0x43, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x44, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xdf, 0x64, 0x0a, 0x09, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x46, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x45, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x18, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3b, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x21, 0x82, 0xb5, 0x18, 0x1d, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x20, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x22, 0x75, 0x6e, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x51, 0x82, 0xb5, 0x18, 0x4d, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x70, 0x70, 0x20, 0x69, 0x73, 0x20, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x72,
	0x65, 0x61, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x1f, 0x75, 0x6e, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x0e, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x48, 0x82, 0xb5, 0x18, 0x44, 0x54, 0x68, 0x65, 0x20, 0x55, 0x52, 0x4c,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x27, 0x73, 0x20,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2c, 0x20, 0x74, 0x6f, 0x20, 0x62,
	0x65, 0x20, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x52, 0x4c, 0x2e, 0x52, 0x0c, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x5b, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x45, 0x82, 0xb5, 0x18, 0x41,
	0x49, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x70,
	0x70, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x2d, 0x61,
	0x70, 0x70, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x20, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x2e, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0xd4, 0x01, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x14, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x99, 0x01,
	0x82, 0xb5, 0x18, 0x94, 0x01, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x70, 0x70,
	0x20, 0x28, 0x47, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x2c, 0x20, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x29, 0x2e, 0x20, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2c,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x28, 0x65, 0x67, 0x20, 0x47, 0x61, 0x6d, 0x65,
	0x20, 0x2b, 0x20, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x20, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74,
	0x79, 0x70, 0x65, 0x20, 0x47, 0x61, 0x6d, 0x65, 0x29, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x6c, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x35, 0x82, 0xb5, 0x18, 0x31, 0x46, 0x6f, 0x72,
	0x20, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x2c, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x0d,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x56, 0x0a,
	0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x46, 0x6f, 0x72, 0x20,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x2c, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x73, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x41,
	0x70, 0x70, 0x69, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x45, 0x61, 0x72, 0x6c, 0x79,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x54, 0x82, 0xb5, 0x18, 0x50, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2f, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x2e, 0x52, 0x0d, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4a, 0x0a, 0x15,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x69,
	0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x67, 0x69, 0x64, 0x73,
	0x12, 0x35, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x52, 0x07, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x29,
	0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x73, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12,
	0x6a, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x37, 0x82, 0xb5, 0x18, 0x33, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x6c, 0x69,
	0x6b, 0x65, 0x20, 0x45, 0x53, 0x52, 0x42, 0x20, 0x6f, 0x72, 0x20, 0x50, 0x45, 0x47, 0x49, 0x52,
	0x0a, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0xa0, 0x01, 0x0a, 0x14,
	0x62, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x53, 0x82, 0xb5, 0x18, 0x4f, 0x54, 0x68, 0x65, 0x20, 0x63,
	0x68, 0x65, 0x61, 0x70, 0x65, 0x73, 0x74, 0x20, 0x77, 0x61, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x70, 0x70, 0x20, 0x6f, 0x72, 0x20,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x20, 0x28, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20,
	0x61, 0x20, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x29, 0x2e, 0x52, 0x12, 0x62, 0x65, 0x73, 0x74,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xbf,
	0x01, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x82, 0xb5, 0x18, 0x75, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x74, 0x20, 0x77, 0x61, 0x79, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x75, 0x79, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x70, 0x70, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x20, 0x28, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x20, 0x63,
	0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x20,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x6d, 0x61,
	0x79, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x29, 0x2e, 0x52,
	0x0f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x98, 0x01, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x5b, 0x82, 0xb5, 0x18, 0x57, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x70, 0x70, 0x2c, 0x20, 0x62, 0x75,
	0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x2e, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72,
	0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x08, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x34, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0xf4, 0x01, 0x0a, 0x17, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x42, 0xbc, 0x01, 0x82, 0xb5, 0x18, 0xb7, 0x01, 0x4e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x55, 0x52, 0x4c, 0x20, 0x28, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x74, 0x6f,
	0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x68, 0x6f, 0x6d, 0x65, 0x29, 0x20, 0x77, 0x68, 0x65,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x63, 0x61, 0x70, 0x73,
	0x75, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x74, 0x65,
	0x6d, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x2c, 0x20, 0x69, 0x6e,
	0x73, 0x74, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x2e, 0x2e, 0x2e, 0x20, 0x55, 0x52,
	0x4c, 0x2e, 0x20, 0x55, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x70, 0x70, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74,
	0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x73, 0x61, 0x6c, 0x65,
	0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x72, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x66, 0x0a, 0x0c,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x46,
	0x72, 0x65, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64, 0x42, 0x2b, 0x82, 0xb5, 0x18, 0x27,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x20, 0x61, 0x20, 0x66, 0x72, 0x65, 0x65, 0x20, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64,
	0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x57, 0x65, 0x65,
	0x6b, 0x65, 0x6e, 0x64, 0x12, 0x5b, 0x0a, 0x08, 0x75, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3f, 0x82, 0xb5, 0x18, 0x3b, 0x49, 0x66, 0x20, 0x74,
	0x72, 0x75, 0x65, 0x2c, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x6c,
	0x79, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x6f, 0x6e, 0x20,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x76, 0x69, 0x61, 0x20, 0x61, 0x20, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x08, 0x75, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x57, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x38, 0x82, 0xb5, 0x18, 0x34, 0x46, 0x6f, 0x72, 0x20, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x61, 0x67, 0x73,
	0x2c, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x52,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x42, 0x82, 0xb5, 0x18, 0x3e, 0x46, 0x6f, 0x72, 0x20, 0x68, 0x75, 0x62, 0x20, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x28, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0x82,
	0xb5, 0x18, 0x29, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x67, 0x61,
	0x6d, 0x65, 0x20, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x66, 0x75,
	0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a,
	0x13, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x72, 0x69, 0x6c, 0x79, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x31, 0x82, 0xb5, 0x18, 0x2d,
	0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x69, 0x73, 0x20, 0x66, 0x72, 0x65,
	0x65, 0x20, 0x6e, 0x6f, 0x77, 0x20, 0x62, 0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x73, 0x6f, 0x2e, 0x52, 0x11, 0x69,
	0x73, 0x46, 0x72, 0x65, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x69, 0x6c, 0x79,
	0x1a, 0x61, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x51, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x46, 0x6f, 0x72, 0x20,
	0x44, 0x4c, 0x43, 0x2c, 0x20, 0x44, 0x65, 0x6d, 0x6f, 0x73, 0x2c, 0x20, 0x65, 0x74, 0x63, 0x2c,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x69,
	0x6e, 0x20, 0x61, 0x70, 0x70, 0x2e, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70,
	0x70, 0x69, 0x64, 0x1a, 0xe0, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x66, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x35, 0x82, 0xb5, 0x18, 0x31, 0x41, 0x6c,
	0x6c, 0x20, 0x61, 0x70, 0x70, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x2c,
	0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x41, 0x70, 0x70, 0x73, 0x12, 0x67, 0x0a,
	0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x42, 0x2e, 0x82, 0xb5, 0x18, 0x2a, 0x41, 0x6c, 0x6c, 0x20, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x2c,
	0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x8f, 0x03, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x33, 0x82, 0xb5, 0x18,
	0x2f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x20, 0x6c, 0x69, 0x6b, 0x65,
	0x20, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2c, 0x20,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2c, 0x20, 0x4d, 0x4d, 0x4f,
	0x52, 0x1a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x69, 0x64, 0x73, 0x12, 0x86, 0x01, 0x0a,
	0x13, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x55, 0x82, 0xb5, 0x18, 0x51,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x20, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2c, 0x20, 0x56, 0x41, 0x43, 0x2c, 0x20,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2c, 0x20, 0x65, 0x74,
	0x63, 0x52, 0x12, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x69, 0x64, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x49, 0x82, 0xb5, 0x18, 0x45, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x75, 0x6c, 0x6c, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x69, 0x64, 0x73, 0x1a, 0xa7, 0x05, 0x0a, 0x07, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x12, 0xbc, 0x01, 0x0a, 0x10, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x6a, 0x82, 0xb5, 0x18, 0x66, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x62, 0x6f, 0x6d, 0x62, 0x73, 0x20, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x20, 0x28, 0x69, 0x66, 0x20, 0x61, 0x6e, 0x79, 0x29, 0x2e, 0x20, 0x20,
	0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x28,
	0x69, 0x66, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x29, 0x52, 0x0f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x12, 0xad, 0x01, 0x0a, 0x12, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x57, 0x82, 0xb5, 0x18, 0x53, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x62, 0x6f, 0x6d, 0x62, 0x73, 0x20, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x2e, 0x20, 0x20, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61,
	0x72, 0x65, 0x20, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x62, 0x6f, 0x6d, 0x62, 0x73, 0x2e,
	0x52, 0x11, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x55, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x1a, 0xac, 0x02, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0x82, 0xb5, 0x18, 0x05, 0x30, 0x2d, 0x31,
	0x30, 0x30, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x45, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x3a, 0x17, 0x6b, 0x5f,
	0x45, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x6e, 0x0a, 0x12, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40,
	0x82, 0xb5, 0x18, 0x3c, 0x41, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x69, 0x6b,
	0x65, 0x20, 0x27, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x27, 0x2c, 0x20, 0x27, 0x4e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x27, 0x2c, 0x20, 0x27, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x68, 0x65, 0x6c,
	0x6d, 0x69, 0x6e, 0x67, 0x6c, 0x79, 0x20, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x27,
	0x52, 0x10, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x1a, 0xef, 0x04, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a,
	0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x48,
	0x6f, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x66, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x69, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x73, 0x65, 0x73, 0x12,
	0x9d, 0x01, 0x0a, 0x10, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x72, 0x82, 0xb5, 0x18, 0x6e,
	0x41, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x20, 0x6f, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x20, 0x61, 0x20, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2c, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x27,
	0x4a, 0x75, 0x73, 0x74, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x21, 0x27, 0x52, 0x0f,
	0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x1a,
	0xc2, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x63, 0x82, 0xb5, 0x18, 0x5f, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x61, 0x6e, 0x6c, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x20, 0x68, 0x6f, 0x6d, 0x65, 0x20, 0x76, 0x69, 0x61, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x6c, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x52, 0x14,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x1a, 0x33, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61, 0x67, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0xd1, 0x08, 0x0a, 0x06, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x7d, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x53,
	0x82, 0xb5, 0x18, 0x4f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x55,
	0x52, 0x4c, 0x73, 0x2c, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x24, 0x7b, 0x46, 0x49,
	0x4c, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x7d, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x55,
	0x52, 0x4c, 0x2e, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x73,
	0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x43,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f,
	0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6f, 0x82, 0xb5,
	0x18, 0x6b, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x50,
	0x48, 0x50, 0x3b, 0x20, 0x61, 0x70, 0x70, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x61, 0x6c,
	0x77, 0x61, 0x79, 0x73, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2c, 0x20,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x2e, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0x82,
	0xb5, 0x18, 0x3f, 0x41, 0x20, 0x77, 0x69, 0x64, 0x65, 0x72, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x2f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x20,
	0x20, 0x4e, 0x6f, 0x74, 0x20, 0x73, 0x65, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x70, 0x70,
	0x73, 0x2e, 0x52, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x67, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x0c, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0x82, 0xb5, 0x18, 0x07, 0x33, 0x37, 0x34, 0x78, 0x34, 0x34, 0x38, 0x52, 0x0b, 0x68,
	0x65, 0x72, 0x6f, 0x43, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x68, 0x65,
	0x72, 0x6f, 0x5f, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x5f, 0x32, 0x78, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x24, 0x82, 0xb5, 0x18, 0x20, 0x37, 0x34, 0x38, 0x78, 0x38, 0x39, 0x36,
	0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x68, 0x65, 0x72, 0x6f,
	0x20, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x0d, 0x68, 0x65, 0x72, 0x6f, 0x43,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x32, 0x78, 0x12, 0x49, 0x0a, 0x0f, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x82, 0xb5, 0x18, 0x1c, 0x33, 0x30, 0x30, 0x78, 0x34, 0x35, 0x30, 0x20, 0x2d,
	0x20, 0x74, 0x61, 0x6c, 0x6c, 0x20, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x20, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x0e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x43, 0x61, 0x70, 0x73,
	0x75, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x5f, 0x32, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x82, 0xb5, 0x18, 0x1c, 0x36, 0x30, 0x30, 0x78, 0x39, 0x30, 0x30, 0x20, 0x2d, 0x20, 0x74,
	0x61, 0x6c, 0x6c, 0x20, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x20, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x10, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x43, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x65, 0x32, 0x78, 0x12, 0x5c, 0x0a, 0x0c, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x68,
	0x65, 0x72, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x82, 0xb5, 0x18, 0x35, 0x39,
	0x36, 0x30, 0x78, 0x33, 0x31, 0x30, 0x20, 0x6f, 0x72, 0x20, 0x31, 0x39, 0x32, 0x30, 0x78, 0x36,
	0x32, 0x30, 0x20, 0x2d, 0x20, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x20, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x48, 0x65, 0x72,
	0x6f, 0x12, 0x63, 0x0a, 0x0f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x68, 0x65, 0x72,
	0x6f, 0x5f, 0x32, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x82, 0xb5, 0x18, 0x37,
	0x31, 0x39, 0x32, 0x30, 0x78, 0x36, 0x32, 0x30, 0x20, 0x6f, 0x72, 0x20, 0x33, 0x38, 0x34, 0x30,
	0x78, 0x31, 0x32, 0x34, 0x30, 0x20, 0x2d, 0x20, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x20,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0d, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x48, 0x65, 0x72, 0x6f, 0x32, 0x78, 0x12, 0x64, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d,
	0x82, 0xb5, 0x18, 0x39, 0x33, 0x32, 0x78, 0x33, 0x32, 0x20, 0x6a, 0x70, 0x67, 0x20, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x69, 0x61, 0x20, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x1a, 0x95, 0x0a,
	0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0xa2, 0x01,
	0x0a, 0x12, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x74, 0x82, 0xb5, 0x18, 0x70,
	0x54, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x74,
	0x65, 0x6d, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x20, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x45, 0x61, 0x72, 0x6c, 0x79,
	0x20, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x65,
	0x73, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72,
	0x20, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x79, 0x2e,
	0x52, 0x10, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x58, 0x82, 0xb5, 0x18, 0x54, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x3b, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x69, 0x74, 0x65, 0x6d, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x77, 0x68, 0x65, 0x72, 0x65, 0x2c, 0x20, 0x74,
	0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x52, 0x13, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x89, 0x01, 0x0a, 0x1b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x4a, 0x82, 0xb5, 0x18, 0x46, 0x46, 0x6f, 0x72,
	0x20, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x20, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x67, 0x72,
	0x61, 0x64, 0x75, 0x61, 0x74, 0x65, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x20, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x2e, 0x52, 0x18, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x96, 0x01,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6f, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x70, 0x82, 0xb5, 0x18, 0x6c, 0x49, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x20, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f,
	0x6f, 0x6e, 0x3f, 0x20, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x6f, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x67, 0x61,
	0x69, 0x6e, 0x73, 0x74, 0x20, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x53, 0x6f, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x42, 0x82, 0xb5, 0x18, 0x3e,
	0x43, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x20, 0x62, 0x65, 0x20, 0x70,
	0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x3f, 0x20, 0x20, 0x4f, 0x6e, 0x6c, 0x79, 0x20,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x43, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x20, 0x53, 0x6f, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x2e, 0x52, 0x09,
	0x69, 0x73, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x90, 0x01, 0x0a, 0x1b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x51, 0x82, 0xb5, 0x18, 0x4d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x20, 0x64, 0x61, 0x74, 0x65, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x20, 0x20, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x75, 0x6e, 0x73,
	0x65, 0x74, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65,
	0x74, 0x2e, 0x52, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0xa3, 0x01, 0x0a,
	0x18, 0x69, 0x73, 0x5f, 0x61, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x6a, 0x82, 0xb5, 0x18, 0x66, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x2d, 0x79,
	0x65, 0x61, 0x72, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x2e, 0x20, 0x20, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x20, 0x69, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x64, 0x61, 0x79, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x2e, 0x52, 0x15, 0x69, 0x73, 0x41,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6f,
	0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x60, 0x82, 0xb5, 0x18, 0x5c, 0x4f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x27, 0x2c, 0x20, 0x27, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x27, 0x2c, 0x20, 0x27, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x71, 0x75,
	0x61, 0x72, 0x74, 0x65, 0x72, 0x27, 0x2c, 0x20, 0x27, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x27, 0x2c, 0x20, 0x27, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x73, 0x6f, 0x6f, 0x6e, 0x27, 0x2c, 0x20, 0x27, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x62,
	0x61, 0x27, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6f, 0x6e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6c,
	0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x73, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x61, 0x63, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x63, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x1a, 0xe5, 0x03, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6f, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6f, 0x73, 0x4c,
	0x69, 0x6e, 0x75, 0x78, 0x12, 0x3d, 0x0a, 0x0a, 0x76, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x2e, 0x56,
	0x52, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x76, 0x72, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x1a, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x65,
	0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x45, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x3a, 0x29, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x17, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a, 0xbc,
	0x01, 0x0a, 0x09, 0x56, 0x52, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x72, 0x68, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x72, 0x68,
	0x6d, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x72, 0x68, 0x6d, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x76, 0x72, 0x68, 0x6d, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x74, 0x63, 0x5f, 0x76, 0x69, 0x76, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x74, 0x63, 0x56, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x63, 0x75, 0x6c, 0x75, 0x73, 0x5f, 0x72, 0x69, 0x66, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x6f, 0x63, 0x75, 0x6c, 0x75, 0x73, 0x52, 0x69, 0x66, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x6d, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4d, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x61, 0x6c, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0xad, 0x12,
	0x0a, 0x0e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x14, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x82, 0xb5, 0x18, 0x21, 0x54, 0x68,
	0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x76, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x45, 0x82, 0xb5, 0x18, 0x41, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x73, 0x65,
	0x74, 0x2e, 0x20, 0x20, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x79,
	0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x79, 0x0a, 0x17, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x42, 0x82, 0xb5,
	0x18, 0x3e, 0x49, 0x66, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x2c,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x77, 0x6f, 0x75, 0x6c,
	0x64, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x2e,
	0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x7f, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4b, 0x82, 0xb5, 0x18, 0x47, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x73, 0x65, 0x74, 0x2e,
	0x20, 0x20, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x2c, 0x20, 0x6c, 0x69,
	0x6b, 0x65, 0x20, 0x27, 0x24, 0x31, 0x30, 0x2e, 0x30, 0x30, 0x27, 0x2e, 0x52, 0x13, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x42, 0x82, 0xb5, 0x18, 0x3e, 0x49, 0x66, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x63, 0x74, 0x12, 0xc1,
	0x01, 0x0a, 0x13, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x90, 0x01, 0x82,
	0xb5, 0x18, 0x8b, 0x01, 0x49, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61,
	0x20, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x20, 0x20, 0x49, 0x66,
	0x20, 0x6e, 0x6f, 0x20, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x20, 0x61, 0x72, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x77, 0x69,
	0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x61,
	0x73, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x2e, 0x52,
	0x11, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x63, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x34, 0x82, 0xb5, 0x18, 0x30, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x15, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x44, 0x82, 0xb5,
	0x18, 0x40, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20,
	0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x12, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x4d, 0x82, 0xb5, 0x18, 0x49, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x11, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x6e, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x67,
	0x69, 0x66, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x43,
	0x61, 0x6e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x41, 0x73, 0x47, 0x69, 0x66, 0x74,
	0x12, 0x54, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x20, 0x82, 0xb5, 0x18, 0x1c, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x52, 0x13, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x69, 0x61, 0x6c, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x1c, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x42, 0x48, 0x82,
	0xb5, 0x18, 0x44, 0x44, 0x6f, 0x6e, 0x27, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x20, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x19, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x63, 0x74, 0x12, 0xa4, 0x01, 0x0a, 0x20, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x63, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x42, 0x55, 0x82, 0xb5, 0x18, 0x51, 0x44, 0x6f, 0x6e, 0x27, 0x74, 0x20,
	0x73, 0x68, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73,
	0x65, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x61, 0x20, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61,
	0x73, 0x74, 0x20, 0x33, 0x30, 0x20, 0x64, 0x61, 0x79, 0x73, 0x2e, 0x52, 0x1c, 0x68, 0x69, 0x64,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x38, 0x82, 0xb5, 0x18, 0x34, 0x48, 0x6f, 0x77, 0x20,
	0x6d, 0x61, 0x6e, 0x79, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x92, 0x01, 0x0a, 0x1c, 0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x42, 0x52, 0x82, 0xb5, 0x18, 0x4e,
	0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x20, 0x20, 0x49,
	0x66, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x73, 0x6f, 0x20, 0x77, 0x65, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x18,
	0x6c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x92, 0x01, 0x0a, 0x08, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31,
	0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x1a, 0xba, 0x05,
	0x0a, 0x0b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x7b, 0x0a,
	0x14, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x42, 0x26,
	0x82, 0xb5, 0x18, 0x22, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x20,
	0x73, 0x75, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x41, 0x67, 0x65, 0x73, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0xcc, 0x01, 0x0a, 0x1a, 0x6d,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68,
	0x6f, 0x74, 0x42, 0x6b, 0x82, 0xb5, 0x18, 0x67, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x3b, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x62, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x20,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x20,
	0x61, 0x67, 0x65, 0x20, 0x28, 0x61, 0x67, 0x65, 0x20, 0x67, 0x61, 0x74, 0x65, 0x29, 0x2e, 0x52,
	0x18, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x1a, 0xde, 0x02, 0x0a, 0x0a, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x8d, 0x01, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x71, 0x82, 0xb5, 0x18,
	0x6d, 0x50, 0x61, 0x74, 0x68, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x6f, 0x6e,
	0x20, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x20, 0x43, 0x44, 0x4e, 0x2e, 0x20, 0x20, 0x43, 0x61, 0x6e,
	0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x53, 0x48, 0x41, 0x3a, 0x20, 0x27, 0x2e, 0x31, 0x39, 0x32,
	0x30, 0x78, 0x31, 0x30, 0x38, 0x30, 0x27, 0x2c, 0x20, 0x27, 0x2e, 0x36, 0x30, 0x30, 0x78, 0x33,
	0x33, 0x38, 0x27, 0x2c, 0x20, 0x27, 0x2e, 0x31, 0x31, 0x36, 0x78, 0x36, 0x35, 0x27, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0xa4, 0x01, 0x82, 0xb5, 0x18,
	0x9f, 0x01, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x20, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x73,
	0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x3b,
	0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x61, 0x72, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x20, 0x69, 0x6e, 0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x62, 0x75, 0x74, 0x20,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x67, 0x65,
	0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x2e, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x1a, 0xf6, 0x08, 0x0a, 0x08, 0x54,
	0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x21, 0x82, 0xb5, 0x18, 0x1d, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x70, 0x70, 0x52, 0x0a, 0x68, 0x69, 0x67,
	0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0xa9, 0x01, 0x0a, 0x0e, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x72, 0x61,
	0x69, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x65, 0x82,
	0xb5, 0x18, 0x61, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x3b, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
	0x70, 0x70, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x20, 0x61,
	0x72, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x20, 0x28, 0x68, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x20, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x29, 0x52, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x72, 0x61, 0x69, 0x6c,
	0x65, 0x72, 0x73, 0x1a, 0xb8, 0x01, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x82, 0xb5, 0x18, 0x22, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6c,
	0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x51, 0x82, 0xb5, 0x18, 0x4d, 0x27, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2f, 0x77, 0x65, 0x62, 0x6d, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x27, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2f, 0x6d, 0x70, 0x34, 0x27, 0x3b, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x6a, 0x75, 0x73, 0x74,
	0x20, 0x70, 0x75, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6c, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x3c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x3e, 0x20, 0x74, 0x61, 0x67, 0x2e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xa2,
	0x05, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x79, 0x0a,
	0x12, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x82, 0xb5, 0x18, 0x47, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x55, 0x52, 0x4c, 0x73, 0x2c, 0x20,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x24,
	0x7b, 0x46, 0x49, 0x4c, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x7d, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x55, 0x52, 0x4c, 0x2e, 0x52, 0x10, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x55,
	0x72, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x5f, 0x34, 0x38, 0x30, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c,
	0x65, 0x72, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x34, 0x38, 0x30, 0x70, 0x12, 0x40, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x72,
	0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x43,
	0x0a, 0x0c, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x2e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x11, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0x82, 0xb5, 0x18, 0x23, 0x32, 0x39, 0x33, 0x78, 0x31, 0x36, 0x35, 0x70, 0x78, 0x2e, 0x20, 0x20,
	0x55, 0x73, 0x65, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x52, 0x10, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x68, 0x6f, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x5f, 0x0a, 0x0f, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x53, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x69, 0x7a,
	0x65, 0x20, 0x61, 0x73, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78,
	0x2e, 0x20, 0x20, 0x55, 0x73, 0x65, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x77, 0x0a, 0x0f, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x4f, 0x82, 0xb5, 0x18, 0x4b, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72,
	0x20, 0x49, 0x44, 0x2e, 0x20, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x2c, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x27,
	0x73, 0x20, 0x49, 0x44, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x1a, 0x9b, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x65, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0x82, 0xb5,
	0x18, 0x09, 0x45, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x09, 0x65, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x73, 0x1a, 0xd7, 0x01, 0x0a, 0x0b, 0x46, 0x72, 0x65, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x65, 0x6e,
	0x64, 0x12, 0x40, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x21, 0x82, 0xb5, 0x18, 0x1d, 0x57, 0x68, 0x65, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x66, 0x72, 0x65, 0x65, 0x20, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64,
	0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1f, 0x82, 0xb5, 0x18, 0x1b, 0x57, 0x68, 0x65, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x66, 0x72, 0x65, 0x65, 0x20, 0x77, 0x65, 0x65, 0x6b, 0x65, 0x6e, 0x64,
	0x20, 0x65, 0x6e, 0x64, 0x73, 0x2e, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x4a, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x82,
	0xb5, 0x18, 0x32, 0x54, 0x65, 0x78, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x20,
	0x61, 0x73, 0x20, 0x61, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x72, 0x65, 0x65, 0x20, 0x77, 0x65, 0x65,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xd8, 0x04, 0x0a, 0x0f,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x82,
	0xb5, 0x18, 0x13, 0x27, 0x65, 0x73, 0x72, 0x62, 0x27, 0x2c, 0x20, 0x27, 0x70, 0x65, 0x67, 0x69,
	0x27, 0x2c, 0x20, 0x2e, 0x2e, 0x2e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x82, 0xb5,
	0x18, 0x21, 0x27, 0x74, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x65, 0x65, 0x6e, 0x2c, 0x20,
	0x27, 0x6d, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20,
	0x2e, 0x2e, 0x2e, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x6b, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x49, 0x82, 0xb5, 0x18, 0x45, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x6c, 0x69, 0x6b,
	0x65, 0x20, 0x27, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x56, 0x69, 0x6f, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x27, 0x2c, 0x20, 0x27, 0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x20, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x27, 0x2c, 0x2e, 0x2e, 0x2e, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x82, 0xb5, 0x18, 0x0d, 0x45, 0x53, 0x52, 0x42,
	0x2d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5e,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x3b, 0x82, 0xb5, 0x18, 0x37, 0x41, 0x67, 0x65, 0x20, 0x69, 0x6e,
	0x20, 0x79, 0x65, 0x61, 0x72, 0x73, 0x2e, 0x20, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x67, 0x65, 0x20, 0x67, 0x61, 0x74,
	0x65, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x67, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x41, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65,
	0x12, 0x46, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x29, 0x82, 0xb5, 0x18, 0x25, 0x41, 0x6e, 0x20, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x5c, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39,
	0x82, 0xb5, 0x18, 0x35, 0x55, 0x52, 0x4c, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6c,
	0x69, 0x6e, 0x6b, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x4d, 0x0a, 0x1e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x76, 0x0a, 0x27, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x09,
	0x65, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x02, 0x2d, 0x31, 0x42, 0x0d, 0x82, 0xb5, 0x18, 0x09, 0x45, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x52, 0x09, 0x65, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xf2, 0x03,
	0x0a, 0x28, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x1a, 0xf1,
	0x02, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x45, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b,
	0x82, 0xb5, 0x18, 0x17, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x5f, 0x43, 0x44, 0x4e, 0x5f, 0x55, 0x52, 0x4c, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x7b, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x55, 0x82,
	0xb5, 0x18, 0x51, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x6c,
	0x69, 0x6e, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6c,
	0x6c, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x2e, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x22, 0xcb, 0x02, 0x0a, 0x22, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x44, 0x42, 0x2b, 0x82, 0xb5, 0x18, 0x27, 0x41, 0x70, 0x70, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x77, 0x65, 0x20, 0x77, 0x61, 0x6e,
	0x74, 0x20, 0x44, 0x4c, 0x43, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x12, 0x64, 0x0a, 0x07, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x4a, 0x82, 0xb5, 0x18,
	0x46, 0x49, 0x66, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2c, 0x20, 0x77,
	0x65, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x44, 0x4c, 0x43, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61,
	0x70, 0x70, 0x73, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64,
	0x22, 0xc0, 0x04, 0x0a, 0x23, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x64, 0x6c, 0x63, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x43, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43,
	0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x4c, 0x43, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x64, 0x6c, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x4f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69,
	0x6d, 0x65, 0x1a, 0xcb, 0x01, 0x0a, 0x07, 0x44, 0x4c, 0x43, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6f, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65,
	0x1a, 0xb0, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72,
	0x41, 0x70, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x24, 0x82, 0xb5, 0x18,
	0x20, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x25, 0x82, 0xb5, 0x18, 0x21, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x26, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70,
	0x70, 0x73, 0x53, 0x6f, 0x6c, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0xc5, 0x01, 0x0a, 0x27, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70,
	0x73, 0x53, 0x6f, 0x6c, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x09, 0x64, 0x6c, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x5f, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x53, 0x6f,
	0x6c, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x4c, 0x43, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x08, 0x64, 0x6c, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x1a, 0x4b, 0x0a,
	0x07, 0x44, 0x4c, 0x43, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x6c, 0x63, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x09, 0x64, 0x6c, 0x63, 0x41, 0x70, 0x70, 0x69, 0x64, 0x73, 0x22, 0x74, 0x0a, 0x25, 0x43, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69,
	0x64, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x92, 0x06, 0x0a, 0x17, 0x43, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x68,
	0x69, 0x67, 0x68, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x69, 0x67, 0x68, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x22, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa0, 0x01, 0x0a, 0x1c,
	0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x5e, 0x82, 0xb5, 0x18, 0x5a, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x20, 0x64,
	0x61, 0x74, 0x65, 0x20, 0x77, 0x65, 0x20, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x20, 0x79, 0x6f, 0x75,
	0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x69, 0x66, 0x20, 0x79, 0x6f, 0x75,
	0x20, 0x6f, 0x72, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x79, 0x6f, 0x75,
	0x72, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x1a, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53,
	0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x82, 0xb5, 0x18, 0x22, 0x48,
	0x6f, 0x77, 0x20, 0x77, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61,
	0x78, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6d,
	0x61, 0x78, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x22, 0x5c, 0x0a, 0x26, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x43, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2a, 0x80, 0x02, 0x0a, 0x0e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x41, 0x70, 0x70, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x74, 0x78, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x54, 0x61, 0x67, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x10, 0x06, 0x2a, 0xab, 0x03, 0x0a, 0x0d, 0x45, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x65,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x6d, 0x6f, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4d, 0x6f, 0x64, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x44, 0x4c, 0x43, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x07, 0x12, 0x1a, 0x0a,
	0x16, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x10, 0x0b, 0x12,
	0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x42, 0x65, 0x74, 0x61, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x6f, 0x6f,
	0x6c, 0x10, 0x0d, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41,
	0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69,
	0x6e, 0x67, 0x10, 0x0e, 0x2a, 0x85, 0x03, 0x0a, 0x10, 0x45, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x4f, 0x76, 0x65,
	0x72, 0x77, 0x68, 0x65, 0x6c, 0x6d, 0x69, 0x6e, 0x67, 0x6c, 0x79, 0x4e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x56, 0x65, 0x72, 0x79,
	0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f,
	0x45, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x6b,
	0x5f, 0x45, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x4d, 0x6f, 0x73, 0x74, 0x6c, 0x79, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x10, 0x05,
	0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x4d, 0x6f, 0x73, 0x74, 0x6c, 0x79, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x56,
	0x65, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x10, 0x08, 0x12, 0x2d, 0x0a,
	0x29, 0x6b, 0x5f, 0x45, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x68, 0x65, 0x6c, 0x6d, 0x69, 0x6e, 0x67,
	0x6c, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x10, 0x09, 0x2a, 0xf4, 0x01, 0x0a,
	0x12, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x03, 0x12,
	0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x47, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x41,
	0x58, 0x10, 0x05, 0x32, 0xac, 0x07, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x1e, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47,
	0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47,
	0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2c, 0x82, 0xb5, 0x18, 0x28, 0x47, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0xf8,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x82, 0xb5, 0x18,
	0x87, 0x01, 0x47, 0x65, 0x74, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x20, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x20, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61,
	0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x41,
	0x50, 0x49, 0x20, 0x28, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2c, 0x20, 0x77,
	0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x50, 0x48, 0x50, 0x29, 0x12, 0x93, 0x01, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x12, 0x23, 0x2e, 0x43, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x4c,
	0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f,
	0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xb5, 0x18, 0x33, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x44, 0x4c, 0x43, 0x20, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x6f, 0x77, 0x6e,
	0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x12,
	0x9b, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70,
	0x73, 0x53, 0x6f, 0x6c, 0x72, 0x12, 0x27, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70,
	0x70, 0x73, 0x53, 0x6f, 0x6c, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65,
	0x74, 0x44, 0x4c, 0x43, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x73, 0x53, 0x6f, 0x6c, 0x72, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xb5, 0x18, 0x2f, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x44, 0x4c, 0x43, 0x20, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2e, 0x12, 0xca, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x26, 0x2e, 0x43, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x5f, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x43, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x65, 0x82, 0xb5, 0x18, 0x61, 0x47, 0x65, 0x74, 0x20, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x20, 0x28, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x20, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x20, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x29, 0x1a, 0x26, 0x82, 0xb5, 0x18, 0x22,
	0x41, 0x50, 0x49, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x44, 0x42, 0x28, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_storebrowse_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_storebrowse_steamclient_proto_rawDescData = file_steammessages_storebrowse_steamclient_proto_rawDesc
)

func file_steammessages_storebrowse_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_storebrowse_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_storebrowse_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_storebrowse_steamclient_proto_rawDescData)
	})
	return file_steammessages_storebrowse_steamclient_proto_rawDescData
}

var file_steammessages_storebrowse_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_steammessages_storebrowse_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_steammessages_storebrowse_steamclient_proto_goTypes = []interface{}{
	(EStoreItemType)(0),                                        // 0: EStoreItemType
	(EStoreAppType)(0),                                         // 1: EStoreAppType
	(EUserReviewScore)(0),                                      // 2: EUserReviewScore
	(EStoreCategoryType)(0),                                    // 3: EStoreCategoryType
	(*StoreItemID)(nil),                                        // 4: StoreItemID
	(*StoreBrowseContext)(nil),                                 // 5: StoreBrowseContext
	(*StoreBrowseItemDataRequest)(nil),                         // 6: StoreBrowseItemDataRequest
	(*CStoreBrowse_GetItems_Request)(nil),                      // 7: CStoreBrowse_GetItems_Request
	(*StoreItem)(nil),                                          // 8: StoreItem
	(*StoreGameRating)(nil),                                    // 9: StoreGameRating
	(*CStoreBrowse_GetItems_Response)(nil),                     // 10: CStoreBrowse_GetItems_Response
	(*CStoreBrowse_GetStoreCategories_Request)(nil),            // 11: CStoreBrowse_GetStoreCategories_Request
	(*CStoreBrowse_GetStoreCategories_Response)(nil),           // 12: CStoreBrowse_GetStoreCategories_Response
	(*CStoreBrowse_GetDLCForApps_Request)(nil),                 // 13: CStoreBrowse_GetDLCForApps_Request
	(*CStoreBrowse_GetDLCForApps_Response)(nil),                // 14: CStoreBrowse_GetDLCForApps_Response
	(*CStoreBrowse_GetDLCForAppsSolr_Request)(nil),             // 15: CStoreBrowse_GetDLCForAppsSolr_Request
	(*CStoreBrowse_GetDLCForAppsSolr_Response)(nil),            // 16: CStoreBrowse_GetDLCForAppsSolr_Response
	(*CStoreBrowse_GetHardwareItems_Request)(nil),              // 17: CStoreBrowse_GetHardwareItems_Request
	(*CHardwarePackageDetails)(nil),                            // 18: CHardwarePackageDetails
	(*CStoreBrowse_GetHardwareItems_Response)(nil),             // 19: CStoreBrowse_GetHardwareItems_Response
	(*StoreItem_RelatedItems)(nil),                             // 20: StoreItem.RelatedItems
	(*StoreItem_IncludedItems)(nil),                            // 21: StoreItem.IncludedItems
	(*StoreItem_Categories)(nil),                               // 22: StoreItem.Categories
	(*StoreItem_Reviews)(nil),                                  // 23: StoreItem.Reviews
	(*StoreItem_BasicInfo)(nil),                                // 24: StoreItem.BasicInfo
	(*StoreItem_Tag)(nil),                                      // 25: StoreItem.Tag
	(*StoreItem_Assets)(nil),                                   // 26: StoreItem.Assets
	(*StoreItem_ReleaseInfo)(nil),                              // 27: StoreItem.ReleaseInfo
	(*StoreItem_Platforms)(nil),                                // 28: StoreItem.Platforms
	(*StoreItem_PurchaseOption)(nil),                           // 29: StoreItem.PurchaseOption
	(*StoreItem_Screenshots)(nil),                              // 30: StoreItem.Screenshots
	(*StoreItem_Trailers)(nil),                                 // 31: StoreItem.Trailers
	(*StoreItem_SupportedLanguage)(nil),                        // 32: StoreItem.SupportedLanguage
	(*StoreItem_FreeWeekend)(nil),                              // 33: StoreItem.FreeWeekend
	(*StoreItem_Reviews_StoreReviewSummary)(nil),               // 34: StoreItem.Reviews.StoreReviewSummary
	(*StoreItem_BasicInfo_CreatorHomeLink)(nil),                // 35: StoreItem.BasicInfo.CreatorHomeLink
	(*StoreItem_Platforms_VRSupport)(nil),                      // 36: StoreItem.Platforms.VRSupport
	(*StoreItem_PurchaseOption_Discount)(nil),                  // 37: StoreItem.PurchaseOption.Discount
	(*StoreItem_Screenshots_Screenshot)(nil),                   // 38: StoreItem.Screenshots.Screenshot
	(*StoreItem_Trailers_VideoSource)(nil),                     // 39: StoreItem.Trailers.VideoSource
	(*StoreItem_Trailers_Trailer)(nil),                         // 40: StoreItem.Trailers.Trailer
	(*CStoreBrowse_GetStoreCategories_Response_Category)(nil),  // 41: CStoreBrowse_GetStoreCategories_Response.Category
	(*CStoreBrowse_GetDLCForApps_Response_DLCData)(nil),        // 42: CStoreBrowse_GetDLCForApps_Response.DLCData
	(*CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp)(nil), // 43: CStoreBrowse_GetDLCForApps_Response.PlaytimeForApp
	(*CStoreBrowse_GetDLCForAppsSolr_Response_DLCList)(nil),    // 44: CStoreBrowse_GetDLCForAppsSolr_Response.DLCList
	(EContentDescriptorID)(0),                                  // 45: EContentDescriptorID
	(*CStorePageFilter)(nil),                                   // 46: CStorePageFilter
	(ESteamDeckCompatibilityCategory)(0),                       // 47: ESteamDeckCompatibilityCategory
}
var file_steammessages_storebrowse_steamclient_proto_depIdxs = []int32{
	6,  // 0: StoreBrowseItemDataRequest.included_item_data_request:type_name -> StoreBrowseItemDataRequest
	4,  // 1: CStoreBrowse_GetItems_Request.ids:type_name -> StoreItemID
	5,  // 2: CStoreBrowse_GetItems_Request.context:type_name -> StoreBrowseContext
	6,  // 3: CStoreBrowse_GetItems_Request.data_request:type_name -> StoreBrowseItemDataRequest
	0,  // 4: StoreItem.item_type:type_name -> EStoreItemType
	1,  // 5: StoreItem.type:type_name -> EStoreAppType
	1,  // 6: StoreItem.included_types:type_name -> EStoreAppType
	20, // 7: StoreItem.related_items:type_name -> StoreItem.RelatedItems
	21, // 8: StoreItem.included_items:type_name -> StoreItem.IncludedItems
	45, // 9: StoreItem.content_descriptorids:type_name -> EContentDescriptorID
	22, // 10: StoreItem.categories:type_name -> StoreItem.Categories
	23, // 11: StoreItem.reviews:type_name -> StoreItem.Reviews
	24, // 12: StoreItem.basic_info:type_name -> StoreItem.BasicInfo
	25, // 13: StoreItem.tags:type_name -> StoreItem.Tag
	26, // 14: StoreItem.assets:type_name -> StoreItem.Assets
	27, // 15: StoreItem.release:type_name -> StoreItem.ReleaseInfo
	28, // 16: StoreItem.platforms:type_name -> StoreItem.Platforms
	9,  // 17: StoreItem.game_rating:type_name -> StoreGameRating
	29, // 18: StoreItem.best_purchase_option:type_name -> StoreItem.PurchaseOption
	29, // 19: StoreItem.purchase_options:type_name -> StoreItem.PurchaseOption
	29, // 20: StoreItem.accessories:type_name -> StoreItem.PurchaseOption
	30, // 21: StoreItem.screenshots:type_name -> StoreItem.Screenshots
	31, // 22: StoreItem.trailers:type_name -> StoreItem.Trailers
	32, // 23: StoreItem.supported_languages:type_name -> StoreItem.SupportedLanguage
	33, // 24: StoreItem.free_weekend:type_name -> StoreItem.FreeWeekend
	8,  // 25: CStoreBrowse_GetItems_Response.store_items:type_name -> StoreItem
	41, // 26: CStoreBrowse_GetStoreCategories_Response.categories:type_name -> CStoreBrowse_GetStoreCategories_Response.Category
	5,  // 27: CStoreBrowse_GetDLCForApps_Request.context:type_name -> StoreBrowseContext
	46, // 28: CStoreBrowse_GetDLCForApps_Request.store_page_filter:type_name -> CStorePageFilter
	4,  // 29: CStoreBrowse_GetDLCForApps_Request.appids:type_name -> StoreItemID
	42, // 30: CStoreBrowse_GetDLCForApps_Response.dlc_data:type_name -> CStoreBrowse_GetDLCForApps_Response.DLCData
	43, // 31: CStoreBrowse_GetDLCForApps_Response.playtime:type_name -> CStoreBrowse_GetDLCForApps_Response.PlaytimeForApp
	5,  // 32: CStoreBrowse_GetDLCForAppsSolr_Request.context:type_name -> StoreBrowseContext
	46, // 33: CStoreBrowse_GetDLCForAppsSolr_Request.store_page_filter:type_name -> CStorePageFilter
	44, // 34: CStoreBrowse_GetDLCForAppsSolr_Response.dlc_lists:type_name -> CStoreBrowse_GetDLCForAppsSolr_Response.DLCList
	5,  // 35: CStoreBrowse_GetHardwareItems_Request.context:type_name -> StoreBrowseContext
	18, // 36: CStoreBrowse_GetHardwareItems_Response.details:type_name -> CHardwarePackageDetails
	8,  // 37: StoreItem.IncludedItems.included_apps:type_name -> StoreItem
	8,  // 38: StoreItem.IncludedItems.included_packages:type_name -> StoreItem
	34, // 39: StoreItem.Reviews.summary_filtered:type_name -> StoreItem.Reviews.StoreReviewSummary
	34, // 40: StoreItem.Reviews.summary_unfiltered:type_name -> StoreItem.Reviews.StoreReviewSummary
	35, // 41: StoreItem.BasicInfo.publishers:type_name -> StoreItem.BasicInfo.CreatorHomeLink
	35, // 42: StoreItem.BasicInfo.developers:type_name -> StoreItem.BasicInfo.CreatorHomeLink
	35, // 43: StoreItem.BasicInfo.franchises:type_name -> StoreItem.BasicInfo.CreatorHomeLink
	36, // 44: StoreItem.Platforms.vr_support:type_name -> StoreItem.Platforms.VRSupport
	47, // 45: StoreItem.Platforms.steam_deck_compat_category:type_name -> ESteamDeckCompatibilityCategory
	37, // 46: StoreItem.PurchaseOption.active_discounts:type_name -> StoreItem.PurchaseOption.Discount
	37, // 47: StoreItem.PurchaseOption.user_active_discounts:type_name -> StoreItem.PurchaseOption.Discount
	37, // 48: StoreItem.PurchaseOption.inactive_discounts:type_name -> StoreItem.PurchaseOption.Discount
	38, // 49: StoreItem.Screenshots.all_ages_screenshots:type_name -> StoreItem.Screenshots.Screenshot
	38, // 50: StoreItem.Screenshots.mature_content_screenshots:type_name -> StoreItem.Screenshots.Screenshot
	40, // 51: StoreItem.Trailers.highlights:type_name -> StoreItem.Trailers.Trailer
	40, // 52: StoreItem.Trailers.other_trailers:type_name -> StoreItem.Trailers.Trailer
	2,  // 53: StoreItem.Reviews.StoreReviewSummary.review_score:type_name -> EUserReviewScore
	39, // 54: StoreItem.Trailers.Trailer.trailer_480p:type_name -> StoreItem.Trailers.VideoSource
	39, // 55: StoreItem.Trailers.Trailer.trailer_max:type_name -> StoreItem.Trailers.VideoSource
	39, // 56: StoreItem.Trailers.Trailer.microtrailer:type_name -> StoreItem.Trailers.VideoSource
	3,  // 57: CStoreBrowse_GetStoreCategories_Response.Category.type:type_name -> EStoreCategoryType
	7,  // 58: StoreBrowse.GetItems:input_type -> CStoreBrowse_GetItems_Request
	11, // 59: StoreBrowse.GetStoreCategories:input_type -> CStoreBrowse_GetStoreCategories_Request
	13, // 60: StoreBrowse.GetDLCForApps:input_type -> CStoreBrowse_GetDLCForApps_Request
	15, // 61: StoreBrowse.GetDLCForAppsSolr:input_type -> CStoreBrowse_GetDLCForAppsSolr_Request
	17, // 62: StoreBrowse.GetHardwareItems:input_type -> CStoreBrowse_GetHardwareItems_Request
	10, // 63: StoreBrowse.GetItems:output_type -> CStoreBrowse_GetItems_Response
	12, // 64: StoreBrowse.GetStoreCategories:output_type -> CStoreBrowse_GetStoreCategories_Response
	14, // 65: StoreBrowse.GetDLCForApps:output_type -> CStoreBrowse_GetDLCForApps_Response
	16, // 66: StoreBrowse.GetDLCForAppsSolr:output_type -> CStoreBrowse_GetDLCForAppsSolr_Response
	19, // 67: StoreBrowse.GetHardwareItems:output_type -> CStoreBrowse_GetHardwareItems_Response
	63, // [63:68] is the sub-list for method output_type
	58, // [58:63] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_steammessages_storebrowse_steamclient_proto_init() }
func file_steammessages_storebrowse_steamclient_proto_init() {
	if File_steammessages_storebrowse_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	file_enums_productinfo_proto_init()
	file_enums_proto_init()
	file_contenthubs_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_storebrowse_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItemID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreBrowseContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreBrowseItemDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStoreBrowse_GetItems_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreGameRating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStoreBrowse_GetItems_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStoreBrowse_GetStoreCategories_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStoreBrowse_GetStoreCategories_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStoreBrowse_GetDLCForApps_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStoreBrowse_GetDLCForApps_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStoreBrowse_GetDLCForAppsSolr_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStoreBrowse_GetDLCForAppsSolr_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStoreBrowse_GetHardwareItems_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHardwarePackageDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStoreBrowse_GetHardwareItems_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_RelatedItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_IncludedItems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_Categories); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_Reviews); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_BasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_Assets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_ReleaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_Platforms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_PurchaseOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_Screenshots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_Trailers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_SupportedLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_FreeWeekend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_Reviews_StoreReviewSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_BasicInfo_CreatorHomeLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_Platforms_VRSupport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_PurchaseOption_Discount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_Screenshots_Screenshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_Trailers_VideoSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreItem_Trailers_Trailer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStoreBrowse_GetStoreCategories_Response_Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStoreBrowse_GetDLCForApps_Response_DLCData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStoreBrowse_GetDLCForApps_Response_PlaytimeForApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_storebrowse_steamclient_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CStoreBrowse_GetDLCForAppsSolr_Response_DLCList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_storebrowse_steamclient_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_storebrowse_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_storebrowse_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_storebrowse_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_storebrowse_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_storebrowse_steamclient_proto = out.File
	file_steammessages_storebrowse_steamclient_proto_rawDesc = nil
	file_steammessages_storebrowse_steamclient_proto_goTypes = nil
	file_steammessages_storebrowse_steamclient_proto_depIdxs = nil
}
