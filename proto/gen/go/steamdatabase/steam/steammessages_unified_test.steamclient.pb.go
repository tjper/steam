// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: steammessages_unified_test.steamclient.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CMsgTest_MessageToClient_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SomeText *string `protobuf:"bytes,1,opt,name=some_text,json=someText" json:"some_text,omitempty"`
}

func (x *CMsgTest_MessageToClient_Request) Reset() {
	*x = CMsgTest_MessageToClient_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_unified_test_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTest_MessageToClient_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTest_MessageToClient_Request) ProtoMessage() {}

func (x *CMsgTest_MessageToClient_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_unified_test_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTest_MessageToClient_Request.ProtoReflect.Descriptor instead.
func (*CMsgTest_MessageToClient_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_unified_test_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgTest_MessageToClient_Request) GetSomeText() string {
	if x != nil && x.SomeText != nil {
		return *x.SomeText
	}
	return ""
}

type CMsgTest_MessageToClient_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SomeText *string `protobuf:"bytes,1,opt,name=some_text,json=someText" json:"some_text,omitempty"`
}

func (x *CMsgTest_MessageToClient_Response) Reset() {
	*x = CMsgTest_MessageToClient_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_unified_test_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTest_MessageToClient_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTest_MessageToClient_Response) ProtoMessage() {}

func (x *CMsgTest_MessageToClient_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_unified_test_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTest_MessageToClient_Response.ProtoReflect.Descriptor instead.
func (*CMsgTest_MessageToClient_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_unified_test_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgTest_MessageToClient_Response) GetSomeText() string {
	if x != nil && x.SomeText != nil {
		return *x.SomeText
	}
	return ""
}

type CMsgTest_NotifyClient_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SomeText *string `protobuf:"bytes,1,opt,name=some_text,json=someText" json:"some_text,omitempty"`
}

func (x *CMsgTest_NotifyClient_Notification) Reset() {
	*x = CMsgTest_NotifyClient_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_unified_test_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTest_NotifyClient_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTest_NotifyClient_Notification) ProtoMessage() {}

func (x *CMsgTest_NotifyClient_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_unified_test_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTest_NotifyClient_Notification.ProtoReflect.Descriptor instead.
func (*CMsgTest_NotifyClient_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_unified_test_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgTest_NotifyClient_Notification) GetSomeText() string {
	if x != nil && x.SomeText != nil {
		return *x.SomeText
	}
	return ""
}

type CMsgTest_MessageToServer_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SomeText *string `protobuf:"bytes,1,opt,name=some_text,json=someText" json:"some_text,omitempty"`
}

func (x *CMsgTest_MessageToServer_Request) Reset() {
	*x = CMsgTest_MessageToServer_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_unified_test_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTest_MessageToServer_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTest_MessageToServer_Request) ProtoMessage() {}

func (x *CMsgTest_MessageToServer_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_unified_test_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTest_MessageToServer_Request.ProtoReflect.Descriptor instead.
func (*CMsgTest_MessageToServer_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_unified_test_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgTest_MessageToServer_Request) GetSomeText() string {
	if x != nil && x.SomeText != nil {
		return *x.SomeText
	}
	return ""
}

type CMsgTest_MessageToServer_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SomeText *string `protobuf:"bytes,1,opt,name=some_text,json=someText" json:"some_text,omitempty"`
}

func (x *CMsgTest_MessageToServer_Response) Reset() {
	*x = CMsgTest_MessageToServer_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_unified_test_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTest_MessageToServer_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTest_MessageToServer_Response) ProtoMessage() {}

func (x *CMsgTest_MessageToServer_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_unified_test_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTest_MessageToServer_Response.ProtoReflect.Descriptor instead.
func (*CMsgTest_MessageToServer_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_unified_test_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgTest_MessageToServer_Response) GetSomeText() string {
	if x != nil && x.SomeText != nil {
		return *x.SomeText
	}
	return ""
}

type CMsgTest_NotifyServer_Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SomeText *string `protobuf:"bytes,1,opt,name=some_text,json=someText" json:"some_text,omitempty"`
}

func (x *CMsgTest_NotifyServer_Notification) Reset() {
	*x = CMsgTest_NotifyServer_Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_unified_test_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTest_NotifyServer_Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTest_NotifyServer_Notification) ProtoMessage() {}

func (x *CMsgTest_NotifyServer_Notification) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_unified_test_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTest_NotifyServer_Notification.ProtoReflect.Descriptor instead.
func (*CMsgTest_NotifyServer_Notification) Descriptor() ([]byte, []int) {
	return file_steammessages_unified_test_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgTest_NotifyServer_Notification) GetSomeText() string {
	if x != nil && x.SomeText != nil {
		return *x.SomeText
	}
	return ""
}

type CMsgTest_NoBody_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CMsgTest_NoBody_Request) Reset() {
	*x = CMsgTest_NoBody_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_unified_test_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTest_NoBody_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTest_NoBody_Request) ProtoMessage() {}

func (x *CMsgTest_NoBody_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_unified_test_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTest_NoBody_Request.ProtoReflect.Descriptor instead.
func (*CMsgTest_NoBody_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_unified_test_steamclient_proto_rawDescGZIP(), []int{6}
}

type CMsgTest_CallClient_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Testvalue *int32 `protobuf:"varint,1,opt,name=testvalue" json:"testvalue,omitempty"`
}

func (x *CMsgTest_CallClient_Response) Reset() {
	*x = CMsgTest_CallClient_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_unified_test_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgTest_CallClient_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgTest_CallClient_Response) ProtoMessage() {}

func (x *CMsgTest_CallClient_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_unified_test_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgTest_CallClient_Response.ProtoReflect.Descriptor instead.
func (*CMsgTest_CallClient_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_unified_test_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgTest_CallClient_Response) GetTestvalue() int32 {
	if x != nil && x.Testvalue != nil {
		return *x.Testvalue
	}
	return 0
}

var File_steammessages_unified_test_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_unified_test_steamclient_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65,
	0x73, 0x74, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x73, 0x6f,
	0x6d, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x82,
	0xb5, 0x18, 0x0c, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x08, 0x73, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x52, 0x0a, 0x21, 0x43, 0x4d, 0x73,
	0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d,
	0x0a, 0x09, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x53, 0x0a,
	0x22, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x09, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x53, 0x6f, 0x6d, 0x65,
	0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x22, 0x51, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x53,
	0x6f, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x08, 0x73, 0x6f, 0x6d,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x52, 0x0a, 0x21, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x73,
	0x74, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x73, 0x6f,
	0x6d, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x82,
	0xb5, 0x18, 0x0c, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x08, 0x73, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x53, 0x0a, 0x22, 0x43, 0x4d, 0x73,
	0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x09, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0x82, 0xb5, 0x18, 0x0c, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0x19,
	0x0a, 0x17, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4e, 0x6f, 0x42, 0x6f, 0x64,
	0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3c, 0x0a, 0x1c, 0x43, 0x4d, 0x73,
	0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x73,
	0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x65,
	0x73, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x83, 0x02, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x0f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xb5, 0x18, 0x23, 0x53, 0x6f, 0x6d, 0x65,
	0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2d, 0x20, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x12,
	0x66, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x24, 0x82, 0xb5, 0x18, 0x20, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2d, 0x20, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x1a, 0x04, 0xc0, 0xb5, 0x18, 0x02, 0x32, 0x82, 0x02,
	0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x27, 0x82, 0xb5, 0x18, 0x23, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2d, 0x20, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x12, 0x66, 0x0a, 0x0c, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x0b, 0x2e, 0x4e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xb5,
	0x18, 0x20, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x2d, 0x20, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x32, 0x5e, 0x0a, 0x15, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x43,
	0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x54, 0x65, 0x73, 0x74, 0x5f, 0x4e, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x54, 0x65, 0x73, 0x74, 0x5f, 0x43,
	0x61, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x44, 0x42, 0x28, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x55, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_unified_test_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_unified_test_steamclient_proto_rawDescData = file_steammessages_unified_test_steamclient_proto_rawDesc
)

func file_steammessages_unified_test_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_unified_test_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_unified_test_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_unified_test_steamclient_proto_rawDescData)
	})
	return file_steammessages_unified_test_steamclient_proto_rawDescData
}

var file_steammessages_unified_test_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_steammessages_unified_test_steamclient_proto_goTypes = []interface{}{
	(*CMsgTest_MessageToClient_Request)(nil),   // 0: CMsgTest_MessageToClient_Request
	(*CMsgTest_MessageToClient_Response)(nil),  // 1: CMsgTest_MessageToClient_Response
	(*CMsgTest_NotifyClient_Notification)(nil), // 2: CMsgTest_NotifyClient_Notification
	(*CMsgTest_MessageToServer_Request)(nil),   // 3: CMsgTest_MessageToServer_Request
	(*CMsgTest_MessageToServer_Response)(nil),  // 4: CMsgTest_MessageToServer_Response
	(*CMsgTest_NotifyServer_Notification)(nil), // 5: CMsgTest_NotifyServer_Notification
	(*CMsgTest_NoBody_Request)(nil),            // 6: CMsgTest_NoBody_Request
	(*CMsgTest_CallClient_Response)(nil),       // 7: CMsgTest_CallClient_Response
	(*NoResponse)(nil),                         // 8: NoResponse
}
var file_steammessages_unified_test_steamclient_proto_depIdxs = []int32{
	0, // 0: TestSteamClient.MessageToClient:input_type -> CMsgTest_MessageToClient_Request
	2, // 1: TestSteamClient.NotifyClient:input_type -> CMsgTest_NotifyClient_Notification
	3, // 2: TestServerFromClient.MessageToServer:input_type -> CMsgTest_MessageToServer_Request
	5, // 3: TestServerFromClient.NotifyServer:input_type -> CMsgTest_NotifyServer_Notification
	6, // 4: TestExternalPrivilege.CallClient:input_type -> CMsgTest_NoBody_Request
	1, // 5: TestSteamClient.MessageToClient:output_type -> CMsgTest_MessageToClient_Response
	8, // 6: TestSteamClient.NotifyClient:output_type -> NoResponse
	4, // 7: TestServerFromClient.MessageToServer:output_type -> CMsgTest_MessageToServer_Response
	8, // 8: TestServerFromClient.NotifyServer:output_type -> NoResponse
	7, // 9: TestExternalPrivilege.CallClient:output_type -> CMsgTest_CallClient_Response
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_steammessages_unified_test_steamclient_proto_init() }
func file_steammessages_unified_test_steamclient_proto_init() {
	if File_steammessages_unified_test_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_unified_test_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTest_MessageToClient_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_unified_test_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTest_MessageToClient_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_unified_test_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTest_NotifyClient_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_unified_test_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTest_MessageToServer_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_unified_test_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTest_MessageToServer_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_unified_test_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTest_NotifyServer_Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_unified_test_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTest_NoBody_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_unified_test_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgTest_CallClient_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_unified_test_steamclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_steammessages_unified_test_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_unified_test_steamclient_proto_depIdxs,
		MessageInfos:      file_steammessages_unified_test_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_unified_test_steamclient_proto = out.File
	file_steammessages_unified_test_steamclient_proto_rawDesc = nil
	file_steammessages_unified_test_steamclient_proto_goTypes = nil
	file_steammessages_unified_test_steamclient_proto_depIdxs = nil
}
