// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: steammessages_econ.steamclient.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CEcon_GetInventoryItemsWithDescriptions_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid                   *uint64                                                        `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Appid                     *uint32                                                        `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Contextid                 *uint64                                                        `protobuf:"varint,3,opt,name=contextid" json:"contextid,omitempty"`
	GetDescriptions           *bool                                                          `protobuf:"varint,4,opt,name=get_descriptions,json=getDescriptions" json:"get_descriptions,omitempty"`
	ForTradeOfferVerification *bool                                                          `protobuf:"varint,10,opt,name=for_trade_offer_verification,json=forTradeOfferVerification" json:"for_trade_offer_verification,omitempty"`
	Language                  *string                                                        `protobuf:"bytes,5,opt,name=language" json:"language,omitempty"`
	Filters                   *CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions `protobuf:"bytes,6,opt,name=filters" json:"filters,omitempty"`
	StartAssetid              *uint64                                                        `protobuf:"varint,8,opt,name=start_assetid,json=startAssetid" json:"start_assetid,omitempty"`
	Count                     *int32                                                         `protobuf:"varint,9,opt,name=count" json:"count,omitempty"`
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request) Reset() {
	*x = CEcon_GetInventoryItemsWithDescriptions_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_econ_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEcon_GetInventoryItemsWithDescriptions_Request) ProtoMessage() {}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_econ_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEcon_GetInventoryItemsWithDescriptions_Request.ProtoReflect.Descriptor instead.
func (*CEcon_GetInventoryItemsWithDescriptions_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_econ_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request) GetContextid() uint64 {
	if x != nil && x.Contextid != nil {
		return *x.Contextid
	}
	return 0
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request) GetGetDescriptions() bool {
	if x != nil && x.GetDescriptions != nil {
		return *x.GetDescriptions
	}
	return false
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request) GetForTradeOfferVerification() bool {
	if x != nil && x.ForTradeOfferVerification != nil {
		return *x.ForTradeOfferVerification
	}
	return false
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request) GetFilters() *CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request) GetStartAssetid() uint64 {
	if x != nil && x.StartAssetid != nil {
		return *x.StartAssetid
	}
	return 0
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type CEcon_Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Contextid  *uint64 `protobuf:"varint,2,opt,name=contextid" json:"contextid,omitempty"`
	Assetid    *uint64 `protobuf:"varint,3,opt,name=assetid" json:"assetid,omitempty"`
	Classid    *uint64 `protobuf:"varint,4,opt,name=classid" json:"classid,omitempty"`
	Instanceid *uint64 `protobuf:"varint,5,opt,name=instanceid" json:"instanceid,omitempty"`
	Currencyid *uint32 `protobuf:"varint,6,opt,name=currencyid" json:"currencyid,omitempty"`
	Amount     *int64  `protobuf:"varint,7,opt,name=amount" json:"amount,omitempty"`
	Missing    *bool   `protobuf:"varint,8,opt,name=missing" json:"missing,omitempty"`
	EstUsd     *int64  `protobuf:"varint,9,opt,name=est_usd,json=estUsd" json:"est_usd,omitempty"`
}

func (x *CEcon_Asset) Reset() {
	*x = CEcon_Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_econ_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEcon_Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEcon_Asset) ProtoMessage() {}

func (x *CEcon_Asset) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_econ_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEcon_Asset.ProtoReflect.Descriptor instead.
func (*CEcon_Asset) Descriptor() ([]byte, []int) {
	return file_steammessages_econ_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CEcon_Asset) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CEcon_Asset) GetContextid() uint64 {
	if x != nil && x.Contextid != nil {
		return *x.Contextid
	}
	return 0
}

func (x *CEcon_Asset) GetAssetid() uint64 {
	if x != nil && x.Assetid != nil {
		return *x.Assetid
	}
	return 0
}

func (x *CEcon_Asset) GetClassid() uint64 {
	if x != nil && x.Classid != nil {
		return *x.Classid
	}
	return 0
}

func (x *CEcon_Asset) GetInstanceid() uint64 {
	if x != nil && x.Instanceid != nil {
		return *x.Instanceid
	}
	return 0
}

func (x *CEcon_Asset) GetCurrencyid() uint32 {
	if x != nil && x.Currencyid != nil {
		return *x.Currencyid
	}
	return 0
}

func (x *CEcon_Asset) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *CEcon_Asset) GetMissing() bool {
	if x != nil && x.Missing != nil {
		return *x.Missing
	}
	return false
}

func (x *CEcon_Asset) GetEstUsd() int64 {
	if x != nil && x.EstUsd != nil {
		return *x.EstUsd
	}
	return 0
}

type CEconItem_DescriptionLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Color *string `protobuf:"bytes,3,opt,name=color" json:"color,omitempty"`
	Label *string `protobuf:"bytes,4,opt,name=label" json:"label,omitempty"`
}

func (x *CEconItem_DescriptionLine) Reset() {
	*x = CEconItem_DescriptionLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_econ_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEconItem_DescriptionLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEconItem_DescriptionLine) ProtoMessage() {}

func (x *CEconItem_DescriptionLine) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_econ_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEconItem_DescriptionLine.ProtoReflect.Descriptor instead.
func (*CEconItem_DescriptionLine) Descriptor() ([]byte, []int) {
	return file_steammessages_econ_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CEconItem_DescriptionLine) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *CEconItem_DescriptionLine) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *CEconItem_DescriptionLine) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *CEconItem_DescriptionLine) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

type CEconItem_Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Link *string `protobuf:"bytes,1,opt,name=link" json:"link,omitempty"`
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *CEconItem_Action) Reset() {
	*x = CEconItem_Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_econ_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEconItem_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEconItem_Action) ProtoMessage() {}

func (x *CEconItem_Action) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_econ_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEconItem_Action.ProtoReflect.Descriptor instead.
func (*CEconItem_Action) Descriptor() ([]byte, []int) {
	return file_steammessages_econ_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CEconItem_Action) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *CEconItem_Action) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CEconItem_Description struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid                        *int32                       `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Classid                      *uint64                      `protobuf:"varint,2,opt,name=classid" json:"classid,omitempty"`
	Instanceid                   *uint64                      `protobuf:"varint,3,opt,name=instanceid" json:"instanceid,omitempty"`
	Currency                     *bool                        `protobuf:"varint,4,opt,name=currency" json:"currency,omitempty"`
	BackgroundColor              *string                      `protobuf:"bytes,5,opt,name=background_color,json=backgroundColor" json:"background_color,omitempty"`
	IconUrl                      *string                      `protobuf:"bytes,6,opt,name=icon_url,json=iconUrl" json:"icon_url,omitempty"`
	IconUrlLarge                 *string                      `protobuf:"bytes,7,opt,name=icon_url_large,json=iconUrlLarge" json:"icon_url_large,omitempty"`
	Descriptions                 []*CEconItem_DescriptionLine `protobuf:"bytes,8,rep,name=descriptions" json:"descriptions,omitempty"`
	Tradable                     *bool                        `protobuf:"varint,9,opt,name=tradable" json:"tradable,omitempty"`
	Actions                      []*CEconItem_Action          `protobuf:"bytes,10,rep,name=actions" json:"actions,omitempty"`
	OwnerDescriptions            []*CEconItem_DescriptionLine `protobuf:"bytes,11,rep,name=owner_descriptions,json=ownerDescriptions" json:"owner_descriptions,omitempty"`
	OwnerActions                 []*CEconItem_Action          `protobuf:"bytes,12,rep,name=owner_actions,json=ownerActions" json:"owner_actions,omitempty"`
	Fraudwarnings                []string                     `protobuf:"bytes,13,rep,name=fraudwarnings" json:"fraudwarnings,omitempty"`
	Name                         *string                      `protobuf:"bytes,14,opt,name=name" json:"name,omitempty"`
	NameColor                    *string                      `protobuf:"bytes,15,opt,name=name_color,json=nameColor" json:"name_color,omitempty"`
	Type                         *string                      `protobuf:"bytes,16,opt,name=type" json:"type,omitempty"`
	MarketName                   *string                      `protobuf:"bytes,17,opt,name=market_name,json=marketName" json:"market_name,omitempty"`
	MarketHashName               *string                      `protobuf:"bytes,18,opt,name=market_hash_name,json=marketHashName" json:"market_hash_name,omitempty"`
	MarketFee                    *string                      `protobuf:"bytes,19,opt,name=market_fee,json=marketFee" json:"market_fee,omitempty"`
	MarketFeeApp                 *int32                       `protobuf:"varint,28,opt,name=market_fee_app,json=marketFeeApp" json:"market_fee_app,omitempty"`
	ContainedItem                *CEconItem_Description       `protobuf:"bytes,20,opt,name=contained_item,json=containedItem" json:"contained_item,omitempty"`
	MarketActions                []*CEconItem_Action          `protobuf:"bytes,21,rep,name=market_actions,json=marketActions" json:"market_actions,omitempty"`
	Commodity                    *bool                        `protobuf:"varint,22,opt,name=commodity" json:"commodity,omitempty"`
	MarketTradableRestriction    *int32                       `protobuf:"varint,23,opt,name=market_tradable_restriction,json=marketTradableRestriction" json:"market_tradable_restriction,omitempty"`
	MarketMarketableRestriction  *int32                       `protobuf:"varint,24,opt,name=market_marketable_restriction,json=marketMarketableRestriction" json:"market_marketable_restriction,omitempty"`
	Marketable                   *bool                        `protobuf:"varint,25,opt,name=marketable" json:"marketable,omitempty"`
	Tags                         []*CEconItem_Tag             `protobuf:"bytes,26,rep,name=tags" json:"tags,omitempty"`
	ItemExpiration               *string                      `protobuf:"bytes,27,opt,name=item_expiration,json=itemExpiration" json:"item_expiration,omitempty"`
	MarketBuyCountryRestriction  *string                      `protobuf:"bytes,30,opt,name=market_buy_country_restriction,json=marketBuyCountryRestriction" json:"market_buy_country_restriction,omitempty"`
	MarketSellCountryRestriction *string                      `protobuf:"bytes,31,opt,name=market_sell_country_restriction,json=marketSellCountryRestriction" json:"market_sell_country_restriction,omitempty"`
}

func (x *CEconItem_Description) Reset() {
	*x = CEconItem_Description{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_econ_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEconItem_Description) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEconItem_Description) ProtoMessage() {}

func (x *CEconItem_Description) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_econ_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEconItem_Description.ProtoReflect.Descriptor instead.
func (*CEconItem_Description) Descriptor() ([]byte, []int) {
	return file_steammessages_econ_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CEconItem_Description) GetAppid() int32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CEconItem_Description) GetClassid() uint64 {
	if x != nil && x.Classid != nil {
		return *x.Classid
	}
	return 0
}

func (x *CEconItem_Description) GetInstanceid() uint64 {
	if x != nil && x.Instanceid != nil {
		return *x.Instanceid
	}
	return 0
}

func (x *CEconItem_Description) GetCurrency() bool {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return false
}

func (x *CEconItem_Description) GetBackgroundColor() string {
	if x != nil && x.BackgroundColor != nil {
		return *x.BackgroundColor
	}
	return ""
}

func (x *CEconItem_Description) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *CEconItem_Description) GetIconUrlLarge() string {
	if x != nil && x.IconUrlLarge != nil {
		return *x.IconUrlLarge
	}
	return ""
}

func (x *CEconItem_Description) GetDescriptions() []*CEconItem_DescriptionLine {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *CEconItem_Description) GetTradable() bool {
	if x != nil && x.Tradable != nil {
		return *x.Tradable
	}
	return false
}

func (x *CEconItem_Description) GetActions() []*CEconItem_Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CEconItem_Description) GetOwnerDescriptions() []*CEconItem_DescriptionLine {
	if x != nil {
		return x.OwnerDescriptions
	}
	return nil
}

func (x *CEconItem_Description) GetOwnerActions() []*CEconItem_Action {
	if x != nil {
		return x.OwnerActions
	}
	return nil
}

func (x *CEconItem_Description) GetFraudwarnings() []string {
	if x != nil {
		return x.Fraudwarnings
	}
	return nil
}

func (x *CEconItem_Description) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CEconItem_Description) GetNameColor() string {
	if x != nil && x.NameColor != nil {
		return *x.NameColor
	}
	return ""
}

func (x *CEconItem_Description) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *CEconItem_Description) GetMarketName() string {
	if x != nil && x.MarketName != nil {
		return *x.MarketName
	}
	return ""
}

func (x *CEconItem_Description) GetMarketHashName() string {
	if x != nil && x.MarketHashName != nil {
		return *x.MarketHashName
	}
	return ""
}

func (x *CEconItem_Description) GetMarketFee() string {
	if x != nil && x.MarketFee != nil {
		return *x.MarketFee
	}
	return ""
}

func (x *CEconItem_Description) GetMarketFeeApp() int32 {
	if x != nil && x.MarketFeeApp != nil {
		return *x.MarketFeeApp
	}
	return 0
}

func (x *CEconItem_Description) GetContainedItem() *CEconItem_Description {
	if x != nil {
		return x.ContainedItem
	}
	return nil
}

func (x *CEconItem_Description) GetMarketActions() []*CEconItem_Action {
	if x != nil {
		return x.MarketActions
	}
	return nil
}

func (x *CEconItem_Description) GetCommodity() bool {
	if x != nil && x.Commodity != nil {
		return *x.Commodity
	}
	return false
}

func (x *CEconItem_Description) GetMarketTradableRestriction() int32 {
	if x != nil && x.MarketTradableRestriction != nil {
		return *x.MarketTradableRestriction
	}
	return 0
}

func (x *CEconItem_Description) GetMarketMarketableRestriction() int32 {
	if x != nil && x.MarketMarketableRestriction != nil {
		return *x.MarketMarketableRestriction
	}
	return 0
}

func (x *CEconItem_Description) GetMarketable() bool {
	if x != nil && x.Marketable != nil {
		return *x.Marketable
	}
	return false
}

func (x *CEconItem_Description) GetTags() []*CEconItem_Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CEconItem_Description) GetItemExpiration() string {
	if x != nil && x.ItemExpiration != nil {
		return *x.ItemExpiration
	}
	return ""
}

func (x *CEconItem_Description) GetMarketBuyCountryRestriction() string {
	if x != nil && x.MarketBuyCountryRestriction != nil {
		return *x.MarketBuyCountryRestriction
	}
	return ""
}

func (x *CEconItem_Description) GetMarketSellCountryRestriction() string {
	if x != nil && x.MarketSellCountryRestriction != nil {
		return *x.MarketSellCountryRestriction
	}
	return ""
}

type CEconItem_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid                 *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Category              *string `protobuf:"bytes,2,opt,name=category" json:"category,omitempty"`
	InternalName          *string `protobuf:"bytes,3,opt,name=internal_name,json=internalName" json:"internal_name,omitempty"`
	LocalizedCategoryName *string `protobuf:"bytes,4,opt,name=localized_category_name,json=localizedCategoryName" json:"localized_category_name,omitempty"`
	LocalizedTagName      *string `protobuf:"bytes,5,opt,name=localized_tag_name,json=localizedTagName" json:"localized_tag_name,omitempty"`
	Color                 *string `protobuf:"bytes,6,opt,name=color" json:"color,omitempty"`
}

func (x *CEconItem_Tag) Reset() {
	*x = CEconItem_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_econ_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEconItem_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEconItem_Tag) ProtoMessage() {}

func (x *CEconItem_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_econ_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEconItem_Tag.ProtoReflect.Descriptor instead.
func (*CEconItem_Tag) Descriptor() ([]byte, []int) {
	return file_steammessages_econ_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CEconItem_Tag) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CEconItem_Tag) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *CEconItem_Tag) GetInternalName() string {
	if x != nil && x.InternalName != nil {
		return *x.InternalName
	}
	return ""
}

func (x *CEconItem_Tag) GetLocalizedCategoryName() string {
	if x != nil && x.LocalizedCategoryName != nil {
		return *x.LocalizedCategoryName
	}
	return ""
}

func (x *CEconItem_Tag) GetLocalizedTagName() string {
	if x != nil && x.LocalizedTagName != nil {
		return *x.LocalizedTagName
	}
	return ""
}

func (x *CEconItem_Tag) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

type CEcon_GetInventoryItemsWithDescriptions_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets              []*CEcon_Asset           `protobuf:"bytes,1,rep,name=assets" json:"assets,omitempty"`
	Descriptions        []*CEconItem_Description `protobuf:"bytes,2,rep,name=descriptions" json:"descriptions,omitempty"`
	MissingAssets       []*CEcon_Asset           `protobuf:"bytes,3,rep,name=missing_assets,json=missingAssets" json:"missing_assets,omitempty"`
	MoreItems           *bool                    `protobuf:"varint,4,opt,name=more_items,json=moreItems" json:"more_items,omitempty"`
	LastAssetid         *uint64                  `protobuf:"varint,5,opt,name=last_assetid,json=lastAssetid" json:"last_assetid,omitempty"`
	TotalInventoryCount *uint32                  `protobuf:"varint,6,opt,name=total_inventory_count,json=totalInventoryCount" json:"total_inventory_count,omitempty"`
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Response) Reset() {
	*x = CEcon_GetInventoryItemsWithDescriptions_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_econ_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEcon_GetInventoryItemsWithDescriptions_Response) ProtoMessage() {}

func (x *CEcon_GetInventoryItemsWithDescriptions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_econ_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEcon_GetInventoryItemsWithDescriptions_Response.ProtoReflect.Descriptor instead.
func (*CEcon_GetInventoryItemsWithDescriptions_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_econ_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Response) GetAssets() []*CEcon_Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Response) GetDescriptions() []*CEconItem_Description {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Response) GetMissingAssets() []*CEcon_Asset {
	if x != nil {
		return x.MissingAssets
	}
	return nil
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Response) GetMoreItems() bool {
	if x != nil && x.MoreItems != nil {
		return *x.MoreItems
	}
	return false
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Response) GetLastAssetid() uint64 {
	if x != nil && x.LastAssetid != nil {
		return *x.LastAssetid
	}
	return 0
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Response) GetTotalInventoryCount() uint32 {
	if x != nil && x.TotalInventoryCount != nil {
		return *x.TotalInventoryCount
	}
	return 0
}

type CEcon_GetTradeOfferAccessToken_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenerateNewToken *bool `protobuf:"varint,1,opt,name=generate_new_token,json=generateNewToken" json:"generate_new_token,omitempty"`
}

func (x *CEcon_GetTradeOfferAccessToken_Request) Reset() {
	*x = CEcon_GetTradeOfferAccessToken_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_econ_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEcon_GetTradeOfferAccessToken_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEcon_GetTradeOfferAccessToken_Request) ProtoMessage() {}

func (x *CEcon_GetTradeOfferAccessToken_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_econ_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEcon_GetTradeOfferAccessToken_Request.ProtoReflect.Descriptor instead.
func (*CEcon_GetTradeOfferAccessToken_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_econ_steamclient_proto_rawDescGZIP(), []int{7}
}

func (x *CEcon_GetTradeOfferAccessToken_Request) GetGenerateNewToken() bool {
	if x != nil && x.GenerateNewToken != nil {
		return *x.GenerateNewToken
	}
	return false
}

type CEcon_GetTradeOfferAccessToken_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeOfferAccessToken *string `protobuf:"bytes,1,opt,name=trade_offer_access_token,json=tradeOfferAccessToken" json:"trade_offer_access_token,omitempty"`
}

func (x *CEcon_GetTradeOfferAccessToken_Response) Reset() {
	*x = CEcon_GetTradeOfferAccessToken_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_econ_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEcon_GetTradeOfferAccessToken_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEcon_GetTradeOfferAccessToken_Response) ProtoMessage() {}

func (x *CEcon_GetTradeOfferAccessToken_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_econ_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEcon_GetTradeOfferAccessToken_Response.ProtoReflect.Descriptor instead.
func (*CEcon_GetTradeOfferAccessToken_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_econ_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CEcon_GetTradeOfferAccessToken_Response) GetTradeOfferAccessToken() string {
	if x != nil && x.TradeOfferAccessToken != nil {
		return *x.TradeOfferAccessToken
	}
	return ""
}

type CEcon_ClientGetItemShopOverlayAuthURL_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnUrl *string `protobuf:"bytes,1,opt,name=return_url,json=returnUrl" json:"return_url,omitempty"`
}

func (x *CEcon_ClientGetItemShopOverlayAuthURL_Request) Reset() {
	*x = CEcon_ClientGetItemShopOverlayAuthURL_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_econ_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEcon_ClientGetItemShopOverlayAuthURL_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEcon_ClientGetItemShopOverlayAuthURL_Request) ProtoMessage() {}

func (x *CEcon_ClientGetItemShopOverlayAuthURL_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_econ_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEcon_ClientGetItemShopOverlayAuthURL_Request.ProtoReflect.Descriptor instead.
func (*CEcon_ClientGetItemShopOverlayAuthURL_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_econ_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CEcon_ClientGetItemShopOverlayAuthURL_Request) GetReturnUrl() string {
	if x != nil && x.ReturnUrl != nil {
		return *x.ReturnUrl
	}
	return ""
}

type CEcon_ClientGetItemShopOverlayAuthURL_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (x *CEcon_ClientGetItemShopOverlayAuthURL_Response) Reset() {
	*x = CEcon_ClientGetItemShopOverlayAuthURL_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_econ_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEcon_ClientGetItemShopOverlayAuthURL_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEcon_ClientGetItemShopOverlayAuthURL_Response) ProtoMessage() {}

func (x *CEcon_ClientGetItemShopOverlayAuthURL_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_econ_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEcon_ClientGetItemShopOverlayAuthURL_Response.ProtoReflect.Descriptor instead.
func (*CEcon_ClientGetItemShopOverlayAuthURL_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_econ_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CEcon_ClientGetItemShopOverlayAuthURL_Response) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type CEcon_GetAssetClassInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language *string                                  `protobuf:"bytes,1,opt,name=language" json:"language,omitempty"`
	Appid    *uint32                                  `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	Classes  []*CEcon_GetAssetClassInfo_Request_Class `protobuf:"bytes,3,rep,name=classes" json:"classes,omitempty"`
	HighPri  *bool                                    `protobuf:"varint,4,opt,name=high_pri,json=highPri" json:"high_pri,omitempty"`
}

func (x *CEcon_GetAssetClassInfo_Request) Reset() {
	*x = CEcon_GetAssetClassInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_econ_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEcon_GetAssetClassInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEcon_GetAssetClassInfo_Request) ProtoMessage() {}

func (x *CEcon_GetAssetClassInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_econ_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEcon_GetAssetClassInfo_Request.ProtoReflect.Descriptor instead.
func (*CEcon_GetAssetClassInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_econ_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CEcon_GetAssetClassInfo_Request) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CEcon_GetAssetClassInfo_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CEcon_GetAssetClassInfo_Request) GetClasses() []*CEcon_GetAssetClassInfo_Request_Class {
	if x != nil {
		return x.Classes
	}
	return nil
}

func (x *CEcon_GetAssetClassInfo_Request) GetHighPri() bool {
	if x != nil && x.HighPri != nil {
		return *x.HighPri
	}
	return false
}

type CEcon_GetAssetClassInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptions []*CEconItem_Description `protobuf:"bytes,1,rep,name=descriptions" json:"descriptions,omitempty"`
}

func (x *CEcon_GetAssetClassInfo_Response) Reset() {
	*x = CEcon_GetAssetClassInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_econ_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEcon_GetAssetClassInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEcon_GetAssetClassInfo_Response) ProtoMessage() {}

func (x *CEcon_GetAssetClassInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_econ_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEcon_GetAssetClassInfo_Response.ProtoReflect.Descriptor instead.
func (*CEcon_GetAssetClassInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_econ_steamclient_proto_rawDescGZIP(), []int{12}
}

func (x *CEcon_GetAssetClassInfo_Response) GetDescriptions() []*CEconItem_Description {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

type CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assetids       []uint64 `protobuf:"varint,1,rep,name=assetids" json:"assetids,omitempty"`
	Currencyids    []uint32 `protobuf:"varint,2,rep,name=currencyids" json:"currencyids,omitempty"`
	TradableOnly   *bool    `protobuf:"varint,3,opt,name=tradable_only,json=tradableOnly" json:"tradable_only,omitempty"`
	MarketableOnly *bool    `protobuf:"varint,4,opt,name=marketable_only,json=marketableOnly" json:"marketable_only,omitempty"`
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions) Reset() {
	*x = CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_econ_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions) ProtoMessage() {}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_econ_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions.ProtoReflect.Descriptor instead.
func (*CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions) Descriptor() ([]byte, []int) {
	return file_steammessages_econ_steamclient_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions) GetAssetids() []uint64 {
	if x != nil {
		return x.Assetids
	}
	return nil
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions) GetCurrencyids() []uint32 {
	if x != nil {
		return x.Currencyids
	}
	return nil
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions) GetTradableOnly() bool {
	if x != nil && x.TradableOnly != nil {
		return *x.TradableOnly
	}
	return false
}

func (x *CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions) GetMarketableOnly() bool {
	if x != nil && x.MarketableOnly != nil {
		return *x.MarketableOnly
	}
	return false
}

type CEcon_GetAssetClassInfo_Request_Class struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classid    *uint64 `protobuf:"varint,1,opt,name=classid" json:"classid,omitempty"`
	Instanceid *uint64 `protobuf:"varint,2,opt,name=instanceid" json:"instanceid,omitempty"`
}

func (x *CEcon_GetAssetClassInfo_Request_Class) Reset() {
	*x = CEcon_GetAssetClassInfo_Request_Class{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_econ_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEcon_GetAssetClassInfo_Request_Class) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEcon_GetAssetClassInfo_Request_Class) ProtoMessage() {}

func (x *CEcon_GetAssetClassInfo_Request_Class) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_econ_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEcon_GetAssetClassInfo_Request_Class.ProtoReflect.Descriptor instead.
func (*CEcon_GetAssetClassInfo_Request_Class) Descriptor() ([]byte, []int) {
	return file_steammessages_econ_steamclient_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CEcon_GetAssetClassInfo_Request_Class) GetClassid() uint64 {
	if x != nil && x.Classid != nil {
		return *x.Classid
	}
	return 0
}

func (x *CEcon_GetAssetClassInfo_Request_Class) GetInstanceid() uint64 {
	if x != nil && x.Instanceid != nil {
		return *x.Instanceid
	}
	return 0
}

var File_steammessages_econ_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_econ_steamclient_proto_rawDesc = []byte{
	0x0a, 0x24, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x65, 0x63, 0x6f, 0x6e, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba,
	0x04, 0x0a, 0x2f, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x66,
	0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x19, 0x66, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x43, 0x45, 0x63, 0x6f,
	0x6e, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x9b, 0x01,
	0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x69, 0x64, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xbc, 0x02, 0x0a, 0x0b,
	0x43, 0x45, 0x63, 0x6f, 0x6e, 0x5f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3a, 0x82, 0xb5, 0x18, 0x36, 0x53, 0x65, 0x74,
	0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x69, 0x64, 0x20, 0x69, 0x66, 0x20, 0x69,
	0x74, 0x27, 0x73, 0x20, 0x61, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2c, 0x20,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x20, 0x69,
	0x74, 0x65, 0x6d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x65, 0x73, 0x74, 0x55, 0x73, 0x64, 0x22, 0x71, 0x0a, 0x19, 0x43, 0x45,
	0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x3a, 0x0a,
	0x10, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x0a, 0x0a, 0x15, 0x43, 0x45,
	0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63,
	0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63,
	0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x0c, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74,
	0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x11, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x36, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x75, 0x64,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x66, 0x72, 0x61, 0x75, 0x64, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x65, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x70, 0x70,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x46, 0x65,
	0x65, 0x41, 0x70, 0x70, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43,
	0x45, 0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x45,
	0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x1b, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x19, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1d, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x43, 0x45, 0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x74,
	0x65, 0x6d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x1e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x45, 0x0a, 0x1f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x03, 0x0a, 0x0d, 0x43, 0x45, 0x63,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x54, 0x61, 0x67, 0x12, 0x38, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0x82, 0xb5, 0x18, 0x1e, 0x54,
	0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x82, 0xb5, 0x18, 0x34, 0x54, 0x68, 0x65, 0x20,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x74, 0x61, 0x67, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x20, 0x74, 0x6f,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0x82, 0xb5, 0x18, 0x1c, 0x54, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x74, 0x61, 0x67, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x5e, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x26, 0x82, 0xb5, 0x18, 0x22, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x4f, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x82,
	0xb5, 0x18, 0x1d, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x67,
	0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x38, 0x82, 0xb5, 0x18, 0x34, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x67, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x22, 0x97, 0x03, 0x0a, 0x30, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x5f,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x3a, 0x0a,
	0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x0e, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x5f, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x42, 0x55, 0x82, 0xb5, 0x18, 0x51, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x77,
	0x65, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x69, 0x6e, 0x64,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x6f, 0x72, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x26,
	0x43, 0x45, 0x63, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x62, 0x0a, 0x27, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x5f, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4e, 0x0a, 0x2d, 0x43, 0x45, 0x63, 0x6f,
	0x6e, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53,
	0x68, 0x6f, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52,
	0x4c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x42, 0x0a, 0x2e, 0x43, 0x45, 0x63, 0x6f,
	0x6e, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53,
	0x68, 0x6f, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52,
	0x4c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xf3, 0x01, 0x0a,
	0x1f, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x1a,
	0x41, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x69, 0x64, 0x22, 0x5e, 0x0a, 0x20, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43,
	0x45, 0x63, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x5f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x32, 0xb6, 0x06, 0x0a, 0x04, 0x45, 0x63, 0x6f, 0x6e, 0x12, 0xd1, 0x01, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x30, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xb5, 0x18, 0x43, 0x47, 0x65, 0x74, 0x73,
	0x20, 0x61, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2c, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x9a, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x2e, 0x43,
	0x45, 0x63, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x5f, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2b, 0x82, 0xb5, 0x18, 0x27, 0x47, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x27, 0x73, 0x20, 0x74, 0x72, 0x61, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x20,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xd9, 0x01, 0x0a,
	0x1f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x68,
	0x6f, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c,
	0x12, 0x2e, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47,
	0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x6f, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x5f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47,
	0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x6f, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x41, 0x75, 0x74, 0x68, 0x55, 0x52, 0x4c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x55, 0x82, 0xb5, 0x18, 0x51, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73,
	0x20, 0x61, 0x20, 0x55, 0x52, 0x4c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x73, 0x65, 0x74,
	0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x68, 0x6f, 0x70, 0x20, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20,
	0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x43, 0x45, 0x63, 0x6f, 0x6e, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xb5, 0x18, 0x41, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
	0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x3f, 0x82, 0xb5, 0x18, 0x3b,
	0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
	0x63, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x42, 0x3d, 0x42, 0x21, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x45, 0x63, 0x6f, 0x6e,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_econ_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_econ_steamclient_proto_rawDescData = file_steammessages_econ_steamclient_proto_rawDesc
)

func file_steammessages_econ_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_econ_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_econ_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_econ_steamclient_proto_rawDescData)
	})
	return file_steammessages_econ_steamclient_proto_rawDescData
}

var file_steammessages_econ_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_steammessages_econ_steamclient_proto_goTypes = []interface{}{
	(*CEcon_GetInventoryItemsWithDescriptions_Request)(nil), // 0: CEcon_GetInventoryItemsWithDescriptions_Request
	(*CEcon_Asset)(nil),                                                   // 1: CEcon_Asset
	(*CEconItem_DescriptionLine)(nil),                                     // 2: CEconItem_DescriptionLine
	(*CEconItem_Action)(nil),                                              // 3: CEconItem_Action
	(*CEconItem_Description)(nil),                                         // 4: CEconItem_Description
	(*CEconItem_Tag)(nil),                                                 // 5: CEconItem_Tag
	(*CEcon_GetInventoryItemsWithDescriptions_Response)(nil),              // 6: CEcon_GetInventoryItemsWithDescriptions_Response
	(*CEcon_GetTradeOfferAccessToken_Request)(nil),                        // 7: CEcon_GetTradeOfferAccessToken_Request
	(*CEcon_GetTradeOfferAccessToken_Response)(nil),                       // 8: CEcon_GetTradeOfferAccessToken_Response
	(*CEcon_ClientGetItemShopOverlayAuthURL_Request)(nil),                 // 9: CEcon_ClientGetItemShopOverlayAuthURL_Request
	(*CEcon_ClientGetItemShopOverlayAuthURL_Response)(nil),                // 10: CEcon_ClientGetItemShopOverlayAuthURL_Response
	(*CEcon_GetAssetClassInfo_Request)(nil),                               // 11: CEcon_GetAssetClassInfo_Request
	(*CEcon_GetAssetClassInfo_Response)(nil),                              // 12: CEcon_GetAssetClassInfo_Response
	(*CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions)(nil), // 13: CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions
	(*CEcon_GetAssetClassInfo_Request_Class)(nil),                         // 14: CEcon_GetAssetClassInfo_Request.Class
}
var file_steammessages_econ_steamclient_proto_depIdxs = []int32{
	13, // 0: CEcon_GetInventoryItemsWithDescriptions_Request.filters:type_name -> CEcon_GetInventoryItemsWithDescriptions_Request.FilterOptions
	2,  // 1: CEconItem_Description.descriptions:type_name -> CEconItem_DescriptionLine
	3,  // 2: CEconItem_Description.actions:type_name -> CEconItem_Action
	2,  // 3: CEconItem_Description.owner_descriptions:type_name -> CEconItem_DescriptionLine
	3,  // 4: CEconItem_Description.owner_actions:type_name -> CEconItem_Action
	4,  // 5: CEconItem_Description.contained_item:type_name -> CEconItem_Description
	3,  // 6: CEconItem_Description.market_actions:type_name -> CEconItem_Action
	5,  // 7: CEconItem_Description.tags:type_name -> CEconItem_Tag
	1,  // 8: CEcon_GetInventoryItemsWithDescriptions_Response.assets:type_name -> CEcon_Asset
	4,  // 9: CEcon_GetInventoryItemsWithDescriptions_Response.descriptions:type_name -> CEconItem_Description
	1,  // 10: CEcon_GetInventoryItemsWithDescriptions_Response.missing_assets:type_name -> CEcon_Asset
	14, // 11: CEcon_GetAssetClassInfo_Request.classes:type_name -> CEcon_GetAssetClassInfo_Request.Class
	4,  // 12: CEcon_GetAssetClassInfo_Response.descriptions:type_name -> CEconItem_Description
	0,  // 13: Econ.GetInventoryItemsWithDescriptions:input_type -> CEcon_GetInventoryItemsWithDescriptions_Request
	7,  // 14: Econ.GetTradeOfferAccessToken:input_type -> CEcon_GetTradeOfferAccessToken_Request
	9,  // 15: Econ.ClientGetItemShopOverlayAuthURL:input_type -> CEcon_ClientGetItemShopOverlayAuthURL_Request
	11, // 16: Econ.GetAssetClassInfo:input_type -> CEcon_GetAssetClassInfo_Request
	6,  // 17: Econ.GetInventoryItemsWithDescriptions:output_type -> CEcon_GetInventoryItemsWithDescriptions_Response
	8,  // 18: Econ.GetTradeOfferAccessToken:output_type -> CEcon_GetTradeOfferAccessToken_Response
	10, // 19: Econ.ClientGetItemShopOverlayAuthURL:output_type -> CEcon_ClientGetItemShopOverlayAuthURL_Response
	12, // 20: Econ.GetAssetClassInfo:output_type -> CEcon_GetAssetClassInfo_Response
	17, // [17:21] is the sub-list for method output_type
	13, // [13:17] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_steammessages_econ_steamclient_proto_init() }
func file_steammessages_econ_steamclient_proto_init() {
	if File_steammessages_econ_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_econ_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEcon_GetInventoryItemsWithDescriptions_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_econ_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEcon_Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_econ_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEconItem_DescriptionLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_econ_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEconItem_Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_econ_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEconItem_Description); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_econ_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEconItem_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_econ_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEcon_GetInventoryItemsWithDescriptions_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_econ_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEcon_GetTradeOfferAccessToken_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_econ_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEcon_GetTradeOfferAccessToken_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_econ_steamclient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEcon_ClientGetItemShopOverlayAuthURL_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_econ_steamclient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEcon_ClientGetItemShopOverlayAuthURL_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_econ_steamclient_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEcon_GetAssetClassInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_econ_steamclient_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEcon_GetAssetClassInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_econ_steamclient_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEcon_GetInventoryItemsWithDescriptions_Request_FilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_econ_steamclient_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEcon_GetAssetClassInfo_Request_Class); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_econ_steamclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_econ_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_econ_steamclient_proto_depIdxs,
		MessageInfos:      file_steammessages_econ_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_econ_steamclient_proto = out.File
	file_steammessages_econ_steamclient_proto_rawDesc = nil
	file_steammessages_econ_steamclient_proto_goTypes = nil
	file_steammessages_econ_steamclient_proto_depIdxs = nil
}
