// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: steammessages_useraccount.steamclient.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EInternalAccountType int32

const (
	EInternalAccountType_k_EInternalSteamAccountType     EInternalAccountType = 1
	EInternalAccountType_k_EInternalClanType             EInternalAccountType = 2
	EInternalAccountType_k_EInternalAppType              EInternalAccountType = 3
	EInternalAccountType_k_EInternalBroadcastChannelType EInternalAccountType = 4
)

// Enum value maps for EInternalAccountType.
var (
	EInternalAccountType_name = map[int32]string{
		1: "k_EInternalSteamAccountType",
		2: "k_EInternalClanType",
		3: "k_EInternalAppType",
		4: "k_EInternalBroadcastChannelType",
	}
	EInternalAccountType_value = map[string]int32{
		"k_EInternalSteamAccountType":     1,
		"k_EInternalClanType":             2,
		"k_EInternalAppType":              3,
		"k_EInternalBroadcastChannelType": 4,
	}
)

func (x EInternalAccountType) Enum() *EInternalAccountType {
	p := new(EInternalAccountType)
	*p = x
	return p
}

func (x EInternalAccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EInternalAccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_useraccount_steamclient_proto_enumTypes[0].Descriptor()
}

func (EInternalAccountType) Type() protoreflect.EnumType {
	return &file_steammessages_useraccount_steamclient_proto_enumTypes[0]
}

func (x EInternalAccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EInternalAccountType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EInternalAccountType(num)
	return nil
}

// Deprecated: Use EInternalAccountType.Descriptor instead.
func (EInternalAccountType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{0}
}

type EExternalAccountType int32

const (
	EExternalAccountType_k_EExternalNone                  EExternalAccountType = 0
	EExternalAccountType_k_EExternalSteamAccount          EExternalAccountType = 1
	EExternalAccountType_k_EExternalGoogleAccount         EExternalAccountType = 2
	EExternalAccountType_k_EExternalFacebookAccount       EExternalAccountType = 3
	EExternalAccountType_k_EExternalTwitterAccount        EExternalAccountType = 4
	EExternalAccountType_k_EExternalTwitchAccount         EExternalAccountType = 5
	EExternalAccountType_k_EExternalYouTubeChannelAccount EExternalAccountType = 6
	EExternalAccountType_k_EExternalFacebookPage          EExternalAccountType = 7
)

// Enum value maps for EExternalAccountType.
var (
	EExternalAccountType_name = map[int32]string{
		0: "k_EExternalNone",
		1: "k_EExternalSteamAccount",
		2: "k_EExternalGoogleAccount",
		3: "k_EExternalFacebookAccount",
		4: "k_EExternalTwitterAccount",
		5: "k_EExternalTwitchAccount",
		6: "k_EExternalYouTubeChannelAccount",
		7: "k_EExternalFacebookPage",
	}
	EExternalAccountType_value = map[string]int32{
		"k_EExternalNone":                  0,
		"k_EExternalSteamAccount":          1,
		"k_EExternalGoogleAccount":         2,
		"k_EExternalFacebookAccount":       3,
		"k_EExternalTwitterAccount":        4,
		"k_EExternalTwitchAccount":         5,
		"k_EExternalYouTubeChannelAccount": 6,
		"k_EExternalFacebookPage":          7,
	}
)

func (x EExternalAccountType) Enum() *EExternalAccountType {
	p := new(EExternalAccountType)
	*p = x
	return p
}

func (x EExternalAccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EExternalAccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_useraccount_steamclient_proto_enumTypes[1].Descriptor()
}

func (EExternalAccountType) Type() protoreflect.EnumType {
	return &file_steammessages_useraccount_steamclient_proto_enumTypes[1]
}

func (x EExternalAccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EExternalAccountType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EExternalAccountType(num)
	return nil
}

// Deprecated: Use EExternalAccountType.Descriptor instead.
func (EExternalAccountType) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{1}
}

type CUserAccount_GetAvailableValveDiscountPromotions_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountryCode *string `protobuf:"bytes,1,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Request) Reset() {
	*x = CUserAccount_GetAvailableValveDiscountPromotions_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetAvailableValveDiscountPromotions_Request) ProtoMessage() {}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetAvailableValveDiscountPromotions_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetAvailableValveDiscountPromotions_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Request) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

type CUserAccount_GetAvailableValveDiscountPromotions_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Promotions []*CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails `protobuf:"bytes,1,rep,name=promotions" json:"promotions,omitempty"`
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response) Reset() {
	*x = CUserAccount_GetAvailableValveDiscountPromotions_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetAvailableValveDiscountPromotions_Response) ProtoMessage() {}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetAvailableValveDiscountPromotions_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetAvailableValveDiscountPromotions_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response) GetPromotions() []*CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails {
	if x != nil {
		return x.Promotions
	}
	return nil
}

type CUserAccount_GetClientWalletDetails_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeBalanceInUsd     *bool  `protobuf:"varint,1,opt,name=include_balance_in_usd,json=includeBalanceInUsd" json:"include_balance_in_usd,omitempty"`
	WalletRegion            *int32 `protobuf:"varint,2,opt,name=wallet_region,json=walletRegion,def=1" json:"wallet_region,omitempty"`
	IncludeFormattedBalance *bool  `protobuf:"varint,3,opt,name=include_formatted_balance,json=includeFormattedBalance" json:"include_formatted_balance,omitempty"`
}

// Default values for CUserAccount_GetClientWalletDetails_Request fields.
const (
	Default_CUserAccount_GetClientWalletDetails_Request_WalletRegion = int32(1)
)

func (x *CUserAccount_GetClientWalletDetails_Request) Reset() {
	*x = CUserAccount_GetClientWalletDetails_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_GetClientWalletDetails_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetClientWalletDetails_Request) ProtoMessage() {}

func (x *CUserAccount_GetClientWalletDetails_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetClientWalletDetails_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetClientWalletDetails_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CUserAccount_GetClientWalletDetails_Request) GetIncludeBalanceInUsd() bool {
	if x != nil && x.IncludeBalanceInUsd != nil {
		return *x.IncludeBalanceInUsd
	}
	return false
}

func (x *CUserAccount_GetClientWalletDetails_Request) GetWalletRegion() int32 {
	if x != nil && x.WalletRegion != nil {
		return *x.WalletRegion
	}
	return Default_CUserAccount_GetClientWalletDetails_Request_WalletRegion
}

func (x *CUserAccount_GetClientWalletDetails_Request) GetIncludeFormattedBalance() bool {
	if x != nil && x.IncludeFormattedBalance != nil {
		return *x.IncludeFormattedBalance
	}
	return false
}

type CUserAccount_GetWalletDetails_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasWallet               *bool   `protobuf:"varint,1,opt,name=has_wallet,json=hasWallet" json:"has_wallet,omitempty"`
	UserCountryCode         *string `protobuf:"bytes,2,opt,name=user_country_code,json=userCountryCode" json:"user_country_code,omitempty"`
	WalletCountryCode       *string `protobuf:"bytes,3,opt,name=wallet_country_code,json=walletCountryCode" json:"wallet_country_code,omitempty"`
	WalletState             *string `protobuf:"bytes,4,opt,name=wallet_state,json=walletState" json:"wallet_state,omitempty"`
	Balance                 *int64  `protobuf:"varint,5,opt,name=balance" json:"balance,omitempty"`
	DelayedBalance          *int64  `protobuf:"varint,6,opt,name=delayed_balance,json=delayedBalance" json:"delayed_balance,omitempty"`
	CurrencyCode            *int32  `protobuf:"varint,7,opt,name=currency_code,json=currencyCode" json:"currency_code,omitempty"`
	TimeMostRecentTxn       *uint32 `protobuf:"varint,8,opt,name=time_most_recent_txn,json=timeMostRecentTxn" json:"time_most_recent_txn,omitempty"`
	MostRecentTxnid         *uint64 `protobuf:"varint,9,opt,name=most_recent_txnid,json=mostRecentTxnid" json:"most_recent_txnid,omitempty"`
	BalanceInUsd            *int64  `protobuf:"varint,10,opt,name=balance_in_usd,json=balanceInUsd" json:"balance_in_usd,omitempty"`
	DelayedBalanceInUsd     *int64  `protobuf:"varint,11,opt,name=delayed_balance_in_usd,json=delayedBalanceInUsd" json:"delayed_balance_in_usd,omitempty"`
	HasWalletInOtherRegions *bool   `protobuf:"varint,12,opt,name=has_wallet_in_other_regions,json=hasWalletInOtherRegions" json:"has_wallet_in_other_regions,omitempty"`
	OtherRegions            []int32 `protobuf:"varint,13,rep,name=other_regions,json=otherRegions" json:"other_regions,omitempty"`
	FormattedBalance        *string `protobuf:"bytes,14,opt,name=formatted_balance,json=formattedBalance" json:"formatted_balance,omitempty"`
}

func (x *CUserAccount_GetWalletDetails_Response) Reset() {
	*x = CUserAccount_GetWalletDetails_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_GetWalletDetails_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetWalletDetails_Response) ProtoMessage() {}

func (x *CUserAccount_GetWalletDetails_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetWalletDetails_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetWalletDetails_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CUserAccount_GetWalletDetails_Response) GetHasWallet() bool {
	if x != nil && x.HasWallet != nil {
		return *x.HasWallet
	}
	return false
}

func (x *CUserAccount_GetWalletDetails_Response) GetUserCountryCode() string {
	if x != nil && x.UserCountryCode != nil {
		return *x.UserCountryCode
	}
	return ""
}

func (x *CUserAccount_GetWalletDetails_Response) GetWalletCountryCode() string {
	if x != nil && x.WalletCountryCode != nil {
		return *x.WalletCountryCode
	}
	return ""
}

func (x *CUserAccount_GetWalletDetails_Response) GetWalletState() string {
	if x != nil && x.WalletState != nil {
		return *x.WalletState
	}
	return ""
}

func (x *CUserAccount_GetWalletDetails_Response) GetBalance() int64 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *CUserAccount_GetWalletDetails_Response) GetDelayedBalance() int64 {
	if x != nil && x.DelayedBalance != nil {
		return *x.DelayedBalance
	}
	return 0
}

func (x *CUserAccount_GetWalletDetails_Response) GetCurrencyCode() int32 {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return 0
}

func (x *CUserAccount_GetWalletDetails_Response) GetTimeMostRecentTxn() uint32 {
	if x != nil && x.TimeMostRecentTxn != nil {
		return *x.TimeMostRecentTxn
	}
	return 0
}

func (x *CUserAccount_GetWalletDetails_Response) GetMostRecentTxnid() uint64 {
	if x != nil && x.MostRecentTxnid != nil {
		return *x.MostRecentTxnid
	}
	return 0
}

func (x *CUserAccount_GetWalletDetails_Response) GetBalanceInUsd() int64 {
	if x != nil && x.BalanceInUsd != nil {
		return *x.BalanceInUsd
	}
	return 0
}

func (x *CUserAccount_GetWalletDetails_Response) GetDelayedBalanceInUsd() int64 {
	if x != nil && x.DelayedBalanceInUsd != nil {
		return *x.DelayedBalanceInUsd
	}
	return 0
}

func (x *CUserAccount_GetWalletDetails_Response) GetHasWalletInOtherRegions() bool {
	if x != nil && x.HasWalletInOtherRegions != nil {
		return *x.HasWalletInOtherRegions
	}
	return false
}

func (x *CUserAccount_GetWalletDetails_Response) GetOtherRegions() []int32 {
	if x != nil {
		return x.OtherRegions
	}
	return nil
}

func (x *CUserAccount_GetWalletDetails_Response) GetFormattedBalance() string {
	if x != nil && x.FormattedBalance != nil {
		return *x.FormattedBalance
	}
	return ""
}

type CUserAccount_GetAccountLinkStatus_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CUserAccount_GetAccountLinkStatus_Request) Reset() {
	*x = CUserAccount_GetAccountLinkStatus_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_GetAccountLinkStatus_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetAccountLinkStatus_Request) ProtoMessage() {}

func (x *CUserAccount_GetAccountLinkStatus_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetAccountLinkStatus_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetAccountLinkStatus_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{4}
}

type CUserAccount_GetAccountLinkStatus_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pwid                     *uint32 `protobuf:"varint,1,opt,name=pwid" json:"pwid,omitempty"`
	IdentityVerification     *uint32 `protobuf:"varint,2,opt,name=identity_verification,json=identityVerification" json:"identity_verification,omitempty"`
	PerformedAgeVerification *bool   `protobuf:"varint,3,opt,name=performed_age_verification,json=performedAgeVerification" json:"performed_age_verification,omitempty"`
}

func (x *CUserAccount_GetAccountLinkStatus_Response) Reset() {
	*x = CUserAccount_GetAccountLinkStatus_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_GetAccountLinkStatus_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetAccountLinkStatus_Response) ProtoMessage() {}

func (x *CUserAccount_GetAccountLinkStatus_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetAccountLinkStatus_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetAccountLinkStatus_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CUserAccount_GetAccountLinkStatus_Response) GetPwid() uint32 {
	if x != nil && x.Pwid != nil {
		return *x.Pwid
	}
	return 0
}

func (x *CUserAccount_GetAccountLinkStatus_Response) GetIdentityVerification() uint32 {
	if x != nil && x.IdentityVerification != nil {
		return *x.IdentityVerification
	}
	return 0
}

func (x *CUserAccount_GetAccountLinkStatus_Response) GetPerformedAgeVerification() bool {
	if x != nil && x.PerformedAgeVerification != nil {
		return *x.PerformedAgeVerification
	}
	return false
}

type CUserAccount_CancelLicenseForApp_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CUserAccount_CancelLicenseForApp_Request) Reset() {
	*x = CUserAccount_CancelLicenseForApp_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_CancelLicenseForApp_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_CancelLicenseForApp_Request) ProtoMessage() {}

func (x *CUserAccount_CancelLicenseForApp_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_CancelLicenseForApp_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_CancelLicenseForApp_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{6}
}

func (x *CUserAccount_CancelLicenseForApp_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CUserAccount_CancelLicenseForApp_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CUserAccount_CancelLicenseForApp_Response) Reset() {
	*x = CUserAccount_CancelLicenseForApp_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_CancelLicenseForApp_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_CancelLicenseForApp_Response) ProtoMessage() {}

func (x *CUserAccount_CancelLicenseForApp_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_CancelLicenseForApp_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_CancelLicenseForApp_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{7}
}

type CUserAccount_GetUserCountry_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
}

func (x *CUserAccount_GetUserCountry_Request) Reset() {
	*x = CUserAccount_GetUserCountry_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_GetUserCountry_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetUserCountry_Request) ProtoMessage() {}

func (x *CUserAccount_GetUserCountry_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetUserCountry_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetUserCountry_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{8}
}

func (x *CUserAccount_GetUserCountry_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

type CUserAccount_GetUserCountry_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country *string `protobuf:"bytes,1,opt,name=country" json:"country,omitempty"`
}

func (x *CUserAccount_GetUserCountry_Response) Reset() {
	*x = CUserAccount_GetUserCountry_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_GetUserCountry_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetUserCountry_Response) ProtoMessage() {}

func (x *CUserAccount_GetUserCountry_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetUserCountry_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetUserCountry_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{9}
}

func (x *CUserAccount_GetUserCountry_Response) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

type CUserAccount_CreateFriendInviteToken_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteLimit    *uint32 `protobuf:"varint,1,opt,name=invite_limit,json=inviteLimit" json:"invite_limit,omitempty"`
	InviteDuration *uint32 `protobuf:"varint,2,opt,name=invite_duration,json=inviteDuration" json:"invite_duration,omitempty"`
	InviteNote     *string `protobuf:"bytes,3,opt,name=invite_note,json=inviteNote" json:"invite_note,omitempty"`
}

func (x *CUserAccount_CreateFriendInviteToken_Request) Reset() {
	*x = CUserAccount_CreateFriendInviteToken_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_CreateFriendInviteToken_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_CreateFriendInviteToken_Request) ProtoMessage() {}

func (x *CUserAccount_CreateFriendInviteToken_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_CreateFriendInviteToken_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_CreateFriendInviteToken_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{10}
}

func (x *CUserAccount_CreateFriendInviteToken_Request) GetInviteLimit() uint32 {
	if x != nil && x.InviteLimit != nil {
		return *x.InviteLimit
	}
	return 0
}

func (x *CUserAccount_CreateFriendInviteToken_Request) GetInviteDuration() uint32 {
	if x != nil && x.InviteDuration != nil {
		return *x.InviteDuration
	}
	return 0
}

func (x *CUserAccount_CreateFriendInviteToken_Request) GetInviteNote() string {
	if x != nil && x.InviteNote != nil {
		return *x.InviteNote
	}
	return ""
}

type CUserAccount_CreateFriendInviteToken_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteToken    *string `protobuf:"bytes,1,opt,name=invite_token,json=inviteToken" json:"invite_token,omitempty"`
	InviteLimit    *uint64 `protobuf:"varint,2,opt,name=invite_limit,json=inviteLimit" json:"invite_limit,omitempty"`
	InviteDuration *uint64 `protobuf:"varint,3,opt,name=invite_duration,json=inviteDuration" json:"invite_duration,omitempty"`
	TimeCreated    *uint32 `protobuf:"fixed32,4,opt,name=time_created,json=timeCreated" json:"time_created,omitempty"`
	Valid          *bool   `protobuf:"varint,5,opt,name=valid" json:"valid,omitempty"`
}

func (x *CUserAccount_CreateFriendInviteToken_Response) Reset() {
	*x = CUserAccount_CreateFriendInviteToken_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_CreateFriendInviteToken_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_CreateFriendInviteToken_Response) ProtoMessage() {}

func (x *CUserAccount_CreateFriendInviteToken_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_CreateFriendInviteToken_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_CreateFriendInviteToken_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{11}
}

func (x *CUserAccount_CreateFriendInviteToken_Response) GetInviteToken() string {
	if x != nil && x.InviteToken != nil {
		return *x.InviteToken
	}
	return ""
}

func (x *CUserAccount_CreateFriendInviteToken_Response) GetInviteLimit() uint64 {
	if x != nil && x.InviteLimit != nil {
		return *x.InviteLimit
	}
	return 0
}

func (x *CUserAccount_CreateFriendInviteToken_Response) GetInviteDuration() uint64 {
	if x != nil && x.InviteDuration != nil {
		return *x.InviteDuration
	}
	return 0
}

func (x *CUserAccount_CreateFriendInviteToken_Response) GetTimeCreated() uint32 {
	if x != nil && x.TimeCreated != nil {
		return *x.TimeCreated
	}
	return 0
}

func (x *CUserAccount_CreateFriendInviteToken_Response) GetValid() bool {
	if x != nil && x.Valid != nil {
		return *x.Valid
	}
	return false
}

type CUserAccount_GetFriendInviteTokens_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CUserAccount_GetFriendInviteTokens_Request) Reset() {
	*x = CUserAccount_GetFriendInviteTokens_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_GetFriendInviteTokens_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetFriendInviteTokens_Request) ProtoMessage() {}

func (x *CUserAccount_GetFriendInviteTokens_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetFriendInviteTokens_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetFriendInviteTokens_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{12}
}

type CUserAccount_GetFriendInviteTokens_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens []*CUserAccount_CreateFriendInviteToken_Response `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
}

func (x *CUserAccount_GetFriendInviteTokens_Response) Reset() {
	*x = CUserAccount_GetFriendInviteTokens_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_GetFriendInviteTokens_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetFriendInviteTokens_Response) ProtoMessage() {}

func (x *CUserAccount_GetFriendInviteTokens_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetFriendInviteTokens_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetFriendInviteTokens_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{13}
}

func (x *CUserAccount_GetFriendInviteTokens_Response) GetTokens() []*CUserAccount_CreateFriendInviteToken_Response {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type CUserAccount_ViewFriendInviteToken_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid     *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	InviteToken *string `protobuf:"bytes,2,opt,name=invite_token,json=inviteToken" json:"invite_token,omitempty"`
}

func (x *CUserAccount_ViewFriendInviteToken_Request) Reset() {
	*x = CUserAccount_ViewFriendInviteToken_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_ViewFriendInviteToken_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_ViewFriendInviteToken_Request) ProtoMessage() {}

func (x *CUserAccount_ViewFriendInviteToken_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_ViewFriendInviteToken_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_ViewFriendInviteToken_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{14}
}

func (x *CUserAccount_ViewFriendInviteToken_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CUserAccount_ViewFriendInviteToken_Request) GetInviteToken() string {
	if x != nil && x.InviteToken != nil {
		return *x.InviteToken
	}
	return ""
}

type CUserAccount_ViewFriendInviteToken_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid          *bool   `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	Steamid        *uint64 `protobuf:"varint,2,opt,name=steamid" json:"steamid,omitempty"`
	InviteDuration *uint64 `protobuf:"varint,3,opt,name=invite_duration,json=inviteDuration" json:"invite_duration,omitempty"`
}

func (x *CUserAccount_ViewFriendInviteToken_Response) Reset() {
	*x = CUserAccount_ViewFriendInviteToken_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_ViewFriendInviteToken_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_ViewFriendInviteToken_Response) ProtoMessage() {}

func (x *CUserAccount_ViewFriendInviteToken_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_ViewFriendInviteToken_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_ViewFriendInviteToken_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{15}
}

func (x *CUserAccount_ViewFriendInviteToken_Response) GetValid() bool {
	if x != nil && x.Valid != nil {
		return *x.Valid
	}
	return false
}

func (x *CUserAccount_ViewFriendInviteToken_Response) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CUserAccount_ViewFriendInviteToken_Response) GetInviteDuration() uint64 {
	if x != nil && x.InviteDuration != nil {
		return *x.InviteDuration
	}
	return 0
}

type CUserAccount_RedeemFriendInviteToken_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid     *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	InviteToken *string `protobuf:"bytes,2,opt,name=invite_token,json=inviteToken" json:"invite_token,omitempty"`
}

func (x *CUserAccount_RedeemFriendInviteToken_Request) Reset() {
	*x = CUserAccount_RedeemFriendInviteToken_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_RedeemFriendInviteToken_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_RedeemFriendInviteToken_Request) ProtoMessage() {}

func (x *CUserAccount_RedeemFriendInviteToken_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_RedeemFriendInviteToken_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_RedeemFriendInviteToken_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{16}
}

func (x *CUserAccount_RedeemFriendInviteToken_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CUserAccount_RedeemFriendInviteToken_Request) GetInviteToken() string {
	if x != nil && x.InviteToken != nil {
		return *x.InviteToken
	}
	return ""
}

type CUserAccount_RedeemFriendInviteToken_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CUserAccount_RedeemFriendInviteToken_Response) Reset() {
	*x = CUserAccount_RedeemFriendInviteToken_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_RedeemFriendInviteToken_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_RedeemFriendInviteToken_Response) ProtoMessage() {}

func (x *CUserAccount_RedeemFriendInviteToken_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_RedeemFriendInviteToken_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_RedeemFriendInviteToken_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{17}
}

type CUserAccount_RevokeFriendInviteToken_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviteToken *string `protobuf:"bytes,1,opt,name=invite_token,json=inviteToken" json:"invite_token,omitempty"`
}

func (x *CUserAccount_RevokeFriendInviteToken_Request) Reset() {
	*x = CUserAccount_RevokeFriendInviteToken_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_RevokeFriendInviteToken_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_RevokeFriendInviteToken_Request) ProtoMessage() {}

func (x *CUserAccount_RevokeFriendInviteToken_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_RevokeFriendInviteToken_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_RevokeFriendInviteToken_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{18}
}

func (x *CUserAccount_RevokeFriendInviteToken_Request) GetInviteToken() string {
	if x != nil && x.InviteToken != nil {
		return *x.InviteToken
	}
	return ""
}

type CUserAccount_RevokeFriendInviteToken_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CUserAccount_RevokeFriendInviteToken_Response) Reset() {
	*x = CUserAccount_RevokeFriendInviteToken_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_RevokeFriendInviteToken_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_RevokeFriendInviteToken_Response) ProtoMessage() {}

func (x *CUserAccount_RevokeFriendInviteToken_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_RevokeFriendInviteToken_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_RevokeFriendInviteToken_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{19}
}

type CUserAccount_RegisterCompatTool_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompatTool *uint32 `protobuf:"varint,1,opt,name=compat_tool,json=compatTool" json:"compat_tool,omitempty"`
}

func (x *CUserAccount_RegisterCompatTool_Request) Reset() {
	*x = CUserAccount_RegisterCompatTool_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_RegisterCompatTool_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_RegisterCompatTool_Request) ProtoMessage() {}

func (x *CUserAccount_RegisterCompatTool_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_RegisterCompatTool_Request.ProtoReflect.Descriptor instead.
func (*CUserAccount_RegisterCompatTool_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{20}
}

func (x *CUserAccount_RegisterCompatTool_Request) GetCompatTool() uint32 {
	if x != nil && x.CompatTool != nil {
		return *x.CompatTool
	}
	return 0
}

type CUserAccount_RegisterCompatTool_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CUserAccount_RegisterCompatTool_Response) Reset() {
	*x = CUserAccount_RegisterCompatTool_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_RegisterCompatTool_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_RegisterCompatTool_Response) ProtoMessage() {}

func (x *CUserAccount_RegisterCompatTool_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_RegisterCompatTool_Response.ProtoReflect.Descriptor instead.
func (*CUserAccount_RegisterCompatTool_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{21}
}

type CAccountLinking_GetLinkedAccountInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountType       *EInternalAccountType `protobuf:"varint,1,opt,name=account_type,json=accountType,enum=EInternalAccountType,def=1" json:"account_type,omitempty"`
	AccountId         *uint64               `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Filter            *EExternalAccountType `protobuf:"varint,3,opt,name=filter,enum=EExternalAccountType,def=0" json:"filter,omitempty"`
	ReturnAccessToken *bool                 `protobuf:"varint,4,opt,name=return_access_token,json=returnAccessToken" json:"return_access_token,omitempty"`
}

// Default values for CAccountLinking_GetLinkedAccountInfo_Request fields.
const (
	Default_CAccountLinking_GetLinkedAccountInfo_Request_AccountType = EInternalAccountType_k_EInternalSteamAccountType
	Default_CAccountLinking_GetLinkedAccountInfo_Request_Filter      = EExternalAccountType_k_EExternalNone
)

func (x *CAccountLinking_GetLinkedAccountInfo_Request) Reset() {
	*x = CAccountLinking_GetLinkedAccountInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountLinking_GetLinkedAccountInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountLinking_GetLinkedAccountInfo_Request) ProtoMessage() {}

func (x *CAccountLinking_GetLinkedAccountInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountLinking_GetLinkedAccountInfo_Request.ProtoReflect.Descriptor instead.
func (*CAccountLinking_GetLinkedAccountInfo_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{22}
}

func (x *CAccountLinking_GetLinkedAccountInfo_Request) GetAccountType() EInternalAccountType {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return Default_CAccountLinking_GetLinkedAccountInfo_Request_AccountType
}

func (x *CAccountLinking_GetLinkedAccountInfo_Request) GetAccountId() uint64 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *CAccountLinking_GetLinkedAccountInfo_Request) GetFilter() EExternalAccountType {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return Default_CAccountLinking_GetLinkedAccountInfo_Request_Filter
}

func (x *CAccountLinking_GetLinkedAccountInfo_Request) GetReturnAccessToken() bool {
	if x != nil && x.ReturnAccessToken != nil {
		return *x.ReturnAccessToken
	}
	return false
}

type CAccountLinking_GetLinkedAccountInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalAccounts []*CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response `protobuf:"bytes,1,rep,name=external_accounts,json=externalAccounts" json:"external_accounts,omitempty"`
}

func (x *CAccountLinking_GetLinkedAccountInfo_Response) Reset() {
	*x = CAccountLinking_GetLinkedAccountInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountLinking_GetLinkedAccountInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountLinking_GetLinkedAccountInfo_Response) ProtoMessage() {}

func (x *CAccountLinking_GetLinkedAccountInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountLinking_GetLinkedAccountInfo_Response.ProtoReflect.Descriptor instead.
func (*CAccountLinking_GetLinkedAccountInfo_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{23}
}

func (x *CAccountLinking_GetLinkedAccountInfo_Response) GetExternalAccounts() []*CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response {
	if x != nil {
		return x.ExternalAccounts
	}
	return nil
}

type CEmbeddedClient_AuthorizeCurrentDevice_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid    *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	Appid      *uint32 `protobuf:"varint,2,opt,name=appid" json:"appid,omitempty"`
	DeviceInfo *string `protobuf:"bytes,3,opt,name=device_info,json=deviceInfo" json:"device_info,omitempty"`
	Deviceid   *uint32 `protobuf:"varint,4,opt,name=deviceid" json:"deviceid,omitempty"`
}

func (x *CEmbeddedClient_AuthorizeCurrentDevice_Request) Reset() {
	*x = CEmbeddedClient_AuthorizeCurrentDevice_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEmbeddedClient_AuthorizeCurrentDevice_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEmbeddedClient_AuthorizeCurrentDevice_Request) ProtoMessage() {}

func (x *CEmbeddedClient_AuthorizeCurrentDevice_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEmbeddedClient_AuthorizeCurrentDevice_Request.ProtoReflect.Descriptor instead.
func (*CEmbeddedClient_AuthorizeCurrentDevice_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{24}
}

func (x *CEmbeddedClient_AuthorizeCurrentDevice_Request) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CEmbeddedClient_AuthorizeCurrentDevice_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CEmbeddedClient_AuthorizeCurrentDevice_Request) GetDeviceInfo() string {
	if x != nil && x.DeviceInfo != nil {
		return *x.DeviceInfo
	}
	return ""
}

func (x *CEmbeddedClient_AuthorizeCurrentDevice_Request) GetDeviceid() uint32 {
	if x != nil && x.Deviceid != nil {
		return *x.Deviceid
	}
	return 0
}

type CEmbeddedClient_Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steamid     *uint64 `protobuf:"fixed64,1,opt,name=steamid" json:"steamid,omitempty"`
	ClientToken []byte  `protobuf:"bytes,2,opt,name=client_token,json=clientToken" json:"client_token,omitempty"`
	Expiry      *uint32 `protobuf:"varint,3,opt,name=expiry" json:"expiry,omitempty"`
	Deviceid    *uint32 `protobuf:"varint,4,opt,name=deviceid" json:"deviceid,omitempty"`
}

func (x *CEmbeddedClient_Token) Reset() {
	*x = CEmbeddedClient_Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEmbeddedClient_Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEmbeddedClient_Token) ProtoMessage() {}

func (x *CEmbeddedClient_Token) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEmbeddedClient_Token.ProtoReflect.Descriptor instead.
func (*CEmbeddedClient_Token) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{25}
}

func (x *CEmbeddedClient_Token) GetSteamid() uint64 {
	if x != nil && x.Steamid != nil {
		return *x.Steamid
	}
	return 0
}

func (x *CEmbeddedClient_Token) GetClientToken() []byte {
	if x != nil {
		return x.ClientToken
	}
	return nil
}

func (x *CEmbeddedClient_Token) GetExpiry() uint32 {
	if x != nil && x.Expiry != nil {
		return *x.Expiry
	}
	return 0
}

func (x *CEmbeddedClient_Token) GetDeviceid() uint32 {
	if x != nil && x.Deviceid != nil {
		return *x.Deviceid
	}
	return 0
}

type CEmbeddedClient_AuthorizeDevice_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *uint32                `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Token  *CEmbeddedClient_Token `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (x *CEmbeddedClient_AuthorizeDevice_Response) Reset() {
	*x = CEmbeddedClient_AuthorizeDevice_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CEmbeddedClient_AuthorizeDevice_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CEmbeddedClient_AuthorizeDevice_Response) ProtoMessage() {}

func (x *CEmbeddedClient_AuthorizeDevice_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CEmbeddedClient_AuthorizeDevice_Response.ProtoReflect.Descriptor instead.
func (*CEmbeddedClient_AuthorizeDevice_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{26}
}

func (x *CEmbeddedClient_AuthorizeDevice_Response) GetResult() uint32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *CEmbeddedClient_AuthorizeDevice_Response) GetToken() *CEmbeddedClient_Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Promotionid                 *uint32 `protobuf:"varint,1,opt,name=promotionid" json:"promotionid,omitempty"`
	PromotionDescription        *string `protobuf:"bytes,2,opt,name=promotion_description,json=promotionDescription" json:"promotion_description,omitempty"`
	MinimumCartAmount           *int64  `protobuf:"varint,3,opt,name=minimum_cart_amount,json=minimumCartAmount" json:"minimum_cart_amount,omitempty"`
	MinimumCartAmountForDisplay *int64  `protobuf:"varint,4,opt,name=minimum_cart_amount_for_display,json=minimumCartAmountForDisplay" json:"minimum_cart_amount_for_display,omitempty"`
	DiscountAmount              *int64  `protobuf:"varint,5,opt,name=discount_amount,json=discountAmount" json:"discount_amount,omitempty"`
	CurrencyCode                *int32  `protobuf:"varint,6,opt,name=currency_code,json=currencyCode" json:"currency_code,omitempty"`
	AvailableUseCount           *int32  `protobuf:"varint,7,opt,name=available_use_count,json=availableUseCount" json:"available_use_count,omitempty"`
	PromotionalDiscountType     *int32  `protobuf:"varint,8,opt,name=promotional_discount_type,json=promotionalDiscountType" json:"promotional_discount_type,omitempty"`
	LoyaltyRewardId             *int32  `protobuf:"varint,9,opt,name=loyalty_reward_id,json=loyaltyRewardId" json:"loyalty_reward_id,omitempty"`
	LocalizedNameToken          *string `protobuf:"bytes,10,opt,name=localized_name_token,json=localizedNameToken" json:"localized_name_token,omitempty"`
	MaxUseCount                 *int32  `protobuf:"varint,11,opt,name=max_use_count,json=maxUseCount" json:"max_use_count,omitempty"`
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) Reset() {
	*x = CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) ProtoMessage() {
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails.ProtoReflect.Descriptor instead.
func (*CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetPromotionid() uint32 {
	if x != nil && x.Promotionid != nil {
		return *x.Promotionid
	}
	return 0
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetPromotionDescription() string {
	if x != nil && x.PromotionDescription != nil {
		return *x.PromotionDescription
	}
	return ""
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetMinimumCartAmount() int64 {
	if x != nil && x.MinimumCartAmount != nil {
		return *x.MinimumCartAmount
	}
	return 0
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetMinimumCartAmountForDisplay() int64 {
	if x != nil && x.MinimumCartAmountForDisplay != nil {
		return *x.MinimumCartAmountForDisplay
	}
	return 0
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetDiscountAmount() int64 {
	if x != nil && x.DiscountAmount != nil {
		return *x.DiscountAmount
	}
	return 0
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetCurrencyCode() int32 {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return 0
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetAvailableUseCount() int32 {
	if x != nil && x.AvailableUseCount != nil {
		return *x.AvailableUseCount
	}
	return 0
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetPromotionalDiscountType() int32 {
	if x != nil && x.PromotionalDiscountType != nil {
		return *x.PromotionalDiscountType
	}
	return 0
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetLoyaltyRewardId() int32 {
	if x != nil && x.LoyaltyRewardId != nil {
		return *x.LoyaltyRewardId
	}
	return 0
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetLocalizedNameToken() string {
	if x != nil && x.LocalizedNameToken != nil {
		return *x.LocalizedNameToken
	}
	return ""
}

func (x *CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails) GetMaxUseCount() int32 {
	if x != nil && x.MaxUseCount != nil {
		return *x.MaxUseCount
	}
	return 0
}

type CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalType      *EExternalAccountType `protobuf:"varint,1,opt,name=external_type,json=externalType,enum=EExternalAccountType,def=0" json:"external_type,omitempty"`
	ExternalId        *string               `protobuf:"bytes,2,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
	ExternalUserName  *string               `protobuf:"bytes,3,opt,name=external_user_name,json=externalUserName" json:"external_user_name,omitempty"`
	ExternalUrl       *string               `protobuf:"bytes,4,opt,name=external_url,json=externalUrl" json:"external_url,omitempty"`
	AccessToken       *string               `protobuf:"bytes,5,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	AccessTokenSecret *string               `protobuf:"bytes,6,opt,name=access_token_secret,json=accessTokenSecret" json:"access_token_secret,omitempty"`
	IsValid           *bool                 `protobuf:"varint,7,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
}

// Default values for CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response fields.
const (
	Default_CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_ExternalType = EExternalAccountType_k_EExternalNone
)

func (x *CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response) Reset() {
	*x = CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response) ProtoMessage() {}

func (x *CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_useraccount_steamclient_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response.ProtoReflect.Descriptor instead.
func (*CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_useraccount_steamclient_proto_rawDescGZIP(), []int{23, 0}
}

func (x *CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response) GetExternalType() EExternalAccountType {
	if x != nil && x.ExternalType != nil {
		return *x.ExternalType
	}
	return Default_CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response_ExternalType
}

func (x *CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response) GetExternalId() string {
	if x != nil && x.ExternalId != nil {
		return *x.ExternalId
	}
	return ""
}

func (x *CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response) GetExternalUserName() string {
	if x != nil && x.ExternalUserName != nil {
		return *x.ExternalUserName
	}
	return ""
}

func (x *CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response) GetExternalUrl() string {
	if x != nil && x.ExternalUrl != nil {
		return *x.ExternalUrl
	}
	return ""
}

func (x *CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

func (x *CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response) GetAccessTokenSecret() string {
	if x != nil && x.AccessTokenSecret != nil {
		return *x.AccessTokenSecret
	}
	return ""
}

func (x *CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response) GetIsValid() bool {
	if x != nil && x.IsValid != nil {
		return *x.IsValid
	}
	return false
}

var File_steammessages_useraccount_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_useraccount_steamclient_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5d, 0x0a, 0x38, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xe0, 0x05, 0x0a, 0x39, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x78, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xa8, 0x04, 0x0a,
	0x1d, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64,
	0x12, 0x33, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x63, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x63, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x55,
	0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x2b, 0x43, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x55, 0x73, 0x64, 0x12, 0x26, 0x0a, 0x0d,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0xf6, 0x04, 0x0a, 0x26, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68,
	0x61, 0x73, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x68, 0x61, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x78, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x54,
	0x78, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x78, 0x6e, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x54, 0x78, 0x6e, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x55, 0x73, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x55, 0x73, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x68, 0x61, 0x73,
	0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x68, 0x61, 0x73, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74,
	0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x2b, 0x0a, 0x29, 0x43, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x2a, 0x43, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x77, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x77, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x0a, 0x1a, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x41, 0x67, 0x65,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x28,
	0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x2b,
	0x0a, 0x29, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x41,
	0x70, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x23, 0x43,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x24,
	0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x9b,
	0x01, 0x0a, 0x2c, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x22, 0xd7, 0x01, 0x0a,
	0x2d, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x2a, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x2b, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x69, 0x0a, 0x2a, 0x43,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x56, 0x69, 0x65, 0x77,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x2b, 0x43, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x56, 0x69, 0x65, 0x77, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x6b, 0x0a, 0x2c, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2f, 0x0a, 0x2d,
	0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x64,
	0x65, 0x65, 0x6d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a,
	0x2c, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x2f, 0x0a, 0x2d, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4a, 0x0a, 0x27, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x54, 0x6f, 0x6f, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x22, 0x2a, 0x0a,
	0x28, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x54, 0x6f, 0x6f, 0x6c,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd0, 0x03, 0x0a, 0x2c, 0x43, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1b, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x17, 0x82, 0xb5, 0x18, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x49, 0x44, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x7c, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x0f, 0x6b, 0x5f, 0x45, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x6e,
	0x65, 0x42, 0x3c, 0x82, 0xb5, 0x18, 0x38, 0x69, 0x66, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x92, 0x01, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x62, 0x82, 0xb5, 0x18, 0x5e, 0x69, 0x66, 0x20, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c,
	0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x20, 0x69, 0x66, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x20, 0x49,
	0x74, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x20, 0x52, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xff, 0x06, 0x0a,
	0x2d, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a,
	0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x43, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0xd1, 0x05, 0x0a, 0x1e, 0x43,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x75, 0x70, 0x6c, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0f, 0x6b, 0x5f, 0x45,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x0c, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0x82, 0xb5, 0x18, 0x22, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1e, 0x82, 0xb5, 0x18, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x20, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x3b, 0x20, 0x62, 0x65, 0x73, 0x74, 0x20, 0x65, 0x66, 0x66, 0x6f, 0x72, 0x74, 0x52,
	0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x60, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3d, 0x82, 0xb5, 0x18, 0x39, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x2c, 0x20, 0x63,
	0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x61, 0x6c,
	0x20, 0x74, 0x6f, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x55, 0x72, 0x6c, 0x12, 0x4d, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x82, 0xb5, 0x18, 0x26, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x69, 0x66, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x65, 0x73, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x2e, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x7e, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x4e, 0x82, 0xb5, 0x18, 0x4a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x20, 0x76, 0x31, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2c, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x52,
	0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x7e, 0x82, 0xb5, 0x18, 0x7a, 0x49, 0x66, 0x20, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x20, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x6e, 0x6f, 0x20, 0x6c, 0x6f,
	0x6e, 0x67, 0x65, 0x72, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x28, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x2c, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x69,
	0x73, 0x20, 0x6e, 0x6f, 0x77, 0x20, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x20, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x2e, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x9d,
	0x01, 0x0a, 0x2e, 0x43, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x22, 0x88,
	0x01, 0x0a, 0x15, 0x43, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x22, 0x70, 0x0a, 0x28, 0x43, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2a, 0x8d, 0x01, 0x0a, 0x14,
	0x45, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x04, 0x2a, 0x86, 0x02, 0x0a, 0x14,
	0x45, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x5f, 0x45, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x5f, 0x45, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x54, 0x77, 0x69, 0x74, 0x63, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10,
	0x05, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x59, 0x6f, 0x75, 0x54, 0x75, 0x62, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x5f, 0x45, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x61,
	0x67, 0x65, 0x10, 0x07, 0x32, 0xc1, 0x0f, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0xe0, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x2e, 0x43,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xb5, 0x18, 0x3e, 0x47, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x12, 0xa7, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x2c, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xb5, 0x18, 0x32, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74,
	0x20, 0x61, 0x6e, 0x79, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x12, 0x90, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x2e, 0x43, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xb5, 0x18, 0x1b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x20, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x12, 0x29, 0x2e, 0x43,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xb5, 0x18, 0x21, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x73,
	0x20, 0x61, 0x20, 0x66, 0x72, 0x65, 0x65, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x12, 0xc9, 0x01, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x24, 0x2e,
	0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x82, 0xb5, 0x18, 0x66,
	0x47, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20,
	0x63, 0x6f, 0x64, 0x65, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x69, 0x64, 0x20, 0x28, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x67,
	0x65, 0x64, 0x2d, 0x69, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x29, 0x12, 0xc4, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2d, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4a, 0x82, 0xb5, 0x18, 0x46, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x2d, 0x75, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xa1, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x47, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x9b, 0x01, 0x0a, 0x15, 0x56, 0x69, 0x65, 0x77, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x2e, 0x43, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x56, 0x69, 0x65, 0x77, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x56, 0x69, 0x65, 0x77, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xb5, 0x18, 0x23, 0x56, 0x69, 0x65, 0x77,
	0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61,
	0x6e, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x12,
	0xb7, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x2e, 0x43, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x64, 0x65, 0x65,
	0x6d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x43, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xb5, 0x18, 0x39,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x20,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x20, 0x75, 0x73, 0x69,
	0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xa2, 0x01, 0x0a, 0x17, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2d, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xb5, 0x18, 0x24, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x20, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x20, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x98,
	0x01, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x43, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x54, 0x6f, 0x6f,
	0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xb5, 0x18, 0x29,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x61, 0x20, 0x74, 0x6f, 0x6f, 0x6c, 0x1a, 0x2d, 0x82, 0xb5, 0x18, 0x29, 0x41,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x9d, 0x02, 0x0a, 0x0e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0xd3, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x43, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5c, 0x82, 0xb5, 0x18, 0x58, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c,
	0x6c, 0x20, 0x6d, 0x79, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x3b, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x1a, 0x35, 0x82, 0xb5, 0x18, 0x31, 0x41, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c,
	0x69, 0x6e, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x32, 0xa4, 0x02, 0x0a, 0x0e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0xc1, 0x01, 0x0a, 0x16,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x43, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x43, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4b, 0x82, 0xb5, 0x18, 0x47, 0x55, 0x73, 0x65, 0x20, 0x61, 0x20, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x2d, 0x69, 0x6e, 0x20, 0x28, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x2f, 0x65, 0x74, 0x63, 0x29, 0x20, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x64, 0x75, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a,
	0x4e, 0x82, 0xb5, 0x18, 0x4a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x20, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x42,
	0x44, 0x42, 0x28, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x55, 0x73, 0x65, 0x72, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x13, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x65,
	0x61, 0x6d, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_useraccount_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_useraccount_steamclient_proto_rawDescData = file_steammessages_useraccount_steamclient_proto_rawDesc
)

func file_steammessages_useraccount_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_useraccount_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_useraccount_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_useraccount_steamclient_proto_rawDescData)
	})
	return file_steammessages_useraccount_steamclient_proto_rawDescData
}

var file_steammessages_useraccount_steamclient_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_steammessages_useraccount_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_steammessages_useraccount_steamclient_proto_goTypes = []interface{}{
	(EInternalAccountType)(0), // 0: EInternalAccountType
	(EExternalAccountType)(0), // 1: EExternalAccountType
	(*CUserAccount_GetAvailableValveDiscountPromotions_Request)(nil),                                // 2: CUserAccount_GetAvailableValveDiscountPromotions_Request
	(*CUserAccount_GetAvailableValveDiscountPromotions_Response)(nil),                               // 3: CUserAccount_GetAvailableValveDiscountPromotions_Response
	(*CUserAccount_GetClientWalletDetails_Request)(nil),                                             // 4: CUserAccount_GetClientWalletDetails_Request
	(*CUserAccount_GetWalletDetails_Response)(nil),                                                  // 5: CUserAccount_GetWalletDetails_Response
	(*CUserAccount_GetAccountLinkStatus_Request)(nil),                                               // 6: CUserAccount_GetAccountLinkStatus_Request
	(*CUserAccount_GetAccountLinkStatus_Response)(nil),                                              // 7: CUserAccount_GetAccountLinkStatus_Response
	(*CUserAccount_CancelLicenseForApp_Request)(nil),                                                // 8: CUserAccount_CancelLicenseForApp_Request
	(*CUserAccount_CancelLicenseForApp_Response)(nil),                                               // 9: CUserAccount_CancelLicenseForApp_Response
	(*CUserAccount_GetUserCountry_Request)(nil),                                                     // 10: CUserAccount_GetUserCountry_Request
	(*CUserAccount_GetUserCountry_Response)(nil),                                                    // 11: CUserAccount_GetUserCountry_Response
	(*CUserAccount_CreateFriendInviteToken_Request)(nil),                                            // 12: CUserAccount_CreateFriendInviteToken_Request
	(*CUserAccount_CreateFriendInviteToken_Response)(nil),                                           // 13: CUserAccount_CreateFriendInviteToken_Response
	(*CUserAccount_GetFriendInviteTokens_Request)(nil),                                              // 14: CUserAccount_GetFriendInviteTokens_Request
	(*CUserAccount_GetFriendInviteTokens_Response)(nil),                                             // 15: CUserAccount_GetFriendInviteTokens_Response
	(*CUserAccount_ViewFriendInviteToken_Request)(nil),                                              // 16: CUserAccount_ViewFriendInviteToken_Request
	(*CUserAccount_ViewFriendInviteToken_Response)(nil),                                             // 17: CUserAccount_ViewFriendInviteToken_Response
	(*CUserAccount_RedeemFriendInviteToken_Request)(nil),                                            // 18: CUserAccount_RedeemFriendInviteToken_Request
	(*CUserAccount_RedeemFriendInviteToken_Response)(nil),                                           // 19: CUserAccount_RedeemFriendInviteToken_Response
	(*CUserAccount_RevokeFriendInviteToken_Request)(nil),                                            // 20: CUserAccount_RevokeFriendInviteToken_Request
	(*CUserAccount_RevokeFriendInviteToken_Response)(nil),                                           // 21: CUserAccount_RevokeFriendInviteToken_Response
	(*CUserAccount_RegisterCompatTool_Request)(nil),                                                 // 22: CUserAccount_RegisterCompatTool_Request
	(*CUserAccount_RegisterCompatTool_Response)(nil),                                                // 23: CUserAccount_RegisterCompatTool_Response
	(*CAccountLinking_GetLinkedAccountInfo_Request)(nil),                                            // 24: CAccountLinking_GetLinkedAccountInfo_Request
	(*CAccountLinking_GetLinkedAccountInfo_Response)(nil),                                           // 25: CAccountLinking_GetLinkedAccountInfo_Response
	(*CEmbeddedClient_AuthorizeCurrentDevice_Request)(nil),                                          // 26: CEmbeddedClient_AuthorizeCurrentDevice_Request
	(*CEmbeddedClient_Token)(nil),                                                                   // 27: CEmbeddedClient_Token
	(*CEmbeddedClient_AuthorizeDevice_Response)(nil),                                                // 28: CEmbeddedClient_AuthorizeDevice_Response
	(*CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails)(nil), // 29: CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails
	(*CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response)(nil),            // 30: CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response
}
var file_steammessages_useraccount_steamclient_proto_depIdxs = []int32{
	29, // 0: CUserAccount_GetAvailableValveDiscountPromotions_Response.promotions:type_name -> CUserAccount_GetAvailableValveDiscountPromotions_Response.ValveDiscountPromotionDetails
	13, // 1: CUserAccount_GetFriendInviteTokens_Response.tokens:type_name -> CUserAccount_CreateFriendInviteToken_Response
	0,  // 2: CAccountLinking_GetLinkedAccountInfo_Request.account_type:type_name -> EInternalAccountType
	1,  // 3: CAccountLinking_GetLinkedAccountInfo_Request.filter:type_name -> EExternalAccountType
	30, // 4: CAccountLinking_GetLinkedAccountInfo_Response.external_accounts:type_name -> CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response
	27, // 5: CEmbeddedClient_AuthorizeDevice_Response.token:type_name -> CEmbeddedClient_Token
	1,  // 6: CAccountLinking_GetLinkedAccountInfo_Response.CExternalAccountTuple_Response.external_type:type_name -> EExternalAccountType
	2,  // 7: UserAccount.GetAvailableValveDiscountPromotions:input_type -> CUserAccount_GetAvailableValveDiscountPromotions_Request
	4,  // 8: UserAccount.GetClientWalletDetails:input_type -> CUserAccount_GetClientWalletDetails_Request
	6,  // 9: UserAccount.GetAccountLinkStatus:input_type -> CUserAccount_GetAccountLinkStatus_Request
	8,  // 10: UserAccount.CancelLicenseForApp:input_type -> CUserAccount_CancelLicenseForApp_Request
	10, // 11: UserAccount.GetUserCountry:input_type -> CUserAccount_GetUserCountry_Request
	12, // 12: UserAccount.CreateFriendInviteToken:input_type -> CUserAccount_CreateFriendInviteToken_Request
	14, // 13: UserAccount.GetFriendInviteTokens:input_type -> CUserAccount_GetFriendInviteTokens_Request
	16, // 14: UserAccount.ViewFriendInviteToken:input_type -> CUserAccount_ViewFriendInviteToken_Request
	18, // 15: UserAccount.RedeemFriendInviteToken:input_type -> CUserAccount_RedeemFriendInviteToken_Request
	20, // 16: UserAccount.RevokeFriendInviteToken:input_type -> CUserAccount_RevokeFriendInviteToken_Request
	22, // 17: UserAccount.RegisterCompatTool:input_type -> CUserAccount_RegisterCompatTool_Request
	24, // 18: AccountLinking.GetLinkedAccountInfo:input_type -> CAccountLinking_GetLinkedAccountInfo_Request
	26, // 19: EmbeddedClient.AuthorizeCurrentDevice:input_type -> CEmbeddedClient_AuthorizeCurrentDevice_Request
	3,  // 20: UserAccount.GetAvailableValveDiscountPromotions:output_type -> CUserAccount_GetAvailableValveDiscountPromotions_Response
	5,  // 21: UserAccount.GetClientWalletDetails:output_type -> CUserAccount_GetWalletDetails_Response
	7,  // 22: UserAccount.GetAccountLinkStatus:output_type -> CUserAccount_GetAccountLinkStatus_Response
	9,  // 23: UserAccount.CancelLicenseForApp:output_type -> CUserAccount_CancelLicenseForApp_Response
	11, // 24: UserAccount.GetUserCountry:output_type -> CUserAccount_GetUserCountry_Response
	13, // 25: UserAccount.CreateFriendInviteToken:output_type -> CUserAccount_CreateFriendInviteToken_Response
	15, // 26: UserAccount.GetFriendInviteTokens:output_type -> CUserAccount_GetFriendInviteTokens_Response
	17, // 27: UserAccount.ViewFriendInviteToken:output_type -> CUserAccount_ViewFriendInviteToken_Response
	19, // 28: UserAccount.RedeemFriendInviteToken:output_type -> CUserAccount_RedeemFriendInviteToken_Response
	21, // 29: UserAccount.RevokeFriendInviteToken:output_type -> CUserAccount_RevokeFriendInviteToken_Response
	23, // 30: UserAccount.RegisterCompatTool:output_type -> CUserAccount_RegisterCompatTool_Response
	25, // 31: AccountLinking.GetLinkedAccountInfo:output_type -> CAccountLinking_GetLinkedAccountInfo_Response
	28, // 32: EmbeddedClient.AuthorizeCurrentDevice:output_type -> CEmbeddedClient_AuthorizeDevice_Response
	20, // [20:33] is the sub-list for method output_type
	7,  // [7:20] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_steammessages_useraccount_steamclient_proto_init() }
func file_steammessages_useraccount_steamclient_proto_init() {
	if File_steammessages_useraccount_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_useraccount_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_GetAvailableValveDiscountPromotions_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_GetAvailableValveDiscountPromotions_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_GetClientWalletDetails_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_GetWalletDetails_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_GetAccountLinkStatus_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_GetAccountLinkStatus_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_CancelLicenseForApp_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_CancelLicenseForApp_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_GetUserCountry_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_GetUserCountry_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_CreateFriendInviteToken_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_CreateFriendInviteToken_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_GetFriendInviteTokens_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_GetFriendInviteTokens_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_ViewFriendInviteToken_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_ViewFriendInviteToken_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_RedeemFriendInviteToken_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_RedeemFriendInviteToken_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_RevokeFriendInviteToken_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_RevokeFriendInviteToken_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_RegisterCompatTool_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_RegisterCompatTool_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountLinking_GetLinkedAccountInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountLinking_GetLinkedAccountInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEmbeddedClient_AuthorizeCurrentDevice_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEmbeddedClient_Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CEmbeddedClient_AuthorizeDevice_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CUserAccount_GetAvailableValveDiscountPromotions_Response_ValveDiscountPromotionDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_useraccount_steamclient_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CAccountLinking_GetLinkedAccountInfo_Response_CExternalAccountTuple_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_useraccount_steamclient_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_steammessages_useraccount_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_useraccount_steamclient_proto_depIdxs,
		EnumInfos:         file_steammessages_useraccount_steamclient_proto_enumTypes,
		MessageInfos:      file_steammessages_useraccount_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_useraccount_steamclient_proto = out.File
	file_steammessages_useraccount_steamclient_proto_rawDesc = nil
	file_steammessages_useraccount_steamclient_proto_goTypes = nil
	file_steammessages_useraccount_steamclient_proto_depIdxs = nil
}
