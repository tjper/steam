// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: steammessages_clientsettings.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EClientSettingStore int32

const (
	EClientSettingStore_k_EClientSettingStore_Invalid                 EClientSettingStore = 0
	EClientSettingStore_k_EClientSettingStore_ConfigStore_Install     EClientSettingStore = 1
	EClientSettingStore_k_EClientSettingStore_ConfigStore_UserRoaming EClientSettingStore = 2
	EClientSettingStore_k_EClientSettingStore_ConfigStore_UserLocal   EClientSettingStore = 3
	EClientSettingStore_k_EClientSettingStore_Registry                EClientSettingStore = 4
	EClientSettingStore_k_EClientSettingStore_CustomFunc              EClientSettingStore = 5
)

// Enum value maps for EClientSettingStore.
var (
	EClientSettingStore_name = map[int32]string{
		0: "k_EClientSettingStore_Invalid",
		1: "k_EClientSettingStore_ConfigStore_Install",
		2: "k_EClientSettingStore_ConfigStore_UserRoaming",
		3: "k_EClientSettingStore_ConfigStore_UserLocal",
		4: "k_EClientSettingStore_Registry",
		5: "k_EClientSettingStore_CustomFunc",
	}
	EClientSettingStore_value = map[string]int32{
		"k_EClientSettingStore_Invalid":                 0,
		"k_EClientSettingStore_ConfigStore_Install":     1,
		"k_EClientSettingStore_ConfigStore_UserRoaming": 2,
		"k_EClientSettingStore_ConfigStore_UserLocal":   3,
		"k_EClientSettingStore_Registry":                4,
		"k_EClientSettingStore_CustomFunc":              5,
	}
)

func (x EClientSettingStore) Enum() *EClientSettingStore {
	p := new(EClientSettingStore)
	*p = x
	return p
}

func (x EClientSettingStore) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EClientSettingStore) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientsettings_proto_enumTypes[0].Descriptor()
}

func (EClientSettingStore) Type() protoreflect.EnumType {
	return &file_steammessages_clientsettings_proto_enumTypes[0]
}

func (x EClientSettingStore) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EClientSettingStore) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EClientSettingStore(num)
	return nil
}

// Deprecated: Use EClientSettingStore.Descriptor instead.
func (EClientSettingStore) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientsettings_proto_rawDescGZIP(), []int{0}
}

type EOverlayToggleBarLocation int32

const (
	EOverlayToggleBarLocation_k_EOverlayToggleBarLocation_Bottom EOverlayToggleBarLocation = 0
	EOverlayToggleBarLocation_k_EOverlayToggleBarLocation_Left   EOverlayToggleBarLocation = 1
	EOverlayToggleBarLocation_k_EOverlayToggleBarLocation_Right  EOverlayToggleBarLocation = 2
	EOverlayToggleBarLocation_k_EOverlayToggleBarLocation_Top    EOverlayToggleBarLocation = 3
)

// Enum value maps for EOverlayToggleBarLocation.
var (
	EOverlayToggleBarLocation_name = map[int32]string{
		0: "k_EOverlayToggleBarLocation_Bottom",
		1: "k_EOverlayToggleBarLocation_Left",
		2: "k_EOverlayToggleBarLocation_Right",
		3: "k_EOverlayToggleBarLocation_Top",
	}
	EOverlayToggleBarLocation_value = map[string]int32{
		"k_EOverlayToggleBarLocation_Bottom": 0,
		"k_EOverlayToggleBarLocation_Left":   1,
		"k_EOverlayToggleBarLocation_Right":  2,
		"k_EOverlayToggleBarLocation_Top":    3,
	}
)

func (x EOverlayToggleBarLocation) Enum() *EOverlayToggleBarLocation {
	p := new(EOverlayToggleBarLocation)
	*p = x
	return p
}

func (x EOverlayToggleBarLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EOverlayToggleBarLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientsettings_proto_enumTypes[1].Descriptor()
}

func (EOverlayToggleBarLocation) Type() protoreflect.EnumType {
	return &file_steammessages_clientsettings_proto_enumTypes[1]
}

func (x EOverlayToggleBarLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EOverlayToggleBarLocation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EOverlayToggleBarLocation(num)
	return nil
}

// Deprecated: Use EOverlayToggleBarLocation.Descriptor instead.
func (EOverlayToggleBarLocation) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientsettings_proto_rawDescGZIP(), []int{1}
}

type ESettingProfileMode int32

const (
	ESettingProfileMode_k_ESettingProfileMode_None              ESettingProfileMode = 0
	ESettingProfileMode_k_ESettingProfileMode_PerGame           ESettingProfileMode = 1
	ESettingProfileMode_k_ESettingProfileMode_PerGamePerDisplay ESettingProfileMode = 2
)

// Enum value maps for ESettingProfileMode.
var (
	ESettingProfileMode_name = map[int32]string{
		0: "k_ESettingProfileMode_None",
		1: "k_ESettingProfileMode_PerGame",
		2: "k_ESettingProfileMode_PerGamePerDisplay",
	}
	ESettingProfileMode_value = map[string]int32{
		"k_ESettingProfileMode_None":              0,
		"k_ESettingProfileMode_PerGame":           1,
		"k_ESettingProfileMode_PerGamePerDisplay": 2,
	}
)

func (x ESettingProfileMode) Enum() *ESettingProfileMode {
	p := new(ESettingProfileMode)
	*p = x
	return p
}

func (x ESettingProfileMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESettingProfileMode) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_clientsettings_proto_enumTypes[2].Descriptor()
}

func (ESettingProfileMode) Type() protoreflect.EnumType {
	return &file_steammessages_clientsettings_proto_enumTypes[2]
}

func (x ESettingProfileMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESettingProfileMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESettingProfileMode(num)
	return nil
}

// Deprecated: Use ESettingProfileMode.Descriptor instead.
func (ESettingProfileMode) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_clientsettings_proto_rawDescGZIP(), []int{2}
}

type CMsgHotkey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyCode     *uint32 `protobuf:"varint,1,opt,name=key_code,json=keyCode" json:"key_code,omitempty"`
	AltKey      *bool   `protobuf:"varint,2,opt,name=alt_key,json=altKey" json:"alt_key,omitempty"`
	ShiftKey    *bool   `protobuf:"varint,3,opt,name=shift_key,json=shiftKey" json:"shift_key,omitempty"`
	CtrlKey     *bool   `protobuf:"varint,4,opt,name=ctrl_key,json=ctrlKey" json:"ctrl_key,omitempty"`
	MetaKey     *bool   `protobuf:"varint,5,opt,name=meta_key,json=metaKey" json:"meta_key,omitempty"`
	DisplayName *string `protobuf:"bytes,6,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
}

func (x *CMsgHotkey) Reset() {
	*x = CMsgHotkey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientsettings_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgHotkey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgHotkey) ProtoMessage() {}

func (x *CMsgHotkey) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientsettings_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgHotkey.ProtoReflect.Descriptor instead.
func (*CMsgHotkey) Descriptor() ([]byte, []int) {
	return file_steammessages_clientsettings_proto_rawDescGZIP(), []int{0}
}

func (x *CMsgHotkey) GetKeyCode() uint32 {
	if x != nil && x.KeyCode != nil {
		return *x.KeyCode
	}
	return 0
}

func (x *CMsgHotkey) GetAltKey() bool {
	if x != nil && x.AltKey != nil {
		return *x.AltKey
	}
	return false
}

func (x *CMsgHotkey) GetShiftKey() bool {
	if x != nil && x.ShiftKey != nil {
		return *x.ShiftKey
	}
	return false
}

func (x *CMsgHotkey) GetCtrlKey() bool {
	if x != nil && x.CtrlKey != nil {
		return *x.CtrlKey
	}
	return false
}

func (x *CMsgHotkey) GetMetaKey() bool {
	if x != nil && x.MetaKey != nil {
		return *x.MetaKey
	}
	return false
}

func (x *CMsgHotkey) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

type CMsgClientSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoSavePersonalInfo                    *bool                     `protobuf:"varint,1,opt,name=no_save_personal_info,json=noSavePersonalInfo" json:"no_save_personal_info,omitempty"`
	OobeTestModeEnabled                   *bool                     `protobuf:"varint,2,opt,name=oobe_test_mode_enabled,json=oobeTestModeEnabled" json:"oobe_test_mode_enabled,omitempty"`
	InClientBeta                          *bool                     `protobuf:"varint,3,opt,name=in_client_beta,json=inClientBeta" json:"in_client_beta,omitempty"`
	IsSteamSideloaded                     *bool                     `protobuf:"varint,4,opt,name=is_steam_sideloaded,json=isSteamSideloaded" json:"is_steam_sideloaded,omitempty"`
	PreferredMonitor                      *string                   `protobuf:"bytes,5,opt,name=preferred_monitor,json=preferredMonitor" json:"preferred_monitor,omitempty"`
	SteamCefGpuBlocklistDisabled          *bool                     `protobuf:"varint,6,opt,name=steam_cef_gpu_blocklist_disabled,json=steamCefGpuBlocklistDisabled" json:"steam_cef_gpu_blocklist_disabled,omitempty"`
	BigpictureWindowed                    *bool                     `protobuf:"varint,7,opt,name=bigpicture_windowed,json=bigpictureWindowed" json:"bigpicture_windowed,omitempty"`
	DisplayName                           *string                   `protobuf:"bytes,8,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	IsExternalDisplay                     *bool                     `protobuf:"varint,9,opt,name=is_external_display,json=isExternalDisplay" json:"is_external_display,omitempty"`
	SteamOsUnderscanLevel                 *float32                  `protobuf:"fixed32,10,opt,name=steam_os_underscan_level,json=steamOsUnderscanLevel" json:"steam_os_underscan_level,omitempty"`
	SteamOsUnderscanEnabled               *bool                     `protobuf:"varint,11,opt,name=steam_os_underscan_enabled,json=steamOsUnderscanEnabled" json:"steam_os_underscan_enabled,omitempty"`
	MinScaleFactor                        *float32                  `protobuf:"fixed32,12,opt,name=min_scale_factor,json=minScaleFactor" json:"min_scale_factor,omitempty"`
	MaxScaleFactor                        *float32                  `protobuf:"fixed32,13,opt,name=max_scale_factor,json=maxScaleFactor" json:"max_scale_factor,omitempty"`
	AutoScaleFactor                       *float32                  `protobuf:"fixed32,14,opt,name=auto_scale_factor,json=autoScaleFactor" json:"auto_scale_factor,omitempty"`
	SmallMode                             *bool                     `protobuf:"varint,16,opt,name=small_mode,json=smallMode" json:"small_mode,omitempty"`
	SkipSteamvrInstallDialog              *bool                     `protobuf:"varint,19,opt,name=skip_steamvr_install_dialog,json=skipSteamvrInstallDialog" json:"skip_steamvr_install_dialog,omitempty"`
	AlwaysShowUserChooser                 *bool                     `protobuf:"varint,20,opt,name=always_show_user_chooser,json=alwaysShowUserChooser" json:"always_show_user_chooser,omitempty"`
	ShowFamilySharingNotifications        *bool                     `protobuf:"varint,3000,opt,name=show_family_sharing_notifications,json=showFamilySharingNotifications" json:"show_family_sharing_notifications,omitempty"`
	OverlayFpsCounterCorner               *int32                    `protobuf:"varint,4000,opt,name=overlay_fps_counter_corner,json=overlayFpsCounterCorner" json:"overlay_fps_counter_corner,omitempty"`
	OverlayFpsCounterHighContrast         *bool                     `protobuf:"varint,4001,opt,name=overlay_fps_counter_high_contrast,json=overlayFpsCounterHighContrast" json:"overlay_fps_counter_high_contrast,omitempty"`
	OverlayKey                            *CMsgHotkey               `protobuf:"bytes,4002,opt,name=overlay_key,json=overlayKey" json:"overlay_key,omitempty"`
	ScreenshotKey                         *CMsgHotkey               `protobuf:"bytes,4003,opt,name=screenshot_key,json=screenshotKey" json:"screenshot_key,omitempty"`
	EnableOverlay                         *bool                     `protobuf:"varint,4004,opt,name=enable_overlay,json=enableOverlay" json:"enable_overlay,omitempty"`
	EnableScreenshotNotification          *bool                     `protobuf:"varint,4006,opt,name=enable_screenshot_notification,json=enableScreenshotNotification" json:"enable_screenshot_notification,omitempty"`
	EnableScreenshotSound                 *bool                     `protobuf:"varint,4007,opt,name=enable_screenshot_sound,json=enableScreenshotSound" json:"enable_screenshot_sound,omitempty"`
	SaveUncompressedScreenshots           *bool                     `protobuf:"varint,4008,opt,name=save_uncompressed_screenshots,json=saveUncompressedScreenshots" json:"save_uncompressed_screenshots,omitempty"`
	ScreenshotsPath                       *string                   `protobuf:"bytes,4009,opt,name=screenshots_path,json=screenshotsPath" json:"screenshots_path,omitempty"`
	DefaultPingRate                       *int32                    `protobuf:"varint,4010,opt,name=default_ping_rate,json=defaultPingRate" json:"default_ping_rate,omitempty"`
	ServerPingRate                        *int32                    `protobuf:"varint,4011,opt,name=server_ping_rate,json=serverPingRate" json:"server_ping_rate,omitempty"`
	SteamNetworkingShareIp                *int32                    `protobuf:"varint,4012,opt,name=steam_networking_share_ip,json=steamNetworkingShareIp" json:"steam_networking_share_ip,omitempty"`
	WebBrowserHome                        *string                   `protobuf:"bytes,4013,opt,name=web_browser_home,json=webBrowserHome" json:"web_browser_home,omitempty"`
	VoiceMicDeviceName                    *string                   `protobuf:"bytes,4014,opt,name=voice_mic_device_name,json=voiceMicDeviceName" json:"voice_mic_device_name,omitempty"`
	VoiceMicInputGain                     *float32                  `protobuf:"fixed32,4015,opt,name=voice_mic_input_gain,json=voiceMicInputGain" json:"voice_mic_input_gain,omitempty"`
	VoiceSpeakerOutputGain                *float32                  `protobuf:"fixed32,4016,opt,name=voice_speaker_output_gain,json=voiceSpeakerOutputGain" json:"voice_speaker_output_gain,omitempty"`
	VoicePushToTalkSetting                *int32                    `protobuf:"varint,4017,opt,name=voice_push_to_talk_setting,json=voicePushToTalkSetting" json:"voice_push_to_talk_setting,omitempty"`
	VoicePushToTalkKey                    *CMsgHotkey               `protobuf:"bytes,4018,opt,name=voice_push_to_talk_key,json=voicePushToTalkKey" json:"voice_push_to_talk_key,omitempty"`
	OverlayToolbarListView                *bool                     `protobuf:"varint,4019,opt,name=overlay_toolbar_list_view,json=overlayToolbarListView" json:"overlay_toolbar_list_view,omitempty"`
	AlwaysUseGamepaduiOverlay             *bool                     `protobuf:"varint,4020,opt,name=always_use_gamepadui_overlay,json=alwaysUseGamepaduiOverlay" json:"always_use_gamepadui_overlay,omitempty"`
	OverlayTabs                           *string                   `protobuf:"bytes,4021,opt,name=overlay_tabs,json=overlayTabs" json:"overlay_tabs,omitempty"`
	OverlayScaleInterface                 *bool                     `protobuf:"varint,4022,opt,name=overlay_scale_interface,json=overlayScaleInterface" json:"overlay_scale_interface,omitempty"`
	OverlayRestoreBrowserTabs             *bool                     `protobuf:"varint,4023,opt,name=overlay_restore_browser_tabs,json=overlayRestoreBrowserTabs" json:"overlay_restore_browser_tabs,omitempty"`
	SmoothScrollWebviews                  *bool                     `protobuf:"varint,5000,opt,name=smooth_scroll_webviews,json=smoothScrollWebviews" json:"smooth_scroll_webviews,omitempty"`
	EnableGpuAcceleratedWebviews          *bool                     `protobuf:"varint,5001,opt,name=enable_gpu_accelerated_webviews,json=enableGpuAcceleratedWebviews" json:"enable_gpu_accelerated_webviews,omitempty"`
	EnableHardwareVideoDecoding           *bool                     `protobuf:"varint,5003,opt,name=enable_hardware_video_decoding,json=enableHardwareVideoDecoding" json:"enable_hardware_video_decoding,omitempty"`
	RunAtStartup                          *bool                     `protobuf:"varint,5004,opt,name=run_at_startup,json=runAtStartup" json:"run_at_startup,omitempty"`
	EnableDpiScaling                      *bool                     `protobuf:"varint,5005,opt,name=enable_dpi_scaling,json=enableDpiScaling" json:"enable_dpi_scaling,omitempty"`
	EnableMarketingMessages               *bool                     `protobuf:"varint,5006,opt,name=enable_marketing_messages,json=enableMarketingMessages" json:"enable_marketing_messages,omitempty"`
	StartInBigPictureMode                 *bool                     `protobuf:"varint,5007,opt,name=start_in_big_picture_mode,json=startInBigPictureMode" json:"start_in_big_picture_mode,omitempty"`
	JumplistFlags                         *uint32                   `protobuf:"varint,5008,opt,name=jumplist_flags,json=jumplistFlags" json:"jumplist_flags,omitempty"`
	EnableUiSounds                        *bool                     `protobuf:"varint,5009,opt,name=enable_ui_sounds,json=enableUiSounds" json:"enable_ui_sounds,omitempty"`
	DisableAllToasts                      *bool                     `protobuf:"varint,6000,opt,name=disable_all_toasts,json=disableAllToasts" json:"disable_all_toasts,omitempty"`
	DisableToastsInGame                   *bool                     `protobuf:"varint,6001,opt,name=disable_toasts_in_game,json=disableToastsInGame" json:"disable_toasts_in_game,omitempty"`
	PlaySoundOnToast                      *bool                     `protobuf:"varint,6002,opt,name=play_sound_on_toast,json=playSoundOnToast" json:"play_sound_on_toast,omitempty"`
	LibraryDisplaySize                    *int32                    `protobuf:"varint,7000,opt,name=library_display_size,json=libraryDisplaySize" json:"library_display_size,omitempty"`
	LibraryWhatsNewShowOnlyProductUpdates *bool                     `protobuf:"varint,7001,opt,name=library_whats_new_show_only_product_updates,json=libraryWhatsNewShowOnlyProductUpdates" json:"library_whats_new_show_only_product_updates,omitempty"`
	ShowStoreContentOnHome                *bool                     `protobuf:"varint,7002,opt,name=show_store_content_on_home,json=showStoreContentOnHome" json:"show_store_content_on_home,omitempty"`
	StartPage                             *string                   `protobuf:"bytes,7003,opt,name=start_page,json=startPage" json:"start_page,omitempty"`
	LibraryLowBandwidthMode               *bool                     `protobuf:"varint,7004,opt,name=library_low_bandwidth_mode,json=libraryLowBandwidthMode" json:"library_low_bandwidth_mode,omitempty"`
	LibraryLowPerfMode                    *bool                     `protobuf:"varint,7005,opt,name=library_low_perf_mode,json=libraryLowPerfMode" json:"library_low_perf_mode,omitempty"`
	LibraryDisableCommunityContent        *bool                     `protobuf:"varint,7006,opt,name=library_disable_community_content,json=libraryDisableCommunityContent" json:"library_disable_community_content,omitempty"`
	LibraryDisplayIconInGameList          *bool                     `protobuf:"varint,7007,opt,name=library_display_icon_in_game_list,json=libraryDisplayIconInGameList" json:"library_display_icon_in_game_list,omitempty"`
	ReadyToPlayIncludesStreaming          *bool                     `protobuf:"varint,7008,opt,name=ready_to_play_includes_streaming,json=readyToPlayIncludesStreaming" json:"ready_to_play_includes_streaming,omitempty"`
	ShowSteamDeckInfo                     *bool                     `protobuf:"varint,7009,opt,name=show_steam_deck_info,json=showSteamDeckInfo" json:"show_steam_deck_info,omitempty"`
	EnableShaderPrecache                  *bool                     `protobuf:"varint,8000,opt,name=enable_shader_precache,json=enableShaderPrecache" json:"enable_shader_precache,omitempty"`
	EnableShaderBackgroundProcessing      *bool                     `protobuf:"varint,8001,opt,name=enable_shader_background_processing,json=enableShaderBackgroundProcessing" json:"enable_shader_background_processing,omitempty"`
	ShaderPrecachedSize                   *uint64                   `protobuf:"varint,8002,opt,name=shader_precached_size,json=shaderPrecachedSize" json:"shader_precached_size,omitempty"`
	NeedsSteamServiceRepair               *bool                     `protobuf:"varint,8003,opt,name=needs_steam_service_repair,json=needsSteamServiceRepair" json:"needs_steam_service_repair,omitempty"`
	DownloadPeerContent                   *int32                    `protobuf:"varint,8004,opt,name=download_peer_content,json=downloadPeerContent" json:"download_peer_content,omitempty"`
	DownloadRateBitsPerS                  *bool                     `protobuf:"varint,8005,opt,name=download_rate_bits_per_s,json=downloadRateBitsPerS" json:"download_rate_bits_per_s,omitempty"`
	RestrictAutoUpdates                   *bool                     `protobuf:"varint,8006,opt,name=restrict_auto_updates,json=restrictAutoUpdates" json:"restrict_auto_updates,omitempty"`
	RestrictAutoUpdatesStart              *int32                    `protobuf:"varint,8007,opt,name=restrict_auto_updates_start,json=restrictAutoUpdatesStart" json:"restrict_auto_updates_start,omitempty"`
	RestrictAutoUpdatesEnd                *int32                    `protobuf:"varint,8008,opt,name=restrict_auto_updates_end,json=restrictAutoUpdatesEnd" json:"restrict_auto_updates_end,omitempty"`
	DownloadRegion                        *int32                    `protobuf:"varint,8009,opt,name=download_region,json=downloadRegion" json:"download_region,omitempty"`
	DownloadWhileAppRunning               *bool                     `protobuf:"varint,8010,opt,name=download_while_app_running,json=downloadWhileAppRunning" json:"download_while_app_running,omitempty"`
	DownloadThrottleWhileStreaming        *bool                     `protobuf:"varint,8011,opt,name=download_throttle_while_streaming,json=downloadThrottleWhileStreaming" json:"download_throttle_while_streaming,omitempty"`
	DownloadThrottleRate                  *int32                    `protobuf:"varint,8012,opt,name=download_throttle_rate,json=downloadThrottleRate" json:"download_throttle_rate,omitempty"`
	CloudEnabled                          *bool                     `protobuf:"varint,10000,opt,name=cloud_enabled,json=cloudEnabled" json:"cloud_enabled,omitempty"`
	ShowScreenshotManager                 *bool                     `protobuf:"varint,10001,opt,name=show_screenshot_manager,json=showScreenshotManager" json:"show_screenshot_manager,omitempty"`
	MusicVolume                           *int32                    `protobuf:"varint,11000,opt,name=music_volume,json=musicVolume" json:"music_volume,omitempty"`
	MusicPauseOnAppStart                  *bool                     `protobuf:"varint,11001,opt,name=music_pause_on_app_start,json=musicPauseOnAppStart" json:"music_pause_on_app_start,omitempty"`
	MusicPauseOnVoiceChat                 *bool                     `protobuf:"varint,11002,opt,name=music_pause_on_voice_chat,json=musicPauseOnVoiceChat" json:"music_pause_on_voice_chat,omitempty"`
	MusicDownloadHighQuality              *bool                     `protobuf:"varint,11003,opt,name=music_download_high_quality,json=musicDownloadHighQuality" json:"music_download_high_quality,omitempty"`
	MusicPlaylistNotification             *bool                     `protobuf:"varint,11004,opt,name=music_playlist_notification,json=musicPlaylistNotification" json:"music_playlist_notification,omitempty"`
	BroadcastPermissions                  *EBroadcastPermission     `protobuf:"varint,12000,opt,name=broadcast_permissions,json=broadcastPermissions,enum=EBroadcastPermission,def=0" json:"broadcast_permissions,omitempty"`
	BroadcastOutputWidth                  *int32                    `protobuf:"varint,12001,opt,name=broadcast_output_width,json=broadcastOutputWidth" json:"broadcast_output_width,omitempty"`
	BroadcastOutputHeight                 *int32                    `protobuf:"varint,12002,opt,name=broadcast_output_height,json=broadcastOutputHeight" json:"broadcast_output_height,omitempty"`
	BroadcastBitrate                      *int32                    `protobuf:"varint,12003,opt,name=broadcast_bitrate,json=broadcastBitrate" json:"broadcast_bitrate,omitempty"`
	BroadcastEncodingOption               *EBroadcastEncoderSetting `protobuf:"varint,12004,opt,name=broadcast_encoding_option,json=broadcastEncodingOption,enum=EBroadcastEncoderSetting,def=0" json:"broadcast_encoding_option,omitempty"`
	BroadcastRecordAllVideo               *bool                     `protobuf:"varint,12005,opt,name=broadcast_record_all_video,json=broadcastRecordAllVideo" json:"broadcast_record_all_video,omitempty"`
	BroadcastRecordAllAudio               *bool                     `protobuf:"varint,12006,opt,name=broadcast_record_all_audio,json=broadcastRecordAllAudio" json:"broadcast_record_all_audio,omitempty"`
	BroadcastRecordMicrophone             *bool                     `protobuf:"varint,12007,opt,name=broadcast_record_microphone,json=broadcastRecordMicrophone" json:"broadcast_record_microphone,omitempty"`
	BroadcastShowUploadStats              *bool                     `protobuf:"varint,12008,opt,name=broadcast_show_upload_stats,json=broadcastShowUploadStats" json:"broadcast_show_upload_stats,omitempty"`
	BroadcastShowLiveReminder             *bool                     `protobuf:"varint,12009,opt,name=broadcast_show_live_reminder,json=broadcastShowLiveReminder" json:"broadcast_show_live_reminder,omitempty"`
	BroadcastChatCorner                   *int32                    `protobuf:"varint,12010,opt,name=broadcast_chat_corner,json=broadcastChatCorner" json:"broadcast_chat_corner,omitempty"`
	SteamInputConfiguratorErrorMsgEnable  *bool                     `protobuf:"varint,14001,opt,name=steam_input_configurator_error_msg_enable,json=steamInputConfiguratorErrorMsgEnable" json:"steam_input_configurator_error_msg_enable,omitempty"`
	ControllerGuideButtonFocusSteam       *bool                     `protobuf:"varint,14002,opt,name=controller_guide_button_focus_steam,json=controllerGuideButtonFocusSteam" json:"controller_guide_button_focus_steam,omitempty"`
	ControllerPsSupport                   *int32                    `protobuf:"varint,14003,opt,name=controller_ps_support,json=controllerPsSupport" json:"controller_ps_support,omitempty"`
	ControllerXboxSupport                 *bool                     `protobuf:"varint,14004,opt,name=controller_xbox_support,json=controllerXboxSupport" json:"controller_xbox_support,omitempty"`
	ControllerXboxDriver                  *bool                     `protobuf:"varint,14005,opt,name=controller_xbox_driver,json=controllerXboxDriver" json:"controller_xbox_driver,omitempty"`
	ControllerSwitchSupport               *bool                     `protobuf:"varint,14006,opt,name=controller_switch_support,json=controllerSwitchSupport" json:"controller_switch_support,omitempty"`
	ControllerGenericSupport              *bool                     `protobuf:"varint,14007,opt,name=controller_generic_support,json=controllerGenericSupport" json:"controller_generic_support,omitempty"`
	ControllerPowerOffTimeout             *int32                    `protobuf:"varint,14008,opt,name=controller_power_off_timeout,json=controllerPowerOffTimeout" json:"controller_power_off_timeout,omitempty"`
	TurnOffControllerOnExit               *bool                     `protobuf:"varint,14009,opt,name=turn_off_controller_on_exit,json=turnOffControllerOnExit" json:"turn_off_controller_on_exit,omitempty"`
	ControllerCombineNintendoJoycons      *bool                     `protobuf:"varint,14010,opt,name=controller_combine_nintendo_joycons,json=controllerCombineNintendoJoycons" json:"controller_combine_nintendo_joycons,omitempty"`
	StartupMovieId                        *uint64                   `protobuf:"varint,16000,opt,name=startup_movie_id,json=startupMovieId" json:"startup_movie_id,omitempty"`
	StartupMovieLocalPath                 *string                   `protobuf:"bytes,16001,opt,name=startup_movie_local_path,json=startupMovieLocalPath" json:"startup_movie_local_path,omitempty"`
	StartupMovieShuffle                   *bool                     `protobuf:"varint,16002,opt,name=startup_movie_shuffle,json=startupMovieShuffle" json:"startup_movie_shuffle,omitempty"`
	StartupMovieUsedForResume             *bool                     `protobuf:"varint,16003,opt,name=startup_movie_used_for_resume,json=startupMovieUsedForResume" json:"startup_movie_used_for_resume,omitempty"`
	GameNotesEnableSpellcheck             *bool                     `protobuf:"varint,17001,opt,name=game_notes_enable_spellcheck,json=gameNotesEnableSpellcheck" json:"game_notes_enable_spellcheck,omitempty"`
	ScreenshotItemsPerRow                 *int32                    `protobuf:"varint,18000,opt,name=screenshot_items_per_row,json=screenshotItemsPerRow" json:"screenshot_items_per_row,omitempty"`
	GBackgroundEnabled                    *bool                     `protobuf:"varint,18200,opt,name=g_background_enabled,json=gBackgroundEnabled" json:"g_background_enabled,omitempty"`
	GBackgroundPath                       *string                   `protobuf:"bytes,18201,opt,name=g_background_path,json=gBackgroundPath" json:"g_background_path,omitempty"`
	GBackgroundMaxKeep                    *string                   `protobuf:"bytes,18202,opt,name=g_background_max_keep,json=gBackgroundMaxKeep" json:"g_background_max_keep,omitempty"`
	GBackgroundTimeResolution             *int32                    `protobuf:"varint,18203,opt,name=g_background_time_resolution,json=gBackgroundTimeResolution" json:"g_background_time_resolution,omitempty"`
	GBackgroundDevmode                    *bool                     `protobuf:"varint,18206,opt,name=g_background_devmode,json=gBackgroundDevmode" json:"g_background_devmode,omitempty"`
	GBackgroundMk                         *CMsgHotkey               `protobuf:"bytes,18207,opt,name=g_background_mk,json=gBackgroundMk" json:"g_background_mk,omitempty"`
	GBackgroundTg                         *CMsgHotkey               `protobuf:"bytes,18208,opt,name=g_background_tg,json=gBackgroundTg" json:"g_background_tg,omitempty"`
	ShowTimestampsInConsole               *bool                     `protobuf:"varint,20000,opt,name=show_timestamps_in_console,json=showTimestampsInConsole" json:"show_timestamps_in_console,omitempty"`
	ForceOobe                             *bool                     `protobuf:"varint,20001,opt,name=force_oobe,json=forceOobe" json:"force_oobe,omitempty"`
	OverrideBrowserComposerMode           *int32                    `protobuf:"varint,20002,opt,name=override_browser_composer_mode,json=overrideBrowserComposerMode" json:"override_browser_composer_mode,omitempty"`
	CefRemoteDebuggingEnabled             *bool                     `protobuf:"varint,20003,opt,name=cef_remote_debugging_enabled,json=cefRemoteDebuggingEnabled" json:"cef_remote_debugging_enabled,omitempty"`
	ForceDeckPerfTab                      *bool                     `protobuf:"varint,20004,opt,name=force_deck_perf_tab,json=forceDeckPerfTab" json:"force_deck_perf_tab,omitempty"`
	ForceFakeMandatoryUpdate              *bool                     `protobuf:"varint,20005,opt,name=force_fake_mandatory_update,json=forceFakeMandatoryUpdate" json:"force_fake_mandatory_update,omitempty"`
	GamescopeHdrVisualization             *EHDRVisualization        `protobuf:"varint,21001,opt,name=gamescope_hdr_visualization,json=gamescopeHdrVisualization,enum=EHDRVisualization,def=0" json:"gamescope_hdr_visualization,omitempty"`
	GamescopeAppTargetFramerate           *int32                    `protobuf:"varint,21002,opt,name=gamescope_app_target_framerate,json=gamescopeAppTargetFramerate" json:"gamescope_app_target_framerate,omitempty"`
	GamescopeEnableAppTargetFramerate     *bool                     `protobuf:"varint,21003,opt,name=gamescope_enable_app_target_framerate,json=gamescopeEnableAppTargetFramerate" json:"gamescope_enable_app_target_framerate,omitempty"`
	GamescopeDisableFramelimit            *bool                     `protobuf:"varint,21004,opt,name=gamescope_disable_framelimit,json=gamescopeDisableFramelimit" json:"gamescope_disable_framelimit,omitempty"`
	GamescopeDisplayRefreshRate           *int32                    `protobuf:"varint,21005,opt,name=gamescope_display_refresh_rate,json=gamescopeDisplayRefreshRate" json:"gamescope_display_refresh_rate,omitempty"`
}

// Default values for CMsgClientSettings fields.
const (
	Default_CMsgClientSettings_BroadcastPermissions      = EBroadcastPermission_k_EBroadcastPermissionDisabled
	Default_CMsgClientSettings_BroadcastEncodingOption   = EBroadcastEncoderSetting_k_EBroadcastEncoderBestQuality
	Default_CMsgClientSettings_GamescopeHdrVisualization = EHDRVisualization_k_EHDRVisualization_None
)

func (x *CMsgClientSettings) Reset() {
	*x = CMsgClientSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_clientsettings_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientSettings) ProtoMessage() {}

func (x *CMsgClientSettings) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_clientsettings_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientSettings.ProtoReflect.Descriptor instead.
func (*CMsgClientSettings) Descriptor() ([]byte, []int) {
	return file_steammessages_clientsettings_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgClientSettings) GetNoSavePersonalInfo() bool {
	if x != nil && x.NoSavePersonalInfo != nil {
		return *x.NoSavePersonalInfo
	}
	return false
}

func (x *CMsgClientSettings) GetOobeTestModeEnabled() bool {
	if x != nil && x.OobeTestModeEnabled != nil {
		return *x.OobeTestModeEnabled
	}
	return false
}

func (x *CMsgClientSettings) GetInClientBeta() bool {
	if x != nil && x.InClientBeta != nil {
		return *x.InClientBeta
	}
	return false
}

func (x *CMsgClientSettings) GetIsSteamSideloaded() bool {
	if x != nil && x.IsSteamSideloaded != nil {
		return *x.IsSteamSideloaded
	}
	return false
}

func (x *CMsgClientSettings) GetPreferredMonitor() string {
	if x != nil && x.PreferredMonitor != nil {
		return *x.PreferredMonitor
	}
	return ""
}

func (x *CMsgClientSettings) GetSteamCefGpuBlocklistDisabled() bool {
	if x != nil && x.SteamCefGpuBlocklistDisabled != nil {
		return *x.SteamCefGpuBlocklistDisabled
	}
	return false
}

func (x *CMsgClientSettings) GetBigpictureWindowed() bool {
	if x != nil && x.BigpictureWindowed != nil {
		return *x.BigpictureWindowed
	}
	return false
}

func (x *CMsgClientSettings) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *CMsgClientSettings) GetIsExternalDisplay() bool {
	if x != nil && x.IsExternalDisplay != nil {
		return *x.IsExternalDisplay
	}
	return false
}

func (x *CMsgClientSettings) GetSteamOsUnderscanLevel() float32 {
	if x != nil && x.SteamOsUnderscanLevel != nil {
		return *x.SteamOsUnderscanLevel
	}
	return 0
}

func (x *CMsgClientSettings) GetSteamOsUnderscanEnabled() bool {
	if x != nil && x.SteamOsUnderscanEnabled != nil {
		return *x.SteamOsUnderscanEnabled
	}
	return false
}

func (x *CMsgClientSettings) GetMinScaleFactor() float32 {
	if x != nil && x.MinScaleFactor != nil {
		return *x.MinScaleFactor
	}
	return 0
}

func (x *CMsgClientSettings) GetMaxScaleFactor() float32 {
	if x != nil && x.MaxScaleFactor != nil {
		return *x.MaxScaleFactor
	}
	return 0
}

func (x *CMsgClientSettings) GetAutoScaleFactor() float32 {
	if x != nil && x.AutoScaleFactor != nil {
		return *x.AutoScaleFactor
	}
	return 0
}

func (x *CMsgClientSettings) GetSmallMode() bool {
	if x != nil && x.SmallMode != nil {
		return *x.SmallMode
	}
	return false
}

func (x *CMsgClientSettings) GetSkipSteamvrInstallDialog() bool {
	if x != nil && x.SkipSteamvrInstallDialog != nil {
		return *x.SkipSteamvrInstallDialog
	}
	return false
}

func (x *CMsgClientSettings) GetAlwaysShowUserChooser() bool {
	if x != nil && x.AlwaysShowUserChooser != nil {
		return *x.AlwaysShowUserChooser
	}
	return false
}

func (x *CMsgClientSettings) GetShowFamilySharingNotifications() bool {
	if x != nil && x.ShowFamilySharingNotifications != nil {
		return *x.ShowFamilySharingNotifications
	}
	return false
}

func (x *CMsgClientSettings) GetOverlayFpsCounterCorner() int32 {
	if x != nil && x.OverlayFpsCounterCorner != nil {
		return *x.OverlayFpsCounterCorner
	}
	return 0
}

func (x *CMsgClientSettings) GetOverlayFpsCounterHighContrast() bool {
	if x != nil && x.OverlayFpsCounterHighContrast != nil {
		return *x.OverlayFpsCounterHighContrast
	}
	return false
}

func (x *CMsgClientSettings) GetOverlayKey() *CMsgHotkey {
	if x != nil {
		return x.OverlayKey
	}
	return nil
}

func (x *CMsgClientSettings) GetScreenshotKey() *CMsgHotkey {
	if x != nil {
		return x.ScreenshotKey
	}
	return nil
}

func (x *CMsgClientSettings) GetEnableOverlay() bool {
	if x != nil && x.EnableOverlay != nil {
		return *x.EnableOverlay
	}
	return false
}

func (x *CMsgClientSettings) GetEnableScreenshotNotification() bool {
	if x != nil && x.EnableScreenshotNotification != nil {
		return *x.EnableScreenshotNotification
	}
	return false
}

func (x *CMsgClientSettings) GetEnableScreenshotSound() bool {
	if x != nil && x.EnableScreenshotSound != nil {
		return *x.EnableScreenshotSound
	}
	return false
}

func (x *CMsgClientSettings) GetSaveUncompressedScreenshots() bool {
	if x != nil && x.SaveUncompressedScreenshots != nil {
		return *x.SaveUncompressedScreenshots
	}
	return false
}

func (x *CMsgClientSettings) GetScreenshotsPath() string {
	if x != nil && x.ScreenshotsPath != nil {
		return *x.ScreenshotsPath
	}
	return ""
}

func (x *CMsgClientSettings) GetDefaultPingRate() int32 {
	if x != nil && x.DefaultPingRate != nil {
		return *x.DefaultPingRate
	}
	return 0
}

func (x *CMsgClientSettings) GetServerPingRate() int32 {
	if x != nil && x.ServerPingRate != nil {
		return *x.ServerPingRate
	}
	return 0
}

func (x *CMsgClientSettings) GetSteamNetworkingShareIp() int32 {
	if x != nil && x.SteamNetworkingShareIp != nil {
		return *x.SteamNetworkingShareIp
	}
	return 0
}

func (x *CMsgClientSettings) GetWebBrowserHome() string {
	if x != nil && x.WebBrowserHome != nil {
		return *x.WebBrowserHome
	}
	return ""
}

func (x *CMsgClientSettings) GetVoiceMicDeviceName() string {
	if x != nil && x.VoiceMicDeviceName != nil {
		return *x.VoiceMicDeviceName
	}
	return ""
}

func (x *CMsgClientSettings) GetVoiceMicInputGain() float32 {
	if x != nil && x.VoiceMicInputGain != nil {
		return *x.VoiceMicInputGain
	}
	return 0
}

func (x *CMsgClientSettings) GetVoiceSpeakerOutputGain() float32 {
	if x != nil && x.VoiceSpeakerOutputGain != nil {
		return *x.VoiceSpeakerOutputGain
	}
	return 0
}

func (x *CMsgClientSettings) GetVoicePushToTalkSetting() int32 {
	if x != nil && x.VoicePushToTalkSetting != nil {
		return *x.VoicePushToTalkSetting
	}
	return 0
}

func (x *CMsgClientSettings) GetVoicePushToTalkKey() *CMsgHotkey {
	if x != nil {
		return x.VoicePushToTalkKey
	}
	return nil
}

func (x *CMsgClientSettings) GetOverlayToolbarListView() bool {
	if x != nil && x.OverlayToolbarListView != nil {
		return *x.OverlayToolbarListView
	}
	return false
}

func (x *CMsgClientSettings) GetAlwaysUseGamepaduiOverlay() bool {
	if x != nil && x.AlwaysUseGamepaduiOverlay != nil {
		return *x.AlwaysUseGamepaduiOverlay
	}
	return false
}

func (x *CMsgClientSettings) GetOverlayTabs() string {
	if x != nil && x.OverlayTabs != nil {
		return *x.OverlayTabs
	}
	return ""
}

func (x *CMsgClientSettings) GetOverlayScaleInterface() bool {
	if x != nil && x.OverlayScaleInterface != nil {
		return *x.OverlayScaleInterface
	}
	return false
}

func (x *CMsgClientSettings) GetOverlayRestoreBrowserTabs() bool {
	if x != nil && x.OverlayRestoreBrowserTabs != nil {
		return *x.OverlayRestoreBrowserTabs
	}
	return false
}

func (x *CMsgClientSettings) GetSmoothScrollWebviews() bool {
	if x != nil && x.SmoothScrollWebviews != nil {
		return *x.SmoothScrollWebviews
	}
	return false
}

func (x *CMsgClientSettings) GetEnableGpuAcceleratedWebviews() bool {
	if x != nil && x.EnableGpuAcceleratedWebviews != nil {
		return *x.EnableGpuAcceleratedWebviews
	}
	return false
}

func (x *CMsgClientSettings) GetEnableHardwareVideoDecoding() bool {
	if x != nil && x.EnableHardwareVideoDecoding != nil {
		return *x.EnableHardwareVideoDecoding
	}
	return false
}

func (x *CMsgClientSettings) GetRunAtStartup() bool {
	if x != nil && x.RunAtStartup != nil {
		return *x.RunAtStartup
	}
	return false
}

func (x *CMsgClientSettings) GetEnableDpiScaling() bool {
	if x != nil && x.EnableDpiScaling != nil {
		return *x.EnableDpiScaling
	}
	return false
}

func (x *CMsgClientSettings) GetEnableMarketingMessages() bool {
	if x != nil && x.EnableMarketingMessages != nil {
		return *x.EnableMarketingMessages
	}
	return false
}

func (x *CMsgClientSettings) GetStartInBigPictureMode() bool {
	if x != nil && x.StartInBigPictureMode != nil {
		return *x.StartInBigPictureMode
	}
	return false
}

func (x *CMsgClientSettings) GetJumplistFlags() uint32 {
	if x != nil && x.JumplistFlags != nil {
		return *x.JumplistFlags
	}
	return 0
}

func (x *CMsgClientSettings) GetEnableUiSounds() bool {
	if x != nil && x.EnableUiSounds != nil {
		return *x.EnableUiSounds
	}
	return false
}

func (x *CMsgClientSettings) GetDisableAllToasts() bool {
	if x != nil && x.DisableAllToasts != nil {
		return *x.DisableAllToasts
	}
	return false
}

func (x *CMsgClientSettings) GetDisableToastsInGame() bool {
	if x != nil && x.DisableToastsInGame != nil {
		return *x.DisableToastsInGame
	}
	return false
}

func (x *CMsgClientSettings) GetPlaySoundOnToast() bool {
	if x != nil && x.PlaySoundOnToast != nil {
		return *x.PlaySoundOnToast
	}
	return false
}

func (x *CMsgClientSettings) GetLibraryDisplaySize() int32 {
	if x != nil && x.LibraryDisplaySize != nil {
		return *x.LibraryDisplaySize
	}
	return 0
}

func (x *CMsgClientSettings) GetLibraryWhatsNewShowOnlyProductUpdates() bool {
	if x != nil && x.LibraryWhatsNewShowOnlyProductUpdates != nil {
		return *x.LibraryWhatsNewShowOnlyProductUpdates
	}
	return false
}

func (x *CMsgClientSettings) GetShowStoreContentOnHome() bool {
	if x != nil && x.ShowStoreContentOnHome != nil {
		return *x.ShowStoreContentOnHome
	}
	return false
}

func (x *CMsgClientSettings) GetStartPage() string {
	if x != nil && x.StartPage != nil {
		return *x.StartPage
	}
	return ""
}

func (x *CMsgClientSettings) GetLibraryLowBandwidthMode() bool {
	if x != nil && x.LibraryLowBandwidthMode != nil {
		return *x.LibraryLowBandwidthMode
	}
	return false
}

func (x *CMsgClientSettings) GetLibraryLowPerfMode() bool {
	if x != nil && x.LibraryLowPerfMode != nil {
		return *x.LibraryLowPerfMode
	}
	return false
}

func (x *CMsgClientSettings) GetLibraryDisableCommunityContent() bool {
	if x != nil && x.LibraryDisableCommunityContent != nil {
		return *x.LibraryDisableCommunityContent
	}
	return false
}

func (x *CMsgClientSettings) GetLibraryDisplayIconInGameList() bool {
	if x != nil && x.LibraryDisplayIconInGameList != nil {
		return *x.LibraryDisplayIconInGameList
	}
	return false
}

func (x *CMsgClientSettings) GetReadyToPlayIncludesStreaming() bool {
	if x != nil && x.ReadyToPlayIncludesStreaming != nil {
		return *x.ReadyToPlayIncludesStreaming
	}
	return false
}

func (x *CMsgClientSettings) GetShowSteamDeckInfo() bool {
	if x != nil && x.ShowSteamDeckInfo != nil {
		return *x.ShowSteamDeckInfo
	}
	return false
}

func (x *CMsgClientSettings) GetEnableShaderPrecache() bool {
	if x != nil && x.EnableShaderPrecache != nil {
		return *x.EnableShaderPrecache
	}
	return false
}

func (x *CMsgClientSettings) GetEnableShaderBackgroundProcessing() bool {
	if x != nil && x.EnableShaderBackgroundProcessing != nil {
		return *x.EnableShaderBackgroundProcessing
	}
	return false
}

func (x *CMsgClientSettings) GetShaderPrecachedSize() uint64 {
	if x != nil && x.ShaderPrecachedSize != nil {
		return *x.ShaderPrecachedSize
	}
	return 0
}

func (x *CMsgClientSettings) GetNeedsSteamServiceRepair() bool {
	if x != nil && x.NeedsSteamServiceRepair != nil {
		return *x.NeedsSteamServiceRepair
	}
	return false
}

func (x *CMsgClientSettings) GetDownloadPeerContent() int32 {
	if x != nil && x.DownloadPeerContent != nil {
		return *x.DownloadPeerContent
	}
	return 0
}

func (x *CMsgClientSettings) GetDownloadRateBitsPerS() bool {
	if x != nil && x.DownloadRateBitsPerS != nil {
		return *x.DownloadRateBitsPerS
	}
	return false
}

func (x *CMsgClientSettings) GetRestrictAutoUpdates() bool {
	if x != nil && x.RestrictAutoUpdates != nil {
		return *x.RestrictAutoUpdates
	}
	return false
}

func (x *CMsgClientSettings) GetRestrictAutoUpdatesStart() int32 {
	if x != nil && x.RestrictAutoUpdatesStart != nil {
		return *x.RestrictAutoUpdatesStart
	}
	return 0
}

func (x *CMsgClientSettings) GetRestrictAutoUpdatesEnd() int32 {
	if x != nil && x.RestrictAutoUpdatesEnd != nil {
		return *x.RestrictAutoUpdatesEnd
	}
	return 0
}

func (x *CMsgClientSettings) GetDownloadRegion() int32 {
	if x != nil && x.DownloadRegion != nil {
		return *x.DownloadRegion
	}
	return 0
}

func (x *CMsgClientSettings) GetDownloadWhileAppRunning() bool {
	if x != nil && x.DownloadWhileAppRunning != nil {
		return *x.DownloadWhileAppRunning
	}
	return false
}

func (x *CMsgClientSettings) GetDownloadThrottleWhileStreaming() bool {
	if x != nil && x.DownloadThrottleWhileStreaming != nil {
		return *x.DownloadThrottleWhileStreaming
	}
	return false
}

func (x *CMsgClientSettings) GetDownloadThrottleRate() int32 {
	if x != nil && x.DownloadThrottleRate != nil {
		return *x.DownloadThrottleRate
	}
	return 0
}

func (x *CMsgClientSettings) GetCloudEnabled() bool {
	if x != nil && x.CloudEnabled != nil {
		return *x.CloudEnabled
	}
	return false
}

func (x *CMsgClientSettings) GetShowScreenshotManager() bool {
	if x != nil && x.ShowScreenshotManager != nil {
		return *x.ShowScreenshotManager
	}
	return false
}

func (x *CMsgClientSettings) GetMusicVolume() int32 {
	if x != nil && x.MusicVolume != nil {
		return *x.MusicVolume
	}
	return 0
}

func (x *CMsgClientSettings) GetMusicPauseOnAppStart() bool {
	if x != nil && x.MusicPauseOnAppStart != nil {
		return *x.MusicPauseOnAppStart
	}
	return false
}

func (x *CMsgClientSettings) GetMusicPauseOnVoiceChat() bool {
	if x != nil && x.MusicPauseOnVoiceChat != nil {
		return *x.MusicPauseOnVoiceChat
	}
	return false
}

func (x *CMsgClientSettings) GetMusicDownloadHighQuality() bool {
	if x != nil && x.MusicDownloadHighQuality != nil {
		return *x.MusicDownloadHighQuality
	}
	return false
}

func (x *CMsgClientSettings) GetMusicPlaylistNotification() bool {
	if x != nil && x.MusicPlaylistNotification != nil {
		return *x.MusicPlaylistNotification
	}
	return false
}

func (x *CMsgClientSettings) GetBroadcastPermissions() EBroadcastPermission {
	if x != nil && x.BroadcastPermissions != nil {
		return *x.BroadcastPermissions
	}
	return Default_CMsgClientSettings_BroadcastPermissions
}

func (x *CMsgClientSettings) GetBroadcastOutputWidth() int32 {
	if x != nil && x.BroadcastOutputWidth != nil {
		return *x.BroadcastOutputWidth
	}
	return 0
}

func (x *CMsgClientSettings) GetBroadcastOutputHeight() int32 {
	if x != nil && x.BroadcastOutputHeight != nil {
		return *x.BroadcastOutputHeight
	}
	return 0
}

func (x *CMsgClientSettings) GetBroadcastBitrate() int32 {
	if x != nil && x.BroadcastBitrate != nil {
		return *x.BroadcastBitrate
	}
	return 0
}

func (x *CMsgClientSettings) GetBroadcastEncodingOption() EBroadcastEncoderSetting {
	if x != nil && x.BroadcastEncodingOption != nil {
		return *x.BroadcastEncodingOption
	}
	return Default_CMsgClientSettings_BroadcastEncodingOption
}

func (x *CMsgClientSettings) GetBroadcastRecordAllVideo() bool {
	if x != nil && x.BroadcastRecordAllVideo != nil {
		return *x.BroadcastRecordAllVideo
	}
	return false
}

func (x *CMsgClientSettings) GetBroadcastRecordAllAudio() bool {
	if x != nil && x.BroadcastRecordAllAudio != nil {
		return *x.BroadcastRecordAllAudio
	}
	return false
}

func (x *CMsgClientSettings) GetBroadcastRecordMicrophone() bool {
	if x != nil && x.BroadcastRecordMicrophone != nil {
		return *x.BroadcastRecordMicrophone
	}
	return false
}

func (x *CMsgClientSettings) GetBroadcastShowUploadStats() bool {
	if x != nil && x.BroadcastShowUploadStats != nil {
		return *x.BroadcastShowUploadStats
	}
	return false
}

func (x *CMsgClientSettings) GetBroadcastShowLiveReminder() bool {
	if x != nil && x.BroadcastShowLiveReminder != nil {
		return *x.BroadcastShowLiveReminder
	}
	return false
}

func (x *CMsgClientSettings) GetBroadcastChatCorner() int32 {
	if x != nil && x.BroadcastChatCorner != nil {
		return *x.BroadcastChatCorner
	}
	return 0
}

func (x *CMsgClientSettings) GetSteamInputConfiguratorErrorMsgEnable() bool {
	if x != nil && x.SteamInputConfiguratorErrorMsgEnable != nil {
		return *x.SteamInputConfiguratorErrorMsgEnable
	}
	return false
}

func (x *CMsgClientSettings) GetControllerGuideButtonFocusSteam() bool {
	if x != nil && x.ControllerGuideButtonFocusSteam != nil {
		return *x.ControllerGuideButtonFocusSteam
	}
	return false
}

func (x *CMsgClientSettings) GetControllerPsSupport() int32 {
	if x != nil && x.ControllerPsSupport != nil {
		return *x.ControllerPsSupport
	}
	return 0
}

func (x *CMsgClientSettings) GetControllerXboxSupport() bool {
	if x != nil && x.ControllerXboxSupport != nil {
		return *x.ControllerXboxSupport
	}
	return false
}

func (x *CMsgClientSettings) GetControllerXboxDriver() bool {
	if x != nil && x.ControllerXboxDriver != nil {
		return *x.ControllerXboxDriver
	}
	return false
}

func (x *CMsgClientSettings) GetControllerSwitchSupport() bool {
	if x != nil && x.ControllerSwitchSupport != nil {
		return *x.ControllerSwitchSupport
	}
	return false
}

func (x *CMsgClientSettings) GetControllerGenericSupport() bool {
	if x != nil && x.ControllerGenericSupport != nil {
		return *x.ControllerGenericSupport
	}
	return false
}

func (x *CMsgClientSettings) GetControllerPowerOffTimeout() int32 {
	if x != nil && x.ControllerPowerOffTimeout != nil {
		return *x.ControllerPowerOffTimeout
	}
	return 0
}

func (x *CMsgClientSettings) GetTurnOffControllerOnExit() bool {
	if x != nil && x.TurnOffControllerOnExit != nil {
		return *x.TurnOffControllerOnExit
	}
	return false
}

func (x *CMsgClientSettings) GetControllerCombineNintendoJoycons() bool {
	if x != nil && x.ControllerCombineNintendoJoycons != nil {
		return *x.ControllerCombineNintendoJoycons
	}
	return false
}

func (x *CMsgClientSettings) GetStartupMovieId() uint64 {
	if x != nil && x.StartupMovieId != nil {
		return *x.StartupMovieId
	}
	return 0
}

func (x *CMsgClientSettings) GetStartupMovieLocalPath() string {
	if x != nil && x.StartupMovieLocalPath != nil {
		return *x.StartupMovieLocalPath
	}
	return ""
}

func (x *CMsgClientSettings) GetStartupMovieShuffle() bool {
	if x != nil && x.StartupMovieShuffle != nil {
		return *x.StartupMovieShuffle
	}
	return false
}

func (x *CMsgClientSettings) GetStartupMovieUsedForResume() bool {
	if x != nil && x.StartupMovieUsedForResume != nil {
		return *x.StartupMovieUsedForResume
	}
	return false
}

func (x *CMsgClientSettings) GetGameNotesEnableSpellcheck() bool {
	if x != nil && x.GameNotesEnableSpellcheck != nil {
		return *x.GameNotesEnableSpellcheck
	}
	return false
}

func (x *CMsgClientSettings) GetScreenshotItemsPerRow() int32 {
	if x != nil && x.ScreenshotItemsPerRow != nil {
		return *x.ScreenshotItemsPerRow
	}
	return 0
}

func (x *CMsgClientSettings) GetGBackgroundEnabled() bool {
	if x != nil && x.GBackgroundEnabled != nil {
		return *x.GBackgroundEnabled
	}
	return false
}

func (x *CMsgClientSettings) GetGBackgroundPath() string {
	if x != nil && x.GBackgroundPath != nil {
		return *x.GBackgroundPath
	}
	return ""
}

func (x *CMsgClientSettings) GetGBackgroundMaxKeep() string {
	if x != nil && x.GBackgroundMaxKeep != nil {
		return *x.GBackgroundMaxKeep
	}
	return ""
}

func (x *CMsgClientSettings) GetGBackgroundTimeResolution() int32 {
	if x != nil && x.GBackgroundTimeResolution != nil {
		return *x.GBackgroundTimeResolution
	}
	return 0
}

func (x *CMsgClientSettings) GetGBackgroundDevmode() bool {
	if x != nil && x.GBackgroundDevmode != nil {
		return *x.GBackgroundDevmode
	}
	return false
}

func (x *CMsgClientSettings) GetGBackgroundMk() *CMsgHotkey {
	if x != nil {
		return x.GBackgroundMk
	}
	return nil
}

func (x *CMsgClientSettings) GetGBackgroundTg() *CMsgHotkey {
	if x != nil {
		return x.GBackgroundTg
	}
	return nil
}

func (x *CMsgClientSettings) GetShowTimestampsInConsole() bool {
	if x != nil && x.ShowTimestampsInConsole != nil {
		return *x.ShowTimestampsInConsole
	}
	return false
}

func (x *CMsgClientSettings) GetForceOobe() bool {
	if x != nil && x.ForceOobe != nil {
		return *x.ForceOobe
	}
	return false
}

func (x *CMsgClientSettings) GetOverrideBrowserComposerMode() int32 {
	if x != nil && x.OverrideBrowserComposerMode != nil {
		return *x.OverrideBrowserComposerMode
	}
	return 0
}

func (x *CMsgClientSettings) GetCefRemoteDebuggingEnabled() bool {
	if x != nil && x.CefRemoteDebuggingEnabled != nil {
		return *x.CefRemoteDebuggingEnabled
	}
	return false
}

func (x *CMsgClientSettings) GetForceDeckPerfTab() bool {
	if x != nil && x.ForceDeckPerfTab != nil {
		return *x.ForceDeckPerfTab
	}
	return false
}

func (x *CMsgClientSettings) GetForceFakeMandatoryUpdate() bool {
	if x != nil && x.ForceFakeMandatoryUpdate != nil {
		return *x.ForceFakeMandatoryUpdate
	}
	return false
}

func (x *CMsgClientSettings) GetGamescopeHdrVisualization() EHDRVisualization {
	if x != nil && x.GamescopeHdrVisualization != nil {
		return *x.GamescopeHdrVisualization
	}
	return Default_CMsgClientSettings_GamescopeHdrVisualization
}

func (x *CMsgClientSettings) GetGamescopeAppTargetFramerate() int32 {
	if x != nil && x.GamescopeAppTargetFramerate != nil {
		return *x.GamescopeAppTargetFramerate
	}
	return 0
}

func (x *CMsgClientSettings) GetGamescopeEnableAppTargetFramerate() bool {
	if x != nil && x.GamescopeEnableAppTargetFramerate != nil {
		return *x.GamescopeEnableAppTargetFramerate
	}
	return false
}

func (x *CMsgClientSettings) GetGamescopeDisableFramelimit() bool {
	if x != nil && x.GamescopeDisableFramelimit != nil {
		return *x.GamescopeDisableFramelimit
	}
	return false
}

func (x *CMsgClientSettings) GetGamescopeDisplayRefreshRate() int32 {
	if x != nil && x.GamescopeDisplayRefreshRate != nil {
		return *x.GamescopeDisplayRefreshRate
	}
	return 0
}

var file_steammessages_clientsettings_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*EClientSettingStore)(nil),
		Field:         60000,
		Name:          "setting_store",
		Tag:           "varint,60000,opt,name=setting_store,enum=EClientSettingStore,def=0",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         60001,
		Name:          "setting_name",
		Tag:           "bytes,60001,opt,name=setting_name",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         60002,
		Name:          "setting_pre_login",
		Tag:           "varint,60002,opt,name=setting_pre_login",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         60003,
		Name:          "setting_default_bool",
		Tag:           "varint,60003,opt,name=setting_default_bool",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*int32)(nil),
		Field:         60004,
		Name:          "setting_default_int",
		Tag:           "varint,60004,opt,name=setting_default_int",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         60005,
		Name:          "setting_default_uint",
		Tag:           "varint,60005,opt,name=setting_default_uint",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*float32)(nil),
		Field:         60006,
		Name:          "setting_default_float",
		Tag:           "fixed32,60006,opt,name=setting_default_float",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         60007,
		Name:          "setting_default_string",
		Tag:           "bytes,60007,opt,name=setting_default_string",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         60008,
		Name:          "setting_readonly",
		Tag:           "varint,60008,opt,name=setting_readonly",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         60009,
		Name:          "setting_description",
		Tag:           "bytes,60009,opt,name=setting_description",
		Filename:      "steammessages_clientsettings.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*ESettingProfileMode)(nil),
		Field:         60010,
		Name:          "setting_profile_mode",
		Tag:           "varint,60010,opt,name=setting_profile_mode,enum=ESettingProfileMode,def=0",
		Filename:      "steammessages_clientsettings.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional EClientSettingStore setting_store = 60000;
	E_SettingStore = &file_steammessages_clientsettings_proto_extTypes[0]
	// optional string setting_name = 60001;
	E_SettingName = &file_steammessages_clientsettings_proto_extTypes[1]
	// optional bool setting_pre_login = 60002;
	E_SettingPreLogin = &file_steammessages_clientsettings_proto_extTypes[2]
	// optional bool setting_default_bool = 60003;
	E_SettingDefaultBool = &file_steammessages_clientsettings_proto_extTypes[3]
	// optional int32 setting_default_int = 60004;
	E_SettingDefaultInt = &file_steammessages_clientsettings_proto_extTypes[4]
	// optional uint32 setting_default_uint = 60005;
	E_SettingDefaultUint = &file_steammessages_clientsettings_proto_extTypes[5]
	// optional float setting_default_float = 60006;
	E_SettingDefaultFloat = &file_steammessages_clientsettings_proto_extTypes[6]
	// optional string setting_default_string = 60007;
	E_SettingDefaultString = &file_steammessages_clientsettings_proto_extTypes[7]
	// optional bool setting_readonly = 60008;
	E_SettingReadonly = &file_steammessages_clientsettings_proto_extTypes[8]
	// optional string setting_description = 60009;
	E_SettingDescription = &file_steammessages_clientsettings_proto_extTypes[9]
	// optional ESettingProfileMode setting_profile_mode = 60010;
	E_SettingProfileMode = &file_steammessages_clientsettings_proto_extTypes[10]
)

var File_steammessages_clientsettings_proto protoreflect.FileDescriptor

var file_steammessages_clientsettings_proto_rawDesc = []byte{
	0x0a, 0x22, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x01, 0x0a, 0x0a, 0x43, 0x4d, 0x73, 0x67, 0x48, 0x6f, 0x74, 0x6b,
	0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x6c, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x61, 0x6c, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x74, 0x72, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x74, 0x72, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa4, 0x59, 0x0a,
	0x12, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x62, 0x0a, 0x15, 0x6e, 0x6f, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x2f, 0x80, 0xa6, 0x1d, 0x01, 0x8a, 0xa6, 0x1d, 0x27, 0x53, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x5c, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x5c, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x5c, 0x4e, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x12, 0x6e, 0x6f, 0x53, 0x61, 0x76, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x65, 0x0a, 0x16, 0x6f, 0x6f, 0x62, 0x65, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x30, 0x80, 0xa6, 0x1d, 0x01, 0x8a, 0xa6, 0x1d,
	0x28, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5c, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x5c,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x5c, 0x4f, 0x4f, 0x42, 0x45, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x13, 0x6f, 0x6f, 0x62, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e,
	0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x80, 0xa6, 0x1d, 0x05, 0x90, 0xa6, 0x1d, 0x01,
	0x52, 0x0c, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x74, 0x61, 0x12, 0x38,
	0x0a, 0x13, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0x80, 0xa6, 0x1d,
	0x05, 0x90, 0xa6, 0x1d, 0x01, 0x52, 0x11, 0x69, 0x73, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x69,
	0x64, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0x80, 0xa6, 0x1d, 0x01, 0x8a, 0xa6, 0x1d, 0x12, 0x42, 0x69, 0x67,
	0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52,
	0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x12, 0x8e, 0x01, 0x0a, 0x20, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x65, 0x66, 0x5f,
	0x67, 0x70, 0x75, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x46, 0x80, 0xa6,
	0x1d, 0x04, 0x8a, 0xa6, 0x1d, 0x3e, 0x48, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5c, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x5c, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x5c, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5c, 0x43, 0x45, 0x46,
	0x47, 0x50, 0x55, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x1c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x65, 0x66, 0x47, 0x70,
	0x75, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x50, 0x0a, 0x13, 0x62, 0x69, 0x67, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x1f, 0x80, 0xa6, 0x1d, 0x01, 0x8a, 0xa6, 0x1d, 0x13, 0x42, 0x69, 0x67, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x2f, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x65, 0x64, 0x90, 0xa6, 0x1d, 0x01,
	0x52, 0x12, 0x62, 0x69, 0x67, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x80, 0xa6, 0x1d, 0x01,
	0x8a, 0xa6, 0x1d, 0x17, 0x55, 0x49, 0x2f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2c, 0x80, 0xa6, 0x1d, 0x01, 0x8a, 0xa6, 0x1d, 0x24, 0x55,
	0x49, 0x2f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x2f, 0x49, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x52, 0x11, 0x69, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x5c, 0x0a, 0x18, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x6f, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x42, 0x23, 0x80, 0xa6, 0x1d, 0x01, 0x8a, 0xa6,
	0x1d, 0x1b, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4f, 0x53, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x63, 0x61, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x15, 0x73,
	0x74, 0x65, 0x61, 0x6d, 0x4f, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x63, 0x61, 0x6e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x62, 0x0a, 0x1a, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x73,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x25, 0x80, 0xa6, 0x1d, 0x01, 0x8a, 0xa6,
	0x1d, 0x1d, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4f, 0x53, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x73, 0x63, 0x61, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x17, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x4f, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x63, 0x61,
	0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x29, 0x80, 0xa6, 0x1d, 0x01, 0x8a, 0xa6, 0x1d, 0x21, 0x55, 0x49, 0x2f, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x4d,
	0x69, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x6d,
	0x69, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x53, 0x0a,
	0x10, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x42, 0x29, 0x80, 0xa6, 0x1d, 0x01, 0x8a, 0xa6, 0x1d,
	0x21, 0x55, 0x49, 0x2f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2f, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x2f, 0x4d, 0x61, 0x78, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x56, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x42, 0x2a, 0x80,
	0xa6, 0x1d, 0x01, 0x8a, 0xa6, 0x1d, 0x22, 0x55, 0x49, 0x2f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x2f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2f, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x0a, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x42, 0x26,
	0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x1e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x5c, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x5c, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5c, 0x53, 0x6d, 0x61,
	0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x63, 0x0a, 0x1b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x76,
	0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x42, 0x24, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x1c,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5c, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x56, 0x52, 0x48, 0x4d,
	0x44, 0x56, 0x47, 0x55, 0x49, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x73, 0x6b,
	0x69, 0x70, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x76, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x66, 0x0a, 0x18, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73,
	0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x6f, 0x6f, 0x73,
	0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2d, 0x80, 0xa6, 0x1d, 0x01, 0x8a, 0xa6,
	0x1d, 0x25, 0x57, 0x65, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5c, 0x41, 0x75, 0x74,
	0x68, 0x5c, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x72, 0x52, 0x15, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x53,
	0x68, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x50,
	0x0a, 0x21, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xb8, 0x17, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05,
	0x52, 0x1e, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x67, 0x0a, 0x1a, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x70, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x18, 0xa0,
	0x1f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x29, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x21, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5c, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x46, 0x50, 0x53, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72,
	0x52, 0x17, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x46, 0x70, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x21, 0x6f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x74, 0x18, 0xa1,
	0x1f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2b, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x23, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5c, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x46, 0x50, 0x53, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x73, 0x74, 0x52, 0x1d, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x46, 0x70, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x69, 0x67, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73,
	0x74, 0x12, 0x67, 0x0a, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0xa2, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x48, 0x6f,
	0x74, 0x6b, 0x65, 0x79, 0x42, 0x38, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x1f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5c, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x4b, 0x65, 0x79, 0xba, 0xa6, 0x1d,
	0x0d, 0x53, 0x68, 0x69, 0x66, 0x74, 0x09, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x41, 0x42, 0x52, 0x0a,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x6c, 0x0a, 0x0e, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0xa3, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x48, 0x6f, 0x74, 0x6b, 0x65, 0x79,
	0x42, 0x37, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x24, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5c, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0xba, 0xa6,
	0x1d, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x46, 0x31, 0x32, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x73, 0x68, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x18, 0xa4, 0x1f, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x20, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x18, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x12, 0x7d, 0x0a, 0x1e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa6, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x36, 0x80, 0xa6, 0x1d,
	0x03, 0x8a, 0xa6, 0x1d, 0x2a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5c, 0x49, 0x6e, 0x47, 0x61,
	0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x68, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x98,
	0xa6, 0x1d, 0x01, 0x52, 0x1c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x73, 0x68, 0x6f, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x6c, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0xa7, 0x1f, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x33, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x27, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5c, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x98, 0xa6, 0x1d, 0x01, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x7b, 0x0a, 0x1d, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x18, 0xa8, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x36, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5c, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x53,
	0x61, 0x76, 0x65, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52,
	0x1b, 0x73, 0x61, 0x76, 0x65, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x10,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0xa9, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x0f, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x7d,
	0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0xaa, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x50, 0x80, 0xa6, 0x1d, 0x05,
	0xc0, 0xa6, 0x1d, 0x01, 0xca, 0xa6, 0x1d, 0x44, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64,
	0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x28, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x29, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x70, 0x69, 0x6e, 0x67,
	0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x0f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a,
	0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0xab, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x40,
	0x0a, 0x19, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x70, 0x18, 0xac, 0x1f, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x16, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x70,
	0x12, 0x2f, 0x0a, 0x10, 0x77, 0x65, 0x62, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f,
	0x68, 0x6f, 0x6d, 0x65, 0x18, 0xad, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xa6, 0x1d,
	0x05, 0x52, 0x0e, 0x77, 0x65, 0x62, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x48, 0x6f, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x15, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xae, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x12, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x69,
	0x63, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x14, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x67,
	0x61, 0x69, 0x6e, 0x18, 0xaf, 0x1f, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05,
	0x52, 0x11, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47,
	0x61, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x19, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x67, 0x61, 0x69, 0x6e,
	0x18, 0xb0, 0x1f, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x16, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x1a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0xb1, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05,
	0x52, 0x16, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x54, 0x61, 0x6c,
	0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x16, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x6c, 0x6b, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0xb2, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x48, 0x6f, 0x74, 0x6b, 0x65, 0x79, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x12, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x54, 0x61, 0x6c, 0x6b, 0x4b, 0x65, 0x79,
	0x12, 0x5a, 0x0a, 0x19, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x6f, 0x6c,
	0x62, 0x61, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0xb3, 0x1f,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x1e, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x16, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x16, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x6f,
	0x6c, 0x62, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x6f, 0x0a, 0x1c,
	0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x70,
	0x61, 0x64, 0x75, 0x69, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x18, 0xb4, 0x1f, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x2d, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x25, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x43, 0x54, 0x65, 0x6e, 0x46,
	0x6f, 0x6f, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e,
	0x65, 0x77, 0x52, 0x19, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x55, 0x73, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x75, 0x69, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x37, 0x0a,
	0x0c, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x73, 0x18, 0xb5, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x80, 0xa6, 0x1d, 0x02, 0x8a, 0xa6, 0x1d, 0x0b, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x61, 0x62, 0x73, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x54, 0x61, 0x62, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x17, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0xb6, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x48, 0x80, 0xa6, 0x1d, 0x04, 0x8a,
	0xa6, 0x1d, 0x3c, 0x48, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5c, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5c, 0x56, 0x61,
	0x6c, 0x76, 0x65, 0x5c, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5c, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x98,
	0xa6, 0x1d, 0x01, 0x52, 0x15, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x1c, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x73, 0x18, 0xb7, 0x1f, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x32, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x26, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5c, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x54, 0x61, 0x62,
	0x73, 0x98, 0xa6, 0x1d, 0x01, 0x52, 0x19, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x54, 0x61, 0x62, 0x73,
	0x12, 0x7e, 0x0a, 0x16, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x72, 0x6f, 0x6c,
	0x6c, 0x5f, 0x77, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x88, 0x27, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x47, 0x80, 0xa6, 0x1d, 0x04, 0x8a, 0xa6, 0x1d, 0x3b, 0x48, 0x4b, 0x45, 0x59, 0x5f,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5c, 0x53, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x5c, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x5c, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x5c, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x57, 0x65,
	0x62, 0x56, 0x69, 0x65, 0x77, 0x73, 0x98, 0xa6, 0x1d, 0x01, 0x52, 0x14, 0x73, 0x6d, 0x6f, 0x6f,
	0x74, 0x68, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x57, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x12, 0x4c, 0x0a, 0x1f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x65, 0x62, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x18, 0x89, 0x27, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05,
	0x52, 0x1c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x70, 0x75, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x57, 0x65, 0x62, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x4a,
	0x0a, 0x1e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x8b, 0x27, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x1b, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x0e, 0x72, 0x75,
	0x6e, 0x5f, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x18, 0x8c, 0x27, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x41, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x12, 0x33, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x64, 0x70, 0x69, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x8d, 0x27,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x70, 0x69, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x62, 0x0a, 0x19,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x8e, 0x27, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x25, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x19, 0x6e, 0x65, 0x77, 0x73, 0x5c, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x98, 0xa6, 0x1d, 0x01, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x67,
	0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x8f, 0x27,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x15, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x42, 0x69, 0x67, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x6a, 0x75, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x90, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0x80, 0xa6, 0x1d, 0x03,
	0x8a, 0xa6, 0x1d, 0x17, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5c, 0x4a, 0x75, 0x6d, 0x70, 0x6c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0xa8, 0xa6, 0x1d, 0xf0, 0xde,
	0x04, 0x52, 0x0d, 0x6a, 0x75, 0x6d, 0x70, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x4c, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x5f, 0x73, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x91, 0x27, 0x20, 0x01, 0x28, 0x08, 0x42, 0x21, 0x80, 0xa6, 0x1d,
	0x03, 0x8a, 0xa6, 0x1d, 0x15, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x49, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x98, 0xa6, 0x1d, 0x01, 0x52, 0x0e,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x47,
	0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f,
	0x61, 0x73, 0x74, 0x73, 0x18, 0xf0, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0x80, 0xa6, 0x1d,
	0x02, 0x8a, 0xa6, 0x1d, 0x10, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x54,
	0x6f, 0x61, 0x73, 0x74, 0x73, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c,
	0x6c, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x18, 0xf1, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1b, 0x80, 0xa6, 0x1d, 0x02, 0x8a, 0xa6,
	0x1d, 0x13, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x73, 0x49,
	0x6e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f,
	0x61, 0x73, 0x74, 0x73, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x61, 0x73,
	0x74, 0x18, 0xf2, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1c, 0x80, 0xa6, 0x1d, 0x02, 0x8a, 0xa6,
	0x1d, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x6e, 0x54, 0x6f, 0x61,
	0x73, 0x74, 0x98, 0xa6, 0x1d, 0x01, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x75, 0x6e,
	0x64, 0x4f, 0x6e, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0xd8, 0x36, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1a, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d,
	0x12, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x12, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x2b, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x5f, 0x77, 0x68, 0x61, 0x74, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0xd9, 0x36, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2d,
	0x80, 0xa6, 0x1d, 0x02, 0x8a, 0xa6, 0x1d, 0x25, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x57,
	0x68, 0x61, 0x74, 0x73, 0x4e, 0x65, 0x77, 0x53, 0x68, 0x6f, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x25, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x57, 0x68, 0x61, 0x74, 0x73, 0x4e, 0x65, 0x77, 0x53, 0x68,
	0x6f, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x1a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x6f,
	0x6d, 0x65, 0x18, 0xda, 0x36, 0x20, 0x01, 0x28, 0x08, 0x42, 0x22, 0x80, 0xa6, 0x1d, 0x02, 0x8a,
	0xa6, 0x1d, 0x16, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x98, 0xa6, 0x1d, 0x01, 0x52, 0x16, 0x73,
	0x68, 0x6f, 0x77, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f,
	0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0xdb, 0x36, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x1a, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xdc, 0x36, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x1f, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x17, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x4c, 0x6f, 0x77, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x17, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x77, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0xdd, 0x36, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1a, 0x80, 0xa6, 0x1d, 0x03,
	0x8a, 0xa6, 0x1d, 0x12, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x77, 0x50, 0x65,
	0x72, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x12, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4c,
	0x6f, 0x77, 0x50, 0x65, 0x72, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x72, 0x0a, 0x21, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0xde, 0x36, 0x20, 0x01, 0x28, 0x08, 0x42, 0x26, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x1e,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x1e,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x72,
	0x0a, 0x21, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0xdf, 0x36, 0x20, 0x01, 0x28, 0x08, 0x42, 0x28, 0x80, 0xa6, 0x1d, 0x03,
	0x8a, 0xa6, 0x1d, 0x1c, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x98, 0xa6, 0x1d, 0x01, 0x52, 0x1c, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x6d, 0x0a, 0x20, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0xe0, 0x36, 0x20, 0x01, 0x28, 0x08, 0x42, 0x24, 0x80,
	0xa6, 0x1d, 0x05, 0x8a, 0xa6, 0x1d, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x50, 0x6c,
	0x61, 0x79, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x1c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x54, 0x0a, 0x14, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x64, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xe1, 0x36, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x22, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x1a, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44,
	0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x18, 0xc0, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x14,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x12, 0x54, 0x0a, 0x23, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0xc1, 0x3e, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x15, 0x73, 0x68,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0xc2, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0x80, 0xa6, 0x1d, 0x05,
	0xc0, 0xa6, 0x1d, 0x01, 0x52, 0x13, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x50, 0x72, 0x65, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x46, 0x0a, 0x1a, 0x6e, 0x65, 0x65,
	0x64, 0x73, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x18, 0xc3, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x08,
	0x80, 0xa6, 0x1d, 0x05, 0xc0, 0xa6, 0x1d, 0x01, 0x52, 0x17, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x61, 0x69,
	0x72, 0x12, 0x39, 0x0a, 0x15, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0xc4, 0x3e, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x13, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x18,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x69,
	0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x18, 0xc5, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x14, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x61, 0x74, 0x65, 0x42, 0x69, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x12, 0x39, 0x0a, 0x15, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0xc6, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xa6, 0x1d,
	0x05, 0x52, 0x13, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0xc7, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0x80, 0xa6,
	0x1d, 0x05, 0x52, 0x18, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x41, 0x75, 0x74, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x19,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0xc8, 0x3e, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x16, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x41, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x64, 0x12, 0x2e,
	0x0a, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0xc9, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x0e,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x1a, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x77, 0x68, 0x69, 0x6c, 0x65,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0xca, 0x3e, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x17, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x52, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x50, 0x0a, 0x21, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0xcb, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0x80, 0xa6, 0x1d, 0x05, 0x52, 0x1e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x16, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xcc,
	0x3e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x14, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x90, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52,
	0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6b, 0x0a,
	0x17, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x91, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x32, 0x80, 0xa6, 0x1d, 0x02, 0x8a, 0xa6, 0x1d, 0x2a, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x5c, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x5c, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5c, 0x53, 0x68,
	0x6f, 0x77, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x68, 0x6f, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0c, 0x6d, 0x75,
	0x73, 0x69, 0x63, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0xf8, 0x55, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x0b, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x18, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0xf9, 0x55, 0x20, 0x01, 0x28, 0x08, 0x42, 0x26, 0x80, 0xa6, 0x1d, 0x01, 0x8a, 0xa6, 0x1d,
	0x1e, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x5c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4f, 0x6e, 0x41, 0x70,
	0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x14, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4f, 0x6e, 0x41, 0x70, 0x70,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x59, 0x0a, 0x19, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x18, 0xfa, 0x55, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1e, 0x80, 0xa6, 0x1d, 0x01, 0x8a,
	0xa6, 0x1d, 0x16, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x5c, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4f, 0x6e,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x15, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x4f, 0x6e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x12, 0x71, 0x0a, 0x1b, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0xfb, 0x55, 0x20, 0x01, 0x28, 0x08, 0x42, 0x31, 0x80, 0xa6, 0x1d, 0x01, 0x8a, 0xa6, 0x1d, 0x29,
	0x4d, 0x75, 0x73, 0x69, 0x63, 0x5c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x69,
	0x67, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x18, 0x6d, 0x75, 0x73, 0x69, 0x63,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x69, 0x67, 0x68, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x6d, 0x0a, 0x1b, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xfc, 0x55, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2c, 0x80, 0xa6, 0x1d, 0x01, 0x8a,
	0xa6, 0x1d, 0x24, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x5c, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x4e, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x50, 0x6c,
	0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x8e, 0x01, 0x0a, 0x15, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe0, 0x5d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x1e, 0x6b, 0x5f, 0x45, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x21, 0x80, 0xa6, 0x1d, 0x03,
	0x8a, 0xa6, 0x1d, 0x15, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5c, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0xa0, 0xa6, 0x1d, 0x01, 0x52, 0x14, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x16, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0xe1, 0x5d,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x1d, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x15, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x52, 0x14, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x57, 0x0a, 0x17, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0xe2, 0x5d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1e, 0x80, 0xa6, 0x1d,
	0x03, 0x8a, 0xa6, 0x1d, 0x16, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5c, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x15, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0xe3, 0x5d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x19,
	0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x11, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5c, 0x4d, 0x61, 0x78, 0x4b, 0x62, 0x70, 0x73, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x19,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe4, 0x5d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x45, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x1e, 0x6b, 0x5f, 0x45,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x42, 0x65, 0x73, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x20, 0x80, 0xa6, 0x1d,
	0x03, 0x8a, 0xa6, 0x1d, 0x18, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5c, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x17, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x1a, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x18, 0xe5, 0x5d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x20, 0x80, 0xa6, 0x1d,
	0x03, 0x8a, 0xa6, 0x1d, 0x18, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5c, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x52, 0x17, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x6c,
	0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x61, 0x0a, 0x1a, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x18, 0xe6, 0x5d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x23, 0x80, 0xa6, 0x1d,
	0x03, 0x8a, 0xa6, 0x1d, 0x1b, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x52, 0x17, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x41, 0x6c, 0x6c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x5c, 0x0a, 0x1b, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0xe7, 0x5d, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x1b, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x13, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x69, 0x63, 0x52, 0x19, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x5f, 0x0a, 0x1b, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0xe8, 0x5d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1f, 0x80,
	0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x17, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5c, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x18,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x64, 0x0a, 0x1c, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0xe9, 0x5d, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x22, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x16, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5c, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x98,
	0xa6, 0x1d, 0x01, 0x52, 0x19, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x68,
	0x6f, 0x77, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x53,
	0x0a, 0x15, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x18, 0xea, 0x5d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1e,
	0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x12, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5c, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x68, 0x61, 0x74, 0xa0, 0xa6, 0x1d, 0x01, 0x52, 0x13,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x72,
	0x6e, 0x65, 0x72, 0x12, 0x89, 0x01, 0x0a, 0x29, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0xb1, 0x6d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2f, 0x80, 0xa6, 0x1d, 0x01, 0x8a, 0xa6,
	0x1d, 0x27, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x73, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x24, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x72, 0x0a, 0x23, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73,
	0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x18, 0xb2, 0x6d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x23, 0x80,
	0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x75, 0x69, 0x64, 0x65, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x52, 0x1f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x12, 0x5a, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x5f, 0x70, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xb3, 0x6d, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x25, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x19, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x50, 0x53, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0xa0, 0xa6, 0x1d, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x5c, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x78, 0x62,
	0x6f, 0x78, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xb4, 0x6d, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x23, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x1b, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x58, 0x42, 0x6f, 0x78, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x58, 0x62, 0x6f, 0x78, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x59, 0x0a,
	0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x78, 0x62, 0x6f, 0x78,
	0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0xb5, 0x6d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x22,
	0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x1a, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x58, 0x42, 0x6f, 0x78, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x58, 0x62,
	0x6f, 0x78, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xb6, 0x6d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x25, 0x80, 0xa6,
	0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x1d, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x6c, 0x0a, 0x1a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xb7, 0x6d, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x2d, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x25, 0x53, 0x74, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x72, 0x0a, 0x1c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0xb8, 0x6d, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x30, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x24, 0x43, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0xa0,
	0xa6, 0x1d, 0x0f, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x6b,
	0x0a, 0x1b, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0xb9, 0x6d,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x2c, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x24, 0x43, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x75, 0x72, 0x6e, 0x4f,
	0x66, 0x66, 0x52, 0x17, 0x74, 0x75, 0x72, 0x6e, 0x4f, 0x66, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4f, 0x6e, 0x45, 0x78, 0x69, 0x74, 0x12, 0x54, 0x0a, 0x23, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x6f, 0x5f, 0x6a, 0x6f, 0x79, 0x63, 0x6f,
	0x6e, 0x73, 0x18, 0xba, 0x6d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x4e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x6f, 0x4a, 0x6f, 0x79, 0x63, 0x6f, 0x6e,
	0x73, 0x12, 0x59, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x80, 0x7d, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2e, 0x80, 0xa6,
	0x1d, 0x01, 0x8a, 0xa6, 0x1d, 0x22, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x2f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x44, 0x90, 0xa6, 0x1d, 0x01, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x18,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x81, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x30, 0x80, 0xa6, 0x1d, 0x01, 0x8a, 0xa6, 0x1d, 0x24, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x2f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x90, 0xa6, 0x1d,
	0x01, 0x52, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x63, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x75, 0x70, 0x5f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c,
	0x65, 0x18, 0x82, 0x7d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2e, 0x80, 0xa6, 0x1d, 0x01, 0x8a, 0xa6,
	0x1d, 0x22, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x2f, 0x53, 0x68, 0x75,
	0x66, 0x66, 0x6c, 0x65, 0x90, 0xa6, 0x1d, 0x01, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75,
	0x70, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x12, 0x73, 0x0a,
	0x1d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x83,
	0x7d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x30, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x28, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x75, 0x70, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x2f, 0x55, 0x73, 0x65, 0x64, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x55, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x12, 0x68, 0x0a, 0x1c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x18, 0xe9, 0x84, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x25, 0x80, 0xa6, 0x1d, 0x02,
	0x8a, 0xa6, 0x1d, 0x19, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x98, 0xa6, 0x1d,
	0x01, 0x52, 0x19, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x60, 0x0a, 0x18,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0xd0, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x25, 0x80, 0xa6, 0x1d, 0x02, 0x8a, 0xa6, 0x1d, 0x19, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x73, 0x68, 0x6f, 0x74, 0x56, 0x69, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x65, 0x72,
	0x52, 0x6f, 0x77, 0xa0, 0xa6, 0x1d, 0x01, 0x52, 0x15, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x68, 0x6f, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x12, 0x38,
	0x0a, 0x14, 0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x98, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0x80, 0xa6, 0x1d, 0x05, 0x52, 0x12, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x11, 0x67, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x99, 0x8e,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x0f, 0x67, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x15,
	0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x6b, 0x65, 0x65, 0x70, 0x18, 0x9a, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80,
	0xa6, 0x1d, 0x05, 0x52, 0x12, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x4d, 0x61, 0x78, 0x4b, 0x65, 0x65, 0x70, 0x12, 0x47, 0x0a, 0x1c, 0x67, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x9b, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x19, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x14, 0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x64, 0x65, 0x76, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x9e, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x12, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x67, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x6b, 0x18, 0x9f, 0x8e,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x48, 0x6f, 0x74, 0x6b,
	0x65, 0x79, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x0d, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x6b, 0x12, 0x3b, 0x0a, 0x0f, 0x67, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x67, 0x18, 0xa0, 0x8e, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x48, 0x6f, 0x74, 0x6b, 0x65, 0x79, 0x42,
	0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x0d, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x67, 0x12, 0x68, 0x0a, 0x1a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x18, 0xa0, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x29, 0x80, 0xa6, 0x1d, 0x03,
	0x8a, 0xa6, 0x1d, 0x21, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5c, 0x53, 0x68,
	0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x49, 0x6e, 0x43, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x52, 0x17, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x12, 0x59,
	0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x6f, 0x62, 0x65, 0x18, 0xa1, 0x9c, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x38, 0x80, 0xa6, 0x1d, 0x04, 0x8a, 0xa6, 0x1d, 0x30, 0x48, 0x4b,
	0x45, 0x59, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5c,
	0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5c, 0x56, 0x61, 0x6c, 0x76, 0x65, 0x5c, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x5c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x4f, 0x42, 0x45, 0x52, 0x09,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x6f, 0x62, 0x65, 0x12, 0x4b, 0x0a, 0x1e, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xa2, 0x9c, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x04, 0x80, 0xa6, 0x1d, 0x05, 0x52, 0x1b, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x1c, 0x63, 0x65, 0x66, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xa3, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0x80, 0xa6, 0x1d, 0x05, 0x52, 0x19, 0x63, 0x65, 0x66, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x53, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x65,
	0x72, 0x66, 0x5f, 0x74, 0x61, 0x62, 0x18, 0xa4, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x22,
	0x80, 0xa6, 0x1d, 0x01, 0x8a, 0xa6, 0x1d, 0x1a, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x2f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x54,
	0x61, 0x62, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72,
	0x66, 0x54, 0x61, 0x62, 0x12, 0x66, 0x0a, 0x1b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x61,
	0x6b, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0xa5, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x25, 0x80, 0xa6, 0x1d,
	0x01, 0x8a, 0xa6, 0x1d, 0x1d, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x2f, 0x46,
	0x61, 0x6b, 0x65, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x18, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x61, 0x6b, 0x65, 0x4d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x92, 0x01, 0x0a,
	0x1b, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x68, 0x64, 0x72, 0x5f, 0x76,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x89, 0xa4, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x45, 0x48, 0x44, 0x52, 0x56, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x18, 0x6b, 0x5f, 0x45, 0x48, 0x44, 0x52,
	0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x6f,
	0x6e, 0x65, 0x42, 0x22, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x1a, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x2f, 0x48, 0x44, 0x52, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x48, 0x64, 0x72, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x73, 0x0a, 0x1e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x8a, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2c, 0x80, 0xa6, 0x1d,
	0x03, 0x8a, 0xa6, 0x1d, 0x1c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2f, 0x41,
	0x70, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74,
	0x65, 0xa0, 0xa6, 0x1d, 0x00, 0xd0, 0xa6, 0x1d, 0x02, 0x52, 0x1b, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x41, 0x70, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x25, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x8b, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x57, 0x80, 0xa6, 0x1d, 0x04, 0x8a, 0xa6,
	0x1d, 0x4b, 0x48, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5c, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5c, 0x56, 0x61, 0x6c,
	0x76, 0x65, 0x5c, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x5c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x32, 0x98, 0xa6, 0x1d,
	0x01, 0x52, 0x21, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x70, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x1c, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x8c, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2b, 0x80, 0xa6,
	0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x1b, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2f,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x98, 0xa6, 0x1d, 0x00, 0xd0, 0xa6, 0x1d, 0x02, 0x52, 0x1a, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x6c, 0x0a, 0x1e, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x8d, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x25, 0x80, 0xa6, 0x1d, 0x03, 0x8a, 0xa6, 0x1d, 0x15, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x2f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0xa0, 0xa6,
	0x1d, 0x00, 0xd0, 0xa6, 0x1d, 0x02, 0x52, 0x1b, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52,
	0x61, 0x74, 0x65, 0x2a, 0x95, 0x02, 0x0a, 0x13, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x6b,
	0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x2d,
	0x0a, 0x29, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x31, 0x0a,
	0x2d, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x10, 0x02,
	0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x10,
	0x03, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x10, 0x05, 0x2a, 0xb5, 0x01, 0x0a, 0x19,
	0x45, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x42, 0x61,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x42, 0x61, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x10,
	0x00, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x54,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x42, 0x61, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x42, 0x61, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x02, 0x12, 0x23,
	0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x42, 0x61, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x54, 0x6f,
	0x70, 0x10, 0x03, 0x2a, 0x85, 0x01, 0x0a, 0x13, 0x45, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x6b,
	0x5f, 0x45, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x6b,
	0x5f, 0x45, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x01, 0x12, 0x2b,
	0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x50, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x10, 0x02, 0x3a, 0x79, 0x0a, 0x0d, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe0, 0xd4, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x45, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x3a, 0x1d, 0x6b, 0x5f, 0x45, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x3a, 0x42, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe1, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x4b, 0x0a, 0x11, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe2,
	0xd4, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x3a, 0x51, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe3,
	0xd4, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x3a, 0x4f, 0x0a, 0x13, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xe4, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x74, 0x3a, 0x51, 0x0a, 0x14, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xe5, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x3a, 0x53,
	0x0a, 0x15, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe6, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x3a, 0x55, 0x0a, 0x16, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe7, 0xd4, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x4a, 0x0a, 0x10, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe8, 0xd4,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x3a, 0x50, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe9, 0xd4, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x83, 0x01, 0x0a, 0x14, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xea, 0xd4, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x45, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x1a,
	0x6b, 0x5f, 0x45, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x12, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x3e,
	0x42, 0x20, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x80, 0x01, 0x01,
}

var (
	file_steammessages_clientsettings_proto_rawDescOnce sync.Once
	file_steammessages_clientsettings_proto_rawDescData = file_steammessages_clientsettings_proto_rawDesc
)

func file_steammessages_clientsettings_proto_rawDescGZIP() []byte {
	file_steammessages_clientsettings_proto_rawDescOnce.Do(func() {
		file_steammessages_clientsettings_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_clientsettings_proto_rawDescData)
	})
	return file_steammessages_clientsettings_proto_rawDescData
}

var file_steammessages_clientsettings_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_steammessages_clientsettings_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_steammessages_clientsettings_proto_goTypes = []interface{}{
	(EClientSettingStore)(0),          // 0: EClientSettingStore
	(EOverlayToggleBarLocation)(0),    // 1: EOverlayToggleBarLocation
	(ESettingProfileMode)(0),          // 2: ESettingProfileMode
	(*CMsgHotkey)(nil),                // 3: CMsgHotkey
	(*CMsgClientSettings)(nil),        // 4: CMsgClientSettings
	(EBroadcastPermission)(0),         // 5: EBroadcastPermission
	(EBroadcastEncoderSetting)(0),     // 6: EBroadcastEncoderSetting
	(EHDRVisualization)(0),            // 7: EHDRVisualization
	(*descriptorpb.FieldOptions)(nil), // 8: google.protobuf.FieldOptions
}
var file_steammessages_clientsettings_proto_depIdxs = []int32{
	3,  // 0: CMsgClientSettings.overlay_key:type_name -> CMsgHotkey
	3,  // 1: CMsgClientSettings.screenshot_key:type_name -> CMsgHotkey
	3,  // 2: CMsgClientSettings.voice_push_to_talk_key:type_name -> CMsgHotkey
	5,  // 3: CMsgClientSettings.broadcast_permissions:type_name -> EBroadcastPermission
	6,  // 4: CMsgClientSettings.broadcast_encoding_option:type_name -> EBroadcastEncoderSetting
	3,  // 5: CMsgClientSettings.g_background_mk:type_name -> CMsgHotkey
	3,  // 6: CMsgClientSettings.g_background_tg:type_name -> CMsgHotkey
	7,  // 7: CMsgClientSettings.gamescope_hdr_visualization:type_name -> EHDRVisualization
	8,  // 8: setting_store:extendee -> google.protobuf.FieldOptions
	8,  // 9: setting_name:extendee -> google.protobuf.FieldOptions
	8,  // 10: setting_pre_login:extendee -> google.protobuf.FieldOptions
	8,  // 11: setting_default_bool:extendee -> google.protobuf.FieldOptions
	8,  // 12: setting_default_int:extendee -> google.protobuf.FieldOptions
	8,  // 13: setting_default_uint:extendee -> google.protobuf.FieldOptions
	8,  // 14: setting_default_float:extendee -> google.protobuf.FieldOptions
	8,  // 15: setting_default_string:extendee -> google.protobuf.FieldOptions
	8,  // 16: setting_readonly:extendee -> google.protobuf.FieldOptions
	8,  // 17: setting_description:extendee -> google.protobuf.FieldOptions
	8,  // 18: setting_profile_mode:extendee -> google.protobuf.FieldOptions
	0,  // 19: setting_store:type_name -> EClientSettingStore
	2,  // 20: setting_profile_mode:type_name -> ESettingProfileMode
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	19, // [19:21] is the sub-list for extension type_name
	8,  // [8:19] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_steammessages_clientsettings_proto_init() }
func file_steammessages_clientsettings_proto_init() {
	if File_steammessages_clientsettings_proto != nil {
		return
	}
	file_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_clientsettings_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgHotkey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_clientsettings_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_clientsettings_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 11,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_clientsettings_proto_goTypes,
		DependencyIndexes: file_steammessages_clientsettings_proto_depIdxs,
		EnumInfos:         file_steammessages_clientsettings_proto_enumTypes,
		MessageInfos:      file_steammessages_clientsettings_proto_msgTypes,
		ExtensionInfos:    file_steammessages_clientsettings_proto_extTypes,
	}.Build()
	File_steammessages_clientsettings_proto = out.File
	file_steammessages_clientsettings_proto_rawDesc = nil
	file_steammessages_clientsettings_proto_goTypes = nil
	file_steammessages_clientsettings_proto_depIdxs = nil
}
