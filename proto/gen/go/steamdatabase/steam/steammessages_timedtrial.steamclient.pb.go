// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: steammessages_timedtrial.steamclient.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CTimedTrial_GetTimeRemaining_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CTimedTrial_GetTimeRemaining_Request) Reset() {
	*x = CTimedTrial_GetTimeRemaining_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTimedTrial_GetTimeRemaining_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTimedTrial_GetTimeRemaining_Request) ProtoMessage() {}

func (x *CTimedTrial_GetTimeRemaining_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTimedTrial_GetTimeRemaining_Request.ProtoReflect.Descriptor instead.
func (*CTimedTrial_GetTimeRemaining_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_timedtrial_steamclient_proto_rawDescGZIP(), []int{0}
}

func (x *CTimedTrial_GetTimeRemaining_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CTimedTrial_GetTimeRemaining_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecondsPlayed  *uint32 `protobuf:"varint,1,opt,name=seconds_played,json=secondsPlayed" json:"seconds_played,omitempty"`
	SecondsAllowed *uint32 `protobuf:"varint,2,opt,name=seconds_allowed,json=secondsAllowed" json:"seconds_allowed,omitempty"`
	Packageid      *uint32 `protobuf:"varint,3,opt,name=packageid" json:"packageid,omitempty"`
	MastersubAppid *uint32 `protobuf:"varint,4,opt,name=mastersub_appid,json=mastersubAppid" json:"mastersub_appid,omitempty"`
}

func (x *CTimedTrial_GetTimeRemaining_Response) Reset() {
	*x = CTimedTrial_GetTimeRemaining_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTimedTrial_GetTimeRemaining_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTimedTrial_GetTimeRemaining_Response) ProtoMessage() {}

func (x *CTimedTrial_GetTimeRemaining_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTimedTrial_GetTimeRemaining_Response.ProtoReflect.Descriptor instead.
func (*CTimedTrial_GetTimeRemaining_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_timedtrial_steamclient_proto_rawDescGZIP(), []int{1}
}

func (x *CTimedTrial_GetTimeRemaining_Response) GetSecondsPlayed() uint32 {
	if x != nil && x.SecondsPlayed != nil {
		return *x.SecondsPlayed
	}
	return 0
}

func (x *CTimedTrial_GetTimeRemaining_Response) GetSecondsAllowed() uint32 {
	if x != nil && x.SecondsAllowed != nil {
		return *x.SecondsAllowed
	}
	return 0
}

func (x *CTimedTrial_GetTimeRemaining_Response) GetPackageid() uint32 {
	if x != nil && x.Packageid != nil {
		return *x.Packageid
	}
	return 0
}

func (x *CTimedTrial_GetTimeRemaining_Response) GetMastersubAppid() uint32 {
	if x != nil && x.MastersubAppid != nil {
		return *x.MastersubAppid
	}
	return 0
}

type CTimedTrial_RecordPlaytime_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid         *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	SecondsPlayed *uint32 `protobuf:"varint,2,opt,name=seconds_played,json=secondsPlayed" json:"seconds_played,omitempty"`
}

func (x *CTimedTrial_RecordPlaytime_Request) Reset() {
	*x = CTimedTrial_RecordPlaytime_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTimedTrial_RecordPlaytime_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTimedTrial_RecordPlaytime_Request) ProtoMessage() {}

func (x *CTimedTrial_RecordPlaytime_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTimedTrial_RecordPlaytime_Request.ProtoReflect.Descriptor instead.
func (*CTimedTrial_RecordPlaytime_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_timedtrial_steamclient_proto_rawDescGZIP(), []int{2}
}

func (x *CTimedTrial_RecordPlaytime_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CTimedTrial_RecordPlaytime_Request) GetSecondsPlayed() uint32 {
	if x != nil && x.SecondsPlayed != nil {
		return *x.SecondsPlayed
	}
	return 0
}

type CTimedTrial_RecordPlaytime_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecondsPlayed  *uint32 `protobuf:"varint,1,opt,name=seconds_played,json=secondsPlayed" json:"seconds_played,omitempty"`
	SecondsAllowed *uint32 `protobuf:"varint,2,opt,name=seconds_allowed,json=secondsAllowed" json:"seconds_allowed,omitempty"`
}

func (x *CTimedTrial_RecordPlaytime_Response) Reset() {
	*x = CTimedTrial_RecordPlaytime_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTimedTrial_RecordPlaytime_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTimedTrial_RecordPlaytime_Response) ProtoMessage() {}

func (x *CTimedTrial_RecordPlaytime_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTimedTrial_RecordPlaytime_Response.ProtoReflect.Descriptor instead.
func (*CTimedTrial_RecordPlaytime_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_timedtrial_steamclient_proto_rawDescGZIP(), []int{3}
}

func (x *CTimedTrial_RecordPlaytime_Response) GetSecondsPlayed() uint32 {
	if x != nil && x.SecondsPlayed != nil {
		return *x.SecondsPlayed
	}
	return 0
}

func (x *CTimedTrial_RecordPlaytime_Response) GetSecondsAllowed() uint32 {
	if x != nil && x.SecondsAllowed != nil {
		return *x.SecondsAllowed
	}
	return 0
}

type CTimedTrial_ResetPlaytime_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CTimedTrial_ResetPlaytime_Request) Reset() {
	*x = CTimedTrial_ResetPlaytime_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTimedTrial_ResetPlaytime_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTimedTrial_ResetPlaytime_Request) ProtoMessage() {}

func (x *CTimedTrial_ResetPlaytime_Request) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTimedTrial_ResetPlaytime_Request.ProtoReflect.Descriptor instead.
func (*CTimedTrial_ResetPlaytime_Request) Descriptor() ([]byte, []int) {
	return file_steammessages_timedtrial_steamclient_proto_rawDescGZIP(), []int{4}
}

func (x *CTimedTrial_ResetPlaytime_Request) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CTimedTrial_ResetPlaytime_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecondsPlayed  *uint32 `protobuf:"varint,1,opt,name=seconds_played,json=secondsPlayed" json:"seconds_played,omitempty"`
	SecondsAllowed *uint32 `protobuf:"varint,2,opt,name=seconds_allowed,json=secondsAllowed" json:"seconds_allowed,omitempty"`
}

func (x *CTimedTrial_ResetPlaytime_Response) Reset() {
	*x = CTimedTrial_ResetPlaytime_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTimedTrial_ResetPlaytime_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTimedTrial_ResetPlaytime_Response) ProtoMessage() {}

func (x *CTimedTrial_ResetPlaytime_Response) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_timedtrial_steamclient_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTimedTrial_ResetPlaytime_Response.ProtoReflect.Descriptor instead.
func (*CTimedTrial_ResetPlaytime_Response) Descriptor() ([]byte, []int) {
	return file_steammessages_timedtrial_steamclient_proto_rawDescGZIP(), []int{5}
}

func (x *CTimedTrial_ResetPlaytime_Response) GetSecondsPlayed() uint32 {
	if x != nil && x.SecondsPlayed != nil {
		return *x.SecondsPlayed
	}
	return 0
}

func (x *CTimedTrial_ResetPlaytime_Response) GetSecondsAllowed() uint32 {
	if x != nil && x.SecondsAllowed != nil {
		return *x.SecondsAllowed
	}
	return 0
}

var File_steammessages_timedtrial_steamclient_proto protoreflect.FileDescriptor

var file_steammessages_timedtrial_steamclient_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x64, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x74,
	0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x24, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x25, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x75, 0x62, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x75, 0x62, 0x41, 0x70,
	0x70, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x22, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x22, 0x75, 0x0a, 0x23, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x64,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x39, 0x0a,
	0x21, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x74, 0x0a, 0x22, 0x43, 0x54, 0x69, 0x6d,
	0x65, 0x64, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x32, 0x9b,
	0x04, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x12, 0xad, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x25, 0x2e, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x43, 0x54, 0x69, 0x6d,
	0x65, 0x64, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4a, 0x82, 0xb5, 0x18, 0x46, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d,
	0x65, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x6c, 0x65, 0x66,
	0x74, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x20, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x70, 0x70, 0x12, 0x94, 0x01,
	0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x23, 0x2e, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xb5, 0x18,
	0x33, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x27, 0x73, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x6c,
	0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20,
	0x67, 0x61, 0x6d, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x43, 0x54, 0x69,
	0x6d, 0x65, 0x64, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x38, 0x82, 0xb5, 0x18, 0x34, 0x52, 0x65, 0x73, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20,
	0x70, 0x6c, 0x61, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x28, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x29, 0x1a, 0x31, 0x82, 0xb5, 0x18, 0x2d, 0x41,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x20, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x43, 0x42, 0x27,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x64, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x80, 0x01,
	0x01,
}

var (
	file_steammessages_timedtrial_steamclient_proto_rawDescOnce sync.Once
	file_steammessages_timedtrial_steamclient_proto_rawDescData = file_steammessages_timedtrial_steamclient_proto_rawDesc
)

func file_steammessages_timedtrial_steamclient_proto_rawDescGZIP() []byte {
	file_steammessages_timedtrial_steamclient_proto_rawDescOnce.Do(func() {
		file_steammessages_timedtrial_steamclient_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_timedtrial_steamclient_proto_rawDescData)
	})
	return file_steammessages_timedtrial_steamclient_proto_rawDescData
}

var file_steammessages_timedtrial_steamclient_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_steammessages_timedtrial_steamclient_proto_goTypes = []interface{}{
	(*CTimedTrial_GetTimeRemaining_Request)(nil),  // 0: CTimedTrial_GetTimeRemaining_Request
	(*CTimedTrial_GetTimeRemaining_Response)(nil), // 1: CTimedTrial_GetTimeRemaining_Response
	(*CTimedTrial_RecordPlaytime_Request)(nil),    // 2: CTimedTrial_RecordPlaytime_Request
	(*CTimedTrial_RecordPlaytime_Response)(nil),   // 3: CTimedTrial_RecordPlaytime_Response
	(*CTimedTrial_ResetPlaytime_Request)(nil),     // 4: CTimedTrial_ResetPlaytime_Request
	(*CTimedTrial_ResetPlaytime_Response)(nil),    // 5: CTimedTrial_ResetPlaytime_Response
}
var file_steammessages_timedtrial_steamclient_proto_depIdxs = []int32{
	0, // 0: TimedTrial.GetTimeRemaining:input_type -> CTimedTrial_GetTimeRemaining_Request
	2, // 1: TimedTrial.RecordPlaytime:input_type -> CTimedTrial_RecordPlaytime_Request
	4, // 2: TimedTrial.ResetPlaytime:input_type -> CTimedTrial_ResetPlaytime_Request
	1, // 3: TimedTrial.GetTimeRemaining:output_type -> CTimedTrial_GetTimeRemaining_Response
	3, // 4: TimedTrial.RecordPlaytime:output_type -> CTimedTrial_RecordPlaytime_Response
	5, // 5: TimedTrial.ResetPlaytime:output_type -> CTimedTrial_ResetPlaytime_Response
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_steammessages_timedtrial_steamclient_proto_init() }
func file_steammessages_timedtrial_steamclient_proto_init() {
	if File_steammessages_timedtrial_steamclient_proto != nil {
		return
	}
	file_steammessages_base_proto_init()
	file_steammessages_unified_base_steamclient_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_timedtrial_steamclient_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTimedTrial_GetTimeRemaining_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_timedtrial_steamclient_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTimedTrial_GetTimeRemaining_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_timedtrial_steamclient_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTimedTrial_RecordPlaytime_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_timedtrial_steamclient_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTimedTrial_RecordPlaytime_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_timedtrial_steamclient_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTimedTrial_ResetPlaytime_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_timedtrial_steamclient_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTimedTrial_ResetPlaytime_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_timedtrial_steamclient_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_steammessages_timedtrial_steamclient_proto_goTypes,
		DependencyIndexes: file_steammessages_timedtrial_steamclient_proto_depIdxs,
		MessageInfos:      file_steammessages_timedtrial_steamclient_proto_msgTypes,
	}.Build()
	File_steammessages_timedtrial_steamclient_proto = out.File
	file_steammessages_timedtrial_steamclient_proto_rawDesc = nil
	file_steammessages_timedtrial_steamclient_proto_goTypes = nil
	file_steammessages_timedtrial_steamclient_proto_depIdxs = nil
}
