// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: steammessages_client_objects.proto

package steam

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ECloudPendingRemoteOperation int32

const (
	ECloudPendingRemoteOperation_k_ECloudPendingRemoteOperationNone                ECloudPendingRemoteOperation = 0
	ECloudPendingRemoteOperation_k_ECloudPendingRemoteOperationAppSessionActive    ECloudPendingRemoteOperation = 1
	ECloudPendingRemoteOperation_k_ECloudPendingRemoteOperationUploadInProgress    ECloudPendingRemoteOperation = 2
	ECloudPendingRemoteOperation_k_ECloudPendingRemoteOperationUploadPending       ECloudPendingRemoteOperation = 3
	ECloudPendingRemoteOperation_k_ECloudPendingRemoteOperationAppSessionSuspended ECloudPendingRemoteOperation = 4
)

// Enum value maps for ECloudPendingRemoteOperation.
var (
	ECloudPendingRemoteOperation_name = map[int32]string{
		0: "k_ECloudPendingRemoteOperationNone",
		1: "k_ECloudPendingRemoteOperationAppSessionActive",
		2: "k_ECloudPendingRemoteOperationUploadInProgress",
		3: "k_ECloudPendingRemoteOperationUploadPending",
		4: "k_ECloudPendingRemoteOperationAppSessionSuspended",
	}
	ECloudPendingRemoteOperation_value = map[string]int32{
		"k_ECloudPendingRemoteOperationNone":                0,
		"k_ECloudPendingRemoteOperationAppSessionActive":    1,
		"k_ECloudPendingRemoteOperationUploadInProgress":    2,
		"k_ECloudPendingRemoteOperationUploadPending":       3,
		"k_ECloudPendingRemoteOperationAppSessionSuspended": 4,
	}
)

func (x ECloudPendingRemoteOperation) Enum() *ECloudPendingRemoteOperation {
	p := new(ECloudPendingRemoteOperation)
	*p = x
	return p
}

func (x ECloudPendingRemoteOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECloudPendingRemoteOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_client_objects_proto_enumTypes[0].Descriptor()
}

func (ECloudPendingRemoteOperation) Type() protoreflect.EnumType {
	return &file_steammessages_client_objects_proto_enumTypes[0]
}

func (x ECloudPendingRemoteOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ECloudPendingRemoteOperation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ECloudPendingRemoteOperation(num)
	return nil
}

// Deprecated: Use ECloudPendingRemoteOperation.Descriptor instead.
func (ECloudPendingRemoteOperation) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{0}
}

type ESteamDeckKeyboardLayout int32

const (
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_QWERTY                         ESteamDeckKeyboardLayout = 0
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Bulgarian                      ESteamDeckKeyboardLayout = 1
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Chinese_Simplified             ESteamDeckKeyboardLayout = 2
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Chinese_Traditional            ESteamDeckKeyboardLayout = 3
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Czech                          ESteamDeckKeyboardLayout = 4
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Danish                         ESteamDeckKeyboardLayout = 5
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Finnish                        ESteamDeckKeyboardLayout = 6
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_French                         ESteamDeckKeyboardLayout = 7
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_German                         ESteamDeckKeyboardLayout = 8
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Greek                          ESteamDeckKeyboardLayout = 9
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Hungarian                      ESteamDeckKeyboardLayout = 10
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Italian                        ESteamDeckKeyboardLayout = 11
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Japanese                       ESteamDeckKeyboardLayout = 12
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Korean                         ESteamDeckKeyboardLayout = 13
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Norwegian                      ESteamDeckKeyboardLayout = 14
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Polish                         ESteamDeckKeyboardLayout = 15
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Portuguese                     ESteamDeckKeyboardLayout = 16
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Romanian                       ESteamDeckKeyboardLayout = 17
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Russian                        ESteamDeckKeyboardLayout = 18
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Spanish                        ESteamDeckKeyboardLayout = 19
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Swedish                        ESteamDeckKeyboardLayout = 20
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Thai                           ESteamDeckKeyboardLayout = 21
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Turkish_F                      ESteamDeckKeyboardLayout = 22
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Turkish_Q                      ESteamDeckKeyboardLayout = 23
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Ukrainian                      ESteamDeckKeyboardLayout = 24
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Vietnamese                     ESteamDeckKeyboardLayout = 25
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_QWERTY_International           ESteamDeckKeyboardLayout = 26
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Dvorak                         ESteamDeckKeyboardLayout = 27
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Colemak                        ESteamDeckKeyboardLayout = 28
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Bulgarian_Phonetic_Traditional ESteamDeckKeyboardLayout = 29
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Bulgarian_Phonetic             ESteamDeckKeyboardLayout = 30
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Chinese_Traditional_Bopomofo   ESteamDeckKeyboardLayout = 31
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Chinese_Traditional_Cangjie    ESteamDeckKeyboardLayout = 32
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Japanese_Kana                  ESteamDeckKeyboardLayout = 33
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Chinese_Traditional_Quick      ESteamDeckKeyboardLayout = 34
	ESteamDeckKeyboardLayout_k_ESteamDeckKeyboardLayout_Indonesian                     ESteamDeckKeyboardLayout = 35
)

// Enum value maps for ESteamDeckKeyboardLayout.
var (
	ESteamDeckKeyboardLayout_name = map[int32]string{
		0:  "k_ESteamDeckKeyboardLayout_QWERTY",
		1:  "k_ESteamDeckKeyboardLayout_Bulgarian",
		2:  "k_ESteamDeckKeyboardLayout_Chinese_Simplified",
		3:  "k_ESteamDeckKeyboardLayout_Chinese_Traditional",
		4:  "k_ESteamDeckKeyboardLayout_Czech",
		5:  "k_ESteamDeckKeyboardLayout_Danish",
		6:  "k_ESteamDeckKeyboardLayout_Finnish",
		7:  "k_ESteamDeckKeyboardLayout_French",
		8:  "k_ESteamDeckKeyboardLayout_German",
		9:  "k_ESteamDeckKeyboardLayout_Greek",
		10: "k_ESteamDeckKeyboardLayout_Hungarian",
		11: "k_ESteamDeckKeyboardLayout_Italian",
		12: "k_ESteamDeckKeyboardLayout_Japanese",
		13: "k_ESteamDeckKeyboardLayout_Korean",
		14: "k_ESteamDeckKeyboardLayout_Norwegian",
		15: "k_ESteamDeckKeyboardLayout_Polish",
		16: "k_ESteamDeckKeyboardLayout_Portuguese",
		17: "k_ESteamDeckKeyboardLayout_Romanian",
		18: "k_ESteamDeckKeyboardLayout_Russian",
		19: "k_ESteamDeckKeyboardLayout_Spanish",
		20: "k_ESteamDeckKeyboardLayout_Swedish",
		21: "k_ESteamDeckKeyboardLayout_Thai",
		22: "k_ESteamDeckKeyboardLayout_Turkish_F",
		23: "k_ESteamDeckKeyboardLayout_Turkish_Q",
		24: "k_ESteamDeckKeyboardLayout_Ukrainian",
		25: "k_ESteamDeckKeyboardLayout_Vietnamese",
		26: "k_ESteamDeckKeyboardLayout_QWERTY_International",
		27: "k_ESteamDeckKeyboardLayout_Dvorak",
		28: "k_ESteamDeckKeyboardLayout_Colemak",
		29: "k_ESteamDeckKeyboardLayout_Bulgarian_Phonetic_Traditional",
		30: "k_ESteamDeckKeyboardLayout_Bulgarian_Phonetic",
		31: "k_ESteamDeckKeyboardLayout_Chinese_Traditional_Bopomofo",
		32: "k_ESteamDeckKeyboardLayout_Chinese_Traditional_Cangjie",
		33: "k_ESteamDeckKeyboardLayout_Japanese_Kana",
		34: "k_ESteamDeckKeyboardLayout_Chinese_Traditional_Quick",
		35: "k_ESteamDeckKeyboardLayout_Indonesian",
	}
	ESteamDeckKeyboardLayout_value = map[string]int32{
		"k_ESteamDeckKeyboardLayout_QWERTY":                         0,
		"k_ESteamDeckKeyboardLayout_Bulgarian":                      1,
		"k_ESteamDeckKeyboardLayout_Chinese_Simplified":             2,
		"k_ESteamDeckKeyboardLayout_Chinese_Traditional":            3,
		"k_ESteamDeckKeyboardLayout_Czech":                          4,
		"k_ESteamDeckKeyboardLayout_Danish":                         5,
		"k_ESteamDeckKeyboardLayout_Finnish":                        6,
		"k_ESteamDeckKeyboardLayout_French":                         7,
		"k_ESteamDeckKeyboardLayout_German":                         8,
		"k_ESteamDeckKeyboardLayout_Greek":                          9,
		"k_ESteamDeckKeyboardLayout_Hungarian":                      10,
		"k_ESteamDeckKeyboardLayout_Italian":                        11,
		"k_ESteamDeckKeyboardLayout_Japanese":                       12,
		"k_ESteamDeckKeyboardLayout_Korean":                         13,
		"k_ESteamDeckKeyboardLayout_Norwegian":                      14,
		"k_ESteamDeckKeyboardLayout_Polish":                         15,
		"k_ESteamDeckKeyboardLayout_Portuguese":                     16,
		"k_ESteamDeckKeyboardLayout_Romanian":                       17,
		"k_ESteamDeckKeyboardLayout_Russian":                        18,
		"k_ESteamDeckKeyboardLayout_Spanish":                        19,
		"k_ESteamDeckKeyboardLayout_Swedish":                        20,
		"k_ESteamDeckKeyboardLayout_Thai":                           21,
		"k_ESteamDeckKeyboardLayout_Turkish_F":                      22,
		"k_ESteamDeckKeyboardLayout_Turkish_Q":                      23,
		"k_ESteamDeckKeyboardLayout_Ukrainian":                      24,
		"k_ESteamDeckKeyboardLayout_Vietnamese":                     25,
		"k_ESteamDeckKeyboardLayout_QWERTY_International":           26,
		"k_ESteamDeckKeyboardLayout_Dvorak":                         27,
		"k_ESteamDeckKeyboardLayout_Colemak":                        28,
		"k_ESteamDeckKeyboardLayout_Bulgarian_Phonetic_Traditional": 29,
		"k_ESteamDeckKeyboardLayout_Bulgarian_Phonetic":             30,
		"k_ESteamDeckKeyboardLayout_Chinese_Traditional_Bopomofo":   31,
		"k_ESteamDeckKeyboardLayout_Chinese_Traditional_Cangjie":    32,
		"k_ESteamDeckKeyboardLayout_Japanese_Kana":                  33,
		"k_ESteamDeckKeyboardLayout_Chinese_Traditional_Quick":      34,
		"k_ESteamDeckKeyboardLayout_Indonesian":                     35,
	}
)

func (x ESteamDeckKeyboardLayout) Enum() *ESteamDeckKeyboardLayout {
	p := new(ESteamDeckKeyboardLayout)
	*p = x
	return p
}

func (x ESteamDeckKeyboardLayout) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESteamDeckKeyboardLayout) Descriptor() protoreflect.EnumDescriptor {
	return file_steammessages_client_objects_proto_enumTypes[1].Descriptor()
}

func (ESteamDeckKeyboardLayout) Type() protoreflect.EnumType {
	return &file_steammessages_client_objects_proto_enumTypes[1]
}

func (x ESteamDeckKeyboardLayout) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ESteamDeckKeyboardLayout) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ESteamDeckKeyboardLayout(num)
	return nil
}

// Deprecated: Use ESteamDeckKeyboardLayout.Descriptor instead.
func (ESteamDeckKeyboardLayout) EnumDescriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{1}
}

type SteamMessagesClientIClientForcedEnumDependencies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A *EBluetoothDeviceType        `protobuf:"varint,1,opt,name=a,enum=EBluetoothDeviceType,def=0" json:"a,omitempty"`
	B *EStorageBlockContentType    `protobuf:"varint,2,opt,name=b,enum=EStorageBlockContentType,def=0" json:"b,omitempty"`
	C *EStorageBlockFileSystemType `protobuf:"varint,3,opt,name=c,enum=EStorageBlockFileSystemType,def=0" json:"c,omitempty"`
	D *ESDCardFormatStage          `protobuf:"varint,4,opt,name=d,enum=ESDCardFormatStage,def=0" json:"d,omitempty"`
}

// Default values for SteamMessagesClientIClientForcedEnumDependencies fields.
const (
	Default_SteamMessagesClientIClientForcedEnumDependencies_A = EBluetoothDeviceType_k_BluetoothDeviceType_Invalid
	Default_SteamMessagesClientIClientForcedEnumDependencies_B = EStorageBlockContentType_k_EStorageBlockContentType_Invalid
	Default_SteamMessagesClientIClientForcedEnumDependencies_C = EStorageBlockFileSystemType_k_EStorageBlockFileSystemType_Invalid
	Default_SteamMessagesClientIClientForcedEnumDependencies_D = ESDCardFormatStage_k_ESDCardFormatStage_Invalid
)

func (x *SteamMessagesClientIClientForcedEnumDependencies) Reset() {
	*x = SteamMessagesClientIClientForcedEnumDependencies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteamMessagesClientIClientForcedEnumDependencies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteamMessagesClientIClientForcedEnumDependencies) ProtoMessage() {}

func (x *SteamMessagesClientIClientForcedEnumDependencies) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteamMessagesClientIClientForcedEnumDependencies.ProtoReflect.Descriptor instead.
func (*SteamMessagesClientIClientForcedEnumDependencies) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{0}
}

func (x *SteamMessagesClientIClientForcedEnumDependencies) GetA() EBluetoothDeviceType {
	if x != nil && x.A != nil {
		return *x.A
	}
	return Default_SteamMessagesClientIClientForcedEnumDependencies_A
}

func (x *SteamMessagesClientIClientForcedEnumDependencies) GetB() EStorageBlockContentType {
	if x != nil && x.B != nil {
		return *x.B
	}
	return Default_SteamMessagesClientIClientForcedEnumDependencies_B
}

func (x *SteamMessagesClientIClientForcedEnumDependencies) GetC() EStorageBlockFileSystemType {
	if x != nil && x.C != nil {
		return *x.C
	}
	return Default_SteamMessagesClientIClientForcedEnumDependencies_C
}

func (x *SteamMessagesClientIClientForcedEnumDependencies) GetD() ESDCardFormatStage {
	if x != nil && x.D != nil {
		return *x.D
	}
	return Default_SteamMessagesClientIClientForcedEnumDependencies_D
}

type CMsgNetworkDeviceIP4Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip      *int32 `protobuf:"varint,1,opt,name=ip,def=0" json:"ip,omitempty"`
	Netmask *int32 `protobuf:"varint,2,opt,name=netmask" json:"netmask,omitempty"`
}

// Default values for CMsgNetworkDeviceIP4Address fields.
const (
	Default_CMsgNetworkDeviceIP4Address_Ip = int32(0)
)

func (x *CMsgNetworkDeviceIP4Address) Reset() {
	*x = CMsgNetworkDeviceIP4Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDeviceIP4Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDeviceIP4Address) ProtoMessage() {}

func (x *CMsgNetworkDeviceIP4Address) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDeviceIP4Address.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDeviceIP4Address) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{1}
}

func (x *CMsgNetworkDeviceIP4Address) GetIp() int32 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return Default_CMsgNetworkDeviceIP4Address_Ip
}

func (x *CMsgNetworkDeviceIP4Address) GetNetmask() int32 {
	if x != nil && x.Netmask != nil {
		return *x.Netmask
	}
	return 0
}

type CMsgNetworkDeviceIP4Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses      []*CMsgNetworkDeviceIP4Address `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
	DnsIp          []int32                        `protobuf:"varint,2,rep,name=dns_ip,json=dnsIp" json:"dns_ip,omitempty"`
	GatewayIp      *int32                         `protobuf:"varint,3,opt,name=gateway_ip,json=gatewayIp" json:"gateway_ip,omitempty"`
	IsDhcpEnabled  *bool                          `protobuf:"varint,4,opt,name=is_dhcp_enabled,json=isDhcpEnabled" json:"is_dhcp_enabled,omitempty"`
	IsDefaultRoute *bool                          `protobuf:"varint,5,opt,name=is_default_route,json=isDefaultRoute" json:"is_default_route,omitempty"`
	IsEnabled      *bool                          `protobuf:"varint,6,opt,name=is_enabled,json=isEnabled,def=0" json:"is_enabled,omitempty"`
}

// Default values for CMsgNetworkDeviceIP4Config fields.
const (
	Default_CMsgNetworkDeviceIP4Config_IsEnabled = bool(false)
)

func (x *CMsgNetworkDeviceIP4Config) Reset() {
	*x = CMsgNetworkDeviceIP4Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDeviceIP4Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDeviceIP4Config) ProtoMessage() {}

func (x *CMsgNetworkDeviceIP4Config) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDeviceIP4Config.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDeviceIP4Config) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{2}
}

func (x *CMsgNetworkDeviceIP4Config) GetAddresses() []*CMsgNetworkDeviceIP4Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *CMsgNetworkDeviceIP4Config) GetDnsIp() []int32 {
	if x != nil {
		return x.DnsIp
	}
	return nil
}

func (x *CMsgNetworkDeviceIP4Config) GetGatewayIp() int32 {
	if x != nil && x.GatewayIp != nil {
		return *x.GatewayIp
	}
	return 0
}

func (x *CMsgNetworkDeviceIP4Config) GetIsDhcpEnabled() bool {
	if x != nil && x.IsDhcpEnabled != nil {
		return *x.IsDhcpEnabled
	}
	return false
}

func (x *CMsgNetworkDeviceIP4Config) GetIsDefaultRoute() bool {
	if x != nil && x.IsDefaultRoute != nil {
		return *x.IsDefaultRoute
	}
	return false
}

func (x *CMsgNetworkDeviceIP4Config) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return Default_CMsgNetworkDeviceIP4Config_IsEnabled
}

type CMsgNetworkDeviceIP6Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip *string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (x *CMsgNetworkDeviceIP6Address) Reset() {
	*x = CMsgNetworkDeviceIP6Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDeviceIP6Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDeviceIP6Address) ProtoMessage() {}

func (x *CMsgNetworkDeviceIP6Address) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDeviceIP6Address.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDeviceIP6Address) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{3}
}

func (x *CMsgNetworkDeviceIP6Address) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

type CMsgNetworkDeviceIP6Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses      []*CMsgNetworkDeviceIP6Address `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
	DnsIp          []string                       `protobuf:"bytes,2,rep,name=dns_ip,json=dnsIp" json:"dns_ip,omitempty"`
	GatewayIp      *string                        `protobuf:"bytes,3,opt,name=gateway_ip,json=gatewayIp" json:"gateway_ip,omitempty"`
	IsDhcpEnabled  *bool                          `protobuf:"varint,4,opt,name=is_dhcp_enabled,json=isDhcpEnabled" json:"is_dhcp_enabled,omitempty"`
	IsDefaultRoute *bool                          `protobuf:"varint,5,opt,name=is_default_route,json=isDefaultRoute" json:"is_default_route,omitempty"`
	IsEnabled      *bool                          `protobuf:"varint,6,opt,name=is_enabled,json=isEnabled,def=0" json:"is_enabled,omitempty"`
}

// Default values for CMsgNetworkDeviceIP6Config fields.
const (
	Default_CMsgNetworkDeviceIP6Config_IsEnabled = bool(false)
)

func (x *CMsgNetworkDeviceIP6Config) Reset() {
	*x = CMsgNetworkDeviceIP6Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDeviceIP6Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDeviceIP6Config) ProtoMessage() {}

func (x *CMsgNetworkDeviceIP6Config) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDeviceIP6Config.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDeviceIP6Config) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{4}
}

func (x *CMsgNetworkDeviceIP6Config) GetAddresses() []*CMsgNetworkDeviceIP6Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *CMsgNetworkDeviceIP6Config) GetDnsIp() []string {
	if x != nil {
		return x.DnsIp
	}
	return nil
}

func (x *CMsgNetworkDeviceIP6Config) GetGatewayIp() string {
	if x != nil && x.GatewayIp != nil {
		return *x.GatewayIp
	}
	return ""
}

func (x *CMsgNetworkDeviceIP6Config) GetIsDhcpEnabled() bool {
	if x != nil && x.IsDhcpEnabled != nil {
		return *x.IsDhcpEnabled
	}
	return false
}

func (x *CMsgNetworkDeviceIP6Config) GetIsDefaultRoute() bool {
	if x != nil && x.IsDefaultRoute != nil {
		return *x.IsDefaultRoute
	}
	return false
}

func (x *CMsgNetworkDeviceIP6Config) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return Default_CMsgNetworkDeviceIP6Config_IsEnabled
}

type CMsgNetworkDevicesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices               []*CMsgNetworkDevicesData_Device `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty"`
	IsWifiEnabled         *bool                            `protobuf:"varint,2,opt,name=is_wifi_enabled,json=isWifiEnabled" json:"is_wifi_enabled,omitempty"`
	IsWifiScanningEnabled *bool                            `protobuf:"varint,3,opt,name=is_wifi_scanning_enabled,json=isWifiScanningEnabled" json:"is_wifi_scanning_enabled,omitempty"`
}

func (x *CMsgNetworkDevicesData) Reset() {
	*x = CMsgNetworkDevicesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDevicesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDevicesData) ProtoMessage() {}

func (x *CMsgNetworkDevicesData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDevicesData.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDevicesData) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{5}
}

func (x *CMsgNetworkDevicesData) GetDevices() []*CMsgNetworkDevicesData_Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *CMsgNetworkDevicesData) GetIsWifiEnabled() bool {
	if x != nil && x.IsWifiEnabled != nil {
		return *x.IsWifiEnabled
	}
	return false
}

func (x *CMsgNetworkDevicesData) GetIsWifiScanningEnabled() bool {
	if x != nil && x.IsWifiScanningEnabled != nil {
		return *x.IsWifiScanningEnabled
	}
	return false
}

type CMsgNetworkDeviceConnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId    *uint32                               `protobuf:"varint,1,opt,name=device_id,json=deviceId,def=0" json:"device_id,omitempty"`
	Credentials *CMsgNetworkDeviceConnect_Credentials `protobuf:"bytes,4,opt,name=credentials" json:"credentials,omitempty"`
	Ip4         *CMsgNetworkDeviceIP4Config           `protobuf:"bytes,5,opt,name=ip4" json:"ip4,omitempty"`
	Ip6         *CMsgNetworkDeviceIP6Config           `protobuf:"bytes,6,opt,name=ip6" json:"ip6,omitempty"`
	// Types that are assignable to ApInfo:
	//
	//	*CMsgNetworkDeviceConnect_ApKnown
	//	*CMsgNetworkDeviceConnect_ApCustom
	ApInfo isCMsgNetworkDeviceConnect_ApInfo `protobuf_oneof:"ap_info"`
}

// Default values for CMsgNetworkDeviceConnect fields.
const (
	Default_CMsgNetworkDeviceConnect_DeviceId = uint32(0)
)

func (x *CMsgNetworkDeviceConnect) Reset() {
	*x = CMsgNetworkDeviceConnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDeviceConnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDeviceConnect) ProtoMessage() {}

func (x *CMsgNetworkDeviceConnect) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDeviceConnect.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDeviceConnect) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{6}
}

func (x *CMsgNetworkDeviceConnect) GetDeviceId() uint32 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return Default_CMsgNetworkDeviceConnect_DeviceId
}

func (x *CMsgNetworkDeviceConnect) GetCredentials() *CMsgNetworkDeviceConnect_Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *CMsgNetworkDeviceConnect) GetIp4() *CMsgNetworkDeviceIP4Config {
	if x != nil {
		return x.Ip4
	}
	return nil
}

func (x *CMsgNetworkDeviceConnect) GetIp6() *CMsgNetworkDeviceIP6Config {
	if x != nil {
		return x.Ip6
	}
	return nil
}

func (m *CMsgNetworkDeviceConnect) GetApInfo() isCMsgNetworkDeviceConnect_ApInfo {
	if m != nil {
		return m.ApInfo
	}
	return nil
}

func (x *CMsgNetworkDeviceConnect) GetApKnown() *CMsgNetworkDeviceConnect_KnownAP {
	if x, ok := x.GetApInfo().(*CMsgNetworkDeviceConnect_ApKnown); ok {
		return x.ApKnown
	}
	return nil
}

func (x *CMsgNetworkDeviceConnect) GetApCustom() *CMsgNetworkDeviceConnect_CustomAP {
	if x, ok := x.GetApInfo().(*CMsgNetworkDeviceConnect_ApCustom); ok {
		return x.ApCustom
	}
	return nil
}

type isCMsgNetworkDeviceConnect_ApInfo interface {
	isCMsgNetworkDeviceConnect_ApInfo()
}

type CMsgNetworkDeviceConnect_ApKnown struct {
	ApKnown *CMsgNetworkDeviceConnect_KnownAP `protobuf:"bytes,2,opt,name=ap_known,json=apKnown,oneof"`
}

type CMsgNetworkDeviceConnect_ApCustom struct {
	ApCustom *CMsgNetworkDeviceConnect_CustomAP `protobuf:"bytes,3,opt,name=ap_custom,json=apCustom,oneof"`
}

func (*CMsgNetworkDeviceConnect_ApKnown) isCMsgNetworkDeviceConnect_ApInfo() {}

func (*CMsgNetworkDeviceConnect_ApCustom) isCMsgNetworkDeviceConnect_ApInfo() {}

type CMsgStorageDevicesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drives             []*CMsgStorageDevicesData_Drive       `protobuf:"bytes,1,rep,name=drives" json:"drives,omitempty"`
	BlockDevices       []*CMsgStorageDevicesData_BlockDevice `protobuf:"bytes,2,rep,name=block_devices,json=blockDevices" json:"block_devices,omitempty"`
	IsUnmountSupported *bool                                 `protobuf:"varint,3,opt,name=is_unmount_supported,json=isUnmountSupported" json:"is_unmount_supported,omitempty"`
	IsTrimSupported    *bool                                 `protobuf:"varint,4,opt,name=is_trim_supported,json=isTrimSupported" json:"is_trim_supported,omitempty"`
	IsTrimRunning      *bool                                 `protobuf:"varint,5,opt,name=is_trim_running,json=isTrimRunning" json:"is_trim_running,omitempty"`
}

func (x *CMsgStorageDevicesData) Reset() {
	*x = CMsgStorageDevicesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgStorageDevicesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgStorageDevicesData) ProtoMessage() {}

func (x *CMsgStorageDevicesData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgStorageDevicesData.ProtoReflect.Descriptor instead.
func (*CMsgStorageDevicesData) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{7}
}

func (x *CMsgStorageDevicesData) GetDrives() []*CMsgStorageDevicesData_Drive {
	if x != nil {
		return x.Drives
	}
	return nil
}

func (x *CMsgStorageDevicesData) GetBlockDevices() []*CMsgStorageDevicesData_BlockDevice {
	if x != nil {
		return x.BlockDevices
	}
	return nil
}

func (x *CMsgStorageDevicesData) GetIsUnmountSupported() bool {
	if x != nil && x.IsUnmountSupported != nil {
		return *x.IsUnmountSupported
	}
	return false
}

func (x *CMsgStorageDevicesData) GetIsTrimSupported() bool {
	if x != nil && x.IsTrimSupported != nil {
		return *x.IsTrimSupported
	}
	return false
}

func (x *CMsgStorageDevicesData) GetIsTrimRunning() bool {
	if x != nil && x.IsTrimRunning != nil {
		return *x.IsTrimRunning
	}
	return false
}

type CCloud_PendingRemoteOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation       *ECloudPendingRemoteOperation `protobuf:"varint,1,opt,name=operation,enum=ECloudPendingRemoteOperation,def=0" json:"operation,omitempty"`
	MachineName     *string                       `protobuf:"bytes,2,opt,name=machine_name,json=machineName" json:"machine_name,omitempty"`
	ClientId        *uint64                       `protobuf:"varint,3,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	TimeLastUpdated *uint32                       `protobuf:"varint,4,opt,name=time_last_updated,json=timeLastUpdated" json:"time_last_updated,omitempty"`
}

// Default values for CCloud_PendingRemoteOperation fields.
const (
	Default_CCloud_PendingRemoteOperation_Operation = ECloudPendingRemoteOperation_k_ECloudPendingRemoteOperationNone
)

func (x *CCloud_PendingRemoteOperation) Reset() {
	*x = CCloud_PendingRemoteOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCloud_PendingRemoteOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCloud_PendingRemoteOperation) ProtoMessage() {}

func (x *CCloud_PendingRemoteOperation) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCloud_PendingRemoteOperation.ProtoReflect.Descriptor instead.
func (*CCloud_PendingRemoteOperation) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{8}
}

func (x *CCloud_PendingRemoteOperation) GetOperation() ECloudPendingRemoteOperation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return Default_CCloud_PendingRemoteOperation_Operation
}

func (x *CCloud_PendingRemoteOperation) GetMachineName() string {
	if x != nil && x.MachineName != nil {
		return *x.MachineName
	}
	return ""
}

func (x *CCloud_PendingRemoteOperation) GetClientId() uint64 {
	if x != nil && x.ClientId != nil {
		return *x.ClientId
	}
	return 0
}

func (x *CCloud_PendingRemoteOperation) GetTimeLastUpdated() uint32 {
	if x != nil && x.TimeLastUpdated != nil {
		return *x.TimeLastUpdated
	}
	return 0
}

type CMsgCloudPendingRemoteOperations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations []*CCloud_PendingRemoteOperation `protobuf:"bytes,1,rep,name=operations" json:"operations,omitempty"`
}

func (x *CMsgCloudPendingRemoteOperations) Reset() {
	*x = CMsgCloudPendingRemoteOperations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCloudPendingRemoteOperations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCloudPendingRemoteOperations) ProtoMessage() {}

func (x *CMsgCloudPendingRemoteOperations) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCloudPendingRemoteOperations.ProtoReflect.Descriptor instead.
func (*CMsgCloudPendingRemoteOperations) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{9}
}

func (x *CMsgCloudPendingRemoteOperations) GetOperations() []*CCloud_PendingRemoteOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

type CMsgBluetoothDevicesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adapters []*CMsgBluetoothDevicesData_Adapter `protobuf:"bytes,1,rep,name=adapters" json:"adapters,omitempty"`
	Devices  []*CMsgBluetoothDevicesData_Device  `protobuf:"bytes,2,rep,name=devices" json:"devices,omitempty"`
	Manager  *CMsgBluetoothDevicesData_Manager   `protobuf:"bytes,3,opt,name=manager" json:"manager,omitempty"`
}

func (x *CMsgBluetoothDevicesData) Reset() {
	*x = CMsgBluetoothDevicesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBluetoothDevicesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBluetoothDevicesData) ProtoMessage() {}

func (x *CMsgBluetoothDevicesData) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBluetoothDevicesData.ProtoReflect.Descriptor instead.
func (*CMsgBluetoothDevicesData) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{10}
}

func (x *CMsgBluetoothDevicesData) GetAdapters() []*CMsgBluetoothDevicesData_Adapter {
	if x != nil {
		return x.Adapters
	}
	return nil
}

func (x *CMsgBluetoothDevicesData) GetDevices() []*CMsgBluetoothDevicesData_Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *CMsgBluetoothDevicesData) GetManager() *CMsgBluetoothDevicesData_Manager {
	if x != nil {
		return x.Manager
	}
	return nil
}

type CMsgSystemPerfDiagnosticEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CMsgSystemPerfDiagnosticEntry) Reset() {
	*x = CMsgSystemPerfDiagnosticEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemPerfDiagnosticEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemPerfDiagnosticEntry) ProtoMessage() {}

func (x *CMsgSystemPerfDiagnosticEntry) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemPerfDiagnosticEntry.ProtoReflect.Descriptor instead.
func (*CMsgSystemPerfDiagnosticEntry) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{11}
}

func (x *CMsgSystemPerfDiagnosticEntry) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSystemPerfDiagnosticEntry) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type CMsgSystemPerfNetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Timestamp     *float64 `protobuf:"fixed64,2,opt,name=timestamp" json:"timestamp,omitempty"`
	TxBytesTotal  *int64   `protobuf:"varint,3,opt,name=tx_bytes_total,json=txBytesTotal" json:"tx_bytes_total,omitempty"`
	RxBytesTotal  *int64   `protobuf:"varint,4,opt,name=rx_bytes_total,json=rxBytesTotal" json:"rx_bytes_total,omitempty"`
	TxBytesPerSec *int32   `protobuf:"varint,5,opt,name=tx_bytes_per_sec,json=txBytesPerSec" json:"tx_bytes_per_sec,omitempty"`
	RxBytesPerSec *int32   `protobuf:"varint,6,opt,name=rx_bytes_per_sec,json=rxBytesPerSec" json:"rx_bytes_per_sec,omitempty"`
}

func (x *CMsgSystemPerfNetworkInterface) Reset() {
	*x = CMsgSystemPerfNetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemPerfNetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemPerfNetworkInterface) ProtoMessage() {}

func (x *CMsgSystemPerfNetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemPerfNetworkInterface.ProtoReflect.Descriptor instead.
func (*CMsgSystemPerfNetworkInterface) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{12}
}

func (x *CMsgSystemPerfNetworkInterface) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSystemPerfNetworkInterface) GetTimestamp() float64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *CMsgSystemPerfNetworkInterface) GetTxBytesTotal() int64 {
	if x != nil && x.TxBytesTotal != nil {
		return *x.TxBytesTotal
	}
	return 0
}

func (x *CMsgSystemPerfNetworkInterface) GetRxBytesTotal() int64 {
	if x != nil && x.RxBytesTotal != nil {
		return *x.RxBytesTotal
	}
	return 0
}

func (x *CMsgSystemPerfNetworkInterface) GetTxBytesPerSec() int32 {
	if x != nil && x.TxBytesPerSec != nil {
		return *x.TxBytesPerSec
	}
	return 0
}

func (x *CMsgSystemPerfNetworkInterface) GetRxBytesPerSec() int32 {
	if x != nil && x.RxBytesPerSec != nil {
		return *x.RxBytesPerSec
	}
	return 0
}

type CMsgSystemPerfDiagnosticInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries      []*CMsgSystemPerfDiagnosticEntry  `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	Interfaces   []*CMsgSystemPerfNetworkInterface `protobuf:"bytes,2,rep,name=interfaces" json:"interfaces,omitempty"`
	BatteryTempC *float32                          `protobuf:"fixed32,3,opt,name=battery_temp_c,json=batteryTempC" json:"battery_temp_c,omitempty"`
}

func (x *CMsgSystemPerfDiagnosticInfo) Reset() {
	*x = CMsgSystemPerfDiagnosticInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemPerfDiagnosticInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemPerfDiagnosticInfo) ProtoMessage() {}

func (x *CMsgSystemPerfDiagnosticInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemPerfDiagnosticInfo.ProtoReflect.Descriptor instead.
func (*CMsgSystemPerfDiagnosticInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{13}
}

func (x *CMsgSystemPerfDiagnosticInfo) GetEntries() []*CMsgSystemPerfDiagnosticEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *CMsgSystemPerfDiagnosticInfo) GetInterfaces() []*CMsgSystemPerfNetworkInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *CMsgSystemPerfDiagnosticInfo) GetBatteryTempC() float32 {
	if x != nil && x.BatteryTempC != nil {
		return *x.BatteryTempC
	}
	return 0
}

type CMsgSystemPerfLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuGovernorManualMinMhz              *int32                 `protobuf:"varint,1,opt,name=cpu_governor_manual_min_mhz,json=cpuGovernorManualMinMhz" json:"cpu_governor_manual_min_mhz,omitempty"`
	CpuGovernorManualMaxMhz              *int32                 `protobuf:"varint,2,opt,name=cpu_governor_manual_max_mhz,json=cpuGovernorManualMaxMhz" json:"cpu_governor_manual_max_mhz,omitempty"`
	FsrSharpnessMin                      *int32                 `protobuf:"varint,3,opt,name=fsr_sharpness_min,json=fsrSharpnessMin" json:"fsr_sharpness_min,omitempty"`
	FsrSharpnessMax                      *int32                 `protobuf:"varint,4,opt,name=fsr_sharpness_max,json=fsrSharpnessMax" json:"fsr_sharpness_max,omitempty"`
	GpuPerformanceManualMinMhz           *int32                 `protobuf:"varint,5,opt,name=gpu_performance_manual_min_mhz,json=gpuPerformanceManualMinMhz" json:"gpu_performance_manual_min_mhz,omitempty"`
	GpuPerformanceManualMaxMhz           *int32                 `protobuf:"varint,6,opt,name=gpu_performance_manual_max_mhz,json=gpuPerformanceManualMaxMhz" json:"gpu_performance_manual_max_mhz,omitempty"`
	PerfOverlayIsStandalone              *bool                  `protobuf:"varint,7,opt,name=perf_overlay_is_standalone,json=perfOverlayIsStandalone" json:"perf_overlay_is_standalone,omitempty"`
	IsDynamicVrsAvailable                *bool                  `protobuf:"varint,8,opt,name=is_dynamic_vrs_available,json=isDynamicVrsAvailable" json:"is_dynamic_vrs_available,omitempty"`
	IsManualDisplayRefreshRateAvailable  *bool                  `protobuf:"varint,9,opt,name=is_manual_display_refresh_rate_available,json=isManualDisplayRefreshRateAvailable" json:"is_manual_display_refresh_rate_available,omitempty"`
	GpuPerformanceLevelsAvailable        []EGPUPerformanceLevel `protobuf:"varint,10,rep,name=gpu_performance_levels_available,json=gpuPerformanceLevelsAvailable,enum=EGPUPerformanceLevel" json:"gpu_performance_levels_available,omitempty"`
	DisplayRefreshManualHzMin            *int32                 `protobuf:"varint,11,opt,name=display_refresh_manual_hz_min,json=displayRefreshManualHzMin" json:"display_refresh_manual_hz_min,omitempty"`
	DisplayRefreshManualHzMax            *int32                 `protobuf:"varint,12,opt,name=display_refresh_manual_hz_max,json=displayRefreshManualHzMax" json:"display_refresh_manual_hz_max,omitempty"`
	FpsLimitOptions                      []int32                `protobuf:"varint,13,rep,name=fps_limit_options,json=fpsLimitOptions" json:"fps_limit_options,omitempty"`
	TdpLimitMin                          *int32                 `protobuf:"varint,14,opt,name=tdp_limit_min,json=tdpLimitMin" json:"tdp_limit_min,omitempty"`
	TdpLimitMax                          *int32                 `protobuf:"varint,15,opt,name=tdp_limit_max,json=tdpLimitMax" json:"tdp_limit_max,omitempty"`
	IsNisSupported                       *bool                  `protobuf:"varint,16,opt,name=is_nis_supported,json=isNisSupported" json:"is_nis_supported,omitempty"`
	NisSharpnessMin                      *int32                 `protobuf:"varint,17,opt,name=nis_sharpness_min,json=nisSharpnessMin" json:"nis_sharpness_min,omitempty"`
	NisSharpnessMax                      *int32                 `protobuf:"varint,18,opt,name=nis_sharpness_max,json=nisSharpnessMax" json:"nis_sharpness_max,omitempty"`
	DisplayExternalRefreshManualHzMin    *int32                 `protobuf:"varint,19,opt,name=display_external_refresh_manual_hz_min,json=displayExternalRefreshManualHzMin" json:"display_external_refresh_manual_hz_min,omitempty"`
	DisplayExternalRefreshManualHzMax    *int32                 `protobuf:"varint,20,opt,name=display_external_refresh_manual_hz_max,json=displayExternalRefreshManualHzMax" json:"display_external_refresh_manual_hz_max,omitempty"`
	FpsLimitOptionsExternal              []int32                `protobuf:"varint,21,rep,name=fps_limit_options_external,json=fpsLimitOptionsExternal" json:"fps_limit_options_external,omitempty"`
	IsTearingSupported                   *bool                  `protobuf:"varint,22,opt,name=is_tearing_supported,json=isTearingSupported" json:"is_tearing_supported,omitempty"`
	IsVrrSupported                       *bool                  `protobuf:"varint,23,opt,name=is_vrr_supported,json=isVrrSupported" json:"is_vrr_supported,omitempty"`
	IsDynamicRefreshRateInSteamSupported *bool                  `protobuf:"varint,24,opt,name=is_dynamic_refresh_rate_in_steam_supported,json=isDynamicRefreshRateInSteamSupported" json:"is_dynamic_refresh_rate_in_steam_supported,omitempty"`
	IsSplitScalingAndFilteringSupported  *bool                  `protobuf:"varint,25,opt,name=is_split_scaling_and_filtering_supported,json=isSplitScalingAndFilteringSupported" json:"is_split_scaling_and_filtering_supported,omitempty"`
	SplitScalingFiltersAvailable         []ESplitScalingFilter  `protobuf:"varint,26,rep,name=split_scaling_filters_available,json=splitScalingFiltersAvailable,enum=ESplitScalingFilter" json:"split_scaling_filters_available,omitempty"`
	SplitScalingScalersAvailable         []ESplitScalingScaler  `protobuf:"varint,27,rep,name=split_scaling_scalers_available,json=splitScalingScalersAvailable,enum=ESplitScalingScaler" json:"split_scaling_scalers_available,omitempty"`
	IsHdrSupported                       *bool                  `protobuf:"varint,28,opt,name=is_hdr_supported,json=isHdrSupported" json:"is_hdr_supported,omitempty"`
	DisplayRefreshManualHzOcMax          *int32                 `protobuf:"varint,29,opt,name=display_refresh_manual_hz_oc_max,json=displayRefreshManualHzOcMax" json:"display_refresh_manual_hz_oc_max,omitempty"`
	DisableRefreshRateManagement         *bool                  `protobuf:"varint,30,opt,name=disable_refresh_rate_management,json=disableRefreshRateManagement" json:"disable_refresh_rate_management,omitempty"`
}

func (x *CMsgSystemPerfLimits) Reset() {
	*x = CMsgSystemPerfLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemPerfLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemPerfLimits) ProtoMessage() {}

func (x *CMsgSystemPerfLimits) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemPerfLimits.ProtoReflect.Descriptor instead.
func (*CMsgSystemPerfLimits) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{14}
}

func (x *CMsgSystemPerfLimits) GetCpuGovernorManualMinMhz() int32 {
	if x != nil && x.CpuGovernorManualMinMhz != nil {
		return *x.CpuGovernorManualMinMhz
	}
	return 0
}

func (x *CMsgSystemPerfLimits) GetCpuGovernorManualMaxMhz() int32 {
	if x != nil && x.CpuGovernorManualMaxMhz != nil {
		return *x.CpuGovernorManualMaxMhz
	}
	return 0
}

func (x *CMsgSystemPerfLimits) GetFsrSharpnessMin() int32 {
	if x != nil && x.FsrSharpnessMin != nil {
		return *x.FsrSharpnessMin
	}
	return 0
}

func (x *CMsgSystemPerfLimits) GetFsrSharpnessMax() int32 {
	if x != nil && x.FsrSharpnessMax != nil {
		return *x.FsrSharpnessMax
	}
	return 0
}

func (x *CMsgSystemPerfLimits) GetGpuPerformanceManualMinMhz() int32 {
	if x != nil && x.GpuPerformanceManualMinMhz != nil {
		return *x.GpuPerformanceManualMinMhz
	}
	return 0
}

func (x *CMsgSystemPerfLimits) GetGpuPerformanceManualMaxMhz() int32 {
	if x != nil && x.GpuPerformanceManualMaxMhz != nil {
		return *x.GpuPerformanceManualMaxMhz
	}
	return 0
}

func (x *CMsgSystemPerfLimits) GetPerfOverlayIsStandalone() bool {
	if x != nil && x.PerfOverlayIsStandalone != nil {
		return *x.PerfOverlayIsStandalone
	}
	return false
}

func (x *CMsgSystemPerfLimits) GetIsDynamicVrsAvailable() bool {
	if x != nil && x.IsDynamicVrsAvailable != nil {
		return *x.IsDynamicVrsAvailable
	}
	return false
}

func (x *CMsgSystemPerfLimits) GetIsManualDisplayRefreshRateAvailable() bool {
	if x != nil && x.IsManualDisplayRefreshRateAvailable != nil {
		return *x.IsManualDisplayRefreshRateAvailable
	}
	return false
}

func (x *CMsgSystemPerfLimits) GetGpuPerformanceLevelsAvailable() []EGPUPerformanceLevel {
	if x != nil {
		return x.GpuPerformanceLevelsAvailable
	}
	return nil
}

func (x *CMsgSystemPerfLimits) GetDisplayRefreshManualHzMin() int32 {
	if x != nil && x.DisplayRefreshManualHzMin != nil {
		return *x.DisplayRefreshManualHzMin
	}
	return 0
}

func (x *CMsgSystemPerfLimits) GetDisplayRefreshManualHzMax() int32 {
	if x != nil && x.DisplayRefreshManualHzMax != nil {
		return *x.DisplayRefreshManualHzMax
	}
	return 0
}

func (x *CMsgSystemPerfLimits) GetFpsLimitOptions() []int32 {
	if x != nil {
		return x.FpsLimitOptions
	}
	return nil
}

func (x *CMsgSystemPerfLimits) GetTdpLimitMin() int32 {
	if x != nil && x.TdpLimitMin != nil {
		return *x.TdpLimitMin
	}
	return 0
}

func (x *CMsgSystemPerfLimits) GetTdpLimitMax() int32 {
	if x != nil && x.TdpLimitMax != nil {
		return *x.TdpLimitMax
	}
	return 0
}

func (x *CMsgSystemPerfLimits) GetIsNisSupported() bool {
	if x != nil && x.IsNisSupported != nil {
		return *x.IsNisSupported
	}
	return false
}

func (x *CMsgSystemPerfLimits) GetNisSharpnessMin() int32 {
	if x != nil && x.NisSharpnessMin != nil {
		return *x.NisSharpnessMin
	}
	return 0
}

func (x *CMsgSystemPerfLimits) GetNisSharpnessMax() int32 {
	if x != nil && x.NisSharpnessMax != nil {
		return *x.NisSharpnessMax
	}
	return 0
}

func (x *CMsgSystemPerfLimits) GetDisplayExternalRefreshManualHzMin() int32 {
	if x != nil && x.DisplayExternalRefreshManualHzMin != nil {
		return *x.DisplayExternalRefreshManualHzMin
	}
	return 0
}

func (x *CMsgSystemPerfLimits) GetDisplayExternalRefreshManualHzMax() int32 {
	if x != nil && x.DisplayExternalRefreshManualHzMax != nil {
		return *x.DisplayExternalRefreshManualHzMax
	}
	return 0
}

func (x *CMsgSystemPerfLimits) GetFpsLimitOptionsExternal() []int32 {
	if x != nil {
		return x.FpsLimitOptionsExternal
	}
	return nil
}

func (x *CMsgSystemPerfLimits) GetIsTearingSupported() bool {
	if x != nil && x.IsTearingSupported != nil {
		return *x.IsTearingSupported
	}
	return false
}

func (x *CMsgSystemPerfLimits) GetIsVrrSupported() bool {
	if x != nil && x.IsVrrSupported != nil {
		return *x.IsVrrSupported
	}
	return false
}

func (x *CMsgSystemPerfLimits) GetIsDynamicRefreshRateInSteamSupported() bool {
	if x != nil && x.IsDynamicRefreshRateInSteamSupported != nil {
		return *x.IsDynamicRefreshRateInSteamSupported
	}
	return false
}

func (x *CMsgSystemPerfLimits) GetIsSplitScalingAndFilteringSupported() bool {
	if x != nil && x.IsSplitScalingAndFilteringSupported != nil {
		return *x.IsSplitScalingAndFilteringSupported
	}
	return false
}

func (x *CMsgSystemPerfLimits) GetSplitScalingFiltersAvailable() []ESplitScalingFilter {
	if x != nil {
		return x.SplitScalingFiltersAvailable
	}
	return nil
}

func (x *CMsgSystemPerfLimits) GetSplitScalingScalersAvailable() []ESplitScalingScaler {
	if x != nil {
		return x.SplitScalingScalersAvailable
	}
	return nil
}

func (x *CMsgSystemPerfLimits) GetIsHdrSupported() bool {
	if x != nil && x.IsHdrSupported != nil {
		return *x.IsHdrSupported
	}
	return false
}

func (x *CMsgSystemPerfLimits) GetDisplayRefreshManualHzOcMax() int32 {
	if x != nil && x.DisplayRefreshManualHzOcMax != nil {
		return *x.DisplayRefreshManualHzOcMax
	}
	return 0
}

func (x *CMsgSystemPerfLimits) GetDisableRefreshRateManagement() bool {
	if x != nil && x.DisableRefreshRateManagement != nil {
		return *x.DisableRefreshRateManagement
	}
	return false
}

type CMsgSystemPerfSettingsGlobal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiagnosticUpdateRate               *float32                   `protobuf:"fixed32,1,opt,name=diagnostic_update_rate,json=diagnosticUpdateRate" json:"diagnostic_update_rate,omitempty"`
	SystemTraceServiceState            *ESystemServiceState       `protobuf:"varint,2,opt,name=system_trace_service_state,json=systemTraceServiceState,enum=ESystemServiceState,def=0" json:"system_trace_service_state,omitempty"`
	GraphicsProfilingServiceState      *ESystemServiceState       `protobuf:"varint,3,opt,name=graphics_profiling_service_state,json=graphicsProfilingServiceState,enum=ESystemServiceState,def=0" json:"graphics_profiling_service_state,omitempty"`
	PerfOverlayServiceState            *ESystemServiceState       `protobuf:"varint,4,opt,name=perf_overlay_service_state,json=perfOverlayServiceState,enum=ESystemServiceState,def=0" json:"perf_overlay_service_state,omitempty"`
	PerfOverlayLevel                   *EGraphicsPerfOverlayLevel `protobuf:"varint,5,opt,name=perf_overlay_level,json=perfOverlayLevel,enum=EGraphicsPerfOverlayLevel,def=0" json:"perf_overlay_level,omitempty"`
	IsShowPerfOverlayOverSteamEnabled  *bool                      `protobuf:"varint,6,opt,name=is_show_perf_overlay_over_steam_enabled,json=isShowPerfOverlayOverSteamEnabled" json:"is_show_perf_overlay_over_steam_enabled,omitempty"`
	IsAdvancedSettingsEnabled          *bool                      `protobuf:"varint,7,opt,name=is_advanced_settings_enabled,json=isAdvancedSettingsEnabled" json:"is_advanced_settings_enabled,omitempty"`
	AllowExternalDisplayRefreshControl *bool                      `protobuf:"varint,8,opt,name=allow_external_display_refresh_control,json=allowExternalDisplayRefreshControl" json:"allow_external_display_refresh_control,omitempty"`
	IsHdrEnabled                       *bool                      `protobuf:"varint,9,opt,name=is_hdr_enabled,json=isHdrEnabled" json:"is_hdr_enabled,omitempty"`
	HdrOnSdrTonemapOperator            *EHDRToneMapOperator       `protobuf:"varint,12,opt,name=hdr_on_sdr_tonemap_operator,json=hdrOnSdrTonemapOperator,enum=EHDRToneMapOperator,def=0" json:"hdr_on_sdr_tonemap_operator,omitempty"`
	IsHdrDebugHeatmapEnabled           *bool                      `protobuf:"varint,13,opt,name=is_hdr_debug_heatmap_enabled,json=isHdrDebugHeatmapEnabled" json:"is_hdr_debug_heatmap_enabled,omitempty"`
	ForceHdrWideGammutForSdr           *bool                      `protobuf:"varint,15,opt,name=force_hdr_wide_gammut_for_sdr,json=forceHdrWideGammutForSdr,def=1" json:"force_hdr_wide_gammut_for_sdr,omitempty"`
	AllowExperimentalHdr               *bool                      `protobuf:"varint,16,opt,name=allow_experimental_hdr,json=allowExperimentalHdr" json:"allow_experimental_hdr,omitempty"`
	SdrToHdrBrightness                 *float32                   `protobuf:"fixed32,22,opt,name=sdr_to_hdr_brightness,json=sdrToHdrBrightness" json:"sdr_to_hdr_brightness,omitempty"`
	DebugForceHdrSupport               *bool                      `protobuf:"varint,18,opt,name=debug_force_hdr_support,json=debugForceHdrSupport" json:"debug_force_hdr_support,omitempty"`
	ForceHdr_10PqOutputDebug           *bool                      `protobuf:"varint,19,opt,name=force_hdr_10pq_output_debug,json=forceHdr10pqOutputDebug" json:"force_hdr_10pq_output_debug,omitempty"`
	IsDisplayOcEnabled                 *bool                      `protobuf:"varint,20,opt,name=is_display_oc_enabled,json=isDisplayOcEnabled" json:"is_display_oc_enabled,omitempty"`
	IsColorManagementEnabled           *bool                      `protobuf:"varint,21,opt,name=is_color_management_enabled,json=isColorManagementEnabled" json:"is_color_management_enabled,omitempty"`
}

// Default values for CMsgSystemPerfSettingsGlobal fields.
const (
	Default_CMsgSystemPerfSettingsGlobal_SystemTraceServiceState       = ESystemServiceState_k_ESystemServiceState_Unavailable
	Default_CMsgSystemPerfSettingsGlobal_GraphicsProfilingServiceState = ESystemServiceState_k_ESystemServiceState_Unavailable
	Default_CMsgSystemPerfSettingsGlobal_PerfOverlayServiceState       = ESystemServiceState_k_ESystemServiceState_Unavailable
	Default_CMsgSystemPerfSettingsGlobal_PerfOverlayLevel              = EGraphicsPerfOverlayLevel_k_EGraphicsPerfOverlayLevel_Hidden
	Default_CMsgSystemPerfSettingsGlobal_HdrOnSdrTonemapOperator       = EHDRToneMapOperator_k_EHDRToneMapOperator_Invalid
	Default_CMsgSystemPerfSettingsGlobal_ForceHdrWideGammutForSdr      = bool(true)
)

func (x *CMsgSystemPerfSettingsGlobal) Reset() {
	*x = CMsgSystemPerfSettingsGlobal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemPerfSettingsGlobal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemPerfSettingsGlobal) ProtoMessage() {}

func (x *CMsgSystemPerfSettingsGlobal) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemPerfSettingsGlobal.ProtoReflect.Descriptor instead.
func (*CMsgSystemPerfSettingsGlobal) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{15}
}

func (x *CMsgSystemPerfSettingsGlobal) GetDiagnosticUpdateRate() float32 {
	if x != nil && x.DiagnosticUpdateRate != nil {
		return *x.DiagnosticUpdateRate
	}
	return 0
}

func (x *CMsgSystemPerfSettingsGlobal) GetSystemTraceServiceState() ESystemServiceState {
	if x != nil && x.SystemTraceServiceState != nil {
		return *x.SystemTraceServiceState
	}
	return Default_CMsgSystemPerfSettingsGlobal_SystemTraceServiceState
}

func (x *CMsgSystemPerfSettingsGlobal) GetGraphicsProfilingServiceState() ESystemServiceState {
	if x != nil && x.GraphicsProfilingServiceState != nil {
		return *x.GraphicsProfilingServiceState
	}
	return Default_CMsgSystemPerfSettingsGlobal_GraphicsProfilingServiceState
}

func (x *CMsgSystemPerfSettingsGlobal) GetPerfOverlayServiceState() ESystemServiceState {
	if x != nil && x.PerfOverlayServiceState != nil {
		return *x.PerfOverlayServiceState
	}
	return Default_CMsgSystemPerfSettingsGlobal_PerfOverlayServiceState
}

func (x *CMsgSystemPerfSettingsGlobal) GetPerfOverlayLevel() EGraphicsPerfOverlayLevel {
	if x != nil && x.PerfOverlayLevel != nil {
		return *x.PerfOverlayLevel
	}
	return Default_CMsgSystemPerfSettingsGlobal_PerfOverlayLevel
}

func (x *CMsgSystemPerfSettingsGlobal) GetIsShowPerfOverlayOverSteamEnabled() bool {
	if x != nil && x.IsShowPerfOverlayOverSteamEnabled != nil {
		return *x.IsShowPerfOverlayOverSteamEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsGlobal) GetIsAdvancedSettingsEnabled() bool {
	if x != nil && x.IsAdvancedSettingsEnabled != nil {
		return *x.IsAdvancedSettingsEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsGlobal) GetAllowExternalDisplayRefreshControl() bool {
	if x != nil && x.AllowExternalDisplayRefreshControl != nil {
		return *x.AllowExternalDisplayRefreshControl
	}
	return false
}

func (x *CMsgSystemPerfSettingsGlobal) GetIsHdrEnabled() bool {
	if x != nil && x.IsHdrEnabled != nil {
		return *x.IsHdrEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsGlobal) GetHdrOnSdrTonemapOperator() EHDRToneMapOperator {
	if x != nil && x.HdrOnSdrTonemapOperator != nil {
		return *x.HdrOnSdrTonemapOperator
	}
	return Default_CMsgSystemPerfSettingsGlobal_HdrOnSdrTonemapOperator
}

func (x *CMsgSystemPerfSettingsGlobal) GetIsHdrDebugHeatmapEnabled() bool {
	if x != nil && x.IsHdrDebugHeatmapEnabled != nil {
		return *x.IsHdrDebugHeatmapEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsGlobal) GetForceHdrWideGammutForSdr() bool {
	if x != nil && x.ForceHdrWideGammutForSdr != nil {
		return *x.ForceHdrWideGammutForSdr
	}
	return Default_CMsgSystemPerfSettingsGlobal_ForceHdrWideGammutForSdr
}

func (x *CMsgSystemPerfSettingsGlobal) GetAllowExperimentalHdr() bool {
	if x != nil && x.AllowExperimentalHdr != nil {
		return *x.AllowExperimentalHdr
	}
	return false
}

func (x *CMsgSystemPerfSettingsGlobal) GetSdrToHdrBrightness() float32 {
	if x != nil && x.SdrToHdrBrightness != nil {
		return *x.SdrToHdrBrightness
	}
	return 0
}

func (x *CMsgSystemPerfSettingsGlobal) GetDebugForceHdrSupport() bool {
	if x != nil && x.DebugForceHdrSupport != nil {
		return *x.DebugForceHdrSupport
	}
	return false
}

func (x *CMsgSystemPerfSettingsGlobal) GetForceHdr_10PqOutputDebug() bool {
	if x != nil && x.ForceHdr_10PqOutputDebug != nil {
		return *x.ForceHdr_10PqOutputDebug
	}
	return false
}

func (x *CMsgSystemPerfSettingsGlobal) GetIsDisplayOcEnabled() bool {
	if x != nil && x.IsDisplayOcEnabled != nil {
		return *x.IsDisplayOcEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsGlobal) GetIsColorManagementEnabled() bool {
	if x != nil && x.IsColorManagementEnabled != nil {
		return *x.IsColorManagementEnabled
	}
	return false
}

type CMsgSystemPerfSettingsPerApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpuPerformanceManualMhz        *int32                `protobuf:"varint,1,opt,name=gpu_performance_manual_mhz,json=gpuPerformanceManualMhz" json:"gpu_performance_manual_mhz,omitempty"`
	FpsLimit                       *int32                `protobuf:"varint,2,opt,name=fps_limit,json=fpsLimit" json:"fps_limit,omitempty"`
	IsVariableResolutionEnabled    *bool                 `protobuf:"varint,3,opt,name=is_variable_resolution_enabled,json=isVariableResolutionEnabled" json:"is_variable_resolution_enabled,omitempty"`
	IsDynamicRefreshRateEnabled    *bool                 `protobuf:"varint,4,opt,name=is_dynamic_refresh_rate_enabled,json=isDynamicRefreshRateEnabled" json:"is_dynamic_refresh_rate_enabled,omitempty"`
	TdpLimit                       *int32                `protobuf:"varint,5,opt,name=tdp_limit,json=tdpLimit" json:"tdp_limit,omitempty"`
	CpuGovernor                    *ECPUGovernor         `protobuf:"varint,6,opt,name=cpu_governor,json=cpuGovernor,enum=ECPUGovernor,def=0" json:"cpu_governor,omitempty"`
	CpuGovernorManualMhz           *int32                `protobuf:"varint,7,opt,name=cpu_governor_manual_mhz,json=cpuGovernorManualMhz" json:"cpu_governor_manual_mhz,omitempty"`
	ScalingFilter                  *int32                `protobuf:"varint,8,opt,name=scaling_filter,json=scalingFilter" json:"scaling_filter,omitempty"`
	FsrSharpness                   *int32                `protobuf:"varint,9,opt,name=fsr_sharpness,json=fsrSharpness" json:"fsr_sharpness,omitempty"`
	IsFpsLimitEnabled              *bool                 `protobuf:"varint,10,opt,name=is_fps_limit_enabled,json=isFpsLimitEnabled" json:"is_fps_limit_enabled,omitempty"`
	IsTdpLimitEnabled              *bool                 `protobuf:"varint,11,opt,name=is_tdp_limit_enabled,json=isTdpLimitEnabled" json:"is_tdp_limit_enabled,omitempty"`
	IsLowLatencyModeEnabled        *bool                 `protobuf:"varint,12,opt,name=is_low_latency_mode_enabled,json=isLowLatencyModeEnabled" json:"is_low_latency_mode_enabled,omitempty"`
	DisplayRefreshManualHz         *int32                `protobuf:"varint,13,opt,name=display_refresh_manual_hz,json=displayRefreshManualHz" json:"display_refresh_manual_hz,omitempty"`
	IsGamePerfProfileEnabled       *bool                 `protobuf:"varint,14,opt,name=is_game_perf_profile_enabled,json=isGamePerfProfileEnabled" json:"is_game_perf_profile_enabled,omitempty"`
	GpuPerformanceLevel            *EGPUPerformanceLevel `protobuf:"varint,15,opt,name=gpu_performance_level,json=gpuPerformanceLevel,enum=EGPUPerformanceLevel,def=0" json:"gpu_performance_level,omitempty"`
	NisSharpness                   *int32                `protobuf:"varint,16,opt,name=nis_sharpness,json=nisSharpness" json:"nis_sharpness,omitempty"`
	DisplayExternalRefreshManualHz *int32                `protobuf:"varint,17,opt,name=display_external_refresh_manual_hz,json=displayExternalRefreshManualHz" json:"display_external_refresh_manual_hz,omitempty"`
	FpsLimitExternal               *int32                `protobuf:"varint,18,opt,name=fps_limit_external,json=fpsLimitExternal" json:"fps_limit_external,omitempty"`
	IsTearingEnabled               *bool                 `protobuf:"varint,19,opt,name=is_tearing_enabled,json=isTearingEnabled" json:"is_tearing_enabled,omitempty"`
	IsVrrEnabled                   *bool                 `protobuf:"varint,20,opt,name=is_vrr_enabled,json=isVrrEnabled" json:"is_vrr_enabled,omitempty"`
	IsCompositeDebugEnabled        *bool                 `protobuf:"varint,21,opt,name=is_composite_debug_enabled,json=isCompositeDebugEnabled" json:"is_composite_debug_enabled,omitempty"`
	ForceComposite                 *bool                 `protobuf:"varint,22,opt,name=force_composite,json=forceComposite" json:"force_composite,omitempty"`
	UseDynamicRefreshRateInSteam   *bool                 `protobuf:"varint,23,opt,name=use_dynamic_refresh_rate_in_steam,json=useDynamicRefreshRateInSteam" json:"use_dynamic_refresh_rate_in_steam,omitempty"`
	SplitScalingFilter             *ESplitScalingFilter  `protobuf:"varint,24,opt,name=split_scaling_filter,json=splitScalingFilter,enum=ESplitScalingFilter,def=0" json:"split_scaling_filter,omitempty"`
	SplitScalingScaler             *ESplitScalingScaler  `protobuf:"varint,25,opt,name=split_scaling_scaler,json=splitScalingScaler,enum=ESplitScalingScaler,def=0" json:"split_scaling_scaler,omitempty"`
}

// Default values for CMsgSystemPerfSettingsPerApp fields.
const (
	Default_CMsgSystemPerfSettingsPerApp_CpuGovernor         = ECPUGovernor_k_ECPUGovernor_Invalid
	Default_CMsgSystemPerfSettingsPerApp_GpuPerformanceLevel = EGPUPerformanceLevel_k_EGPUPerformanceLevel_Invalid
	Default_CMsgSystemPerfSettingsPerApp_SplitScalingFilter  = ESplitScalingFilter_k_ESplitScalingFilter_Invalid
	Default_CMsgSystemPerfSettingsPerApp_SplitScalingScaler  = ESplitScalingScaler_k_ESplitScalingScaler_Invalid
)

func (x *CMsgSystemPerfSettingsPerApp) Reset() {
	*x = CMsgSystemPerfSettingsPerApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemPerfSettingsPerApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemPerfSettingsPerApp) ProtoMessage() {}

func (x *CMsgSystemPerfSettingsPerApp) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemPerfSettingsPerApp.ProtoReflect.Descriptor instead.
func (*CMsgSystemPerfSettingsPerApp) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{16}
}

func (x *CMsgSystemPerfSettingsPerApp) GetGpuPerformanceManualMhz() int32 {
	if x != nil && x.GpuPerformanceManualMhz != nil {
		return *x.GpuPerformanceManualMhz
	}
	return 0
}

func (x *CMsgSystemPerfSettingsPerApp) GetFpsLimit() int32 {
	if x != nil && x.FpsLimit != nil {
		return *x.FpsLimit
	}
	return 0
}

func (x *CMsgSystemPerfSettingsPerApp) GetIsVariableResolutionEnabled() bool {
	if x != nil && x.IsVariableResolutionEnabled != nil {
		return *x.IsVariableResolutionEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsPerApp) GetIsDynamicRefreshRateEnabled() bool {
	if x != nil && x.IsDynamicRefreshRateEnabled != nil {
		return *x.IsDynamicRefreshRateEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsPerApp) GetTdpLimit() int32 {
	if x != nil && x.TdpLimit != nil {
		return *x.TdpLimit
	}
	return 0
}

func (x *CMsgSystemPerfSettingsPerApp) GetCpuGovernor() ECPUGovernor {
	if x != nil && x.CpuGovernor != nil {
		return *x.CpuGovernor
	}
	return Default_CMsgSystemPerfSettingsPerApp_CpuGovernor
}

func (x *CMsgSystemPerfSettingsPerApp) GetCpuGovernorManualMhz() int32 {
	if x != nil && x.CpuGovernorManualMhz != nil {
		return *x.CpuGovernorManualMhz
	}
	return 0
}

func (x *CMsgSystemPerfSettingsPerApp) GetScalingFilter() int32 {
	if x != nil && x.ScalingFilter != nil {
		return *x.ScalingFilter
	}
	return 0
}

func (x *CMsgSystemPerfSettingsPerApp) GetFsrSharpness() int32 {
	if x != nil && x.FsrSharpness != nil {
		return *x.FsrSharpness
	}
	return 0
}

func (x *CMsgSystemPerfSettingsPerApp) GetIsFpsLimitEnabled() bool {
	if x != nil && x.IsFpsLimitEnabled != nil {
		return *x.IsFpsLimitEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsPerApp) GetIsTdpLimitEnabled() bool {
	if x != nil && x.IsTdpLimitEnabled != nil {
		return *x.IsTdpLimitEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsPerApp) GetIsLowLatencyModeEnabled() bool {
	if x != nil && x.IsLowLatencyModeEnabled != nil {
		return *x.IsLowLatencyModeEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsPerApp) GetDisplayRefreshManualHz() int32 {
	if x != nil && x.DisplayRefreshManualHz != nil {
		return *x.DisplayRefreshManualHz
	}
	return 0
}

func (x *CMsgSystemPerfSettingsPerApp) GetIsGamePerfProfileEnabled() bool {
	if x != nil && x.IsGamePerfProfileEnabled != nil {
		return *x.IsGamePerfProfileEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsPerApp) GetGpuPerformanceLevel() EGPUPerformanceLevel {
	if x != nil && x.GpuPerformanceLevel != nil {
		return *x.GpuPerformanceLevel
	}
	return Default_CMsgSystemPerfSettingsPerApp_GpuPerformanceLevel
}

func (x *CMsgSystemPerfSettingsPerApp) GetNisSharpness() int32 {
	if x != nil && x.NisSharpness != nil {
		return *x.NisSharpness
	}
	return 0
}

func (x *CMsgSystemPerfSettingsPerApp) GetDisplayExternalRefreshManualHz() int32 {
	if x != nil && x.DisplayExternalRefreshManualHz != nil {
		return *x.DisplayExternalRefreshManualHz
	}
	return 0
}

func (x *CMsgSystemPerfSettingsPerApp) GetFpsLimitExternal() int32 {
	if x != nil && x.FpsLimitExternal != nil {
		return *x.FpsLimitExternal
	}
	return 0
}

func (x *CMsgSystemPerfSettingsPerApp) GetIsTearingEnabled() bool {
	if x != nil && x.IsTearingEnabled != nil {
		return *x.IsTearingEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsPerApp) GetIsVrrEnabled() bool {
	if x != nil && x.IsVrrEnabled != nil {
		return *x.IsVrrEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsPerApp) GetIsCompositeDebugEnabled() bool {
	if x != nil && x.IsCompositeDebugEnabled != nil {
		return *x.IsCompositeDebugEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsPerApp) GetForceComposite() bool {
	if x != nil && x.ForceComposite != nil {
		return *x.ForceComposite
	}
	return false
}

func (x *CMsgSystemPerfSettingsPerApp) GetUseDynamicRefreshRateInSteam() bool {
	if x != nil && x.UseDynamicRefreshRateInSteam != nil {
		return *x.UseDynamicRefreshRateInSteam
	}
	return false
}

func (x *CMsgSystemPerfSettingsPerApp) GetSplitScalingFilter() ESplitScalingFilter {
	if x != nil && x.SplitScalingFilter != nil {
		return *x.SplitScalingFilter
	}
	return Default_CMsgSystemPerfSettingsPerApp_SplitScalingFilter
}

func (x *CMsgSystemPerfSettingsPerApp) GetSplitScalingScaler() ESplitScalingScaler {
	if x != nil && x.SplitScalingScaler != nil {
		return *x.SplitScalingScaler
	}
	return Default_CMsgSystemPerfSettingsPerApp_SplitScalingScaler
}

type CMsgSystemPerfSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Global *CMsgSystemPerfSettingsGlobal `protobuf:"bytes,1,opt,name=global" json:"global,omitempty"`
	PerApp *CMsgSystemPerfSettingsPerApp `protobuf:"bytes,2,opt,name=per_app,json=perApp" json:"per_app,omitempty"`
}

func (x *CMsgSystemPerfSettings) Reset() {
	*x = CMsgSystemPerfSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemPerfSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemPerfSettings) ProtoMessage() {}

func (x *CMsgSystemPerfSettings) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemPerfSettings.ProtoReflect.Descriptor instead.
func (*CMsgSystemPerfSettings) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{17}
}

func (x *CMsgSystemPerfSettings) GetGlobal() *CMsgSystemPerfSettingsGlobal {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *CMsgSystemPerfSettings) GetPerApp() *CMsgSystemPerfSettingsPerApp {
	if x != nil {
		return x.PerApp
	}
	return nil
}

type CMsgSystemPerfSettingsV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiagnosticUpdateRate              *float32                   `protobuf:"fixed32,1,opt,name=diagnostic_update_rate,json=diagnosticUpdateRate" json:"diagnostic_update_rate,omitempty"`
	SystemTraceServiceState           *ESystemServiceState       `protobuf:"varint,2,opt,name=system_trace_service_state,json=systemTraceServiceState,enum=ESystemServiceState,def=0" json:"system_trace_service_state,omitempty"`
	GraphicsProfilingServiceState     *ESystemServiceState       `protobuf:"varint,3,opt,name=graphics_profiling_service_state,json=graphicsProfilingServiceState,enum=ESystemServiceState,def=0" json:"graphics_profiling_service_state,omitempty"`
	PerfOverlayServiceState           *ESystemServiceState       `protobuf:"varint,4,opt,name=perf_overlay_service_state,json=perfOverlayServiceState,enum=ESystemServiceState,def=0" json:"perf_overlay_service_state,omitempty"`
	PerfOverlayLevel                  *EGraphicsPerfOverlayLevel `protobuf:"varint,5,opt,name=perf_overlay_level,json=perfOverlayLevel,enum=EGraphicsPerfOverlayLevel,def=0" json:"perf_overlay_level,omitempty"`
	GpuPerformanceLevel               *EGPUPerformanceLevel      `protobuf:"varint,6,opt,name=gpu_performance_level,json=gpuPerformanceLevel,enum=EGPUPerformanceLevel,def=0" json:"gpu_performance_level,omitempty"`
	GpuPerformanceManualMhz           *int32                     `protobuf:"varint,7,opt,name=gpu_performance_manual_mhz,json=gpuPerformanceManualMhz" json:"gpu_performance_manual_mhz,omitempty"`
	FpsLimit                          *int32                     `protobuf:"varint,8,opt,name=fps_limit,json=fpsLimit" json:"fps_limit,omitempty"`
	IsVariableResolutionEnabled       *bool                      `protobuf:"varint,9,opt,name=is_variable_resolution_enabled,json=isVariableResolutionEnabled" json:"is_variable_resolution_enabled,omitempty"`
	IsDynamicRefreshRateEnabled       *bool                      `protobuf:"varint,10,opt,name=is_dynamic_refresh_rate_enabled,json=isDynamicRefreshRateEnabled" json:"is_dynamic_refresh_rate_enabled,omitempty"`
	TdpLimit                          *int32                     `protobuf:"varint,11,opt,name=tdp_limit,json=tdpLimit" json:"tdp_limit,omitempty"`
	CpuGovernor                       *ECPUGovernor              `protobuf:"varint,12,opt,name=cpu_governor,json=cpuGovernor,enum=ECPUGovernor,def=0" json:"cpu_governor,omitempty"`
	CpuGovernorManualMhz              *int32                     `protobuf:"varint,13,opt,name=cpu_governor_manual_mhz,json=cpuGovernorManualMhz" json:"cpu_governor_manual_mhz,omitempty"`
	ScalingFilter                     *int32                     `protobuf:"varint,14,opt,name=scaling_filter,json=scalingFilter" json:"scaling_filter,omitempty"`
	FsrSharpness                      *int32                     `protobuf:"varint,15,opt,name=fsr_sharpness,json=fsrSharpness" json:"fsr_sharpness,omitempty"`
	IsFpsLimitEnabled                 *bool                      `protobuf:"varint,16,opt,name=is_fps_limit_enabled,json=isFpsLimitEnabled" json:"is_fps_limit_enabled,omitempty"`
	IsTdpLimitEnabled                 *bool                      `protobuf:"varint,17,opt,name=is_tdp_limit_enabled,json=isTdpLimitEnabled" json:"is_tdp_limit_enabled,omitempty"`
	IsShowPerfOverlayOverSteamEnabled *bool                      `protobuf:"varint,18,opt,name=is_show_perf_overlay_over_steam_enabled,json=isShowPerfOverlayOverSteamEnabled" json:"is_show_perf_overlay_over_steam_enabled,omitempty"`
	IsLowLatencyModeEnabled           *bool                      `protobuf:"varint,19,opt,name=is_low_latency_mode_enabled,json=isLowLatencyModeEnabled" json:"is_low_latency_mode_enabled,omitempty"`
	DisplayRefreshManualHz            *int32                     `protobuf:"varint,20,opt,name=display_refresh_manual_hz,json=displayRefreshManualHz" json:"display_refresh_manual_hz,omitempty"`
	IsGamePerfProfileEnabled          *bool                      `protobuf:"varint,21,opt,name=is_game_perf_profile_enabled,json=isGamePerfProfileEnabled" json:"is_game_perf_profile_enabled,omitempty"`
}

// Default values for CMsgSystemPerfSettingsV1 fields.
const (
	Default_CMsgSystemPerfSettingsV1_SystemTraceServiceState       = ESystemServiceState_k_ESystemServiceState_Unavailable
	Default_CMsgSystemPerfSettingsV1_GraphicsProfilingServiceState = ESystemServiceState_k_ESystemServiceState_Unavailable
	Default_CMsgSystemPerfSettingsV1_PerfOverlayServiceState       = ESystemServiceState_k_ESystemServiceState_Unavailable
	Default_CMsgSystemPerfSettingsV1_PerfOverlayLevel              = EGraphicsPerfOverlayLevel_k_EGraphicsPerfOverlayLevel_Hidden
	Default_CMsgSystemPerfSettingsV1_GpuPerformanceLevel           = EGPUPerformanceLevel_k_EGPUPerformanceLevel_Invalid
	Default_CMsgSystemPerfSettingsV1_CpuGovernor                   = ECPUGovernor_k_ECPUGovernor_Invalid
)

func (x *CMsgSystemPerfSettingsV1) Reset() {
	*x = CMsgSystemPerfSettingsV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemPerfSettingsV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemPerfSettingsV1) ProtoMessage() {}

func (x *CMsgSystemPerfSettingsV1) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemPerfSettingsV1.ProtoReflect.Descriptor instead.
func (*CMsgSystemPerfSettingsV1) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{18}
}

func (x *CMsgSystemPerfSettingsV1) GetDiagnosticUpdateRate() float32 {
	if x != nil && x.DiagnosticUpdateRate != nil {
		return *x.DiagnosticUpdateRate
	}
	return 0
}

func (x *CMsgSystemPerfSettingsV1) GetSystemTraceServiceState() ESystemServiceState {
	if x != nil && x.SystemTraceServiceState != nil {
		return *x.SystemTraceServiceState
	}
	return Default_CMsgSystemPerfSettingsV1_SystemTraceServiceState
}

func (x *CMsgSystemPerfSettingsV1) GetGraphicsProfilingServiceState() ESystemServiceState {
	if x != nil && x.GraphicsProfilingServiceState != nil {
		return *x.GraphicsProfilingServiceState
	}
	return Default_CMsgSystemPerfSettingsV1_GraphicsProfilingServiceState
}

func (x *CMsgSystemPerfSettingsV1) GetPerfOverlayServiceState() ESystemServiceState {
	if x != nil && x.PerfOverlayServiceState != nil {
		return *x.PerfOverlayServiceState
	}
	return Default_CMsgSystemPerfSettingsV1_PerfOverlayServiceState
}

func (x *CMsgSystemPerfSettingsV1) GetPerfOverlayLevel() EGraphicsPerfOverlayLevel {
	if x != nil && x.PerfOverlayLevel != nil {
		return *x.PerfOverlayLevel
	}
	return Default_CMsgSystemPerfSettingsV1_PerfOverlayLevel
}

func (x *CMsgSystemPerfSettingsV1) GetGpuPerformanceLevel() EGPUPerformanceLevel {
	if x != nil && x.GpuPerformanceLevel != nil {
		return *x.GpuPerformanceLevel
	}
	return Default_CMsgSystemPerfSettingsV1_GpuPerformanceLevel
}

func (x *CMsgSystemPerfSettingsV1) GetGpuPerformanceManualMhz() int32 {
	if x != nil && x.GpuPerformanceManualMhz != nil {
		return *x.GpuPerformanceManualMhz
	}
	return 0
}

func (x *CMsgSystemPerfSettingsV1) GetFpsLimit() int32 {
	if x != nil && x.FpsLimit != nil {
		return *x.FpsLimit
	}
	return 0
}

func (x *CMsgSystemPerfSettingsV1) GetIsVariableResolutionEnabled() bool {
	if x != nil && x.IsVariableResolutionEnabled != nil {
		return *x.IsVariableResolutionEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsV1) GetIsDynamicRefreshRateEnabled() bool {
	if x != nil && x.IsDynamicRefreshRateEnabled != nil {
		return *x.IsDynamicRefreshRateEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsV1) GetTdpLimit() int32 {
	if x != nil && x.TdpLimit != nil {
		return *x.TdpLimit
	}
	return 0
}

func (x *CMsgSystemPerfSettingsV1) GetCpuGovernor() ECPUGovernor {
	if x != nil && x.CpuGovernor != nil {
		return *x.CpuGovernor
	}
	return Default_CMsgSystemPerfSettingsV1_CpuGovernor
}

func (x *CMsgSystemPerfSettingsV1) GetCpuGovernorManualMhz() int32 {
	if x != nil && x.CpuGovernorManualMhz != nil {
		return *x.CpuGovernorManualMhz
	}
	return 0
}

func (x *CMsgSystemPerfSettingsV1) GetScalingFilter() int32 {
	if x != nil && x.ScalingFilter != nil {
		return *x.ScalingFilter
	}
	return 0
}

func (x *CMsgSystemPerfSettingsV1) GetFsrSharpness() int32 {
	if x != nil && x.FsrSharpness != nil {
		return *x.FsrSharpness
	}
	return 0
}

func (x *CMsgSystemPerfSettingsV1) GetIsFpsLimitEnabled() bool {
	if x != nil && x.IsFpsLimitEnabled != nil {
		return *x.IsFpsLimitEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsV1) GetIsTdpLimitEnabled() bool {
	if x != nil && x.IsTdpLimitEnabled != nil {
		return *x.IsTdpLimitEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsV1) GetIsShowPerfOverlayOverSteamEnabled() bool {
	if x != nil && x.IsShowPerfOverlayOverSteamEnabled != nil {
		return *x.IsShowPerfOverlayOverSteamEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsV1) GetIsLowLatencyModeEnabled() bool {
	if x != nil && x.IsLowLatencyModeEnabled != nil {
		return *x.IsLowLatencyModeEnabled
	}
	return false
}

func (x *CMsgSystemPerfSettingsV1) GetDisplayRefreshManualHz() int32 {
	if x != nil && x.DisplayRefreshManualHz != nil {
		return *x.DisplayRefreshManualHz
	}
	return 0
}

func (x *CMsgSystemPerfSettingsV1) GetIsGamePerfProfileEnabled() bool {
	if x != nil && x.IsGamePerfProfileEnabled != nil {
		return *x.IsGamePerfProfileEnabled
	}
	return false
}

type CMsgSystemPerfState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limits              *CMsgSystemPerfLimits   `protobuf:"bytes,1,opt,name=limits" json:"limits,omitempty"`
	Settings            *CMsgSystemPerfSettings `protobuf:"bytes,2,opt,name=settings" json:"settings,omitempty"`
	CurrentGameId       *uint64                 `protobuf:"varint,3,opt,name=current_game_id,json=currentGameId" json:"current_game_id,omitempty"`
	ActiveProfileGameId *uint64                 `protobuf:"varint,4,opt,name=active_profile_game_id,json=activeProfileGameId" json:"active_profile_game_id,omitempty"`
}

func (x *CMsgSystemPerfState) Reset() {
	*x = CMsgSystemPerfState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemPerfState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemPerfState) ProtoMessage() {}

func (x *CMsgSystemPerfState) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemPerfState.ProtoReflect.Descriptor instead.
func (*CMsgSystemPerfState) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{19}
}

func (x *CMsgSystemPerfState) GetLimits() *CMsgSystemPerfLimits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *CMsgSystemPerfState) GetSettings() *CMsgSystemPerfSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CMsgSystemPerfState) GetCurrentGameId() uint64 {
	if x != nil && x.CurrentGameId != nil {
		return *x.CurrentGameId
	}
	return 0
}

func (x *CMsgSystemPerfState) GetActiveProfileGameId() uint64 {
	if x != nil && x.ActiveProfileGameId != nil {
		return *x.ActiveProfileGameId
	}
	return 0
}

type CMsgSystemPerfUpdateSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gameid            *uint64 `protobuf:"varint,1,opt,name=gameid" json:"gameid,omitempty"`
	SkipStorageUpdate *bool   `protobuf:"varint,4,opt,name=skip_storage_update,json=skipStorageUpdate" json:"skip_storage_update,omitempty"`
	// Types that are assignable to Update:
	//
	//	*CMsgSystemPerfUpdateSettings_ResetToDefault
	//	*CMsgSystemPerfUpdateSettings_SettingsDelta
	Update isCMsgSystemPerfUpdateSettings_Update `protobuf_oneof:"update"`
}

func (x *CMsgSystemPerfUpdateSettings) Reset() {
	*x = CMsgSystemPerfUpdateSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemPerfUpdateSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemPerfUpdateSettings) ProtoMessage() {}

func (x *CMsgSystemPerfUpdateSettings) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemPerfUpdateSettings.ProtoReflect.Descriptor instead.
func (*CMsgSystemPerfUpdateSettings) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{20}
}

func (x *CMsgSystemPerfUpdateSettings) GetGameid() uint64 {
	if x != nil && x.Gameid != nil {
		return *x.Gameid
	}
	return 0
}

func (x *CMsgSystemPerfUpdateSettings) GetSkipStorageUpdate() bool {
	if x != nil && x.SkipStorageUpdate != nil {
		return *x.SkipStorageUpdate
	}
	return false
}

func (m *CMsgSystemPerfUpdateSettings) GetUpdate() isCMsgSystemPerfUpdateSettings_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *CMsgSystemPerfUpdateSettings) GetResetToDefault() bool {
	if x, ok := x.GetUpdate().(*CMsgSystemPerfUpdateSettings_ResetToDefault); ok {
		return x.ResetToDefault
	}
	return false
}

func (x *CMsgSystemPerfUpdateSettings) GetSettingsDelta() *CMsgSystemPerfSettings {
	if x, ok := x.GetUpdate().(*CMsgSystemPerfUpdateSettings_SettingsDelta); ok {
		return x.SettingsDelta
	}
	return nil
}

type isCMsgSystemPerfUpdateSettings_Update interface {
	isCMsgSystemPerfUpdateSettings_Update()
}

type CMsgSystemPerfUpdateSettings_ResetToDefault struct {
	ResetToDefault bool `protobuf:"varint,2,opt,name=reset_to_default,json=resetToDefault,oneof"`
}

type CMsgSystemPerfUpdateSettings_SettingsDelta struct {
	SettingsDelta *CMsgSystemPerfSettings `protobuf:"bytes,3,opt,name=settings_delta,json=settingsDelta,oneof"`
}

func (*CMsgSystemPerfUpdateSettings_ResetToDefault) isCMsgSystemPerfUpdateSettings_Update() {}

func (*CMsgSystemPerfUpdateSettings_SettingsDelta) isCMsgSystemPerfUpdateSettings_Update() {}

type CMsgSystemDockUpdateState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State                    *EUpdaterState `protobuf:"varint,1,opt,name=state,enum=EUpdaterState,def=0" json:"state,omitempty"`
	RtimeLastChecked         *uint32        `protobuf:"fixed32,2,opt,name=rtime_last_checked,json=rtimeLastChecked" json:"rtime_last_checked,omitempty"`
	VersionCurrent           *string        `protobuf:"bytes,3,opt,name=version_current,json=versionCurrent" json:"version_current,omitempty"`
	VersionAvailable         *string        `protobuf:"bytes,4,opt,name=version_available,json=versionAvailable" json:"version_available,omitempty"`
	StageProgress            *float32       `protobuf:"fixed32,5,opt,name=stage_progress,json=stageProgress" json:"stage_progress,omitempty"`
	RtimeEstimatedCompletion *uint32        `protobuf:"fixed32,6,opt,name=rtime_estimated_completion,json=rtimeEstimatedCompletion" json:"rtime_estimated_completion,omitempty"`
	OldFwWorkaround          *int32         `protobuf:"varint,7,opt,name=old_fw_workaround,json=oldFwWorkaround" json:"old_fw_workaround,omitempty"`
}

// Default values for CMsgSystemDockUpdateState fields.
const (
	Default_CMsgSystemDockUpdateState_State = EUpdaterState_k_EUpdaterState_Invalid
)

func (x *CMsgSystemDockUpdateState) Reset() {
	*x = CMsgSystemDockUpdateState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemDockUpdateState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemDockUpdateState) ProtoMessage() {}

func (x *CMsgSystemDockUpdateState) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemDockUpdateState.ProtoReflect.Descriptor instead.
func (*CMsgSystemDockUpdateState) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{21}
}

func (x *CMsgSystemDockUpdateState) GetState() EUpdaterState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_CMsgSystemDockUpdateState_State
}

func (x *CMsgSystemDockUpdateState) GetRtimeLastChecked() uint32 {
	if x != nil && x.RtimeLastChecked != nil {
		return *x.RtimeLastChecked
	}
	return 0
}

func (x *CMsgSystemDockUpdateState) GetVersionCurrent() string {
	if x != nil && x.VersionCurrent != nil {
		return *x.VersionCurrent
	}
	return ""
}

func (x *CMsgSystemDockUpdateState) GetVersionAvailable() string {
	if x != nil && x.VersionAvailable != nil {
		return *x.VersionAvailable
	}
	return ""
}

func (x *CMsgSystemDockUpdateState) GetStageProgress() float32 {
	if x != nil && x.StageProgress != nil {
		return *x.StageProgress
	}
	return 0
}

func (x *CMsgSystemDockUpdateState) GetRtimeEstimatedCompletion() uint32 {
	if x != nil && x.RtimeEstimatedCompletion != nil {
		return *x.RtimeEstimatedCompletion
	}
	return 0
}

func (x *CMsgSystemDockUpdateState) GetOldFwWorkaround() int32 {
	if x != nil && x.OldFwWorkaround != nil {
		return *x.OldFwWorkaround
	}
	return 0
}

type CMsgSystemDockState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateState *CMsgSystemDockUpdateState `protobuf:"bytes,1,opt,name=update_state,json=updateState" json:"update_state,omitempty"`
}

func (x *CMsgSystemDockState) Reset() {
	*x = CMsgSystemDockState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemDockState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemDockState) ProtoMessage() {}

func (x *CMsgSystemDockState) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemDockState.ProtoReflect.Descriptor instead.
func (*CMsgSystemDockState) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{22}
}

func (x *CMsgSystemDockState) GetUpdateState() *CMsgSystemDockUpdateState {
	if x != nil {
		return x.UpdateState
	}
	return nil
}

type CMsgSystemDockUpdateFirmware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckOnly *bool `protobuf:"varint,1,opt,name=check_only,json=checkOnly" json:"check_only,omitempty"`
}

func (x *CMsgSystemDockUpdateFirmware) Reset() {
	*x = CMsgSystemDockUpdateFirmware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemDockUpdateFirmware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemDockUpdateFirmware) ProtoMessage() {}

func (x *CMsgSystemDockUpdateFirmware) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemDockUpdateFirmware.ProtoReflect.Descriptor instead.
func (*CMsgSystemDockUpdateFirmware) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{23}
}

func (x *CMsgSystemDockUpdateFirmware) GetCheckOnly() bool {
	if x != nil && x.CheckOnly != nil {
		return *x.CheckOnly
	}
	return false
}

type CMsgSystemAudioVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*CMsgSystemAudioVolume_ChannelEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	IsMuted *bool                                 `protobuf:"varint,2,opt,name=is_muted,json=isMuted" json:"is_muted,omitempty"`
}

func (x *CMsgSystemAudioVolume) Reset() {
	*x = CMsgSystemAudioVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemAudioVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemAudioVolume) ProtoMessage() {}

func (x *CMsgSystemAudioVolume) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemAudioVolume.ProtoReflect.Descriptor instead.
func (*CMsgSystemAudioVolume) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{24}
}

func (x *CMsgSystemAudioVolume) GetEntries() []*CMsgSystemAudioVolume_ChannelEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *CMsgSystemAudioVolume) GetIsMuted() bool {
	if x != nil && x.IsMuted != nil {
		return *x.IsMuted
	}
	return false
}

type CMsgSystemAudioManagerObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	RtimeLastUpdate *uint32 `protobuf:"fixed32,2,opt,name=rtime_last_update,json=rtimeLastUpdate" json:"rtime_last_update,omitempty"`
}

func (x *CMsgSystemAudioManagerObject) Reset() {
	*x = CMsgSystemAudioManagerObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemAudioManagerObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemAudioManagerObject) ProtoMessage() {}

func (x *CMsgSystemAudioManagerObject) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemAudioManagerObject.ProtoReflect.Descriptor instead.
func (*CMsgSystemAudioManagerObject) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{25}
}

func (x *CMsgSystemAudioManagerObject) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgSystemAudioManagerObject) GetRtimeLastUpdate() uint32 {
	if x != nil && x.RtimeLastUpdate != nil {
		return *x.RtimeLastUpdate
	}
	return 0
}

type CMsgSystemAudioManagerDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base        *CMsgSystemAudioManagerObject `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Name        *string                       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Nick        *string                       `protobuf:"bytes,3,opt,name=nick" json:"nick,omitempty"`
	Description *string                       `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Api         *string                       `protobuf:"bytes,5,opt,name=api" json:"api,omitempty"`
}

func (x *CMsgSystemAudioManagerDevice) Reset() {
	*x = CMsgSystemAudioManagerDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemAudioManagerDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemAudioManagerDevice) ProtoMessage() {}

func (x *CMsgSystemAudioManagerDevice) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemAudioManagerDevice.ProtoReflect.Descriptor instead.
func (*CMsgSystemAudioManagerDevice) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{26}
}

func (x *CMsgSystemAudioManagerDevice) GetBase() *CMsgSystemAudioManagerObject {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CMsgSystemAudioManagerDevice) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSystemAudioManagerDevice) GetNick() string {
	if x != nil && x.Nick != nil {
		return *x.Nick
	}
	return ""
}

func (x *CMsgSystemAudioManagerDevice) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CMsgSystemAudioManagerDevice) GetApi() string {
	if x != nil && x.Api != nil {
		return *x.Api
	}
	return ""
}

type CMsgSystemAudioManagerNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base        *CMsgSystemAudioManagerObject `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	DeviceId    *uint32                       `protobuf:"varint,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Name        *string                       `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Nick        *string                       `protobuf:"bytes,4,opt,name=nick" json:"nick,omitempty"`
	Description *string                       `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	Edirection  *ESystemAudioDirection        `protobuf:"varint,6,opt,name=edirection,enum=ESystemAudioDirection,def=0" json:"edirection,omitempty"`
	Volume      *CMsgSystemAudioVolume        `protobuf:"bytes,7,opt,name=volume" json:"volume,omitempty"`
}

// Default values for CMsgSystemAudioManagerNode fields.
const (
	Default_CMsgSystemAudioManagerNode_Edirection = ESystemAudioDirection_k_SystemAudioDirection_Invalid
)

func (x *CMsgSystemAudioManagerNode) Reset() {
	*x = CMsgSystemAudioManagerNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemAudioManagerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemAudioManagerNode) ProtoMessage() {}

func (x *CMsgSystemAudioManagerNode) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemAudioManagerNode.ProtoReflect.Descriptor instead.
func (*CMsgSystemAudioManagerNode) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{27}
}

func (x *CMsgSystemAudioManagerNode) GetBase() *CMsgSystemAudioManagerObject {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CMsgSystemAudioManagerNode) GetDeviceId() uint32 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

func (x *CMsgSystemAudioManagerNode) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSystemAudioManagerNode) GetNick() string {
	if x != nil && x.Nick != nil {
		return *x.Nick
	}
	return ""
}

func (x *CMsgSystemAudioManagerNode) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CMsgSystemAudioManagerNode) GetEdirection() ESystemAudioDirection {
	if x != nil && x.Edirection != nil {
		return *x.Edirection
	}
	return Default_CMsgSystemAudioManagerNode_Edirection
}

func (x *CMsgSystemAudioManagerNode) GetVolume() *CMsgSystemAudioVolume {
	if x != nil {
		return x.Volume
	}
	return nil
}

type CMsgSystemAudioManagerPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base       *CMsgSystemAudioManagerObject `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	NodeId     *uint32                       `protobuf:"varint,3,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Name       *string                       `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Alias      *string                       `protobuf:"bytes,5,opt,name=alias" json:"alias,omitempty"`
	Etype      *ESystemAudioPortType         `protobuf:"varint,6,opt,name=etype,enum=ESystemAudioPortType,def=0" json:"etype,omitempty"`
	Edirection *ESystemAudioPortDirection    `protobuf:"varint,7,opt,name=edirection,enum=ESystemAudioPortDirection,def=0" json:"edirection,omitempty"`
	IsPhysical *bool                         `protobuf:"varint,8,opt,name=is_physical,json=isPhysical" json:"is_physical,omitempty"`
	IsTerminal *bool                         `protobuf:"varint,9,opt,name=is_terminal,json=isTerminal" json:"is_terminal,omitempty"`
	IsControl  *bool                         `protobuf:"varint,10,opt,name=is_control,json=isControl" json:"is_control,omitempty"`
	IsMonitor  *bool                         `protobuf:"varint,11,opt,name=is_monitor,json=isMonitor" json:"is_monitor,omitempty"`
}

// Default values for CMsgSystemAudioManagerPort fields.
const (
	Default_CMsgSystemAudioManagerPort_Etype      = ESystemAudioPortType_k_SystemAudioPortType_Invalid
	Default_CMsgSystemAudioManagerPort_Edirection = ESystemAudioPortDirection_k_SystemAudioPortDirection_Invalid
)

func (x *CMsgSystemAudioManagerPort) Reset() {
	*x = CMsgSystemAudioManagerPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemAudioManagerPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemAudioManagerPort) ProtoMessage() {}

func (x *CMsgSystemAudioManagerPort) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemAudioManagerPort.ProtoReflect.Descriptor instead.
func (*CMsgSystemAudioManagerPort) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{28}
}

func (x *CMsgSystemAudioManagerPort) GetBase() *CMsgSystemAudioManagerObject {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CMsgSystemAudioManagerPort) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *CMsgSystemAudioManagerPort) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSystemAudioManagerPort) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *CMsgSystemAudioManagerPort) GetEtype() ESystemAudioPortType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_CMsgSystemAudioManagerPort_Etype
}

func (x *CMsgSystemAudioManagerPort) GetEdirection() ESystemAudioPortDirection {
	if x != nil && x.Edirection != nil {
		return *x.Edirection
	}
	return Default_CMsgSystemAudioManagerPort_Edirection
}

func (x *CMsgSystemAudioManagerPort) GetIsPhysical() bool {
	if x != nil && x.IsPhysical != nil {
		return *x.IsPhysical
	}
	return false
}

func (x *CMsgSystemAudioManagerPort) GetIsTerminal() bool {
	if x != nil && x.IsTerminal != nil {
		return *x.IsTerminal
	}
	return false
}

func (x *CMsgSystemAudioManagerPort) GetIsControl() bool {
	if x != nil && x.IsControl != nil {
		return *x.IsControl
	}
	return false
}

func (x *CMsgSystemAudioManagerPort) GetIsMonitor() bool {
	if x != nil && x.IsMonitor != nil {
		return *x.IsMonitor
	}
	return false
}

type CMsgSystemAudioManagerLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base         *CMsgSystemAudioManagerObject `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	OutputNodeId *uint32                       `protobuf:"varint,2,opt,name=output_node_id,json=outputNodeId" json:"output_node_id,omitempty"`
	OutputPortId *uint32                       `protobuf:"varint,3,opt,name=output_port_id,json=outputPortId" json:"output_port_id,omitempty"`
	InputNodeId  *uint32                       `protobuf:"varint,4,opt,name=input_node_id,json=inputNodeId" json:"input_node_id,omitempty"`
	InputPortId  *uint32                       `protobuf:"varint,5,opt,name=input_port_id,json=inputPortId" json:"input_port_id,omitempty"`
}

func (x *CMsgSystemAudioManagerLink) Reset() {
	*x = CMsgSystemAudioManagerLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemAudioManagerLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemAudioManagerLink) ProtoMessage() {}

func (x *CMsgSystemAudioManagerLink) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemAudioManagerLink.ProtoReflect.Descriptor instead.
func (*CMsgSystemAudioManagerLink) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{29}
}

func (x *CMsgSystemAudioManagerLink) GetBase() *CMsgSystemAudioManagerObject {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *CMsgSystemAudioManagerLink) GetOutputNodeId() uint32 {
	if x != nil && x.OutputNodeId != nil {
		return *x.OutputNodeId
	}
	return 0
}

func (x *CMsgSystemAudioManagerLink) GetOutputPortId() uint32 {
	if x != nil && x.OutputPortId != nil {
		return *x.OutputPortId
	}
	return 0
}

func (x *CMsgSystemAudioManagerLink) GetInputNodeId() uint32 {
	if x != nil && x.InputNodeId != nil {
		return *x.InputNodeId
	}
	return 0
}

func (x *CMsgSystemAudioManagerLink) GetInputPortId() uint32 {
	if x != nil && x.InputPortId != nil {
		return *x.InputPortId
	}
	return 0
}

type CMsgSystemAudioManagerStateHW struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*CMsgSystemAudioManagerDevice `protobuf:"bytes,1,rep,name=devices" json:"devices,omitempty"`
	Nodes   []*CMsgSystemAudioManagerNode   `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
	Ports   []*CMsgSystemAudioManagerPort   `protobuf:"bytes,3,rep,name=ports" json:"ports,omitempty"`
	Links   []*CMsgSystemAudioManagerLink   `protobuf:"bytes,4,rep,name=links" json:"links,omitempty"`
}

func (x *CMsgSystemAudioManagerStateHW) Reset() {
	*x = CMsgSystemAudioManagerStateHW{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemAudioManagerStateHW) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemAudioManagerStateHW) ProtoMessage() {}

func (x *CMsgSystemAudioManagerStateHW) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemAudioManagerStateHW.ProtoReflect.Descriptor instead.
func (*CMsgSystemAudioManagerStateHW) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{30}
}

func (x *CMsgSystemAudioManagerStateHW) GetDevices() []*CMsgSystemAudioManagerDevice {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *CMsgSystemAudioManagerStateHW) GetNodes() []*CMsgSystemAudioManagerNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *CMsgSystemAudioManagerStateHW) GetPorts() []*CMsgSystemAudioManagerPort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *CMsgSystemAudioManagerStateHW) GetLinks() []*CMsgSystemAudioManagerLink {
	if x != nil {
		return x.Links
	}
	return nil
}

type CMsgSystemAudioManagerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RtimeFilter *uint32                        `protobuf:"fixed32,1,opt,name=rtime_filter,json=rtimeFilter" json:"rtime_filter,omitempty"`
	Counter     *int32                         `protobuf:"varint,2,opt,name=counter" json:"counter,omitempty"`
	Hw          *CMsgSystemAudioManagerStateHW `protobuf:"bytes,3,opt,name=hw" json:"hw,omitempty"`
}

func (x *CMsgSystemAudioManagerState) Reset() {
	*x = CMsgSystemAudioManagerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemAudioManagerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemAudioManagerState) ProtoMessage() {}

func (x *CMsgSystemAudioManagerState) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemAudioManagerState.ProtoReflect.Descriptor instead.
func (*CMsgSystemAudioManagerState) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{31}
}

func (x *CMsgSystemAudioManagerState) GetRtimeFilter() uint32 {
	if x != nil && x.RtimeFilter != nil {
		return *x.RtimeFilter
	}
	return 0
}

func (x *CMsgSystemAudioManagerState) GetCounter() int32 {
	if x != nil && x.Counter != nil {
		return *x.Counter
	}
	return 0
}

func (x *CMsgSystemAudioManagerState) GetHw() *CMsgSystemAudioManagerStateHW {
	if x != nil {
		return x.Hw
	}
	return nil
}

type CMsgSystemAudioManagerUpdateSomething struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counter *int32 `protobuf:"varint,1,opt,name=counter" json:"counter,omitempty"`
}

func (x *CMsgSystemAudioManagerUpdateSomething) Reset() {
	*x = CMsgSystemAudioManagerUpdateSomething{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemAudioManagerUpdateSomething) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemAudioManagerUpdateSomething) ProtoMessage() {}

func (x *CMsgSystemAudioManagerUpdateSomething) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemAudioManagerUpdateSomething.ProtoReflect.Descriptor instead.
func (*CMsgSystemAudioManagerUpdateSomething) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{32}
}

func (x *CMsgSystemAudioManagerUpdateSomething) GetCounter() int32 {
	if x != nil && x.Counter != nil {
		return *x.Counter
	}
	return 0
}

type CMsgSystemDisplayMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Width     *int32 `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Height    *int32 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	RefreshHz *int32 `protobuf:"varint,4,opt,name=refresh_hz,json=refreshHz" json:"refresh_hz,omitempty"`
}

func (x *CMsgSystemDisplayMode) Reset() {
	*x = CMsgSystemDisplayMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemDisplayMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemDisplayMode) ProtoMessage() {}

func (x *CMsgSystemDisplayMode) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemDisplayMode.ProtoReflect.Descriptor instead.
func (*CMsgSystemDisplayMode) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{33}
}

func (x *CMsgSystemDisplayMode) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgSystemDisplayMode) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *CMsgSystemDisplayMode) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *CMsgSystemDisplayMode) GetRefreshHz() int32 {
	if x != nil && x.RefreshHz != nil {
		return *x.RefreshHz
	}
	return 0
}

type CMsgSystemDisplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  *int32                   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name                *string                  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description         *string                  `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	IsPrimary           *bool                    `protobuf:"varint,4,opt,name=is_primary,json=isPrimary" json:"is_primary,omitempty"`
	IsEnabled           *bool                    `protobuf:"varint,5,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	IsInternal          *bool                    `protobuf:"varint,6,opt,name=is_internal,json=isInternal" json:"is_internal,omitempty"`
	HasModeOverride     *bool                    `protobuf:"varint,7,opt,name=has_mode_override,json=hasModeOverride" json:"has_mode_override,omitempty"`
	WidthMm             *int32                   `protobuf:"varint,8,opt,name=width_mm,json=widthMm" json:"width_mm,omitempty"`
	HeightMm            *int32                   `protobuf:"varint,9,opt,name=height_mm,json=heightMm" json:"height_mm,omitempty"`
	CurrentModeId       *int32                   `protobuf:"varint,10,opt,name=current_mode_id,json=currentModeId" json:"current_mode_id,omitempty"`
	Modes               []*CMsgSystemDisplayMode `protobuf:"bytes,11,rep,name=modes" json:"modes,omitempty"`
	RefreshRateMin      *int32                   `protobuf:"varint,12,opt,name=refresh_rate_min,json=refreshRateMin" json:"refresh_rate_min,omitempty"`
	RefreshRateMax      *int32                   `protobuf:"varint,13,opt,name=refresh_rate_max,json=refreshRateMax" json:"refresh_rate_max,omitempty"`
	IsVrrCapable        *bool                    `protobuf:"varint,14,opt,name=is_vrr_capable,json=isVrrCapable" json:"is_vrr_capable,omitempty"`
	IsVrrEnabled        *bool                    `protobuf:"varint,15,opt,name=is_vrr_enabled,json=isVrrEnabled" json:"is_vrr_enabled,omitempty"`
	IsHdrCapable        *bool                    `protobuf:"varint,16,opt,name=is_hdr_capable,json=isHdrCapable" json:"is_hdr_capable,omitempty"`
	IsHdrEnabled        *bool                    `protobuf:"varint,17,opt,name=is_hdr_enabled,json=isHdrEnabled" json:"is_hdr_enabled,omitempty"`
	CompatibilityParams []int32                  `protobuf:"varint,18,rep,name=compatibility_params,json=compatibilityParams" json:"compatibility_params,omitempty"`
	AppWantsHdr         *bool                    `protobuf:"varint,19,opt,name=app_wants_hdr,json=appWantsHdr" json:"app_wants_hdr,omitempty"`
}

func (x *CMsgSystemDisplay) Reset() {
	*x = CMsgSystemDisplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemDisplay) ProtoMessage() {}

func (x *CMsgSystemDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemDisplay.ProtoReflect.Descriptor instead.
func (*CMsgSystemDisplay) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{34}
}

func (x *CMsgSystemDisplay) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CMsgSystemDisplay) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgSystemDisplay) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CMsgSystemDisplay) GetIsPrimary() bool {
	if x != nil && x.IsPrimary != nil {
		return *x.IsPrimary
	}
	return false
}

func (x *CMsgSystemDisplay) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

func (x *CMsgSystemDisplay) GetIsInternal() bool {
	if x != nil && x.IsInternal != nil {
		return *x.IsInternal
	}
	return false
}

func (x *CMsgSystemDisplay) GetHasModeOverride() bool {
	if x != nil && x.HasModeOverride != nil {
		return *x.HasModeOverride
	}
	return false
}

func (x *CMsgSystemDisplay) GetWidthMm() int32 {
	if x != nil && x.WidthMm != nil {
		return *x.WidthMm
	}
	return 0
}

func (x *CMsgSystemDisplay) GetHeightMm() int32 {
	if x != nil && x.HeightMm != nil {
		return *x.HeightMm
	}
	return 0
}

func (x *CMsgSystemDisplay) GetCurrentModeId() int32 {
	if x != nil && x.CurrentModeId != nil {
		return *x.CurrentModeId
	}
	return 0
}

func (x *CMsgSystemDisplay) GetModes() []*CMsgSystemDisplayMode {
	if x != nil {
		return x.Modes
	}
	return nil
}

func (x *CMsgSystemDisplay) GetRefreshRateMin() int32 {
	if x != nil && x.RefreshRateMin != nil {
		return *x.RefreshRateMin
	}
	return 0
}

func (x *CMsgSystemDisplay) GetRefreshRateMax() int32 {
	if x != nil && x.RefreshRateMax != nil {
		return *x.RefreshRateMax
	}
	return 0
}

func (x *CMsgSystemDisplay) GetIsVrrCapable() bool {
	if x != nil && x.IsVrrCapable != nil {
		return *x.IsVrrCapable
	}
	return false
}

func (x *CMsgSystemDisplay) GetIsVrrEnabled() bool {
	if x != nil && x.IsVrrEnabled != nil {
		return *x.IsVrrEnabled
	}
	return false
}

func (x *CMsgSystemDisplay) GetIsHdrCapable() bool {
	if x != nil && x.IsHdrCapable != nil {
		return *x.IsHdrCapable
	}
	return false
}

func (x *CMsgSystemDisplay) GetIsHdrEnabled() bool {
	if x != nil && x.IsHdrEnabled != nil {
		return *x.IsHdrEnabled
	}
	return false
}

func (x *CMsgSystemDisplay) GetCompatibilityParams() []int32 {
	if x != nil {
		return x.CompatibilityParams
	}
	return nil
}

func (x *CMsgSystemDisplay) GetAppWantsHdr() bool {
	if x != nil && x.AppWantsHdr != nil {
		return *x.AppWantsHdr
	}
	return false
}

type CMsgSystemDisplayManagerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Displays                 []*CMsgSystemDisplay             `protobuf:"bytes,1,rep,name=displays" json:"displays,omitempty"`
	IsModeSwitchingSupported *bool                            `protobuf:"varint,2,opt,name=is_mode_switching_supported,json=isModeSwitchingSupported" json:"is_mode_switching_supported,omitempty"`
	CompatibilityMode        *ESystemDisplayCompatibilityMode `protobuf:"varint,3,opt,name=compatibility_mode,json=compatibilityMode,enum=ESystemDisplayCompatibilityMode,def=0" json:"compatibility_mode,omitempty"`
}

// Default values for CMsgSystemDisplayManagerState fields.
const (
	Default_CMsgSystemDisplayManagerState_CompatibilityMode = ESystemDisplayCompatibilityMode_k_ESystemDisplayCompatibilityMode_Invalid
)

func (x *CMsgSystemDisplayManagerState) Reset() {
	*x = CMsgSystemDisplayManagerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemDisplayManagerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemDisplayManagerState) ProtoMessage() {}

func (x *CMsgSystemDisplayManagerState) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemDisplayManagerState.ProtoReflect.Descriptor instead.
func (*CMsgSystemDisplayManagerState) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{35}
}

func (x *CMsgSystemDisplayManagerState) GetDisplays() []*CMsgSystemDisplay {
	if x != nil {
		return x.Displays
	}
	return nil
}

func (x *CMsgSystemDisplayManagerState) GetIsModeSwitchingSupported() bool {
	if x != nil && x.IsModeSwitchingSupported != nil {
		return *x.IsModeSwitchingSupported
	}
	return false
}

func (x *CMsgSystemDisplayManagerState) GetCompatibilityMode() ESystemDisplayCompatibilityMode {
	if x != nil && x.CompatibilityMode != nil {
		return *x.CompatibilityMode
	}
	return Default_CMsgSystemDisplayManagerState_CompatibilityMode
}

type CMsgSystemDisplayManagerSetMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayId *int32 `protobuf:"varint,1,opt,name=display_id,json=displayId" json:"display_id,omitempty"`
	ModeId    *int32 `protobuf:"varint,2,opt,name=mode_id,json=modeId" json:"mode_id,omitempty"`
}

func (x *CMsgSystemDisplayManagerSetMode) Reset() {
	*x = CMsgSystemDisplayManagerSetMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemDisplayManagerSetMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemDisplayManagerSetMode) ProtoMessage() {}

func (x *CMsgSystemDisplayManagerSetMode) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemDisplayManagerSetMode.ProtoReflect.Descriptor instead.
func (*CMsgSystemDisplayManagerSetMode) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{36}
}

func (x *CMsgSystemDisplayManagerSetMode) GetDisplayId() int32 {
	if x != nil && x.DisplayId != nil {
		return *x.DisplayId
	}
	return 0
}

func (x *CMsgSystemDisplayManagerSetMode) GetModeId() int32 {
	if x != nil && x.ModeId != nil {
		return *x.ModeId
	}
	return 0
}

type CMsgSystemManagerSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdleBacklightDimBatterySeconds    *float32               `protobuf:"fixed32,1,opt,name=idle_backlight_dim_battery_seconds,json=idleBacklightDimBatterySeconds" json:"idle_backlight_dim_battery_seconds,omitempty"`
	IdleBacklightDimAcSeconds         *float32               `protobuf:"fixed32,2,opt,name=idle_backlight_dim_ac_seconds,json=idleBacklightDimAcSeconds" json:"idle_backlight_dim_ac_seconds,omitempty"`
	IdleSuspendBatterySeconds         *float32               `protobuf:"fixed32,3,opt,name=idle_suspend_battery_seconds,json=idleSuspendBatterySeconds" json:"idle_suspend_battery_seconds,omitempty"`
	IdleSuspendAcSeconds              *float32               `protobuf:"fixed32,4,opt,name=idle_suspend_ac_seconds,json=idleSuspendAcSeconds" json:"idle_suspend_ac_seconds,omitempty"`
	IdleSuspendSupressed              *bool                  `protobuf:"varint,5,opt,name=idle_suspend_supressed,json=idleSuspendSupressed" json:"idle_suspend_supressed,omitempty"`
	IsAdaptiveBrightnessAvailable     *bool                  `protobuf:"varint,6,opt,name=is_adaptive_brightness_available,json=isAdaptiveBrightnessAvailable" json:"is_adaptive_brightness_available,omitempty"`
	DisplayAdaptiveBrightnessEnabled  *bool                  `protobuf:"varint,7,opt,name=display_adaptive_brightness_enabled,json=displayAdaptiveBrightnessEnabled" json:"display_adaptive_brightness_enabled,omitempty"`
	DisplayNightmodeEnabled           *bool                  `protobuf:"varint,10,opt,name=display_nightmode_enabled,json=displayNightmodeEnabled" json:"display_nightmode_enabled,omitempty"`
	DisplayNightmodeTintstrength      *float32               `protobuf:"fixed32,11,opt,name=display_nightmode_tintstrength,json=displayNightmodeTintstrength" json:"display_nightmode_tintstrength,omitempty"`
	DisplayNightmodeMaxhue            *float32               `protobuf:"fixed32,12,opt,name=display_nightmode_maxhue,json=displayNightmodeMaxhue" json:"display_nightmode_maxhue,omitempty"`
	DisplayNightmodeMaxsat            *float32               `protobuf:"fixed32,13,opt,name=display_nightmode_maxsat,json=displayNightmodeMaxsat" json:"display_nightmode_maxsat,omitempty"`
	DisplayNightmodeUiexp             *float32               `protobuf:"fixed32,14,opt,name=display_nightmode_uiexp,json=displayNightmodeUiexp" json:"display_nightmode_uiexp,omitempty"`
	DisplayNightmodeBlend             *float32               `protobuf:"fixed32,15,opt,name=display_nightmode_blend,json=displayNightmodeBlend" json:"display_nightmode_blend,omitempty"`
	DisplayNightmodeReset             *bool                  `protobuf:"varint,16,opt,name=display_nightmode_reset,json=displayNightmodeReset" json:"display_nightmode_reset,omitempty"`
	DisplayNightmodeScheduleEnabled   *bool                  `protobuf:"varint,17,opt,name=display_nightmode_schedule_enabled,json=displayNightmodeScheduleEnabled" json:"display_nightmode_schedule_enabled,omitempty"`
	DisplayNightmodeScheduleStarttime *float32               `protobuf:"fixed32,18,opt,name=display_nightmode_schedule_starttime,json=displayNightmodeScheduleStarttime" json:"display_nightmode_schedule_starttime,omitempty"`
	DisplayNightmodeScheduleEndtime   *float32               `protobuf:"fixed32,19,opt,name=display_nightmode_schedule_endtime,json=displayNightmodeScheduleEndtime" json:"display_nightmode_schedule_endtime,omitempty"`
	DisplayDiagnosticsEnabled         *bool                  `protobuf:"varint,20,opt,name=display_diagnostics_enabled,json=displayDiagnosticsEnabled" json:"display_diagnostics_enabled,omitempty"`
	AlsLuxPrimary                     *float32               `protobuf:"fixed32,21,opt,name=als_lux_primary,json=alsLuxPrimary" json:"als_lux_primary,omitempty"`
	AlsLuxMedian                      *float32               `protobuf:"fixed32,22,opt,name=als_lux_median,json=alsLuxMedian" json:"als_lux_median,omitempty"`
	DisplayBacklightRaw               *float32               `protobuf:"fixed32,23,opt,name=display_backlight_raw,json=displayBacklightRaw" json:"display_backlight_raw,omitempty"`
	DisplayBrightnessAdaptivemin      *float32               `protobuf:"fixed32,24,opt,name=display_brightness_adaptivemin,json=displayBrightnessAdaptivemin" json:"display_brightness_adaptivemin,omitempty"`
	DisplayBrightnessAdaptivemax      *float32               `protobuf:"fixed32,25,opt,name=display_brightness_adaptivemax,json=displayBrightnessAdaptivemax" json:"display_brightness_adaptivemax,omitempty"`
	IsWifiPowersaveEnabled            *bool                  `protobuf:"varint,26,opt,name=is_wifi_powersave_enabled,json=isWifiPowersaveEnabled" json:"is_wifi_powersave_enabled,omitempty"`
	IsFanControlAvailable             *bool                  `protobuf:"varint,27,opt,name=is_fan_control_available,json=isFanControlAvailable" json:"is_fan_control_available,omitempty"`
	FanControlMode                    *ESystemFanControlMode `protobuf:"varint,28,opt,name=fan_control_mode,json=fanControlMode,enum=ESystemFanControlMode,def=0" json:"fan_control_mode,omitempty"`
	IsDisplayBrightnessAvailable      *bool                  `protobuf:"varint,29,opt,name=is_display_brightness_available,json=isDisplayBrightnessAvailable" json:"is_display_brightness_available,omitempty"`
	IsDisplayColormanagementAvailable *bool                  `protobuf:"varint,31,opt,name=is_display_colormanagement_available,json=isDisplayColormanagementAvailable" json:"is_display_colormanagement_available,omitempty"`
	DisplayColorgamut                 *float32               `protobuf:"fixed32,32,opt,name=display_colorgamut,json=displayColorgamut" json:"display_colorgamut,omitempty"`
	AlsLuxAlternate                   *float32               `protobuf:"fixed32,33,opt,name=als_lux_alternate,json=alsLuxAlternate" json:"als_lux_alternate,omitempty"`
	IsDisplayColortempAvailable       *bool                  `protobuf:"varint,34,opt,name=is_display_colortemp_available,json=isDisplayColortempAvailable" json:"is_display_colortemp_available,omitempty"`
	DisplayColortemp                  *float32               `protobuf:"fixed32,35,opt,name=display_colortemp,json=displayColortemp" json:"display_colortemp,omitempty"`
	DisplayColortempDefault           *float32               `protobuf:"fixed32,36,opt,name=display_colortemp_default,json=displayColortempDefault" json:"display_colortemp_default,omitempty"`
	DisplayColortempEnabled           *bool                  `protobuf:"varint,37,opt,name=display_colortemp_enabled,json=displayColortempEnabled" json:"display_colortemp_enabled,omitempty"`
	DisplayColorgamutLabelset         *EColorGamutLabelSet   `protobuf:"varint,38,opt,name=display_colorgamut_labelset,json=displayColorgamutLabelset,enum=EColorGamutLabelSet,def=0" json:"display_colorgamut_labelset,omitempty"`
}

// Default values for CMsgSystemManagerSettings fields.
const (
	Default_CMsgSystemManagerSettings_FanControlMode            = ESystemFanControlMode_k_SystemFanControlMode_Invalid
	Default_CMsgSystemManagerSettings_DisplayColorgamutLabelset = EColorGamutLabelSet_k_ColorGamutLabelSet_Default
)

func (x *CMsgSystemManagerSettings) Reset() {
	*x = CMsgSystemManagerSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemManagerSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemManagerSettings) ProtoMessage() {}

func (x *CMsgSystemManagerSettings) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemManagerSettings.ProtoReflect.Descriptor instead.
func (*CMsgSystemManagerSettings) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{37}
}

func (x *CMsgSystemManagerSettings) GetIdleBacklightDimBatterySeconds() float32 {
	if x != nil && x.IdleBacklightDimBatterySeconds != nil {
		return *x.IdleBacklightDimBatterySeconds
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetIdleBacklightDimAcSeconds() float32 {
	if x != nil && x.IdleBacklightDimAcSeconds != nil {
		return *x.IdleBacklightDimAcSeconds
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetIdleSuspendBatterySeconds() float32 {
	if x != nil && x.IdleSuspendBatterySeconds != nil {
		return *x.IdleSuspendBatterySeconds
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetIdleSuspendAcSeconds() float32 {
	if x != nil && x.IdleSuspendAcSeconds != nil {
		return *x.IdleSuspendAcSeconds
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetIdleSuspendSupressed() bool {
	if x != nil && x.IdleSuspendSupressed != nil {
		return *x.IdleSuspendSupressed
	}
	return false
}

func (x *CMsgSystemManagerSettings) GetIsAdaptiveBrightnessAvailable() bool {
	if x != nil && x.IsAdaptiveBrightnessAvailable != nil {
		return *x.IsAdaptiveBrightnessAvailable
	}
	return false
}

func (x *CMsgSystemManagerSettings) GetDisplayAdaptiveBrightnessEnabled() bool {
	if x != nil && x.DisplayAdaptiveBrightnessEnabled != nil {
		return *x.DisplayAdaptiveBrightnessEnabled
	}
	return false
}

func (x *CMsgSystemManagerSettings) GetDisplayNightmodeEnabled() bool {
	if x != nil && x.DisplayNightmodeEnabled != nil {
		return *x.DisplayNightmodeEnabled
	}
	return false
}

func (x *CMsgSystemManagerSettings) GetDisplayNightmodeTintstrength() float32 {
	if x != nil && x.DisplayNightmodeTintstrength != nil {
		return *x.DisplayNightmodeTintstrength
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetDisplayNightmodeMaxhue() float32 {
	if x != nil && x.DisplayNightmodeMaxhue != nil {
		return *x.DisplayNightmodeMaxhue
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetDisplayNightmodeMaxsat() float32 {
	if x != nil && x.DisplayNightmodeMaxsat != nil {
		return *x.DisplayNightmodeMaxsat
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetDisplayNightmodeUiexp() float32 {
	if x != nil && x.DisplayNightmodeUiexp != nil {
		return *x.DisplayNightmodeUiexp
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetDisplayNightmodeBlend() float32 {
	if x != nil && x.DisplayNightmodeBlend != nil {
		return *x.DisplayNightmodeBlend
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetDisplayNightmodeReset() bool {
	if x != nil && x.DisplayNightmodeReset != nil {
		return *x.DisplayNightmodeReset
	}
	return false
}

func (x *CMsgSystemManagerSettings) GetDisplayNightmodeScheduleEnabled() bool {
	if x != nil && x.DisplayNightmodeScheduleEnabled != nil {
		return *x.DisplayNightmodeScheduleEnabled
	}
	return false
}

func (x *CMsgSystemManagerSettings) GetDisplayNightmodeScheduleStarttime() float32 {
	if x != nil && x.DisplayNightmodeScheduleStarttime != nil {
		return *x.DisplayNightmodeScheduleStarttime
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetDisplayNightmodeScheduleEndtime() float32 {
	if x != nil && x.DisplayNightmodeScheduleEndtime != nil {
		return *x.DisplayNightmodeScheduleEndtime
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetDisplayDiagnosticsEnabled() bool {
	if x != nil && x.DisplayDiagnosticsEnabled != nil {
		return *x.DisplayDiagnosticsEnabled
	}
	return false
}

func (x *CMsgSystemManagerSettings) GetAlsLuxPrimary() float32 {
	if x != nil && x.AlsLuxPrimary != nil {
		return *x.AlsLuxPrimary
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetAlsLuxMedian() float32 {
	if x != nil && x.AlsLuxMedian != nil {
		return *x.AlsLuxMedian
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetDisplayBacklightRaw() float32 {
	if x != nil && x.DisplayBacklightRaw != nil {
		return *x.DisplayBacklightRaw
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetDisplayBrightnessAdaptivemin() float32 {
	if x != nil && x.DisplayBrightnessAdaptivemin != nil {
		return *x.DisplayBrightnessAdaptivemin
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetDisplayBrightnessAdaptivemax() float32 {
	if x != nil && x.DisplayBrightnessAdaptivemax != nil {
		return *x.DisplayBrightnessAdaptivemax
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetIsWifiPowersaveEnabled() bool {
	if x != nil && x.IsWifiPowersaveEnabled != nil {
		return *x.IsWifiPowersaveEnabled
	}
	return false
}

func (x *CMsgSystemManagerSettings) GetIsFanControlAvailable() bool {
	if x != nil && x.IsFanControlAvailable != nil {
		return *x.IsFanControlAvailable
	}
	return false
}

func (x *CMsgSystemManagerSettings) GetFanControlMode() ESystemFanControlMode {
	if x != nil && x.FanControlMode != nil {
		return *x.FanControlMode
	}
	return Default_CMsgSystemManagerSettings_FanControlMode
}

func (x *CMsgSystemManagerSettings) GetIsDisplayBrightnessAvailable() bool {
	if x != nil && x.IsDisplayBrightnessAvailable != nil {
		return *x.IsDisplayBrightnessAvailable
	}
	return false
}

func (x *CMsgSystemManagerSettings) GetIsDisplayColormanagementAvailable() bool {
	if x != nil && x.IsDisplayColormanagementAvailable != nil {
		return *x.IsDisplayColormanagementAvailable
	}
	return false
}

func (x *CMsgSystemManagerSettings) GetDisplayColorgamut() float32 {
	if x != nil && x.DisplayColorgamut != nil {
		return *x.DisplayColorgamut
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetAlsLuxAlternate() float32 {
	if x != nil && x.AlsLuxAlternate != nil {
		return *x.AlsLuxAlternate
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetIsDisplayColortempAvailable() bool {
	if x != nil && x.IsDisplayColortempAvailable != nil {
		return *x.IsDisplayColortempAvailable
	}
	return false
}

func (x *CMsgSystemManagerSettings) GetDisplayColortemp() float32 {
	if x != nil && x.DisplayColortemp != nil {
		return *x.DisplayColortemp
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetDisplayColortempDefault() float32 {
	if x != nil && x.DisplayColortempDefault != nil {
		return *x.DisplayColortempDefault
	}
	return 0
}

func (x *CMsgSystemManagerSettings) GetDisplayColortempEnabled() bool {
	if x != nil && x.DisplayColortempEnabled != nil {
		return *x.DisplayColortempEnabled
	}
	return false
}

func (x *CMsgSystemManagerSettings) GetDisplayColorgamutLabelset() EColorGamutLabelSet {
	if x != nil && x.DisplayColorgamutLabelset != nil {
		return *x.DisplayColorgamutLabelset
	}
	return Default_CMsgSystemManagerSettings_DisplayColorgamutLabelset
}

type CMsgSelectOSBranchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch       *EOSBranch `protobuf:"varint,1,opt,name=branch,enum=EOSBranch,def=0" json:"branch,omitempty"`
	CustomBranch *string    `protobuf:"bytes,2,opt,name=custom_branch,json=customBranch" json:"custom_branch,omitempty"`
}

// Default values for CMsgSelectOSBranchParams fields.
const (
	Default_CMsgSelectOSBranchParams_Branch = EOSBranch_k_EOSBranch_Unknown
)

func (x *CMsgSelectOSBranchParams) Reset() {
	*x = CMsgSelectOSBranchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSelectOSBranchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSelectOSBranchParams) ProtoMessage() {}

func (x *CMsgSelectOSBranchParams) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSelectOSBranchParams.ProtoReflect.Descriptor instead.
func (*CMsgSelectOSBranchParams) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{38}
}

func (x *CMsgSelectOSBranchParams) GetBranch() EOSBranch {
	if x != nil && x.Branch != nil {
		return *x.Branch
	}
	return Default_CMsgSelectOSBranchParams_Branch
}

func (x *CMsgSelectOSBranchParams) GetCustomBranch() string {
	if x != nil && x.CustomBranch != nil {
		return *x.CustomBranch
	}
	return ""
}

type CMsgSystemUpdateProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StageProgress            *float32 `protobuf:"fixed32,1,opt,name=stage_progress,json=stageProgress" json:"stage_progress,omitempty"`
	StageSizeBytes           *int64   `protobuf:"varint,2,opt,name=stage_size_bytes,json=stageSizeBytes" json:"stage_size_bytes,omitempty"`
	RtimeEstimatedCompletion *uint32  `protobuf:"fixed32,3,opt,name=rtime_estimated_completion,json=rtimeEstimatedCompletion" json:"rtime_estimated_completion,omitempty"`
}

func (x *CMsgSystemUpdateProgress) Reset() {
	*x = CMsgSystemUpdateProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemUpdateProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemUpdateProgress) ProtoMessage() {}

func (x *CMsgSystemUpdateProgress) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemUpdateProgress.ProtoReflect.Descriptor instead.
func (*CMsgSystemUpdateProgress) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{39}
}

func (x *CMsgSystemUpdateProgress) GetStageProgress() float32 {
	if x != nil && x.StageProgress != nil {
		return *x.StageProgress
	}
	return 0
}

func (x *CMsgSystemUpdateProgress) GetStageSizeBytes() int64 {
	if x != nil && x.StageSizeBytes != nil {
		return *x.StageSizeBytes
	}
	return 0
}

func (x *CMsgSystemUpdateProgress) GetRtimeEstimatedCompletion() uint32 {
	if x != nil && x.RtimeEstimatedCompletion != nil {
		return *x.RtimeEstimatedCompletion
	}
	return 0
}

type CMsgSystemUpdateCheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         *EUpdaterType `protobuf:"varint,1,opt,name=type,enum=EUpdaterType,def=0" json:"type,omitempty"`
	Eresult      *uint32       `protobuf:"varint,2,opt,name=eresult,def=2" json:"eresult,omitempty"`
	RtimeChecked *uint32       `protobuf:"fixed32,3,opt,name=rtime_checked,json=rtimeChecked" json:"rtime_checked,omitempty"`
	Available    *bool         `protobuf:"varint,4,opt,name=available" json:"available,omitempty"`
	Version      *string       `protobuf:"bytes,5,opt,name=version" json:"version,omitempty"`
	AutoMessage  *string       `protobuf:"bytes,6,opt,name=auto_message,json=autoMessage" json:"auto_message,omitempty"`
}

// Default values for CMsgSystemUpdateCheckResult fields.
const (
	Default_CMsgSystemUpdateCheckResult_Type    = EUpdaterType_k_EUpdaterType_Invalid
	Default_CMsgSystemUpdateCheckResult_Eresult = uint32(2)
)

func (x *CMsgSystemUpdateCheckResult) Reset() {
	*x = CMsgSystemUpdateCheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemUpdateCheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemUpdateCheckResult) ProtoMessage() {}

func (x *CMsgSystemUpdateCheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemUpdateCheckResult.ProtoReflect.Descriptor instead.
func (*CMsgSystemUpdateCheckResult) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{40}
}

func (x *CMsgSystemUpdateCheckResult) GetType() EUpdaterType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CMsgSystemUpdateCheckResult_Type
}

func (x *CMsgSystemUpdateCheckResult) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgSystemUpdateCheckResult_Eresult
}

func (x *CMsgSystemUpdateCheckResult) GetRtimeChecked() uint32 {
	if x != nil && x.RtimeChecked != nil {
		return *x.RtimeChecked
	}
	return 0
}

func (x *CMsgSystemUpdateCheckResult) GetAvailable() bool {
	if x != nil && x.Available != nil {
		return *x.Available
	}
	return false
}

func (x *CMsgSystemUpdateCheckResult) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *CMsgSystemUpdateCheckResult) GetAutoMessage() string {
	if x != nil && x.AutoMessage != nil {
		return *x.AutoMessage
	}
	return ""
}

type CMsgSystemUpdateApplyParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplyTypes []EUpdaterType `protobuf:"varint,1,rep,name=apply_types,json=applyTypes,enum=EUpdaterType" json:"apply_types,omitempty"`
}

func (x *CMsgSystemUpdateApplyParams) Reset() {
	*x = CMsgSystemUpdateApplyParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemUpdateApplyParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemUpdateApplyParams) ProtoMessage() {}

func (x *CMsgSystemUpdateApplyParams) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemUpdateApplyParams.ProtoReflect.Descriptor instead.
func (*CMsgSystemUpdateApplyParams) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{41}
}

func (x *CMsgSystemUpdateApplyParams) GetApplyTypes() []EUpdaterType {
	if x != nil {
		return x.ApplyTypes
	}
	return nil
}

type CMsgSystemUpdateApplyResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                  *EUpdaterType `protobuf:"varint,1,opt,name=type,enum=EUpdaterType,def=0" json:"type,omitempty"`
	Eresult               *uint32       `protobuf:"varint,2,opt,name=eresult,def=2" json:"eresult,omitempty"`
	RequiresClientRestart *bool         `protobuf:"varint,3,opt,name=requires_client_restart,json=requiresClientRestart,def=0" json:"requires_client_restart,omitempty"`
	RequiresSystemRestart *bool         `protobuf:"varint,4,opt,name=requires_system_restart,json=requiresSystemRestart,def=0" json:"requires_system_restart,omitempty"`
}

// Default values for CMsgSystemUpdateApplyResult fields.
const (
	Default_CMsgSystemUpdateApplyResult_Type                  = EUpdaterType_k_EUpdaterType_Invalid
	Default_CMsgSystemUpdateApplyResult_Eresult               = uint32(2)
	Default_CMsgSystemUpdateApplyResult_RequiresClientRestart = bool(false)
	Default_CMsgSystemUpdateApplyResult_RequiresSystemRestart = bool(false)
)

func (x *CMsgSystemUpdateApplyResult) Reset() {
	*x = CMsgSystemUpdateApplyResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemUpdateApplyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemUpdateApplyResult) ProtoMessage() {}

func (x *CMsgSystemUpdateApplyResult) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemUpdateApplyResult.ProtoReflect.Descriptor instead.
func (*CMsgSystemUpdateApplyResult) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{42}
}

func (x *CMsgSystemUpdateApplyResult) GetType() EUpdaterType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_CMsgSystemUpdateApplyResult_Type
}

func (x *CMsgSystemUpdateApplyResult) GetEresult() uint32 {
	if x != nil && x.Eresult != nil {
		return *x.Eresult
	}
	return Default_CMsgSystemUpdateApplyResult_Eresult
}

func (x *CMsgSystemUpdateApplyResult) GetRequiresClientRestart() bool {
	if x != nil && x.RequiresClientRestart != nil {
		return *x.RequiresClientRestart
	}
	return Default_CMsgSystemUpdateApplyResult_RequiresClientRestart
}

func (x *CMsgSystemUpdateApplyResult) GetRequiresSystemRestart() bool {
	if x != nil && x.RequiresSystemRestart != nil {
		return *x.RequiresSystemRestart
	}
	return Default_CMsgSystemUpdateApplyResult_RequiresSystemRestart
}

type CMsgSystemUpdateState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State              *EUpdaterState                 `protobuf:"varint,1,opt,name=state,enum=EUpdaterState,def=0" json:"state,omitempty"`
	Progress           *CMsgSystemUpdateProgress      `protobuf:"bytes,2,opt,name=progress" json:"progress,omitempty"`
	UpdateCheckResults []*CMsgSystemUpdateCheckResult `protobuf:"bytes,3,rep,name=update_check_results,json=updateCheckResults" json:"update_check_results,omitempty"`
	UpdateApplyResults []*CMsgSystemUpdateApplyResult `protobuf:"bytes,4,rep,name=update_apply_results,json=updateApplyResults" json:"update_apply_results,omitempty"`
	SupportsOsUpdates  *bool                          `protobuf:"varint,5,opt,name=supports_os_updates,json=supportsOsUpdates" json:"supports_os_updates,omitempty"`
}

// Default values for CMsgSystemUpdateState fields.
const (
	Default_CMsgSystemUpdateState_State = EUpdaterState_k_EUpdaterState_Invalid
)

func (x *CMsgSystemUpdateState) Reset() {
	*x = CMsgSystemUpdateState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemUpdateState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemUpdateState) ProtoMessage() {}

func (x *CMsgSystemUpdateState) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemUpdateState.ProtoReflect.Descriptor instead.
func (*CMsgSystemUpdateState) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{43}
}

func (x *CMsgSystemUpdateState) GetState() EUpdaterState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_CMsgSystemUpdateState_State
}

func (x *CMsgSystemUpdateState) GetProgress() *CMsgSystemUpdateProgress {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *CMsgSystemUpdateState) GetUpdateCheckResults() []*CMsgSystemUpdateCheckResult {
	if x != nil {
		return x.UpdateCheckResults
	}
	return nil
}

func (x *CMsgSystemUpdateState) GetUpdateApplyResults() []*CMsgSystemUpdateApplyResult {
	if x != nil {
		return x.UpdateApplyResults
	}
	return nil
}

func (x *CMsgSystemUpdateState) GetSupportsOsUpdates() bool {
	if x != nil && x.SupportsOsUpdates != nil {
		return *x.SupportsOsUpdates
	}
	return false
}

type CMsgAchievementChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid *uint32 `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
}

func (x *CMsgAchievementChange) Reset() {
	*x = CMsgAchievementChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgAchievementChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgAchievementChange) ProtoMessage() {}

func (x *CMsgAchievementChange) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgAchievementChange.ProtoReflect.Descriptor instead.
func (*CMsgAchievementChange) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{44}
}

func (x *CMsgAchievementChange) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

type CMsgCellList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cells []*CMsgCellList_Cell `protobuf:"bytes,1,rep,name=cells" json:"cells,omitempty"`
}

func (x *CMsgCellList) Reset() {
	*x = CMsgCellList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCellList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCellList) ProtoMessage() {}

func (x *CMsgCellList) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCellList.ProtoReflect.Descriptor instead.
func (*CMsgCellList) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{45}
}

func (x *CMsgCellList) GetCells() []*CMsgCellList_Cell {
	if x != nil {
		return x.Cells
	}
	return nil
}

type CMsgShortcutInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid              *uint32  `protobuf:"varint,1,opt,name=appid" json:"appid,omitempty"`
	Exe                *string  `protobuf:"bytes,2,opt,name=exe" json:"exe,omitempty"`
	StartDir           *string  `protobuf:"bytes,3,opt,name=start_dir,json=startDir" json:"start_dir,omitempty"`
	Icon               *string  `protobuf:"bytes,4,opt,name=icon" json:"icon,omitempty"`
	Path               *string  `protobuf:"bytes,5,opt,name=path" json:"path,omitempty"`
	Args               *string  `protobuf:"bytes,6,opt,name=args" json:"args,omitempty"`
	AppName            *string  `protobuf:"bytes,7,opt,name=app_name,json=appName" json:"app_name,omitempty"`
	OverrideAppid      *uint32  `protobuf:"varint,8,opt,name=override_appid,json=overrideAppid" json:"override_appid,omitempty"`
	FlatpakAppid       *string  `protobuf:"bytes,9,opt,name=flatpak_appid,json=flatpakAppid" json:"flatpak_appid,omitempty"`
	Tags               []string `protobuf:"bytes,10,rep,name=tags" json:"tags,omitempty"`
	IsRemote           *bool    `protobuf:"varint,11,opt,name=is_remote,json=isRemote" json:"is_remote,omitempty"`
	IsHidden           *bool    `protobuf:"varint,12,opt,name=is_hidden,json=isHidden" json:"is_hidden,omitempty"`
	IsTemporary        *bool    `protobuf:"varint,13,opt,name=is_temporary,json=isTemporary" json:"is_temporary,omitempty"`
	IsOpenvr           *bool    `protobuf:"varint,14,opt,name=is_openvr,json=isOpenvr" json:"is_openvr,omitempty"`
	AllowDesktopConfig *bool    `protobuf:"varint,15,opt,name=allow_desktop_config,json=allowDesktopConfig" json:"allow_desktop_config,omitempty"`
	AllowOverlay       *bool    `protobuf:"varint,16,opt,name=allow_overlay,json=allowOverlay" json:"allow_overlay,omitempty"`
	RtLastPlayedTime   *uint32  `protobuf:"varint,17,opt,name=rt_last_played_time,json=rtLastPlayedTime" json:"rt_last_played_time,omitempty"`
	IsDevkitShortcut   *bool    `protobuf:"varint,18,opt,name=is_devkit_shortcut,json=isDevkitShortcut" json:"is_devkit_shortcut,omitempty"`
	DevkitGameid       *string  `protobuf:"bytes,19,opt,name=devkit_gameid,json=devkitGameid" json:"devkit_gameid,omitempty"`
}

func (x *CMsgShortcutInfo) Reset() {
	*x = CMsgShortcutInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgShortcutInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgShortcutInfo) ProtoMessage() {}

func (x *CMsgShortcutInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgShortcutInfo.ProtoReflect.Descriptor instead.
func (*CMsgShortcutInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{46}
}

func (x *CMsgShortcutInfo) GetAppid() uint32 {
	if x != nil && x.Appid != nil {
		return *x.Appid
	}
	return 0
}

func (x *CMsgShortcutInfo) GetExe() string {
	if x != nil && x.Exe != nil {
		return *x.Exe
	}
	return ""
}

func (x *CMsgShortcutInfo) GetStartDir() string {
	if x != nil && x.StartDir != nil {
		return *x.StartDir
	}
	return ""
}

func (x *CMsgShortcutInfo) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *CMsgShortcutInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *CMsgShortcutInfo) GetArgs() string {
	if x != nil && x.Args != nil {
		return *x.Args
	}
	return ""
}

func (x *CMsgShortcutInfo) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *CMsgShortcutInfo) GetOverrideAppid() uint32 {
	if x != nil && x.OverrideAppid != nil {
		return *x.OverrideAppid
	}
	return 0
}

func (x *CMsgShortcutInfo) GetFlatpakAppid() string {
	if x != nil && x.FlatpakAppid != nil {
		return *x.FlatpakAppid
	}
	return ""
}

func (x *CMsgShortcutInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CMsgShortcutInfo) GetIsRemote() bool {
	if x != nil && x.IsRemote != nil {
		return *x.IsRemote
	}
	return false
}

func (x *CMsgShortcutInfo) GetIsHidden() bool {
	if x != nil && x.IsHidden != nil {
		return *x.IsHidden
	}
	return false
}

func (x *CMsgShortcutInfo) GetIsTemporary() bool {
	if x != nil && x.IsTemporary != nil {
		return *x.IsTemporary
	}
	return false
}

func (x *CMsgShortcutInfo) GetIsOpenvr() bool {
	if x != nil && x.IsOpenvr != nil {
		return *x.IsOpenvr
	}
	return false
}

func (x *CMsgShortcutInfo) GetAllowDesktopConfig() bool {
	if x != nil && x.AllowDesktopConfig != nil {
		return *x.AllowDesktopConfig
	}
	return false
}

func (x *CMsgShortcutInfo) GetAllowOverlay() bool {
	if x != nil && x.AllowOverlay != nil {
		return *x.AllowOverlay
	}
	return false
}

func (x *CMsgShortcutInfo) GetRtLastPlayedTime() uint32 {
	if x != nil && x.RtLastPlayedTime != nil {
		return *x.RtLastPlayedTime
	}
	return 0
}

func (x *CMsgShortcutInfo) GetIsDevkitShortcut() bool {
	if x != nil && x.IsDevkitShortcut != nil {
		return *x.IsDevkitShortcut
	}
	return false
}

func (x *CMsgShortcutInfo) GetDevkitGameid() string {
	if x != nil && x.DevkitGameid != nil {
		return *x.DevkitGameid
	}
	return ""
}

type CMsgShortcutAppIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appids []uint32 `protobuf:"varint,1,rep,name=appids" json:"appids,omitempty"`
}

func (x *CMsgShortcutAppIds) Reset() {
	*x = CMsgShortcutAppIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgShortcutAppIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgShortcutAppIds) ProtoMessage() {}

func (x *CMsgShortcutAppIds) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgShortcutAppIds.ProtoReflect.Descriptor instead.
func (*CMsgShortcutAppIds) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{47}
}

func (x *CMsgShortcutAppIds) GetAppids() []uint32 {
	if x != nil {
		return x.Appids
	}
	return nil
}

type CMsgMonitorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectedDisplayName *string                        `protobuf:"bytes,1,req,name=selected_display_name,json=selectedDisplayName" json:"selected_display_name,omitempty"`
	Monitors            []*CMsgMonitorInfo_MonitorInfo `protobuf:"bytes,2,rep,name=monitors" json:"monitors,omitempty"`
}

func (x *CMsgMonitorInfo) Reset() {
	*x = CMsgMonitorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMonitorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMonitorInfo) ProtoMessage() {}

func (x *CMsgMonitorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMonitorInfo.ProtoReflect.Descriptor instead.
func (*CMsgMonitorInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{48}
}

func (x *CMsgMonitorInfo) GetSelectedDisplayName() string {
	if x != nil && x.SelectedDisplayName != nil {
		return *x.SelectedDisplayName
	}
	return ""
}

func (x *CMsgMonitorInfo) GetMonitors() []*CMsgMonitorInfo_MonitorInfo {
	if x != nil {
		return x.Monitors
	}
	return nil
}

type CMsgGenerateSystemReportReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId *string `protobuf:"bytes,1,opt,name=report_id,json=reportId" json:"report_id,omitempty"`
}

func (x *CMsgGenerateSystemReportReply) Reset() {
	*x = CMsgGenerateSystemReportReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgGenerateSystemReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgGenerateSystemReportReply) ProtoMessage() {}

func (x *CMsgGenerateSystemReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgGenerateSystemReportReply.ProtoReflect.Descriptor instead.
func (*CMsgGenerateSystemReportReply) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{49}
}

func (x *CMsgGenerateSystemReportReply) GetReportId() string {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return ""
}

type CMsgWebUITransportInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port    *uint32 `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
	AuthKey *string `protobuf:"bytes,2,opt,name=auth_key,json=authKey" json:"auth_key,omitempty"`
}

func (x *CMsgWebUITransportInfo) Reset() {
	*x = CMsgWebUITransportInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgWebUITransportInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgWebUITransportInfo) ProtoMessage() {}

func (x *CMsgWebUITransportInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgWebUITransportInfo.ProtoReflect.Descriptor instead.
func (*CMsgWebUITransportInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{50}
}

func (x *CMsgWebUITransportInfo) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *CMsgWebUITransportInfo) GetAuthKey() string {
	if x != nil && x.AuthKey != nil {
		return *x.AuthKey
	}
	return ""
}

type CMsgClientShaderHitCacheEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeySha           []byte  `protobuf:"bytes,1,opt,name=key_sha,json=keySha" json:"key_sha,omitempty"`
	CodeSha          []byte  `protobuf:"bytes,2,opt,name=code_sha,json=codeSha" json:"code_sha,omitempty"`
	TimeLastReported *uint64 `protobuf:"varint,3,opt,name=time_last_reported,json=timeLastReported" json:"time_last_reported,omitempty"`
}

func (x *CMsgClientShaderHitCacheEntry) Reset() {
	*x = CMsgClientShaderHitCacheEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientShaderHitCacheEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientShaderHitCacheEntry) ProtoMessage() {}

func (x *CMsgClientShaderHitCacheEntry) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientShaderHitCacheEntry.ProtoReflect.Descriptor instead.
func (*CMsgClientShaderHitCacheEntry) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{51}
}

func (x *CMsgClientShaderHitCacheEntry) GetKeySha() []byte {
	if x != nil {
		return x.KeySha
	}
	return nil
}

func (x *CMsgClientShaderHitCacheEntry) GetCodeSha() []byte {
	if x != nil {
		return x.CodeSha
	}
	return nil
}

func (x *CMsgClientShaderHitCacheEntry) GetTimeLastReported() uint64 {
	if x != nil && x.TimeLastReported != nil {
		return *x.TimeLastReported
	}
	return 0
}

type CMsgClientShaderHitCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*CMsgClientShaderHitCacheEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (x *CMsgClientShaderHitCache) Reset() {
	*x = CMsgClientShaderHitCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgClientShaderHitCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgClientShaderHitCache) ProtoMessage() {}

func (x *CMsgClientShaderHitCache) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgClientShaderHitCache.ProtoReflect.Descriptor instead.
func (*CMsgClientShaderHitCache) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{52}
}

func (x *CMsgClientShaderHitCache) GetEntries() []*CMsgClientShaderHitCacheEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CMsgNetworkDevicesData_Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *uint32                                 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Etype    *int32                                  `protobuf:"varint,2,opt,name=etype" json:"etype,omitempty"`
	Estate   *int32                                  `protobuf:"varint,3,opt,name=estate" json:"estate,omitempty"`
	Mac      *string                                 `protobuf:"bytes,4,opt,name=mac" json:"mac,omitempty"`
	Vendor   *string                                 `protobuf:"bytes,5,opt,name=vendor" json:"vendor,omitempty"`
	Product  *string                                 `protobuf:"bytes,6,opt,name=product" json:"product,omitempty"`
	Ip4      *CMsgNetworkDeviceIP4Config             `protobuf:"bytes,7,opt,name=ip4" json:"ip4,omitempty"`
	Ip6      *CMsgNetworkDeviceIP6Config             `protobuf:"bytes,8,opt,name=ip6" json:"ip6,omitempty"`
	Wired    *CMsgNetworkDevicesData_Device_Wired    `protobuf:"bytes,9,opt,name=wired" json:"wired,omitempty"`
	Wireless *CMsgNetworkDevicesData_Device_Wireless `protobuf:"bytes,10,opt,name=wireless" json:"wireless,omitempty"`
}

// Default values for CMsgNetworkDevicesData_Device fields.
const (
	Default_CMsgNetworkDevicesData_Device_Id = uint32(0)
)

func (x *CMsgNetworkDevicesData_Device) Reset() {
	*x = CMsgNetworkDevicesData_Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDevicesData_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDevicesData_Device) ProtoMessage() {}

func (x *CMsgNetworkDevicesData_Device) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDevicesData_Device.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDevicesData_Device) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CMsgNetworkDevicesData_Device) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CMsgNetworkDevicesData_Device_Id
}

func (x *CMsgNetworkDevicesData_Device) GetEtype() int32 {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return 0
}

func (x *CMsgNetworkDevicesData_Device) GetEstate() int32 {
	if x != nil && x.Estate != nil {
		return *x.Estate
	}
	return 0
}

func (x *CMsgNetworkDevicesData_Device) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *CMsgNetworkDevicesData_Device) GetVendor() string {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return ""
}

func (x *CMsgNetworkDevicesData_Device) GetProduct() string {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return ""
}

func (x *CMsgNetworkDevicesData_Device) GetIp4() *CMsgNetworkDeviceIP4Config {
	if x != nil {
		return x.Ip4
	}
	return nil
}

func (x *CMsgNetworkDevicesData_Device) GetIp6() *CMsgNetworkDeviceIP6Config {
	if x != nil {
		return x.Ip6
	}
	return nil
}

func (x *CMsgNetworkDevicesData_Device) GetWired() *CMsgNetworkDevicesData_Device_Wired {
	if x != nil {
		return x.Wired
	}
	return nil
}

func (x *CMsgNetworkDevicesData_Device) GetWireless() *CMsgNetworkDevicesData_Device_Wireless {
	if x != nil {
		return x.Wireless
	}
	return nil
}

type CMsgNetworkDevicesData_Device_Wired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCablePresent *bool   `protobuf:"varint,1,opt,name=is_cable_present,json=isCablePresent,def=0" json:"is_cable_present,omitempty"`
	SpeedMbit      *uint32 `protobuf:"varint,2,opt,name=speed_mbit,json=speedMbit" json:"speed_mbit,omitempty"`
	FriendlyName   *string `protobuf:"bytes,3,opt,name=friendly_name,json=friendlyName" json:"friendly_name,omitempty"`
}

// Default values for CMsgNetworkDevicesData_Device_Wired fields.
const (
	Default_CMsgNetworkDevicesData_Device_Wired_IsCablePresent = bool(false)
)

func (x *CMsgNetworkDevicesData_Device_Wired) Reset() {
	*x = CMsgNetworkDevicesData_Device_Wired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDevicesData_Device_Wired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDevicesData_Device_Wired) ProtoMessage() {}

func (x *CMsgNetworkDevicesData_Device_Wired) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDevicesData_Device_Wired.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDevicesData_Device_Wired) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{5, 0, 0}
}

func (x *CMsgNetworkDevicesData_Device_Wired) GetIsCablePresent() bool {
	if x != nil && x.IsCablePresent != nil {
		return *x.IsCablePresent
	}
	return Default_CMsgNetworkDevicesData_Device_Wired_IsCablePresent
}

func (x *CMsgNetworkDevicesData_Device_Wired) GetSpeedMbit() uint32 {
	if x != nil && x.SpeedMbit != nil {
		return *x.SpeedMbit
	}
	return 0
}

func (x *CMsgNetworkDevicesData_Device_Wired) GetFriendlyName() string {
	if x != nil && x.FriendlyName != nil {
		return *x.FriendlyName
	}
	return ""
}

type CMsgNetworkDevicesData_Device_Wireless struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aps                []*CMsgNetworkDevicesData_Device_Wireless_AP `protobuf:"bytes,1,rep,name=aps" json:"aps,omitempty"`
	EsecuritySupported *int32                                       `protobuf:"varint,2,opt,name=esecurity_supported,json=esecuritySupported" json:"esecurity_supported,omitempty"`
}

func (x *CMsgNetworkDevicesData_Device_Wireless) Reset() {
	*x = CMsgNetworkDevicesData_Device_Wireless{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDevicesData_Device_Wireless) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDevicesData_Device_Wireless) ProtoMessage() {}

func (x *CMsgNetworkDevicesData_Device_Wireless) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDevicesData_Device_Wireless.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDevicesData_Device_Wireless) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{5, 0, 1}
}

func (x *CMsgNetworkDevicesData_Device_Wireless) GetAps() []*CMsgNetworkDevicesData_Device_Wireless_AP {
	if x != nil {
		return x.Aps
	}
	return nil
}

func (x *CMsgNetworkDevicesData_Device_Wireless) GetEsecuritySupported() int32 {
	if x != nil && x.EsecuritySupported != nil {
		return *x.EsecuritySupported
	}
	return 0
}

type CMsgNetworkDevicesData_Device_Wireless_AP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *uint32 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Estrength     *int32  `protobuf:"varint,2,opt,name=estrength" json:"estrength,omitempty"`
	Ssid          *string `protobuf:"bytes,3,opt,name=ssid" json:"ssid,omitempty"`
	IsActive      *bool   `protobuf:"varint,4,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	IsAutoconnect *bool   `protobuf:"varint,5,opt,name=is_autoconnect,json=isAutoconnect" json:"is_autoconnect,omitempty"`
	Esecurity     *int32  `protobuf:"varint,6,opt,name=esecurity" json:"esecurity,omitempty"`
	UserName      *string `protobuf:"bytes,7,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Password      *string `protobuf:"bytes,8,opt,name=password" json:"password,omitempty"`
	StrengthRaw   *int32  `protobuf:"varint,9,opt,name=strength_raw,json=strengthRaw" json:"strength_raw,omitempty"`
}

// Default values for CMsgNetworkDevicesData_Device_Wireless_AP fields.
const (
	Default_CMsgNetworkDevicesData_Device_Wireless_AP_Id = uint32(0)
)

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) Reset() {
	*x = CMsgNetworkDevicesData_Device_Wireless_AP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDevicesData_Device_Wireless_AP) ProtoMessage() {}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDevicesData_Device_Wireless_AP.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDevicesData_Device_Wireless_AP) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{5, 0, 1, 0}
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CMsgNetworkDevicesData_Device_Wireless_AP_Id
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) GetEstrength() int32 {
	if x != nil && x.Estrength != nil {
		return *x.Estrength
	}
	return 0
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) GetSsid() string {
	if x != nil && x.Ssid != nil {
		return *x.Ssid
	}
	return ""
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) GetIsActive() bool {
	if x != nil && x.IsActive != nil {
		return *x.IsActive
	}
	return false
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) GetIsAutoconnect() bool {
	if x != nil && x.IsAutoconnect != nil {
		return *x.IsAutoconnect
	}
	return false
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) GetEsecurity() int32 {
	if x != nil && x.Esecurity != nil {
		return *x.Esecurity
	}
	return 0
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *CMsgNetworkDevicesData_Device_Wireless_AP) GetStrengthRaw() int32 {
	if x != nil && x.StrengthRaw != nil {
		return *x.StrengthRaw
	}
	return 0
}

type CMsgNetworkDeviceConnect_KnownAP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApId *uint32 `protobuf:"varint,1,opt,name=ap_id,json=apId" json:"ap_id,omitempty"`
}

func (x *CMsgNetworkDeviceConnect_KnownAP) Reset() {
	*x = CMsgNetworkDeviceConnect_KnownAP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDeviceConnect_KnownAP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDeviceConnect_KnownAP) ProtoMessage() {}

func (x *CMsgNetworkDeviceConnect_KnownAP) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDeviceConnect_KnownAP.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDeviceConnect_KnownAP) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CMsgNetworkDeviceConnect_KnownAP) GetApId() uint32 {
	if x != nil && x.ApId != nil {
		return *x.ApId
	}
	return 0
}

type CMsgNetworkDeviceConnect_CustomAP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssid      *string `protobuf:"bytes,1,opt,name=ssid" json:"ssid,omitempty"`
	Esecurity *int32  `protobuf:"varint,2,opt,name=esecurity" json:"esecurity,omitempty"`
}

func (x *CMsgNetworkDeviceConnect_CustomAP) Reset() {
	*x = CMsgNetworkDeviceConnect_CustomAP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDeviceConnect_CustomAP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDeviceConnect_CustomAP) ProtoMessage() {}

func (x *CMsgNetworkDeviceConnect_CustomAP) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDeviceConnect_CustomAP.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDeviceConnect_CustomAP) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{6, 1}
}

func (x *CMsgNetworkDeviceConnect_CustomAP) GetSsid() string {
	if x != nil && x.Ssid != nil {
		return *x.Ssid
	}
	return ""
}

func (x *CMsgNetworkDeviceConnect_CustomAP) GetEsecurity() int32 {
	if x != nil && x.Esecurity != nil {
		return *x.Esecurity
	}
	return 0
}

type CMsgNetworkDeviceConnect_Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username *string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password *string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (x *CMsgNetworkDeviceConnect_Credentials) Reset() {
	*x = CMsgNetworkDeviceConnect_Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgNetworkDeviceConnect_Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgNetworkDeviceConnect_Credentials) ProtoMessage() {}

func (x *CMsgNetworkDeviceConnect_Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgNetworkDeviceConnect_Credentials.ProtoReflect.Descriptor instead.
func (*CMsgNetworkDeviceConnect_Credentials) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{6, 2}
}

func (x *CMsgNetworkDeviceConnect_Credentials) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *CMsgNetworkDeviceConnect_Credentials) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type CMsgStorageDevicesData_Drive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint32                 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Model       *string                 `protobuf:"bytes,2,opt,name=model" json:"model,omitempty"`
	Vendor      *string                 `protobuf:"bytes,3,opt,name=vendor" json:"vendor,omitempty"`
	Serial      *string                 `protobuf:"bytes,4,opt,name=serial" json:"serial,omitempty"`
	IsEjectable *bool                   `protobuf:"varint,5,opt,name=is_ejectable,json=isEjectable" json:"is_ejectable,omitempty"`
	SizeBytes   *uint64                 `protobuf:"varint,6,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	MediaType   *EStorageDriveMediaType `protobuf:"varint,7,opt,name=media_type,json=mediaType,enum=EStorageDriveMediaType,def=0" json:"media_type,omitempty"`
}

// Default values for CMsgStorageDevicesData_Drive fields.
const (
	Default_CMsgStorageDevicesData_Drive_Id        = uint32(0)
	Default_CMsgStorageDevicesData_Drive_MediaType = EStorageDriveMediaType_k_EStorageDriveMediaType_Invalid
)

func (x *CMsgStorageDevicesData_Drive) Reset() {
	*x = CMsgStorageDevicesData_Drive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgStorageDevicesData_Drive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgStorageDevicesData_Drive) ProtoMessage() {}

func (x *CMsgStorageDevicesData_Drive) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgStorageDevicesData_Drive.ProtoReflect.Descriptor instead.
func (*CMsgStorageDevicesData_Drive) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CMsgStorageDevicesData_Drive) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CMsgStorageDevicesData_Drive_Id
}

func (x *CMsgStorageDevicesData_Drive) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *CMsgStorageDevicesData_Drive) GetVendor() string {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return ""
}

func (x *CMsgStorageDevicesData_Drive) GetSerial() string {
	if x != nil && x.Serial != nil {
		return *x.Serial
	}
	return ""
}

func (x *CMsgStorageDevicesData_Drive) GetIsEjectable() bool {
	if x != nil && x.IsEjectable != nil {
		return *x.IsEjectable
	}
	return false
}

func (x *CMsgStorageDevicesData_Drive) GetSizeBytes() uint64 {
	if x != nil && x.SizeBytes != nil {
		return *x.SizeBytes
	}
	return 0
}

func (x *CMsgStorageDevicesData_Drive) GetMediaType() EStorageDriveMediaType {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return Default_CMsgStorageDevicesData_Drive_MediaType
}

type CMsgStorageDevicesData_BlockDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *uint32                      `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	DriveId        *uint32                      `protobuf:"varint,2,opt,name=drive_id,json=driveId,def=0" json:"drive_id,omitempty"`
	Path           *string                      `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	FriendlyPath   *string                      `protobuf:"bytes,4,opt,name=friendly_path,json=friendlyPath" json:"friendly_path,omitempty"`
	Label          *string                      `protobuf:"bytes,5,opt,name=label" json:"label,omitempty"`
	SizeBytes      *uint64                      `protobuf:"varint,6,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	IsFormattable  *bool                        `protobuf:"varint,7,opt,name=is_formattable,json=isFormattable" json:"is_formattable,omitempty"`
	IsReadOnly     *bool                        `protobuf:"varint,8,opt,name=is_read_only,json=isReadOnly" json:"is_read_only,omitempty"`
	IsRootDevice   *bool                        `protobuf:"varint,9,opt,name=is_root_device,json=isRootDevice" json:"is_root_device,omitempty"`
	ContentType    *EStorageBlockContentType    `protobuf:"varint,10,opt,name=content_type,json=contentType,enum=EStorageBlockContentType,def=0" json:"content_type,omitempty"`
	FilesystemType *EStorageBlockFileSystemType `protobuf:"varint,11,opt,name=filesystem_type,json=filesystemType,enum=EStorageBlockFileSystemType,def=0" json:"filesystem_type,omitempty"`
	MountPath      *string                      `protobuf:"bytes,12,opt,name=mount_path,json=mountPath" json:"mount_path,omitempty"`
}

// Default values for CMsgStorageDevicesData_BlockDevice fields.
const (
	Default_CMsgStorageDevicesData_BlockDevice_Id             = uint32(0)
	Default_CMsgStorageDevicesData_BlockDevice_DriveId        = uint32(0)
	Default_CMsgStorageDevicesData_BlockDevice_ContentType    = EStorageBlockContentType_k_EStorageBlockContentType_Invalid
	Default_CMsgStorageDevicesData_BlockDevice_FilesystemType = EStorageBlockFileSystemType_k_EStorageBlockFileSystemType_Invalid
)

func (x *CMsgStorageDevicesData_BlockDevice) Reset() {
	*x = CMsgStorageDevicesData_BlockDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgStorageDevicesData_BlockDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgStorageDevicesData_BlockDevice) ProtoMessage() {}

func (x *CMsgStorageDevicesData_BlockDevice) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgStorageDevicesData_BlockDevice.ProtoReflect.Descriptor instead.
func (*CMsgStorageDevicesData_BlockDevice) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{7, 1}
}

func (x *CMsgStorageDevicesData_BlockDevice) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CMsgStorageDevicesData_BlockDevice_Id
}

func (x *CMsgStorageDevicesData_BlockDevice) GetDriveId() uint32 {
	if x != nil && x.DriveId != nil {
		return *x.DriveId
	}
	return Default_CMsgStorageDevicesData_BlockDevice_DriveId
}

func (x *CMsgStorageDevicesData_BlockDevice) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *CMsgStorageDevicesData_BlockDevice) GetFriendlyPath() string {
	if x != nil && x.FriendlyPath != nil {
		return *x.FriendlyPath
	}
	return ""
}

func (x *CMsgStorageDevicesData_BlockDevice) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *CMsgStorageDevicesData_BlockDevice) GetSizeBytes() uint64 {
	if x != nil && x.SizeBytes != nil {
		return *x.SizeBytes
	}
	return 0
}

func (x *CMsgStorageDevicesData_BlockDevice) GetIsFormattable() bool {
	if x != nil && x.IsFormattable != nil {
		return *x.IsFormattable
	}
	return false
}

func (x *CMsgStorageDevicesData_BlockDevice) GetIsReadOnly() bool {
	if x != nil && x.IsReadOnly != nil {
		return *x.IsReadOnly
	}
	return false
}

func (x *CMsgStorageDevicesData_BlockDevice) GetIsRootDevice() bool {
	if x != nil && x.IsRootDevice != nil {
		return *x.IsRootDevice
	}
	return false
}

func (x *CMsgStorageDevicesData_BlockDevice) GetContentType() EStorageBlockContentType {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return Default_CMsgStorageDevicesData_BlockDevice_ContentType
}

func (x *CMsgStorageDevicesData_BlockDevice) GetFilesystemType() EStorageBlockFileSystemType {
	if x != nil && x.FilesystemType != nil {
		return *x.FilesystemType
	}
	return Default_CMsgStorageDevicesData_BlockDevice_FilesystemType
}

func (x *CMsgStorageDevicesData_BlockDevice) GetMountPath() string {
	if x != nil && x.MountPath != nil {
		return *x.MountPath
	}
	return ""
}

type CMsgBluetoothDevicesData_Adapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *uint32 `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	Mac           *string `protobuf:"bytes,2,opt,name=mac" json:"mac,omitempty"`
	Name          *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	IsEnabled     *bool   `protobuf:"varint,4,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	IsDiscovering *bool   `protobuf:"varint,5,opt,name=is_discovering,json=isDiscovering" json:"is_discovering,omitempty"`
}

// Default values for CMsgBluetoothDevicesData_Adapter fields.
const (
	Default_CMsgBluetoothDevicesData_Adapter_Id = uint32(0)
)

func (x *CMsgBluetoothDevicesData_Adapter) Reset() {
	*x = CMsgBluetoothDevicesData_Adapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBluetoothDevicesData_Adapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBluetoothDevicesData_Adapter) ProtoMessage() {}

func (x *CMsgBluetoothDevicesData_Adapter) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBluetoothDevicesData_Adapter.ProtoReflect.Descriptor instead.
func (*CMsgBluetoothDevicesData_Adapter) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CMsgBluetoothDevicesData_Adapter) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CMsgBluetoothDevicesData_Adapter_Id
}

func (x *CMsgBluetoothDevicesData_Adapter) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *CMsgBluetoothDevicesData_Adapter) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgBluetoothDevicesData_Adapter) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

func (x *CMsgBluetoothDevicesData_Adapter) GetIsDiscovering() bool {
	if x != nil && x.IsDiscovering != nil {
		return *x.IsDiscovering
	}
	return false
}

type CMsgBluetoothDevicesData_Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint32               `protobuf:"varint,1,opt,name=id,def=0" json:"id,omitempty"`
	AdapterId   *uint32               `protobuf:"varint,2,opt,name=adapter_id,json=adapterId,def=0" json:"adapter_id,omitempty"`
	Etype       *EBluetoothDeviceType `protobuf:"varint,3,opt,name=etype,enum=EBluetoothDeviceType,def=0" json:"etype,omitempty"`
	Mac         *string               `protobuf:"bytes,4,opt,name=mac" json:"mac,omitempty"`
	Name        *string               `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	IsConnected *bool                 `protobuf:"varint,6,opt,name=is_connected,json=isConnected" json:"is_connected,omitempty"`
	IsPaired    *bool                 `protobuf:"varint,7,opt,name=is_paired,json=isPaired" json:"is_paired,omitempty"`
	StrengthRaw *int32                `protobuf:"varint,8,opt,name=strength_raw,json=strengthRaw" json:"strength_raw,omitempty"`
}

// Default values for CMsgBluetoothDevicesData_Device fields.
const (
	Default_CMsgBluetoothDevicesData_Device_Id        = uint32(0)
	Default_CMsgBluetoothDevicesData_Device_AdapterId = uint32(0)
	Default_CMsgBluetoothDevicesData_Device_Etype     = EBluetoothDeviceType_k_BluetoothDeviceType_Invalid
)

func (x *CMsgBluetoothDevicesData_Device) Reset() {
	*x = CMsgBluetoothDevicesData_Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBluetoothDevicesData_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBluetoothDevicesData_Device) ProtoMessage() {}

func (x *CMsgBluetoothDevicesData_Device) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBluetoothDevicesData_Device.ProtoReflect.Descriptor instead.
func (*CMsgBluetoothDevicesData_Device) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{10, 1}
}

func (x *CMsgBluetoothDevicesData_Device) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_CMsgBluetoothDevicesData_Device_Id
}

func (x *CMsgBluetoothDevicesData_Device) GetAdapterId() uint32 {
	if x != nil && x.AdapterId != nil {
		return *x.AdapterId
	}
	return Default_CMsgBluetoothDevicesData_Device_AdapterId
}

func (x *CMsgBluetoothDevicesData_Device) GetEtype() EBluetoothDeviceType {
	if x != nil && x.Etype != nil {
		return *x.Etype
	}
	return Default_CMsgBluetoothDevicesData_Device_Etype
}

func (x *CMsgBluetoothDevicesData_Device) GetMac() string {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return ""
}

func (x *CMsgBluetoothDevicesData_Device) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CMsgBluetoothDevicesData_Device) GetIsConnected() bool {
	if x != nil && x.IsConnected != nil {
		return *x.IsConnected
	}
	return false
}

func (x *CMsgBluetoothDevicesData_Device) GetIsPaired() bool {
	if x != nil && x.IsPaired != nil {
		return *x.IsPaired
	}
	return false
}

func (x *CMsgBluetoothDevicesData_Device) GetStrengthRaw() int32 {
	if x != nil && x.StrengthRaw != nil {
		return *x.StrengthRaw
	}
	return 0
}

type CMsgBluetoothDevicesData_Manager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBluetoothEnabled *bool `protobuf:"varint,1,opt,name=is_bluetooth_enabled,json=isBluetoothEnabled" json:"is_bluetooth_enabled,omitempty"`
}

func (x *CMsgBluetoothDevicesData_Manager) Reset() {
	*x = CMsgBluetoothDevicesData_Manager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgBluetoothDevicesData_Manager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgBluetoothDevicesData_Manager) ProtoMessage() {}

func (x *CMsgBluetoothDevicesData_Manager) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgBluetoothDevicesData_Manager.ProtoReflect.Descriptor instead.
func (*CMsgBluetoothDevicesData_Manager) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{10, 2}
}

func (x *CMsgBluetoothDevicesData_Manager) GetIsBluetoothEnabled() bool {
	if x != nil && x.IsBluetoothEnabled != nil {
		return *x.IsBluetoothEnabled
	}
	return false
}

type CMsgSystemAudioVolume_ChannelEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Echannel *ESystemAudioChannel `protobuf:"varint,1,opt,name=echannel,enum=ESystemAudioChannel,def=0" json:"echannel,omitempty"`
	Volume   *float32             `protobuf:"fixed32,2,opt,name=volume" json:"volume,omitempty"`
}

// Default values for CMsgSystemAudioVolume_ChannelEntry fields.
const (
	Default_CMsgSystemAudioVolume_ChannelEntry_Echannel = ESystemAudioChannel_k_SystemAudioChannel_Invalid
)

func (x *CMsgSystemAudioVolume_ChannelEntry) Reset() {
	*x = CMsgSystemAudioVolume_ChannelEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgSystemAudioVolume_ChannelEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgSystemAudioVolume_ChannelEntry) ProtoMessage() {}

func (x *CMsgSystemAudioVolume_ChannelEntry) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgSystemAudioVolume_ChannelEntry.ProtoReflect.Descriptor instead.
func (*CMsgSystemAudioVolume_ChannelEntry) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{24, 0}
}

func (x *CMsgSystemAudioVolume_ChannelEntry) GetEchannel() ESystemAudioChannel {
	if x != nil && x.Echannel != nil {
		return *x.Echannel
	}
	return Default_CMsgSystemAudioVolume_ChannelEntry_Echannel
}

func (x *CMsgSystemAudioVolume_ChannelEntry) GetVolume() float32 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

type CMsgCellList_Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId  *uint32 `protobuf:"varint,1,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	LocName *string `protobuf:"bytes,2,opt,name=loc_name,json=locName" json:"loc_name,omitempty"`
}

func (x *CMsgCellList_Cell) Reset() {
	*x = CMsgCellList_Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgCellList_Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgCellList_Cell) ProtoMessage() {}

func (x *CMsgCellList_Cell) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgCellList_Cell.ProtoReflect.Descriptor instead.
func (*CMsgCellList_Cell) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{45, 0}
}

func (x *CMsgCellList_Cell) GetCellId() uint32 {
	if x != nil && x.CellId != nil {
		return *x.CellId
	}
	return 0
}

func (x *CMsgCellList_Cell) GetLocName() string {
	if x != nil && x.LocName != nil {
		return *x.LocName
	}
	return ""
}

type CMsgMonitorInfo_MonitorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorDeviceName  *string `protobuf:"bytes,1,req,name=monitor_device_name,json=monitorDeviceName" json:"monitor_device_name,omitempty"`
	MonitorDisplayName *string `protobuf:"bytes,2,req,name=monitor_display_name,json=monitorDisplayName" json:"monitor_display_name,omitempty"`
}

func (x *CMsgMonitorInfo_MonitorInfo) Reset() {
	*x = CMsgMonitorInfo_MonitorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steammessages_client_objects_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CMsgMonitorInfo_MonitorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CMsgMonitorInfo_MonitorInfo) ProtoMessage() {}

func (x *CMsgMonitorInfo_MonitorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steammessages_client_objects_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CMsgMonitorInfo_MonitorInfo.ProtoReflect.Descriptor instead.
func (*CMsgMonitorInfo_MonitorInfo) Descriptor() ([]byte, []int) {
	return file_steammessages_client_objects_proto_rawDescGZIP(), []int{48, 0}
}

func (x *CMsgMonitorInfo_MonitorInfo) GetMonitorDeviceName() string {
	if x != nil && x.MonitorDeviceName != nil {
		return *x.MonitorDeviceName
	}
	return ""
}

func (x *CMsgMonitorInfo_MonitorInfo) GetMonitorDisplayName() string {
	if x != nil && x.MonitorDisplayName != nil {
		return *x.MonitorDisplayName
	}
	return ""
}

var File_steammessages_client_objects_proto protoreflect.FileDescriptor

var file_steammessages_client_objects_proto_rawDesc = []byte{
	0x0a, 0x22, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd7, 0x02, 0x0a, 0x30, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x45, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x01, 0x61, 0x12, 0x4b, 0x0a, 0x01, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x01, 0x62, 0x12, 0x51, 0x0a, 0x01, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x01, 0x63, 0x12, 0x3f, 0x0a, 0x01, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x45, 0x53, 0x44, 0x43, 0x61, 0x72, 0x64, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x3a, 0x1c, 0x6b, 0x5f, 0x45, 0x53,
	0x44, 0x43, 0x61, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x01, 0x64, 0x22, 0x4a, 0x0a, 0x1b, 0x43,
	0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x50, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x86, 0x02, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x34,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x34,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6e, 0x73, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x64, 0x6e, 0x73, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x64,
	0x68, 0x63, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x69, 0x73, 0x44, 0x68, 0x63, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x2d, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22,
	0x86, 0x02, 0x0a, 0x1a, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6e,
	0x73, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6e, 0x73, 0x49,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x70,
	0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x44, 0x68, 0x63,
	0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xa6, 0x08, 0x0a, 0x16, 0x43, 0x4d, 0x73,
	0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x57, 0x69, 0x66, 0x69, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x66, 0x69,
	0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x57, 0x69, 0x66, 0x69, 0x53,
	0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xf0,
	0x06, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2d,
	0x0a, 0x03, 0x69, 0x70, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x50, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x69, 0x70, 0x34, 0x12, 0x2d, 0x0a,
	0x03, 0x69, 0x70, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50,
	0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x69, 0x70, 0x36, 0x12, 0x3a, 0x0a, 0x05,
	0x77, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x72, 0x65,
	0x64, 0x52, 0x05, 0x77, 0x69, 0x72, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x77, 0x69, 0x72, 0x65,
	0x6c, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x6c,
	0x65, 0x73, 0x73, 0x52, 0x08, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x1a, 0x7c, 0x0a,
	0x05, 0x57, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x69, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x6d, 0x62, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x4d, 0x62, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x83, 0x03, 0x0a, 0x08,
	0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x03, 0x61, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x41,
	0x50, 0x52, 0x03, 0x61, 0x70, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x65, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x1a, 0x87, 0x02, 0x0a, 0x02, 0x41, 0x50, 0x12, 0x11,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x73, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x61,
	0x77, 0x22, 0x94, 0x04, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1e,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x47,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x69, 0x70, 0x34, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x34, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x03, 0x69, 0x70, 0x34, 0x12, 0x2d, 0x0a, 0x03, 0x69, 0x70, 0x36, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x03, 0x69, 0x70, 0x36, 0x12, 0x3e, 0x0a, 0x08, 0x61, 0x70, 0x5f, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x41, 0x50, 0x48, 0x00, 0x52, 0x07, 0x61, 0x70,
	0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x70, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x50, 0x48, 0x00, 0x52, 0x08,
	0x61, 0x70, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x1a, 0x1e, 0x0a, 0x07, 0x4b, 0x6e, 0x6f, 0x77,
	0x6e, 0x41, 0x50, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x61, 0x70, 0x49, 0x64, 0x1a, 0x3c, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x41, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x45, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xab, 0x08, 0x0a, 0x16, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x69,
	0x6d, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x73, 0x54, 0x72, 0x69, 0x6d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x54,
	0x72, 0x69, 0x6d, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0xfc, 0x01, 0x0a, 0x05, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x58, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x8a, 0x04, 0x0a, 0x0b, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x08,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x07, 0x64, 0x72, 0x69, 0x76, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x6f, 0x6f,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x0f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0xec, 0x01, 0x0a, 0x1d, 0x43, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x45, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0x6b, 0x5f, 0x45, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x62, 0x0a, 0x20, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x43, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xaf, 0x05, 0x0a, 0x18, 0x43, 0x4d,
	0x73, 0x67, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x08, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42,
	0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x52, 0x08, 0x61, 0x64, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x75,
	0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x1a, 0x88,
	0x01, 0x0a, 0x07, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x92, 0x02, 0x0a, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x05, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45, 0x42, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x1d, 0x6b, 0x5f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x05,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x61, 0x69, 0x72, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x61, 0x77, 0x1a, 0x3b,
	0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f,
	0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x49, 0x0a, 0x1d, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x1e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x74,
	0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x78, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x10, 0x74, 0x78, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x74, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x12, 0x27, 0x0a, 0x10, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x78, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x22, 0xbf, 0x01, 0x0a, 0x1c, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x43, 0x22, 0xfb, 0x0e, 0x0a, 0x14,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x63, 0x70, 0x75, 0x5f, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x5f,
	0x6d, 0x68, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x70, 0x75, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x4d,
	0x68, 0x7a, 0x12, 0x3c, 0x0a, 0x1b, 0x63, 0x70, 0x75, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x68,
	0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x70, 0x75, 0x47, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x4d, 0x68, 0x7a,
	0x12, 0x2a, 0x0a, 0x11, 0x66, 0x73, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x70, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x73, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x70, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11,
	0x66, 0x73, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x70, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x73, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x70, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x42, 0x0a, 0x1e, 0x67, 0x70, 0x75, 0x5f,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x68, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1a, 0x67, 0x70, 0x75, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x4d, 0x68, 0x7a, 0x12, 0x42, 0x0a, 0x1e,
	0x67, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x68, 0x7a, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x67, 0x70, 0x75, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x4d, 0x68, 0x7a,
	0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x5f, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x70, 0x65, 0x72, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x49, 0x73, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x37, 0x0a,
	0x18, 0x69, 0x73, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x76, 0x72, 0x73, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x69, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x56, 0x72, 0x73, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x28, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x52, 0x61, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5e, 0x0a,
	0x20, 0x67, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45, 0x47, 0x50, 0x55, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x1d,
	0x67, 0x70, 0x75, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a,
	0x1d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x7a, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x7a, 0x4d, 0x69, 0x6e, 0x12,
	0x40, 0x0a, 0x1d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x7a, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x7a, 0x4d, 0x61,
	0x78, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x70, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x70,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x64, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x64, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x69,
	0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x64, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x64, 0x70, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6e, 0x69, 0x73, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x69, 0x73, 0x4e, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x70, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x69, 0x73, 0x53,
	0x68, 0x61, 0x72, 0x70, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6e,
	0x69, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x70, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x70,
	0x6e, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x51, 0x0a, 0x26, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x7a, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x7a, 0x4d, 0x69, 0x6e, 0x12, 0x51, 0x0a, 0x26, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x7a,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x7a, 0x4d, 0x61, 0x78, 0x12, 0x3b, 0x0a,
	0x1a, 0x66, 0x70, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x17, 0x66, 0x70, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73,
	0x5f, 0x74, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x54, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x56, 0x72, 0x72, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x2a, 0x69, 0x73, 0x5f, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x69, 0x73, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x55, 0x0a, 0x28, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x23, 0x69, 0x73, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x1f, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x45, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x1c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x5b, 0x0a, 0x1f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x45, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x72, 0x52, 0x1c, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x68, 0x64, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x48,
	0x64, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x20, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x7a, 0x5f, 0x6f, 0x63, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x7a, 0x4f, 0x63, 0x4d,
	0x61, 0x78, 0x12, 0x45, 0x0a, 0x1f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x0b, 0x0a, 0x1c, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x74, 0x0a, 0x1a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x21, 0x6b, 0x5f, 0x45, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x17, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x20, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x21, 0x6b, 0x5f, 0x45, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55,
	0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x1d, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x74, 0x0a, 0x1a, 0x70, 0x65, 0x72,
	0x66, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x3a, 0x21, 0x6b, 0x5f, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x6e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x17, 0x70, 0x65, 0x72, 0x66, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x6c, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x45, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x22, 0x6b, 0x5f, 0x45, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x10, 0x70, 0x65, 0x72,
	0x66, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x52, 0x0a,
	0x27, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21,
	0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x65, 0x72, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x52, 0x0a, 0x26, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x22, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x68, 0x64, 0x72,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x48, 0x64, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x71, 0x0a, 0x1b,
	0x68, 0x64, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x64, 0x72, 0x5f, 0x74, 0x6f, 0x6e, 0x65, 0x6d,
	0x61, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x45, 0x48, 0x44, 0x52, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x1d, 0x6b, 0x5f, 0x45, 0x48, 0x44, 0x52, 0x54,
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x17, 0x68, 0x64, 0x72, 0x4f, 0x6e, 0x53, 0x64, 0x72,
	0x54, 0x6f, 0x6e, 0x65, 0x6d, 0x61, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x3e, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x68, 0x64, 0x72, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
	0x68, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x48, 0x64, 0x72, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x48, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x45, 0x0a, 0x1d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x64, 0x72, 0x5f, 0x77, 0x69, 0x64,
	0x65, 0x5f, 0x67, 0x61, 0x6d, 0x6d, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x64, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x18, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x48, 0x64, 0x72, 0x57, 0x69, 0x64, 0x65, 0x47, 0x61, 0x6d, 0x6d, 0x75, 0x74,
	0x46, 0x6f, 0x72, 0x53, 0x64, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x64, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x48, 0x64, 0x72, 0x12, 0x31, 0x0a, 0x15,
	0x73, 0x64, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x64, 0x72, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x73, 0x64, 0x72,
	0x54, 0x6f, 0x48, 0x64, 0x72, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12,
	0x35, 0x0a, 0x17, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x68,
	0x64, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x64, 0x65, 0x62, 0x75, 0x67, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x48, 0x64, 0x72, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x68, 0x64, 0x72, 0x5f, 0x31, 0x30, 0x70, 0x71, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x48, 0x64, 0x72, 0x31, 0x30, 0x70, 0x71, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6f, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x63,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xe3, 0x0b, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x50, 0x65, 0x72, 0x41, 0x70, 0x70, 0x12, 0x3b, 0x0a, 0x1a, 0x67, 0x70, 0x75, 0x5f, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x5f, 0x6d, 0x68, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x67, 0x70, 0x75,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x4d, 0x68, 0x7a, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x70, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x70, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x69, 0x73, 0x5f, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x69, 0x73, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x52, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x64, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x74, 0x64, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x70, 0x75,
	0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x45, 0x43, 0x50, 0x55, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x3a, 0x16,
	0x6b, 0x5f, 0x45, 0x43, 0x50, 0x55, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x5f, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x70, 0x75, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x68, 0x7a, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x70, 0x75, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f,
	0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4d, 0x68, 0x7a, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x73, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x70, 0x6e, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x73, 0x72, 0x53, 0x68, 0x61,
	0x72, 0x70, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x66, 0x70, 0x73,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x46, 0x70, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x74, 0x64,
	0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x54, 0x64, 0x70, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x6c,
	0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69,
	0x73, 0x4c, 0x6f, 0x77, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x5f, 0x68, 0x7a, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48,
	0x7a, 0x12, 0x3e, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x66, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x65, 0x72, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x69, 0x0a, 0x15, 0x67, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x45, 0x47, 0x50, 0x55, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x1e, 0x6b, 0x5f, 0x45, 0x47, 0x50, 0x55, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x13, 0x67, 0x70, 0x75, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d,
	0x6e, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x70, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x70, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x4a, 0x0a, 0x22, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x68, 0x7a, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x7a, 0x12, 0x2c, 0x0a,
	0x12, 0x66, 0x70, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x70, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x69,
	0x73, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x54, 0x65, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f,
	0x76, 0x72, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x56, 0x72, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x3b, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x21, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1c, 0x75, 0x73, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x65,
	0x0a, 0x14, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x45,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x3a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x12, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x14, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x45, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x3a, 0x1d, 0x6b, 0x5f, 0x45, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x12, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x22, 0x87, 0x01, 0x0a,
	0x16, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x36,
	0x0a, 0x07, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x66,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x41, 0x70, 0x70, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x22, 0xd6, 0x0b, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x56, 0x31, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x14, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x74, 0x0a, 0x1a, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x3a, 0x21, 0x6b, 0x5f, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x6e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x17, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x80, 0x01, 0x0a, 0x20, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x45, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x3a, 0x21, 0x6b, 0x5f, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x1d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x74, 0x0a, 0x1a, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x21, 0x6b, 0x5f,
	0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x17, 0x70, 0x65, 0x72, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x66,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x45, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73,
	0x50, 0x65, 0x72, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x3a, 0x22, 0x6b, 0x5f, 0x45, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x50, 0x65, 0x72,
	0x66, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x48, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x52, 0x10, 0x70, 0x65, 0x72, 0x66, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x69, 0x0a, 0x15, 0x67, 0x70, 0x75, 0x5f, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x45, 0x47, 0x50, 0x55, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x1e, 0x6b, 0x5f,
	0x45, 0x47, 0x50, 0x55, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x13, 0x67, 0x70,
	0x75, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x67, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x68, 0x7a, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x67, 0x70, 0x75, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4d, 0x68, 0x7a, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x70, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x66, 0x70, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x69,
	0x73, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x44, 0x0a, 0x1f, 0x69, 0x73, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x64, 0x70, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x64, 0x70, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x70, 0x75, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x45, 0x43, 0x50, 0x55,
	0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x3a, 0x16, 0x6b, 0x5f, 0x45, 0x43, 0x50, 0x55,
	0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x0b, 0x63, 0x70, 0x75, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x12, 0x35, 0x0a,
	0x17, 0x63, 0x70, 0x75, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x5f, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x68, 0x7a, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x63, 0x70, 0x75, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x4d, 0x68, 0x7a, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x73, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x70, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x66, 0x73, 0x72, 0x53, 0x68, 0x61, 0x72, 0x70, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x66, 0x70, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x73, 0x46, 0x70, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x74, 0x64, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x69, 0x73, 0x54, 0x64, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x52, 0x0a, 0x27, 0x69, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x70, 0x65,
	0x72, 0x66, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x21, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x65, 0x72, 0x66, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x77,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x4c,
	0x6f, 0x77, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x68,
	0x7a, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x48, 0x7a, 0x12,
	0x3e, 0x0a, 0x1c, 0x69, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x65, 0x72,
	0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0xd6, 0x01, 0x0a, 0x13, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65,
	0x72, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x06,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xde, 0x01, 0x0a, 0x1c, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d,
	0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x69,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x73, 0x6b, 0x69, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a,
	0x0e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x42,
	0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xef, 0x02, 0x0a, 0x19, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x10, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x18, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x11, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x46,
	0x77, 0x57, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x54, 0x0a, 0x13, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x3d, 0x0a, 0x1c, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44,
	0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x6e, 0x6c, 0x79,
	0x22, 0xe9, 0x01, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x6d, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4d,
	0x75, 0x74, 0x65, 0x64, 0x1a, 0x76, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x08, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x3a, 0x1c, 0x6b, 0x5f,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x08, 0x65, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x1c,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x1c, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x69, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x22, 0xbe, 0x02, 0x0a, 0x1a, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x69, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x56, 0x0a, 0x0a, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x1e, 0x6b,
	0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0a, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xbe, 0x03, 0x0a, 0x1a, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x4a,
	0x0a, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x1d, 0x6b, 0x5f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x52, 0x05, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x0a, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6f, 0x72,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x22, 0x6b, 0x5f, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0a,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x22, 0xe3, 0x01, 0x0a, 0x1a, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x31, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x22, 0xf1, 0x01, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x57, 0x12, 0x37, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x4d, 0x73,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x72, 0x74, 0x69, 0x6d,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x02, 0x68, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x57, 0x52, 0x02, 0x68,
	0x77, 0x22, 0x41, 0x0a, 0x25, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x22, 0x74, 0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x68, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x48, 0x7a, 0x22, 0xb5, 0x05, 0x0a, 0x11, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6d, 0x6d, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x76, 0x72, 0x72, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x56,
	0x72, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f,
	0x76, 0x72, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x56, 0x72, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x68, 0x64, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x48, 0x64, 0x72, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x68, 0x64, 0x72, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x48, 0x64, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x05, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x61, 0x70, 0x70, 0x5f, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x68, 0x64, 0x72, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x57, 0x61, 0x6e, 0x74, 0x73, 0x48,
	0x64, 0x72, 0x22, 0x8a, 0x02, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x08, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x7a, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x3a, 0x29, 0x6b, 0x5f, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x11, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x22,
	0x59, 0x0a, 0x1f, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xed, 0x11, 0x0a, 0x19, 0x43,
	0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x22, 0x69, 0x64, 0x6c, 0x65,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x1e, 0x69, 0x64, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x44, 0x69, 0x6d, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x6d, 0x5f, 0x61, 0x63, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x69, 0x64, 0x6c,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x69, 0x6d, 0x41, 0x63, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x69, 0x64,
	0x6c, 0x65, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x64, 0x6c, 0x65, 0x5f,
	0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x69, 0x64, 0x6c, 0x65, 0x53, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x34,
	0x0a, 0x16, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x73,
	0x75, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x69, 0x64, 0x6c, 0x65, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x20, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d,
	0x69, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4d, 0x0a,
	0x23, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x42, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x64,
	0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x64,
	0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1e, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69,
	0x6e, 0x74, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x1c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f,
	0x64, 0x65, 0x54, 0x69, 0x6e, 0x74, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x38,
	0x0a, 0x18, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x68, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x16, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f,
	0x64, 0x65, 0x4d, 0x61, 0x78, 0x68, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61,
	0x78, 0x73, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x73,
	0x61, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x69,
	0x67, 0x68, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x69, 0x65, 0x78, 0x70, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x15, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x69, 0x67, 0x68,
	0x74, 0x6d, 0x6f, 0x64, 0x65, 0x55, 0x69, 0x65, 0x78, 0x70, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x62, 0x6c, 0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x65,
	0x6e, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x69,
	0x67, 0x68, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x69, 0x67, 0x68,
	0x74, 0x6d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x22, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x24, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x21, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x69,
	0x67, 0x68, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x22, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x1f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x69, 0x67,
	0x68, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x6e,
	0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6c, 0x73, 0x5f, 0x6c, 0x75, 0x78,
	0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x61, 0x6c, 0x73, 0x4c, 0x75, 0x78, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x24, 0x0a,
	0x0e, 0x61, 0x6c, 0x73, 0x5f, 0x6c, 0x75, 0x78, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x61, 0x6c, 0x73, 0x4c, 0x75, 0x78, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x61, 0x77, 0x12, 0x44, 0x0a, 0x1e, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x64,
	0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x1c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x69, 0x6e, 0x12, 0x44, 0x0a,
	0x1e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x78, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65,
	0x6d, 0x61, 0x78, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x57, 0x69, 0x66, 0x69, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x61, 0x76, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x37,
	0x0a, 0x18, 0x69, 0x73, 0x5f, 0x66, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x69, 0x73, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x60, 0x0a, 0x10, 0x66, 0x61, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x45, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x1e, 0x6b, 0x5f, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x46, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x0e, 0x66, 0x61, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x69, 0x73, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1c, 0x69, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x4f, 0x0a, 0x24, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21,
	0x69, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x67, 0x61, 0x6d, 0x75, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x67, 0x61, 0x6d, 0x75, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x73, 0x5f, 0x6c, 0x75, 0x78, 0x5f, 0x61, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x61, 0x6c, 0x73,
	0x4c, 0x75, 0x78, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x1e,
	0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x74, 0x65, 0x6d, 0x70, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x74, 0x65, 0x6d, 0x70, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x23, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x3a,
	0x0a, 0x19, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x74,
	0x65, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x17, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x74,
	0x65, 0x6d, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x74, 0x65, 0x6d, 0x70, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x74, 0x65, 0x6d, 0x70, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x72, 0x0a, 0x1b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x67, 0x61, 0x6d, 0x75, 0x74, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x65, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x45, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x47, 0x61, 0x6d, 0x75, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65,
	0x74, 0x3a, 0x1c, 0x6b, 0x5f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x47, 0x61, 0x6d, 0x75, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x5f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x19, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x67, 0x61, 0x6d,
	0x75, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x65, 0x74, 0x22, 0x78, 0x0a, 0x18, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x53, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x45, 0x4f, 0x53, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x3a, 0x13, 0x6b, 0x5f, 0x45, 0x4f, 0x53, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x22, 0xa9, 0x01, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x18, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xf5, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d,
	0x2e, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x16, 0x6b,
	0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x32, 0x52,
	0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x0c, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74,
	0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x45,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x1b, 0x43, 0x4d, 0x73, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x16, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x32, 0x52, 0x07, 0x65, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3d, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3d,
	0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0xdd, 0x02,
	0x0a, 0x15, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x17, 0x6b, 0x5f, 0x45, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a,
	0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4e, 0x0a,
	0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6f, 0x73, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x4f, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x2d, 0x0a,
	0x15, 0x43, 0x4d, 0x73, 0x67, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x22, 0x74, 0x0a, 0x0c,
	0x43, 0x4d, 0x73, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x4d,
	0x73, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x1a, 0x3a, 0x0a, 0x04, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xe1, 0x04, 0x0a, 0x10, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x63, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x78, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c,
	0x61, 0x74, 0x70, 0x61, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x6c, 0x61, 0x74, 0x70, 0x61, 0x6b, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x76, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x76, 0x72, 0x12, 0x30, 0x0a,
	0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x76, 0x65,
	0x72, 0x6c, 0x61, 0x79, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x72, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x6b, 0x69, 0x74,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x44, 0x65, 0x76, 0x6b, 0x69, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x6b, 0x69, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x6b, 0x69, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x12, 0x43, 0x4d, 0x73, 0x67, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x41, 0x70, 0x70, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x73, 0x22, 0xf0, 0x01, 0x0a, 0x0f, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x43, 0x4d, 0x73, 0x67, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x6f, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x16, 0x43, 0x4d, 0x73, 0x67, 0x57, 0x65, 0x62,
	0x55, 0x49, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x81,
	0x01, 0x0a, 0x1d, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61,
	0x64, 0x65, 0x72, 0x48, 0x69, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x53, 0x68, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x64,
	0x65, 0x53, 0x68, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x22, 0x54, 0x0a, 0x18, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x48, 0x69, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x38,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x43, 0x4d, 0x73, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x64,
	0x65, 0x72, 0x48, 0x69, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2a, 0x96, 0x02, 0x0a, 0x1c, 0x45, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x35, 0x0a, 0x31, 0x6b, 0x5f,
	0x45, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10,
	0x04, 0x2a, 0xca, 0x0c, 0x0a, 0x18, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b,
	0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x25,
	0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65,
	0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x51, 0x57, 0x45,
	0x52, 0x54, 0x59, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61,
	0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x5f, 0x42, 0x75, 0x6c, 0x67, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x10, 0x01, 0x12,
	0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b,
	0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x43, 0x68,
	0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x32, 0x0a, 0x2e, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x5f, 0x43, 0x7a, 0x65, 0x63, 0x68, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x44, 0x61, 0x6e, 0x69, 0x73,
	0x68, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44,
	0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x5f, 0x46, 0x69, 0x6e, 0x6e, 0x69, 0x73, 0x68, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x46, 0x72, 0x65, 0x6e, 0x63, 0x68,
	0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x47, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x47, 0x72, 0x65, 0x65, 0x6b, 0x10, 0x09, 0x12,
	0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b,
	0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x48, 0x75,
	0x6e, 0x67, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x10, 0x0a, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x61, 0x6e, 0x10,
	0x0b, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63,
	0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x4a, 0x61, 0x70, 0x61, 0x6e, 0x65, 0x73, 0x65, 0x10, 0x0c, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f,
	0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x4b, 0x6f, 0x72, 0x65, 0x61, 0x6e, 0x10,
	0x0d, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63,
	0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x4e, 0x6f, 0x72, 0x77, 0x65, 0x67, 0x69, 0x61, 0x6e, 0x10, 0x0e, 0x12, 0x25, 0x0a, 0x21, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x73, 0x68,
	0x10, 0x0f, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x50, 0x6f, 0x72, 0x74, 0x75, 0x67, 0x75, 0x65, 0x73, 0x65, 0x10, 0x10, 0x12, 0x27, 0x0a,
	0x23, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x52, 0x6f, 0x6d, 0x61,
	0x6e, 0x69, 0x61, 0x6e, 0x10, 0x11, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x5f, 0x52, 0x75, 0x73, 0x73, 0x69, 0x61, 0x6e, 0x10, 0x12, 0x12, 0x26,
	0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65,
	0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x53, 0x70, 0x61,
	0x6e, 0x69, 0x73, 0x68, 0x10, 0x13, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65,
	0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x5f, 0x53, 0x77, 0x65, 0x64, 0x69, 0x73, 0x68, 0x10, 0x14, 0x12, 0x23,
	0x0a, 0x1f, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65,
	0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x54, 0x68, 0x61,
	0x69, 0x10, 0x15, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44,
	0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x5f, 0x54, 0x75, 0x72, 0x6b, 0x69, 0x73, 0x68, 0x5f, 0x46, 0x10, 0x16, 0x12, 0x28, 0x0a,
	0x24, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x54, 0x75, 0x72, 0x6b,
	0x69, 0x73, 0x68, 0x5f, 0x51, 0x10, 0x17, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45, 0x53, 0x74,
	0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x55, 0x6b, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x61, 0x6e, 0x10,
	0x18, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63,
	0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x56, 0x69, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x10, 0x19, 0x12, 0x33, 0x0a, 0x2f,
	0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x51, 0x57, 0x45, 0x52, 0x54,
	0x59, 0x5f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10,
	0x1a, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63,
	0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x44, 0x76, 0x6f, 0x72, 0x61, 0x6b, 0x10, 0x1b, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x53,
	0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x43, 0x6f, 0x6c, 0x65, 0x6d, 0x61, 0x6b, 0x10, 0x1c,
	0x12, 0x3d, 0x0a, 0x39, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b,
	0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x42,
	0x75, 0x6c, 0x67, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x5f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69,
	0x63, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x1d, 0x12,
	0x31, 0x0a, 0x2d, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b,
	0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x42, 0x75,
	0x6c, 0x67, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x5f, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x74, 0x69, 0x63,
	0x10, 0x1e, 0x12, 0x3b, 0x0a, 0x37, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x5f, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x42, 0x6f, 0x70, 0x6f, 0x6d, 0x6f, 0x66, 0x6f, 0x10, 0x1f, 0x12,
	0x3a, 0x0a, 0x36, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b,
	0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x43, 0x68,
	0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x43, 0x61, 0x6e, 0x67, 0x6a, 0x69, 0x65, 0x10, 0x20, 0x12, 0x2c, 0x0a, 0x28, 0x6b,
	0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x4a, 0x61, 0x70, 0x61, 0x6e, 0x65,
	0x73, 0x65, 0x5f, 0x4b, 0x61, 0x6e, 0x61, 0x10, 0x21, 0x12, 0x38, 0x0a, 0x34, 0x6b, 0x5f, 0x45,
	0x53, 0x74, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x51, 0x75, 0x69, 0x63,
	0x6b, 0x10, 0x22, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x44,
	0x65, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x5f, 0x49, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x10, 0x23, 0x42, 0x3d,
	0x42, 0x1f, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x01, 0x50, 0x01, 0x5a, 0x13, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x80, 0x01, 0x00,
}

var (
	file_steammessages_client_objects_proto_rawDescOnce sync.Once
	file_steammessages_client_objects_proto_rawDescData = file_steammessages_client_objects_proto_rawDesc
)

func file_steammessages_client_objects_proto_rawDescGZIP() []byte {
	file_steammessages_client_objects_proto_rawDescOnce.Do(func() {
		file_steammessages_client_objects_proto_rawDescData = protoimpl.X.CompressGZIP(file_steammessages_client_objects_proto_rawDescData)
	})
	return file_steammessages_client_objects_proto_rawDescData
}

var file_steammessages_client_objects_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_steammessages_client_objects_proto_msgTypes = make([]protoimpl.MessageInfo, 68)
var file_steammessages_client_objects_proto_goTypes = []interface{}{
	(ECloudPendingRemoteOperation)(0),                        // 0: ECloudPendingRemoteOperation
	(ESteamDeckKeyboardLayout)(0),                            // 1: ESteamDeckKeyboardLayout
	(*SteamMessagesClientIClientForcedEnumDependencies)(nil), // 2: SteamMessagesClientIClientForcedEnumDependencies
	(*CMsgNetworkDeviceIP4Address)(nil),                      // 3: CMsgNetworkDeviceIP4Address
	(*CMsgNetworkDeviceIP4Config)(nil),                       // 4: CMsgNetworkDeviceIP4Config
	(*CMsgNetworkDeviceIP6Address)(nil),                      // 5: CMsgNetworkDeviceIP6Address
	(*CMsgNetworkDeviceIP6Config)(nil),                       // 6: CMsgNetworkDeviceIP6Config
	(*CMsgNetworkDevicesData)(nil),                           // 7: CMsgNetworkDevicesData
	(*CMsgNetworkDeviceConnect)(nil),                         // 8: CMsgNetworkDeviceConnect
	(*CMsgStorageDevicesData)(nil),                           // 9: CMsgStorageDevicesData
	(*CCloud_PendingRemoteOperation)(nil),                    // 10: CCloud_PendingRemoteOperation
	(*CMsgCloudPendingRemoteOperations)(nil),                 // 11: CMsgCloudPendingRemoteOperations
	(*CMsgBluetoothDevicesData)(nil),                         // 12: CMsgBluetoothDevicesData
	(*CMsgSystemPerfDiagnosticEntry)(nil),                    // 13: CMsgSystemPerfDiagnosticEntry
	(*CMsgSystemPerfNetworkInterface)(nil),                   // 14: CMsgSystemPerfNetworkInterface
	(*CMsgSystemPerfDiagnosticInfo)(nil),                     // 15: CMsgSystemPerfDiagnosticInfo
	(*CMsgSystemPerfLimits)(nil),                             // 16: CMsgSystemPerfLimits
	(*CMsgSystemPerfSettingsGlobal)(nil),                     // 17: CMsgSystemPerfSettingsGlobal
	(*CMsgSystemPerfSettingsPerApp)(nil),                     // 18: CMsgSystemPerfSettingsPerApp
	(*CMsgSystemPerfSettings)(nil),                           // 19: CMsgSystemPerfSettings
	(*CMsgSystemPerfSettingsV1)(nil),                         // 20: CMsgSystemPerfSettingsV1
	(*CMsgSystemPerfState)(nil),                              // 21: CMsgSystemPerfState
	(*CMsgSystemPerfUpdateSettings)(nil),                     // 22: CMsgSystemPerfUpdateSettings
	(*CMsgSystemDockUpdateState)(nil),                        // 23: CMsgSystemDockUpdateState
	(*CMsgSystemDockState)(nil),                              // 24: CMsgSystemDockState
	(*CMsgSystemDockUpdateFirmware)(nil),                     // 25: CMsgSystemDockUpdateFirmware
	(*CMsgSystemAudioVolume)(nil),                            // 26: CMsgSystemAudioVolume
	(*CMsgSystemAudioManagerObject)(nil),                     // 27: CMsgSystemAudioManagerObject
	(*CMsgSystemAudioManagerDevice)(nil),                     // 28: CMsgSystemAudioManagerDevice
	(*CMsgSystemAudioManagerNode)(nil),                       // 29: CMsgSystemAudioManagerNode
	(*CMsgSystemAudioManagerPort)(nil),                       // 30: CMsgSystemAudioManagerPort
	(*CMsgSystemAudioManagerLink)(nil),                       // 31: CMsgSystemAudioManagerLink
	(*CMsgSystemAudioManagerStateHW)(nil),                    // 32: CMsgSystemAudioManagerStateHW
	(*CMsgSystemAudioManagerState)(nil),                      // 33: CMsgSystemAudioManagerState
	(*CMsgSystemAudioManagerUpdateSomething)(nil),            // 34: CMsgSystemAudioManagerUpdateSomething
	(*CMsgSystemDisplayMode)(nil),                            // 35: CMsgSystemDisplayMode
	(*CMsgSystemDisplay)(nil),                                // 36: CMsgSystemDisplay
	(*CMsgSystemDisplayManagerState)(nil),                    // 37: CMsgSystemDisplayManagerState
	(*CMsgSystemDisplayManagerSetMode)(nil),                  // 38: CMsgSystemDisplayManagerSetMode
	(*CMsgSystemManagerSettings)(nil),                        // 39: CMsgSystemManagerSettings
	(*CMsgSelectOSBranchParams)(nil),                         // 40: CMsgSelectOSBranchParams
	(*CMsgSystemUpdateProgress)(nil),                         // 41: CMsgSystemUpdateProgress
	(*CMsgSystemUpdateCheckResult)(nil),                      // 42: CMsgSystemUpdateCheckResult
	(*CMsgSystemUpdateApplyParams)(nil),                      // 43: CMsgSystemUpdateApplyParams
	(*CMsgSystemUpdateApplyResult)(nil),                      // 44: CMsgSystemUpdateApplyResult
	(*CMsgSystemUpdateState)(nil),                            // 45: CMsgSystemUpdateState
	(*CMsgAchievementChange)(nil),                            // 46: CMsgAchievementChange
	(*CMsgCellList)(nil),                                     // 47: CMsgCellList
	(*CMsgShortcutInfo)(nil),                                 // 48: CMsgShortcutInfo
	(*CMsgShortcutAppIds)(nil),                               // 49: CMsgShortcutAppIds
	(*CMsgMonitorInfo)(nil),                                  // 50: CMsgMonitorInfo
	(*CMsgGenerateSystemReportReply)(nil),                    // 51: CMsgGenerateSystemReportReply
	(*CMsgWebUITransportInfo)(nil),                           // 52: CMsgWebUITransportInfo
	(*CMsgClientShaderHitCacheEntry)(nil),                    // 53: CMsgClientShaderHitCacheEntry
	(*CMsgClientShaderHitCache)(nil),                         // 54: CMsgClientShaderHitCache
	(*CMsgNetworkDevicesData_Device)(nil),                    // 55: CMsgNetworkDevicesData.Device
	(*CMsgNetworkDevicesData_Device_Wired)(nil),              // 56: CMsgNetworkDevicesData.Device.Wired
	(*CMsgNetworkDevicesData_Device_Wireless)(nil),           // 57: CMsgNetworkDevicesData.Device.Wireless
	(*CMsgNetworkDevicesData_Device_Wireless_AP)(nil),        // 58: CMsgNetworkDevicesData.Device.Wireless.AP
	(*CMsgNetworkDeviceConnect_KnownAP)(nil),                 // 59: CMsgNetworkDeviceConnect.KnownAP
	(*CMsgNetworkDeviceConnect_CustomAP)(nil),                // 60: CMsgNetworkDeviceConnect.CustomAP
	(*CMsgNetworkDeviceConnect_Credentials)(nil),             // 61: CMsgNetworkDeviceConnect.Credentials
	(*CMsgStorageDevicesData_Drive)(nil),                     // 62: CMsgStorageDevicesData.Drive
	(*CMsgStorageDevicesData_BlockDevice)(nil),               // 63: CMsgStorageDevicesData.BlockDevice
	(*CMsgBluetoothDevicesData_Adapter)(nil),                 // 64: CMsgBluetoothDevicesData.Adapter
	(*CMsgBluetoothDevicesData_Device)(nil),                  // 65: CMsgBluetoothDevicesData.Device
	(*CMsgBluetoothDevicesData_Manager)(nil),                 // 66: CMsgBluetoothDevicesData.Manager
	(*CMsgSystemAudioVolume_ChannelEntry)(nil),               // 67: CMsgSystemAudioVolume.ChannelEntry
	(*CMsgCellList_Cell)(nil),                                // 68: CMsgCellList.Cell
	(*CMsgMonitorInfo_MonitorInfo)(nil),                      // 69: CMsgMonitorInfo.MonitorInfo
	(EBluetoothDeviceType)(0),                                // 70: EBluetoothDeviceType
	(EStorageBlockContentType)(0),                            // 71: EStorageBlockContentType
	(EStorageBlockFileSystemType)(0),                         // 72: EStorageBlockFileSystemType
	(ESDCardFormatStage)(0),                                  // 73: ESDCardFormatStage
	(EGPUPerformanceLevel)(0),                                // 74: EGPUPerformanceLevel
	(ESplitScalingFilter)(0),                                 // 75: ESplitScalingFilter
	(ESplitScalingScaler)(0),                                 // 76: ESplitScalingScaler
	(ESystemServiceState)(0),                                 // 77: ESystemServiceState
	(EGraphicsPerfOverlayLevel)(0),                           // 78: EGraphicsPerfOverlayLevel
	(EHDRToneMapOperator)(0),                                 // 79: EHDRToneMapOperator
	(ECPUGovernor)(0),                                        // 80: ECPUGovernor
	(EUpdaterState)(0),                                       // 81: EUpdaterState
	(ESystemAudioDirection)(0),                               // 82: ESystemAudioDirection
	(ESystemAudioPortType)(0),                                // 83: ESystemAudioPortType
	(ESystemAudioPortDirection)(0),                           // 84: ESystemAudioPortDirection
	(ESystemDisplayCompatibilityMode)(0),                     // 85: ESystemDisplayCompatibilityMode
	(ESystemFanControlMode)(0),                               // 86: ESystemFanControlMode
	(EColorGamutLabelSet)(0),                                 // 87: EColorGamutLabelSet
	(EOSBranch)(0),                                           // 88: EOSBranch
	(EUpdaterType)(0),                                        // 89: EUpdaterType
	(EStorageDriveMediaType)(0),                              // 90: EStorageDriveMediaType
	(ESystemAudioChannel)(0),                                 // 91: ESystemAudioChannel
}
var file_steammessages_client_objects_proto_depIdxs = []int32{
	70, // 0: SteamMessagesClientIClientForcedEnumDependencies.a:type_name -> EBluetoothDeviceType
	71, // 1: SteamMessagesClientIClientForcedEnumDependencies.b:type_name -> EStorageBlockContentType
	72, // 2: SteamMessagesClientIClientForcedEnumDependencies.c:type_name -> EStorageBlockFileSystemType
	73, // 3: SteamMessagesClientIClientForcedEnumDependencies.d:type_name -> ESDCardFormatStage
	3,  // 4: CMsgNetworkDeviceIP4Config.addresses:type_name -> CMsgNetworkDeviceIP4Address
	5,  // 5: CMsgNetworkDeviceIP6Config.addresses:type_name -> CMsgNetworkDeviceIP6Address
	55, // 6: CMsgNetworkDevicesData.devices:type_name -> CMsgNetworkDevicesData.Device
	61, // 7: CMsgNetworkDeviceConnect.credentials:type_name -> CMsgNetworkDeviceConnect.Credentials
	4,  // 8: CMsgNetworkDeviceConnect.ip4:type_name -> CMsgNetworkDeviceIP4Config
	6,  // 9: CMsgNetworkDeviceConnect.ip6:type_name -> CMsgNetworkDeviceIP6Config
	59, // 10: CMsgNetworkDeviceConnect.ap_known:type_name -> CMsgNetworkDeviceConnect.KnownAP
	60, // 11: CMsgNetworkDeviceConnect.ap_custom:type_name -> CMsgNetworkDeviceConnect.CustomAP
	62, // 12: CMsgStorageDevicesData.drives:type_name -> CMsgStorageDevicesData.Drive
	63, // 13: CMsgStorageDevicesData.block_devices:type_name -> CMsgStorageDevicesData.BlockDevice
	0,  // 14: CCloud_PendingRemoteOperation.operation:type_name -> ECloudPendingRemoteOperation
	10, // 15: CMsgCloudPendingRemoteOperations.operations:type_name -> CCloud_PendingRemoteOperation
	64, // 16: CMsgBluetoothDevicesData.adapters:type_name -> CMsgBluetoothDevicesData.Adapter
	65, // 17: CMsgBluetoothDevicesData.devices:type_name -> CMsgBluetoothDevicesData.Device
	66, // 18: CMsgBluetoothDevicesData.manager:type_name -> CMsgBluetoothDevicesData.Manager
	13, // 19: CMsgSystemPerfDiagnosticInfo.entries:type_name -> CMsgSystemPerfDiagnosticEntry
	14, // 20: CMsgSystemPerfDiagnosticInfo.interfaces:type_name -> CMsgSystemPerfNetworkInterface
	74, // 21: CMsgSystemPerfLimits.gpu_performance_levels_available:type_name -> EGPUPerformanceLevel
	75, // 22: CMsgSystemPerfLimits.split_scaling_filters_available:type_name -> ESplitScalingFilter
	76, // 23: CMsgSystemPerfLimits.split_scaling_scalers_available:type_name -> ESplitScalingScaler
	77, // 24: CMsgSystemPerfSettingsGlobal.system_trace_service_state:type_name -> ESystemServiceState
	77, // 25: CMsgSystemPerfSettingsGlobal.graphics_profiling_service_state:type_name -> ESystemServiceState
	77, // 26: CMsgSystemPerfSettingsGlobal.perf_overlay_service_state:type_name -> ESystemServiceState
	78, // 27: CMsgSystemPerfSettingsGlobal.perf_overlay_level:type_name -> EGraphicsPerfOverlayLevel
	79, // 28: CMsgSystemPerfSettingsGlobal.hdr_on_sdr_tonemap_operator:type_name -> EHDRToneMapOperator
	80, // 29: CMsgSystemPerfSettingsPerApp.cpu_governor:type_name -> ECPUGovernor
	74, // 30: CMsgSystemPerfSettingsPerApp.gpu_performance_level:type_name -> EGPUPerformanceLevel
	75, // 31: CMsgSystemPerfSettingsPerApp.split_scaling_filter:type_name -> ESplitScalingFilter
	76, // 32: CMsgSystemPerfSettingsPerApp.split_scaling_scaler:type_name -> ESplitScalingScaler
	17, // 33: CMsgSystemPerfSettings.global:type_name -> CMsgSystemPerfSettingsGlobal
	18, // 34: CMsgSystemPerfSettings.per_app:type_name -> CMsgSystemPerfSettingsPerApp
	77, // 35: CMsgSystemPerfSettingsV1.system_trace_service_state:type_name -> ESystemServiceState
	77, // 36: CMsgSystemPerfSettingsV1.graphics_profiling_service_state:type_name -> ESystemServiceState
	77, // 37: CMsgSystemPerfSettingsV1.perf_overlay_service_state:type_name -> ESystemServiceState
	78, // 38: CMsgSystemPerfSettingsV1.perf_overlay_level:type_name -> EGraphicsPerfOverlayLevel
	74, // 39: CMsgSystemPerfSettingsV1.gpu_performance_level:type_name -> EGPUPerformanceLevel
	80, // 40: CMsgSystemPerfSettingsV1.cpu_governor:type_name -> ECPUGovernor
	16, // 41: CMsgSystemPerfState.limits:type_name -> CMsgSystemPerfLimits
	19, // 42: CMsgSystemPerfState.settings:type_name -> CMsgSystemPerfSettings
	19, // 43: CMsgSystemPerfUpdateSettings.settings_delta:type_name -> CMsgSystemPerfSettings
	81, // 44: CMsgSystemDockUpdateState.state:type_name -> EUpdaterState
	23, // 45: CMsgSystemDockState.update_state:type_name -> CMsgSystemDockUpdateState
	67, // 46: CMsgSystemAudioVolume.entries:type_name -> CMsgSystemAudioVolume.ChannelEntry
	27, // 47: CMsgSystemAudioManagerDevice.base:type_name -> CMsgSystemAudioManagerObject
	27, // 48: CMsgSystemAudioManagerNode.base:type_name -> CMsgSystemAudioManagerObject
	82, // 49: CMsgSystemAudioManagerNode.edirection:type_name -> ESystemAudioDirection
	26, // 50: CMsgSystemAudioManagerNode.volume:type_name -> CMsgSystemAudioVolume
	27, // 51: CMsgSystemAudioManagerPort.base:type_name -> CMsgSystemAudioManagerObject
	83, // 52: CMsgSystemAudioManagerPort.etype:type_name -> ESystemAudioPortType
	84, // 53: CMsgSystemAudioManagerPort.edirection:type_name -> ESystemAudioPortDirection
	27, // 54: CMsgSystemAudioManagerLink.base:type_name -> CMsgSystemAudioManagerObject
	28, // 55: CMsgSystemAudioManagerStateHW.devices:type_name -> CMsgSystemAudioManagerDevice
	29, // 56: CMsgSystemAudioManagerStateHW.nodes:type_name -> CMsgSystemAudioManagerNode
	30, // 57: CMsgSystemAudioManagerStateHW.ports:type_name -> CMsgSystemAudioManagerPort
	31, // 58: CMsgSystemAudioManagerStateHW.links:type_name -> CMsgSystemAudioManagerLink
	32, // 59: CMsgSystemAudioManagerState.hw:type_name -> CMsgSystemAudioManagerStateHW
	35, // 60: CMsgSystemDisplay.modes:type_name -> CMsgSystemDisplayMode
	36, // 61: CMsgSystemDisplayManagerState.displays:type_name -> CMsgSystemDisplay
	85, // 62: CMsgSystemDisplayManagerState.compatibility_mode:type_name -> ESystemDisplayCompatibilityMode
	86, // 63: CMsgSystemManagerSettings.fan_control_mode:type_name -> ESystemFanControlMode
	87, // 64: CMsgSystemManagerSettings.display_colorgamut_labelset:type_name -> EColorGamutLabelSet
	88, // 65: CMsgSelectOSBranchParams.branch:type_name -> EOSBranch
	89, // 66: CMsgSystemUpdateCheckResult.type:type_name -> EUpdaterType
	89, // 67: CMsgSystemUpdateApplyParams.apply_types:type_name -> EUpdaterType
	89, // 68: CMsgSystemUpdateApplyResult.type:type_name -> EUpdaterType
	81, // 69: CMsgSystemUpdateState.state:type_name -> EUpdaterState
	41, // 70: CMsgSystemUpdateState.progress:type_name -> CMsgSystemUpdateProgress
	42, // 71: CMsgSystemUpdateState.update_check_results:type_name -> CMsgSystemUpdateCheckResult
	44, // 72: CMsgSystemUpdateState.update_apply_results:type_name -> CMsgSystemUpdateApplyResult
	68, // 73: CMsgCellList.cells:type_name -> CMsgCellList.Cell
	69, // 74: CMsgMonitorInfo.monitors:type_name -> CMsgMonitorInfo.MonitorInfo
	53, // 75: CMsgClientShaderHitCache.entries:type_name -> CMsgClientShaderHitCacheEntry
	4,  // 76: CMsgNetworkDevicesData.Device.ip4:type_name -> CMsgNetworkDeviceIP4Config
	6,  // 77: CMsgNetworkDevicesData.Device.ip6:type_name -> CMsgNetworkDeviceIP6Config
	56, // 78: CMsgNetworkDevicesData.Device.wired:type_name -> CMsgNetworkDevicesData.Device.Wired
	57, // 79: CMsgNetworkDevicesData.Device.wireless:type_name -> CMsgNetworkDevicesData.Device.Wireless
	58, // 80: CMsgNetworkDevicesData.Device.Wireless.aps:type_name -> CMsgNetworkDevicesData.Device.Wireless.AP
	90, // 81: CMsgStorageDevicesData.Drive.media_type:type_name -> EStorageDriveMediaType
	71, // 82: CMsgStorageDevicesData.BlockDevice.content_type:type_name -> EStorageBlockContentType
	72, // 83: CMsgStorageDevicesData.BlockDevice.filesystem_type:type_name -> EStorageBlockFileSystemType
	70, // 84: CMsgBluetoothDevicesData.Device.etype:type_name -> EBluetoothDeviceType
	91, // 85: CMsgSystemAudioVolume.ChannelEntry.echannel:type_name -> ESystemAudioChannel
	86, // [86:86] is the sub-list for method output_type
	86, // [86:86] is the sub-list for method input_type
	86, // [86:86] is the sub-list for extension type_name
	86, // [86:86] is the sub-list for extension extendee
	0,  // [0:86] is the sub-list for field type_name
}

func init() { file_steammessages_client_objects_proto_init() }
func file_steammessages_client_objects_proto_init() {
	if File_steammessages_client_objects_proto != nil {
		return
	}
	file_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_steammessages_client_objects_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteamMessagesClientIClientForcedEnumDependencies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDeviceIP4Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDeviceIP4Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDeviceIP6Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDeviceIP6Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDevicesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDeviceConnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgStorageDevicesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCloud_PendingRemoteOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCloudPendingRemoteOperations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBluetoothDevicesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemPerfDiagnosticEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemPerfNetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemPerfDiagnosticInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemPerfLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemPerfSettingsGlobal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemPerfSettingsPerApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemPerfSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemPerfSettingsV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemPerfState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemPerfUpdateSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemDockUpdateState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemDockState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemDockUpdateFirmware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemAudioVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemAudioManagerObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemAudioManagerDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemAudioManagerNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemAudioManagerPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemAudioManagerLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemAudioManagerStateHW); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemAudioManagerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemAudioManagerUpdateSomething); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemDisplayMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemDisplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemDisplayManagerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemDisplayManagerSetMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemManagerSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSelectOSBranchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemUpdateProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemUpdateCheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemUpdateApplyParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemUpdateApplyResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemUpdateState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgAchievementChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCellList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgShortcutInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgShortcutAppIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMonitorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgGenerateSystemReportReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgWebUITransportInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientShaderHitCacheEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgClientShaderHitCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDevicesData_Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDevicesData_Device_Wired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDevicesData_Device_Wireless); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDevicesData_Device_Wireless_AP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDeviceConnect_KnownAP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDeviceConnect_CustomAP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgNetworkDeviceConnect_Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgStorageDevicesData_Drive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgStorageDevicesData_BlockDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBluetoothDevicesData_Adapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBluetoothDevicesData_Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgBluetoothDevicesData_Manager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgSystemAudioVolume_ChannelEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgCellList_Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steammessages_client_objects_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CMsgMonitorInfo_MonitorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_steammessages_client_objects_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*CMsgNetworkDeviceConnect_ApKnown)(nil),
		(*CMsgNetworkDeviceConnect_ApCustom)(nil),
	}
	file_steammessages_client_objects_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*CMsgSystemPerfUpdateSettings_ResetToDefault)(nil),
		(*CMsgSystemPerfUpdateSettings_SettingsDelta)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steammessages_client_objects_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   68,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steammessages_client_objects_proto_goTypes,
		DependencyIndexes: file_steammessages_client_objects_proto_depIdxs,
		EnumInfos:         file_steammessages_client_objects_proto_enumTypes,
		MessageInfos:      file_steammessages_client_objects_proto_msgTypes,
	}.Build()
	File_steammessages_client_objects_proto = out.File
	file_steammessages_client_objects_proto_rawDesc = nil
	file_steammessages_client_objects_proto_goTypes = nil
	file_steammessages_client_objects_proto_depIdxs = nil
}
